/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	document.addEventListener("DOMContentLoaded", function (event) {
	  var playButton = document.querySelector('#play');

	  playButton.addEventListener('click', function () {
	    var THREE = __webpack_require__(2)(['OBJLoader']);
	    var p5 = __webpack_require__(67);
	    var sound = __webpack_require__(68);
	    var dom = __webpack_require__(69);
	    var NOC = __webpack_require__(70);

	    var Fade = __webpack_require__(71);

	    Fade.out(playButton);
	    var loader = document.querySelector('#loadingText');

	    Fade.in(loader);
	    new p5(function (p) {
	      var input = void 0,
	          drumFFT = void 0,
	          drum = void 0,
	          lp = void 0,
	          playback = void 0,
	          mute = void 0;

	      p.preload = function () {
	        // playback = p.loadSound('data/mike-gao.mp3');
	        // drum = p.loadSound('data/mike-gao.mp3');

	        var audioPath = 'humbled.mp3';
	        drum = p.loadSound('data/mike-gao-drum.mp3');
	        playback = p.loadSound('data/mike-gao.mp3');
	      };

	      p.setup = function () {
	        // move default canvas out of the way
	        var c = p.createCanvas(0, 0);
	        Fade.out(loader);
	        c.position(-9999, -9999);
	        setupAudio();
	        init();
	        animate();

	        playback.onended(function () {
	          ended = true;
	        });
	      };

	      p.draw = function () {
	        drumFFT.analyze();
	        var en = drumFFT.getEnergy(440);
	        audioTrigger = en;
	      };

	      function setupAudio() {
	        drumFFT = new p5.FFT();
	        drum.disconnect();
	        lp = new p5.LowPass();
	        //440
	        lp.freq(440);
	        lp.disconnect();
	        drum.connect(lp);
	        drumFFT.setInput(lp);
	        playback.play();
	        drum.play();
	        mute = new p5.Gain();
	        drum.connect(mute);
	        mute.amp(0);
	      }
	    });

	    var container = void 0,
	        clock = new THREE.Clock(true),
	        clockBig = new THREE.Clock(true);
	    var camera = void 0,
	        scene = void 0,
	        renderer = void 0,
	        particles = void 0,
	        geometry = void 0,
	        material = void 0,
	        parameters = void 0,
	        i = void 0,
	        h = void 0,
	        color = void 0,
	        size = void 0;
	    var dests = void 0,
	        sphere = void 0,
	        testers = [],
	        speed = 0,
	        num_points = Math.round(Math.random() * 10);
	    var movers = void 0;
	    var mouseX = 0,
	        mouseY = 0;
	    var audioTrigger = 0;
	    var composer = void 0;
	    var timeSinceLastTrigger = 0;
	    var windowHalfX = window.innerWidth / 2;
	    var windowHalfY = window.innerHeight / 2;

	    var text = null;
	    var loaded = false;

	    var exploded = false;
	    var trigger = false;
	    var triggerBig = false;

	    var ended = false;

	    function init() {
	      container = document.createElement('div');
	      container.style.position = 'absolute';
	      container.style.top = '0';
	      container.style.left = '0';
	      container.style.zIndex = '-1';
	      document.body.appendChild(container);

	      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 3000);
	      camera.position.z = 1000;
	      scene = new THREE.Scene();
	      geometry = new THREE.Geometry();
	      movers = [];

	      for (i = 0; i < 60000; i++) {
	        var vertex = new THREE.Vector3(_random(window.innerWidth), _random(window.innerHeight), _random(1000));
	        geometry.vertices.push(vertex);
	        movers.push(new NOC.Particle(vertex, i % num_points));
	      }

	      material = new THREE.PointsMaterial({ size: 2, color: 0xffffff });
	      particles = new THREE.Points(geometry, material);

	      scene.add(particles);

	      renderer = new THREE.WebGLRenderer();
	      renderer.setPixelRatio(window.devicePixelRatio);
	      renderer.setSize(window.innerWidth, window.innerHeight);

	      container.appendChild(renderer.domElement);
	      document.addEventListener('mousemove', onDocumentMouseMove, false);
	      document.addEventListener('touchstart', onDocumentTouchStart, false);
	      document.addEventListener('touchmove', onDocumentTouchMove, false);
	      window.addEventListener('resize', onWindowResize, false);

	      var hero = document.querySelector('#hero');
	      Fade.in(hero, 10000);

	      setTimeout(function () {
	        Fade.out(hero, 10000);
	      }, 5000);
	    }

	    function restart() {
	      location.reload();
	    }

	    function animate() {
	      if (ended) {
	        return;
	      }

	      speed += mapRange(audioTrigger, 0, 255, 0.001, 0.020);

	      trigger = audioTrigger > 200 && clock.getDelta() > 0.05;
	      triggerBig = audioTrigger > 210 && clockBig.getDelta() > 0.05;

	      particles.geometry.vertices.forEach(function (v, index) {

	        if (exploded) {
	          movers[index].scaler = 0.01;
	          movers[index].vel.copy(new THREE.Vector3(0, 0, 0));
	          exploded = false;
	        }

	        if (trigger) {
	          movers[index].vel.copy(new THREE.Vector3(_random(10), _random(10), _random(10)));
	          num_points = Math.floor(Math.random() * 20) + 1;
	          movers[index].scaler = 1 - movers[index].scaler;
	          if (triggerBig) {
	            movers[index].scaler = Math.random() * 3;
	            exploded = true;
	          }
	        }
	        v.copy(movers[index].update(v, num_points, speed));
	      });

	      particles.rotation.z = speed * 0.01;
	      particles.geometry.verticesNeedUpdate = true;

	      requestAnimationFrame(animate);
	      render();

	      trigger = false;
	      triggerBig = false;
	    }

	    function render() {
	      var time = Date.now() * 0.00005;
	      camera.position.x += (mouseX - camera.position.x) * 0.05;
	      camera.position.y += (-mouseY - camera.position.y) * 0.05;
	      camera.lookAt(scene.position);

	      renderer.render(scene, camera);
	    }

	    function mapRange(value, oldMin, oldMax, newMin, newMax) {
	      return (value - oldMin) * (newMax - newMin) / (oldMax - oldMin) + newMin;
	    }

	    function _random(size) {
	      return Math.random() * size - size / 2.0;
	    }

	    function onWindowResize() {
	      windowHalfX = window.innerWidth / 2;
	      windowHalfY = window.innerHeight / 2;
	      camera.aspect = window.innerWidth / window.innerHeight;
	      camera.updateProjectionMatrix();
	      renderer.setSize(window.innerWidth, window.innerHeight);
	    }

	    function onDocumentMouseMove(event) {
	      mouseX = event.clientX - windowHalfX;
	      mouseY = event.clientY - windowHalfY;
	    }

	    function onDocumentTouchStart(event) {
	      if (event.touches.length === 1) {
	        event.preventDefault();
	        mouseX = event.touches[0].pageX - windowHalfX;
	        mouseY = event.touches[0].pageY - windowHalfY;
	      }
	    }

	    function onDocumentTouchMove(event) {
	      if (event.touches.length === 1) {
	        event.preventDefault();
	        mouseX = event.touches[0].pageX - windowHalfX;
	        mouseY = event.touches[0].pageY - windowHalfY;
	      }
	    }
	  });
	});

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	(function( self ){

		var THREE = __webpack_require__(3);

		module.exports = function( addons ){

			if( addons instanceof Array ){

				for( var addonIndex = 0, length = addons.length; addonIndex < length; addonIndex++ ){
					
					var addon = addons[addonIndex];
					
					if( addon instanceof Function ){

						addon(THREE);

					}
					else if( typeof addon === "string" ){

						__webpack_require__(6)("./" + addon + ".js")(THREE);

					}
					else {

						throw new Error("Invalid module type provided");

					};
					
				};

			};

			return THREE;

		};

	})(this ||Â {});


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function( self ){

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		var THREE = { REVISION: '79' };

		// Polyfills

		if ( Number.EPSILON === undefined ) {

			Number.EPSILON = Math.pow( 2, - 52 );

		}

		//

		if ( Math.sign === undefined ) {

			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

			Math.sign = function ( x ) {

				return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

			};

		}

		if ( Function.prototype.name === undefined ) {

			// Missing in IE9-11.
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

			Object.defineProperty( Function.prototype, 'name', {

				get: function () {

					return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];

				}

			} );

		}

		if ( Object.assign === undefined ) {

			// Missing in IE.
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

			( function () {

				Object.assign = function ( target ) {

					'use strict';

					if ( target === undefined || target === null ) {

						throw new TypeError( 'Cannot convert undefined or null to object' );

					}

					var output = Object( target );

					for ( var index = 1; index < arguments.length; index ++ ) {

						var source = arguments[ index ];

						if ( source !== undefined && source !== null ) {

							for ( var nextKey in source ) {

								if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

									output[ nextKey ] = source[ nextKey ];

								}

							}

						}

					}

					return output;

				};

			} )();

		}

		//

		Object.assign( THREE, {

			// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button

			MOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },

			// GL STATE CONSTANTS

			CullFaceNone: 0,
			CullFaceBack: 1,
			CullFaceFront: 2,
			CullFaceFrontBack: 3,

			FrontFaceDirectionCW: 0,
			FrontFaceDirectionCCW: 1,

			// SHADOWING TYPES

			BasicShadowMap: 0,
			PCFShadowMap: 1,
			PCFSoftShadowMap: 2,

			// MATERIAL CONSTANTS

			// side

			FrontSide: 0,
			BackSide: 1,
			DoubleSide: 2,

			// shading

			FlatShading: 1,
			SmoothShading: 2,

			// colors

			NoColors: 0,
			FaceColors: 1,
			VertexColors: 2,

			// blending modes

			NoBlending: 0,
			NormalBlending: 1,
			AdditiveBlending: 2,
			SubtractiveBlending: 3,
			MultiplyBlending: 4,
			CustomBlending: 5,

			// custom blending equations
			// (numbers start from 100 not to clash with other
			// mappings to OpenGL constants defined in Texture.js)

			AddEquation: 100,
			SubtractEquation: 101,
			ReverseSubtractEquation: 102,
			MinEquation: 103,
			MaxEquation: 104,

			// custom blending destination factors

			ZeroFactor: 200,
			OneFactor: 201,
			SrcColorFactor: 202,
			OneMinusSrcColorFactor: 203,
			SrcAlphaFactor: 204,
			OneMinusSrcAlphaFactor: 205,
			DstAlphaFactor: 206,
			OneMinusDstAlphaFactor: 207,

			// custom blending source factors

			//ZeroFactor: 200,
			//OneFactor: 201,
			//SrcAlphaFactor: 204,
			//OneMinusSrcAlphaFactor: 205,
			//DstAlphaFactor: 206,
			//OneMinusDstAlphaFactor: 207,
			DstColorFactor: 208,
			OneMinusDstColorFactor: 209,
			SrcAlphaSaturateFactor: 210,

			// depth modes

			NeverDepth: 0,
			AlwaysDepth: 1,
			LessDepth: 2,
			LessEqualDepth: 3,
			EqualDepth: 4,
			GreaterEqualDepth: 5,
			GreaterDepth: 6,
			NotEqualDepth: 7,


			// TEXTURE CONSTANTS

			MultiplyOperation: 0,
			MixOperation: 1,
			AddOperation: 2,

			// Tone Mapping modes

			NoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)
			LinearToneMapping: 1, // only apply exposure.
			ReinhardToneMapping: 2,
			Uncharted2ToneMapping: 3, // John Hable
			CineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson

			// Mapping modes

			UVMapping: 300,

			CubeReflectionMapping: 301,
			CubeRefractionMapping: 302,

			EquirectangularReflectionMapping: 303,
			EquirectangularRefractionMapping: 304,

			SphericalReflectionMapping: 305,
			CubeUVReflectionMapping: 306,
			CubeUVRefractionMapping: 307,

			// Wrapping modes

			RepeatWrapping: 1000,
			ClampToEdgeWrapping: 1001,
			MirroredRepeatWrapping: 1002,

			// Filters

			NearestFilter: 1003,
			NearestMipMapNearestFilter: 1004,
			NearestMipMapLinearFilter: 1005,
			LinearFilter: 1006,
			LinearMipMapNearestFilter: 1007,
			LinearMipMapLinearFilter: 1008,

			// Data types

			UnsignedByteType: 1009,
			ByteType: 1010,
			ShortType: 1011,
			UnsignedShortType: 1012,
			IntType: 1013,
			UnsignedIntType: 1014,
			FloatType: 1015,
			HalfFloatType: 1025,

			// Pixel types

			//UnsignedByteType: 1009,
			UnsignedShort4444Type: 1016,
			UnsignedShort5551Type: 1017,
			UnsignedShort565Type: 1018,

			// Pixel formats

			AlphaFormat: 1019,
			RGBFormat: 1020,
			RGBAFormat: 1021,
			LuminanceFormat: 1022,
			LuminanceAlphaFormat: 1023,
			// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders
			RGBEFormat: THREE.RGBAFormat, //1024;
			DepthFormat: 1026,

			// DDS / ST3C Compressed texture formats

			RGB_S3TC_DXT1_Format: 2001,
			RGBA_S3TC_DXT1_Format: 2002,
			RGBA_S3TC_DXT3_Format: 2003,
			RGBA_S3TC_DXT5_Format: 2004,

			// PVRTC compressed texture formats

			RGB_PVRTC_4BPPV1_Format: 2100,
			RGB_PVRTC_2BPPV1_Format: 2101,
			RGBA_PVRTC_4BPPV1_Format: 2102,
			RGBA_PVRTC_2BPPV1_Format: 2103,

			// ETC compressed texture formats

			RGB_ETC1_Format: 2151,

			// Loop styles for AnimationAction

			LoopOnce: 2200,
			LoopRepeat: 2201,
			LoopPingPong: 2202,

			// Interpolation

			InterpolateDiscrete: 2300,
			InterpolateLinear: 2301,
			InterpolateSmooth: 2302,

			// Interpolant ending modes

			ZeroCurvatureEnding: 2400,
			ZeroSlopeEnding: 2401,
			WrapAroundEnding: 2402,

			// Triangle Draw modes

			TrianglesDrawMode: 0,
			TriangleStripDrawMode: 1,
			TriangleFanDrawMode: 2,

			// Texture Encodings

			LinearEncoding: 3000, // No encoding at all.
			sRGBEncoding: 3001,
			GammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput

			// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.
			// These encodings should not specified as output encodings except in rare situations.
			RGBEEncoding: 3002, // AKA Radiance.
			LogLuvEncoding: 3003,
			RGBM7Encoding: 3004,
			RGBM16Encoding: 3005,
			RGBDEncoding: 3006, // MaxRange is 256.

			// Depth packing strategies

			BasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers
			RGBADepthPacking: 3201 // for packing into RGBA buffers.

		} );

		// File:src/math/Color.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Color = function ( r, g, b ) {

			if ( g === undefined && b === undefined ) {

				// r is THREE.Color, hex or string
				return this.set( r );

			}

			return this.setRGB( r, g, b );

		};

		THREE.Color.prototype = {

			constructor: THREE.Color,

			r: 1, g: 1, b: 1,

			set: function ( value ) {

				if ( value instanceof THREE.Color ) {

					this.copy( value );

				} else if ( typeof value === 'number' ) {

					this.setHex( value );

				} else if ( typeof value === 'string' ) {

					this.setStyle( value );

				}

				return this;

			},

			setScalar: function ( scalar ) {

				this.r = scalar;
				this.g = scalar;
				this.b = scalar;

			},

			setHex: function ( hex ) {

				hex = Math.floor( hex );

				this.r = ( hex >> 16 & 255 ) / 255;
				this.g = ( hex >> 8 & 255 ) / 255;
				this.b = ( hex & 255 ) / 255;

				return this;

			},

			setRGB: function ( r, g, b ) {

				this.r = r;
				this.g = g;
				this.b = b;

				return this;

			},

			setHSL: function () {

				function hue2rgb( p, q, t ) {

					if ( t < 0 ) t += 1;
					if ( t > 1 ) t -= 1;
					if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
					if ( t < 1 / 2 ) return q;
					if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
					return p;

				}

				return function setHSL( h, s, l ) {

					// h,s,l ranges are in 0.0 - 1.0
					h = THREE.Math.euclideanModulo( h, 1 );
					s = THREE.Math.clamp( s, 0, 1 );
					l = THREE.Math.clamp( l, 0, 1 );

					if ( s === 0 ) {

						this.r = this.g = this.b = l;

					} else {

						var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
						var q = ( 2 * l ) - p;

						this.r = hue2rgb( q, p, h + 1 / 3 );
						this.g = hue2rgb( q, p, h );
						this.b = hue2rgb( q, p, h - 1 / 3 );

					}

					return this;

				};

			}(),

			setStyle: function ( style ) {

				function handleAlpha( string ) {

					if ( string === undefined ) return;

					if ( parseFloat( string ) < 1 ) {

						console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

					}

				}


				var m;

				if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

					// rgb / hsl

					var color;
					var name = m[ 1 ];
					var components = m[ 2 ];

					switch ( name ) {

						case 'rgb':
						case 'rgba':

							if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

								// rgb(255,0,0) rgba(255,0,0,0.5)
								this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
								this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
								this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

								handleAlpha( color[ 5 ] );

								return this;

							}

							if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

								// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
								this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
								this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
								this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

								handleAlpha( color[ 5 ] );

								return this;

							}

							break;

						case 'hsl':
						case 'hsla':

							if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

								// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
								var h = parseFloat( color[ 1 ] ) / 360;
								var s = parseInt( color[ 2 ], 10 ) / 100;
								var l = parseInt( color[ 3 ], 10 ) / 100;

								handleAlpha( color[ 5 ] );

								return this.setHSL( h, s, l );

							}

							break;

					}

				} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

					// hex color

					var hex = m[ 1 ];
					var size = hex.length;

					if ( size === 3 ) {

						// #ff0
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

						return this;

					} else if ( size === 6 ) {

						// #ff0000
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

						return this;

					}

				}

				if ( style && style.length > 0 ) {

					// color keywords
					var hex = THREE.ColorKeywords[ style ];

					if ( hex !== undefined ) {

						// red
						this.setHex( hex );

					} else {

						// unknown color
						console.warn( 'THREE.Color: Unknown color ' + style );

					}

				}

				return this;

			},

			clone: function () {

				return new this.constructor( this.r, this.g, this.b );

			},

			copy: function ( color ) {

				this.r = color.r;
				this.g = color.g;
				this.b = color.b;

				return this;

			},

			copyGammaToLinear: function ( color, gammaFactor ) {

				if ( gammaFactor === undefined ) gammaFactor = 2.0;

				this.r = Math.pow( color.r, gammaFactor );
				this.g = Math.pow( color.g, gammaFactor );
				this.b = Math.pow( color.b, gammaFactor );

				return this;

			},

			copyLinearToGamma: function ( color, gammaFactor ) {

				if ( gammaFactor === undefined ) gammaFactor = 2.0;

				var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

				this.r = Math.pow( color.r, safeInverse );
				this.g = Math.pow( color.g, safeInverse );
				this.b = Math.pow( color.b, safeInverse );

				return this;

			},

			convertGammaToLinear: function () {

				var r = this.r, g = this.g, b = this.b;

				this.r = r * r;
				this.g = g * g;
				this.b = b * b;

				return this;

			},

			convertLinearToGamma: function () {

				this.r = Math.sqrt( this.r );
				this.g = Math.sqrt( this.g );
				this.b = Math.sqrt( this.b );

				return this;

			},

			getHex: function () {

				return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

			},

			getHexString: function () {

				return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

			},

			getHSL: function ( optionalTarget ) {

				// h,s,l ranges are in 0.0 - 1.0

				var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

				var r = this.r, g = this.g, b = this.b;

				var max = Math.max( r, g, b );
				var min = Math.min( r, g, b );

				var hue, saturation;
				var lightness = ( min + max ) / 2.0;

				if ( min === max ) {

					hue = 0;
					saturation = 0;

				} else {

					var delta = max - min;

					saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

					switch ( max ) {

						case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
						case g: hue = ( b - r ) / delta + 2; break;
						case b: hue = ( r - g ) / delta + 4; break;

					}

					hue /= 6;

				}

				hsl.h = hue;
				hsl.s = saturation;
				hsl.l = lightness;

				return hsl;

			},

			getStyle: function () {

				return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

			},

			offsetHSL: function ( h, s, l ) {

				var hsl = this.getHSL();

				hsl.h += h; hsl.s += s; hsl.l += l;

				this.setHSL( hsl.h, hsl.s, hsl.l );

				return this;

			},

			add: function ( color ) {

				this.r += color.r;
				this.g += color.g;
				this.b += color.b;

				return this;

			},

			addColors: function ( color1, color2 ) {

				this.r = color1.r + color2.r;
				this.g = color1.g + color2.g;
				this.b = color1.b + color2.b;

				return this;

			},

			addScalar: function ( s ) {

				this.r += s;
				this.g += s;
				this.b += s;

				return this;

			},

			sub: function( color ) {

				this.r = Math.max( 0, this.r - color.r );
				this.g = Math.max( 0, this.g - color.g );
				this.b = Math.max( 0, this.b - color.b );

				return this;

			},

			multiply: function ( color ) {

				this.r *= color.r;
				this.g *= color.g;
				this.b *= color.b;

				return this;

			},

			multiplyScalar: function ( s ) {

				this.r *= s;
				this.g *= s;
				this.b *= s;

				return this;

			},

			lerp: function ( color, alpha ) {

				this.r += ( color.r - this.r ) * alpha;
				this.g += ( color.g - this.g ) * alpha;
				this.b += ( color.b - this.b ) * alpha;

				return this;

			},

			equals: function ( c ) {

				return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this.r = array[ offset ];
				this.g = array[ offset + 1 ];
				this.b = array[ offset + 2 ];

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this.r;
				array[ offset + 1 ] = this.g;
				array[ offset + 2 ] = this.b;

				return array;

			}

		};

		THREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

		// File:src/math/Quaternion.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */

		THREE.Quaternion = function ( x, y, z, w ) {

			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._w = ( w !== undefined ) ? w : 1;

		};

		THREE.Quaternion.prototype = {

			constructor: THREE.Quaternion,

			get x () {

				return this._x;

			},

			set x ( value ) {

				this._x = value;
				this.onChangeCallback();

			},

			get y () {

				return this._y;

			},

			set y ( value ) {

				this._y = value;
				this.onChangeCallback();

			},

			get z () {

				return this._z;

			},

			set z ( value ) {

				this._z = value;
				this.onChangeCallback();

			},

			get w () {

				return this._w;

			},

			set w ( value ) {

				this._w = value;
				this.onChangeCallback();

			},

			set: function ( x, y, z, w ) {

				this._x = x;
				this._y = y;
				this._z = z;
				this._w = w;

				this.onChangeCallback();

				return this;

			},

			clone: function () {

				return new this.constructor( this._x, this._y, this._z, this._w );

			},

			copy: function ( quaternion ) {

				this._x = quaternion.x;
				this._y = quaternion.y;
				this._z = quaternion.z;
				this._w = quaternion.w;

				this.onChangeCallback();

				return this;

			},

			setFromEuler: function ( euler, update ) {

				if ( euler instanceof THREE.Euler === false ) {

					throw new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

				}

				// http://www.mathworks.com/matlabcentral/fileexchange/
				// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
				//	content/SpinCalc.m

				var c1 = Math.cos( euler._x / 2 );
				var c2 = Math.cos( euler._y / 2 );
				var c3 = Math.cos( euler._z / 2 );
				var s1 = Math.sin( euler._x / 2 );
				var s2 = Math.sin( euler._y / 2 );
				var s3 = Math.sin( euler._z / 2 );

				var order = euler.order;

				if ( order === 'XYZ' ) {

					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;

				} else if ( order === 'YXZ' ) {

					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;

				} else if ( order === 'ZXY' ) {

					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;

				} else if ( order === 'ZYX' ) {

					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;

				} else if ( order === 'YZX' ) {

					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;

				} else if ( order === 'XZY' ) {

					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;

				}

				if ( update !== false ) this.onChangeCallback();

				return this;

			},

			setFromAxisAngle: function ( axis, angle ) {

				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

				// assumes axis is normalized

				var halfAngle = angle / 2, s = Math.sin( halfAngle );

				this._x = axis.x * s;
				this._y = axis.y * s;
				this._z = axis.z * s;
				this._w = Math.cos( halfAngle );

				this.onChangeCallback();

				return this;

			},

			setFromRotationMatrix: function ( m ) {

				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

				var te = m.elements,

					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

					trace = m11 + m22 + m33,
					s;

				if ( trace > 0 ) {

					s = 0.5 / Math.sqrt( trace + 1.0 );

					this._w = 0.25 / s;
					this._x = ( m32 - m23 ) * s;
					this._y = ( m13 - m31 ) * s;
					this._z = ( m21 - m12 ) * s;

				} else if ( m11 > m22 && m11 > m33 ) {

					s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

					this._w = ( m32 - m23 ) / s;
					this._x = 0.25 * s;
					this._y = ( m12 + m21 ) / s;
					this._z = ( m13 + m31 ) / s;

				} else if ( m22 > m33 ) {

					s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

					this._w = ( m13 - m31 ) / s;
					this._x = ( m12 + m21 ) / s;
					this._y = 0.25 * s;
					this._z = ( m23 + m32 ) / s;

				} else {

					s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

					this._w = ( m21 - m12 ) / s;
					this._x = ( m13 + m31 ) / s;
					this._y = ( m23 + m32 ) / s;
					this._z = 0.25 * s;

				}

				this.onChangeCallback();

				return this;

			},

			setFromUnitVectors: function () {

				// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

				// assumes direction vectors vFrom and vTo are normalized

				var v1, r;

				var EPS = 0.000001;

				return function setFromUnitVectors( vFrom, vTo ) {

					if ( v1 === undefined ) v1 = new THREE.Vector3();

					r = vFrom.dot( vTo ) + 1;

					if ( r < EPS ) {

						r = 0;

						if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

							v1.set( - vFrom.y, vFrom.x, 0 );

						} else {

							v1.set( 0, - vFrom.z, vFrom.y );

						}

					} else {

						v1.crossVectors( vFrom, vTo );

					}

					this._x = v1.x;
					this._y = v1.y;
					this._z = v1.z;
					this._w = r;

					return this.normalize();

				};

			}(),

			inverse: function () {

				return this.conjugate().normalize();

			},

			conjugate: function () {

				this._x *= - 1;
				this._y *= - 1;
				this._z *= - 1;

				this.onChangeCallback();

				return this;

			},

			dot: function ( v ) {

				return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

			},

			lengthSq: function () {

				return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

			},

			length: function () {

				return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

			},

			normalize: function () {

				var l = this.length();

				if ( l === 0 ) {

					this._x = 0;
					this._y = 0;
					this._z = 0;
					this._w = 1;

				} else {

					l = 1 / l;

					this._x = this._x * l;
					this._y = this._y * l;
					this._z = this._z * l;
					this._w = this._w * l;

				}

				this.onChangeCallback();

				return this;

			},

			multiply: function ( q, p ) {

				if ( p !== undefined ) {

					console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
					return this.multiplyQuaternions( q, p );

				}

				return this.multiplyQuaternions( this, q );

			},

			premultiply: function ( q ) {

				return this.multiplyQuaternions( q, this );

			},

			multiplyQuaternions: function ( a, b ) {

				// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

				var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
				var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

				this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
				this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
				this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
				this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

				this.onChangeCallback();

				return this;

			},

			slerp: function ( qb, t ) {

				if ( t === 0 ) return this;
				if ( t === 1 ) return this.copy( qb );

				var x = this._x, y = this._y, z = this._z, w = this._w;

				// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

				var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

				if ( cosHalfTheta < 0 ) {

					this._w = - qb._w;
					this._x = - qb._x;
					this._y = - qb._y;
					this._z = - qb._z;

					cosHalfTheta = - cosHalfTheta;

				} else {

					this.copy( qb );

				}

				if ( cosHalfTheta >= 1.0 ) {

					this._w = w;
					this._x = x;
					this._y = y;
					this._z = z;

					return this;

				}

				var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

				if ( Math.abs( sinHalfTheta ) < 0.001 ) {

					this._w = 0.5 * ( w + this._w );
					this._x = 0.5 * ( x + this._x );
					this._y = 0.5 * ( y + this._y );
					this._z = 0.5 * ( z + this._z );

					return this;

				}

				var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
				var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

				this._w = ( w * ratioA + this._w * ratioB );
				this._x = ( x * ratioA + this._x * ratioB );
				this._y = ( y * ratioA + this._y * ratioB );
				this._z = ( z * ratioA + this._z * ratioB );

				this.onChangeCallback();

				return this;

			},

			equals: function ( quaternion ) {

				return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this._x = array[ offset ];
				this._y = array[ offset + 1 ];
				this._z = array[ offset + 2 ];
				this._w = array[ offset + 3 ];

				this.onChangeCallback();

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._w;

				return array;

			},

			onChange: function ( callback ) {

				this.onChangeCallback = callback;

				return this;

			},

			onChangeCallback: function () {}

		};

		Object.assign( THREE.Quaternion, {

			slerp: function( qa, qb, qm, t ) {

				return qm.copy( qa ).slerp( qb, t );

			},

			slerpFlat: function(
					dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

				// fuzz-free, array-based Quaternion SLERP operation

				var x0 = src0[ srcOffset0 + 0 ],
					y0 = src0[ srcOffset0 + 1 ],
					z0 = src0[ srcOffset0 + 2 ],
					w0 = src0[ srcOffset0 + 3 ],

					x1 = src1[ srcOffset1 + 0 ],
					y1 = src1[ srcOffset1 + 1 ],
					z1 = src1[ srcOffset1 + 2 ],
					w1 = src1[ srcOffset1 + 3 ];

				if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

					var s = 1 - t,

						cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

						dir = ( cos >= 0 ? 1 : - 1 ),
						sqrSin = 1 - cos * cos;

					// Skip the Slerp for tiny steps to avoid numeric problems:
					if ( sqrSin > Number.EPSILON ) {

						var sin = Math.sqrt( sqrSin ),
							len = Math.atan2( sin, cos * dir );

						s = Math.sin( s * len ) / sin;
						t = Math.sin( t * len ) / sin;

					}

					var tDir = t * dir;

					x0 = x0 * s + x1 * tDir;
					y0 = y0 * s + y1 * tDir;
					z0 = z0 * s + z1 * tDir;
					w0 = w0 * s + w1 * tDir;

					// Normalize in case we just did a lerp:
					if ( s === 1 - t ) {

						var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

						x0 *= f;
						y0 *= f;
						z0 *= f;
						w0 *= f;

					}

				}

				dst[ dstOffset ] = x0;
				dst[ dstOffset + 1 ] = y0;
				dst[ dstOffset + 2 ] = z0;
				dst[ dstOffset + 3 ] = w0;

			}

		} );

		// File:src/math/Vector2.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author philogb / http://blog.thejit.org/
		 * @author egraether / http://egraether.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */

		THREE.Vector2 = function ( x, y ) {

			this.x = x || 0;
			this.y = y || 0;

		};

		THREE.Vector2.prototype = {

			constructor: THREE.Vector2,

			get width() {

				return this.x;

			},

			set width( value ) {

				this.x = value;

			},

			get height() {

				return this.y;

			},

			set height( value ) {

				this.y = value;

			},

			//

			set: function ( x, y ) {

				this.x = x;
				this.y = y;

				return this;

			},

			setScalar: function ( scalar ) {

				this.x = scalar;
				this.y = scalar;

				return this;

			},

			setX: function ( x ) {

				this.x = x;

				return this;

			},

			setY: function ( y ) {

				this.y = y;

				return this;

			},

			setComponent: function ( index, value ) {

				switch ( index ) {

					case 0: this.x = value; break;
					case 1: this.y = value; break;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			getComponent: function ( index ) {

				switch ( index ) {

					case 0: return this.x;
					case 1: return this.y;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			clone: function () {

				return new this.constructor( this.x, this.y );

			},

			copy: function ( v ) {

				this.x = v.x;
				this.y = v.y;

				return this;

			},

			add: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );

				}

				this.x += v.x;
				this.y += v.y;

				return this;

			},

			addScalar: function ( s ) {

				this.x += s;
				this.y += s;

				return this;

			},

			addVectors: function ( a, b ) {

				this.x = a.x + b.x;
				this.y = a.y + b.y;

				return this;

			},

			addScaledVector: function ( v, s ) {

				this.x += v.x * s;
				this.y += v.y * s;

				return this;

			},

			sub: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );

				}

				this.x -= v.x;
				this.y -= v.y;

				return this;

			},

			subScalar: function ( s ) {

				this.x -= s;
				this.y -= s;

				return this;

			},

			subVectors: function ( a, b ) {

				this.x = a.x - b.x;
				this.y = a.y - b.y;

				return this;

			},

			multiply: function ( v ) {

				this.x *= v.x;
				this.y *= v.y;

				return this;

			},

			multiplyScalar: function ( scalar ) {

				if ( isFinite( scalar ) ) {

					this.x *= scalar;
					this.y *= scalar;

				} else {

					this.x = 0;
					this.y = 0;

				}

				return this;

			},

			divide: function ( v ) {

				this.x /= v.x;
				this.y /= v.y;

				return this;

			},

			divideScalar: function ( scalar ) {

				return this.multiplyScalar( 1 / scalar );

			},

			min: function ( v ) {

				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );

				return this;

			},

			max: function ( v ) {

				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );

				return this;

			},

			clamp: function ( min, max ) {

				// This function assumes min < max, if this assumption isn't true it will not operate correctly

				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );

				return this;

			},

			clampScalar: function () {

				var min, max;

				return function clampScalar( minVal, maxVal ) {

					if ( min === undefined ) {

						min = new THREE.Vector2();
						max = new THREE.Vector2();

					}

					min.set( minVal, minVal );
					max.set( maxVal, maxVal );

					return this.clamp( min, max );

				};

			}(),

			clampLength: function ( min, max ) {

				var length = this.length();

				return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

			},

			floor: function () {

				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );

				return this;

			},

			ceil: function () {

				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );

				return this;

			},

			round: function () {

				this.x = Math.round( this.x );
				this.y = Math.round( this.y );

				return this;

			},

			roundToZero: function () {

				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

				return this;

			},

			negate: function () {

				this.x = - this.x;
				this.y = - this.y;

				return this;

			},

			dot: function ( v ) {

				return this.x * v.x + this.y * v.y;

			},

			lengthSq: function () {

				return this.x * this.x + this.y * this.y;

			},

			length: function () {

				return Math.sqrt( this.x * this.x + this.y * this.y );

			},

			lengthManhattan: function() {

				return Math.abs( this.x ) + Math.abs( this.y );

			},

			normalize: function () {

				return this.divideScalar( this.length() );

			},

			angle: function () {

				// computes the angle in radians with respect to the positive x-axis

				var angle = Math.atan2( this.y, this.x );

				if ( angle < 0 ) angle += 2 * Math.PI;

				return angle;

			},

			distanceTo: function ( v ) {

				return Math.sqrt( this.distanceToSquared( v ) );

			},

			distanceToSquared: function ( v ) {

				var dx = this.x - v.x, dy = this.y - v.y;
				return dx * dx + dy * dy;

			},

			distanceToManhattan: function ( v ) {

				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

			},

			setLength: function ( length ) {

				return this.multiplyScalar( length / this.length() );

			},

			lerp: function ( v, alpha ) {

				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;

				return this;

			},

			lerpVectors: function ( v1, v2, alpha ) {

				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			},

			equals: function ( v ) {

				return ( ( v.x === this.x ) && ( v.y === this.y ) );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this.x = array[ offset ];
				this.y = array[ offset + 1 ];

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;

				return array;

			},

			fromAttribute: function ( attribute, index, offset ) {

				if ( offset === undefined ) offset = 0;

				index = index * attribute.itemSize + offset;

				this.x = attribute.array[ index ];
				this.y = attribute.array[ index + 1 ];

				return this;

			},

			rotateAround: function ( center, angle ) {

				var c = Math.cos( angle ), s = Math.sin( angle );

				var x = this.x - center.x;
				var y = this.y - center.y;

				this.x = x * c - y * s + center.x;
				this.y = x * s + y * c + center.y;

				return this;

			}

		};

		// File:src/math/Vector3.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author *kile / http://kile.stravaganza.org/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */

		THREE.Vector3 = function ( x, y, z ) {

			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;

		};

		THREE.Vector3.prototype = {

			constructor: THREE.Vector3,

			set: function ( x, y, z ) {

				this.x = x;
				this.y = y;
				this.z = z;

				return this;

			},

			setScalar: function ( scalar ) {

				this.x = scalar;
				this.y = scalar;
				this.z = scalar;

				return this;

			},

			setX: function ( x ) {

				this.x = x;

				return this;

			},

			setY: function ( y ) {

				this.y = y;

				return this;

			},

			setZ: function ( z ) {

				this.z = z;

				return this;

			},

			setComponent: function ( index, value ) {

				switch ( index ) {

					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			getComponent: function ( index ) {

				switch ( index ) {

					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			clone: function () {

				return new this.constructor( this.x, this.y, this.z );

			},

			copy: function ( v ) {

				this.x = v.x;
				this.y = v.y;
				this.z = v.z;

				return this;

			},

			add: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );

				}

				this.x += v.x;
				this.y += v.y;
				this.z += v.z;

				return this;

			},

			addScalar: function ( s ) {

				this.x += s;
				this.y += s;
				this.z += s;

				return this;

			},

			addVectors: function ( a, b ) {

				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;

				return this;

			},

			addScaledVector: function ( v, s ) {

				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;

				return this;

			},

			sub: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );

				}

				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;

				return this;

			},

			subScalar: function ( s ) {

				this.x -= s;
				this.y -= s;
				this.z -= s;

				return this;

			},

			subVectors: function ( a, b ) {

				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;

				return this;

			},

			multiply: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
					return this.multiplyVectors( v, w );

				}

				this.x *= v.x;
				this.y *= v.y;
				this.z *= v.z;

				return this;

			},

			multiplyScalar: function ( scalar ) {

				if ( isFinite( scalar ) ) {

					this.x *= scalar;
					this.y *= scalar;
					this.z *= scalar;

				} else {

					this.x = 0;
					this.y = 0;
					this.z = 0;

				}

				return this;

			},

			multiplyVectors: function ( a, b ) {

				this.x = a.x * b.x;
				this.y = a.y * b.y;
				this.z = a.z * b.z;

				return this;

			},

			applyEuler: function () {

				var quaternion;

				return function applyEuler( euler ) {

					if ( euler instanceof THREE.Euler === false ) {

						console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

					}

					if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

					return this.applyQuaternion( quaternion.setFromEuler( euler ) );

				};

			}(),

			applyAxisAngle: function () {

				var quaternion;

				return function applyAxisAngle( axis, angle ) {

					if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

					return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

				};

			}(),

			applyMatrix3: function ( m ) {

				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;

				this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
				this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
				this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

				return this;

			},

			applyMatrix4: function ( m ) {

				// input: THREE.Matrix4 affine matrix

				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;

				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

				return this;

			},

			applyProjection: function ( m ) {

				// input: THREE.Matrix4 projection matrix

				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
				var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

				this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
				this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
				this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

				return this;

			},

			applyQuaternion: function ( q ) {

				var x = this.x, y = this.y, z = this.z;
				var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

				// calculate quat * vector

				var ix =  qw * x + qy * z - qz * y;
				var iy =  qw * y + qz * x - qx * z;
				var iz =  qw * z + qx * y - qy * x;
				var iw = - qx * x - qy * y - qz * z;

				// calculate result * inverse quat

				this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
				this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
				this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

				return this;

			},

			project: function () {

				var matrix;

				return function project( camera ) {

					if ( matrix === undefined ) matrix = new THREE.Matrix4();

					matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
					return this.applyProjection( matrix );

				};

			}(),

			unproject: function () {

				var matrix;

				return function unproject( camera ) {

					if ( matrix === undefined ) matrix = new THREE.Matrix4();

					matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
					return this.applyProjection( matrix );

				};

			}(),

			transformDirection: function ( m ) {

				// input: THREE.Matrix4 affine matrix
				// vector interpreted as a direction

				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;

				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

				return this.normalize();

			},

			divide: function ( v ) {

				this.x /= v.x;
				this.y /= v.y;
				this.z /= v.z;

				return this;

			},

			divideScalar: function ( scalar ) {

				return this.multiplyScalar( 1 / scalar );

			},

			min: function ( v ) {

				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );

				return this;

			},

			max: function ( v ) {

				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );

				return this;

			},

			clamp: function ( min, max ) {

				// This function assumes min < max, if this assumption isn't true it will not operate correctly

				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );

				return this;

			},

			clampScalar: function () {

				var min, max;

				return function clampScalar( minVal, maxVal ) {

					if ( min === undefined ) {

						min = new THREE.Vector3();
						max = new THREE.Vector3();

					}

					min.set( minVal, minVal, minVal );
					max.set( maxVal, maxVal, maxVal );

					return this.clamp( min, max );

				};

			}(),

			clampLength: function ( min, max ) {

				var length = this.length();

				return this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );

			},

			floor: function () {

				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );

				return this;

			},

			ceil: function () {

				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );

				return this;

			},

			round: function () {

				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );

				return this;

			},

			roundToZero: function () {

				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

				return this;

			},

			negate: function () {

				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;

				return this;

			},

			dot: function ( v ) {

				return this.x * v.x + this.y * v.y + this.z * v.z;

			},

			lengthSq: function () {

				return this.x * this.x + this.y * this.y + this.z * this.z;

			},

			length: function () {

				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

			},

			lengthManhattan: function () {

				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

			},

			normalize: function () {

				return this.divideScalar( this.length() );

			},

			setLength: function ( length ) {

				return this.multiplyScalar( length / this.length() );

			},

			lerp: function ( v, alpha ) {

				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;

				return this;

			},

			lerpVectors: function ( v1, v2, alpha ) {

				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			},

			cross: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
					return this.crossVectors( v, w );

				}

				var x = this.x, y = this.y, z = this.z;

				this.x = y * v.z - z * v.y;
				this.y = z * v.x - x * v.z;
				this.z = x * v.y - y * v.x;

				return this;

			},

			crossVectors: function ( a, b ) {

				var ax = a.x, ay = a.y, az = a.z;
				var bx = b.x, by = b.y, bz = b.z;

				this.x = ay * bz - az * by;
				this.y = az * bx - ax * bz;
				this.z = ax * by - ay * bx;

				return this;

			},

			projectOnVector: function ( vector ) {

				var scalar = vector.dot( this ) / vector.lengthSq();
			
				return this.copy( vector ).multiplyScalar( scalar );
			
			},

			projectOnPlane: function () {

				var v1;

				return function projectOnPlane( planeNormal ) {

					if ( v1 === undefined ) v1 = new THREE.Vector3();

					v1.copy( this ).projectOnVector( planeNormal );

					return this.sub( v1 );

				};

			}(),

			reflect: function () {

				// reflect incident vector off plane orthogonal to normal
				// normal is assumed to have unit length

				var v1;

				return function reflect( normal ) {

					if ( v1 === undefined ) v1 = new THREE.Vector3();

					return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

				};

			}(),

			angleTo: function ( v ) {

				var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

				// clamp, to handle numerical problems

				return Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );

			},

			distanceTo: function ( v ) {

				return Math.sqrt( this.distanceToSquared( v ) );

			},

			distanceToSquared: function ( v ) {

				var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

				return dx * dx + dy * dy + dz * dz;

			},

			distanceToManhattan: function ( v ) {

				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

			},

			setFromSpherical: function( s ) {

				var sinPhiRadius = Math.sin( s.phi ) * s.radius;

				this.x = sinPhiRadius * Math.sin( s.theta );
				this.y = Math.cos( s.phi ) * s.radius;
				this.z = sinPhiRadius * Math.cos( s.theta );

				return this;

			},

			setFromMatrixPosition: function ( m ) {

				return this.setFromMatrixColumn( m, 3 );

			},

			setFromMatrixScale: function ( m ) {

				var sx = this.setFromMatrixColumn( m, 0 ).length();
				var sy = this.setFromMatrixColumn( m, 1 ).length();
				var sz = this.setFromMatrixColumn( m, 2 ).length();

				this.x = sx;
				this.y = sy;
				this.z = sz;

				return this;

			},

			setFromMatrixColumn: function ( m, index ) {

				if ( typeof m === 'number' ) {

					console.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );
					var temp = m
					m = index;
					index = temp;

				}

				return this.fromArray( m.elements, index * 4 );

			},

			equals: function ( v ) {

				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;

				return array;

			},

			fromAttribute: function ( attribute, index, offset ) {

				if ( offset === undefined ) offset = 0;

				index = index * attribute.itemSize + offset;

				this.x = attribute.array[ index ];
				this.y = attribute.array[ index + 1 ];
				this.z = attribute.array[ index + 2 ];

				return this;

			}

		};

		// File:src/math/Vector4.js

		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */

		THREE.Vector4 = function ( x, y, z, w ) {

			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
			this.w = ( w !== undefined ) ? w : 1;

		};

		THREE.Vector4.prototype = {

			constructor: THREE.Vector4,

			set: function ( x, y, z, w ) {

				this.x = x;
				this.y = y;
				this.z = z;
				this.w = w;

				return this;

			},

			setScalar: function ( scalar ) {

				this.x = scalar;
				this.y = scalar;
				this.z = scalar;
				this.w = scalar;

				return this;

			},

			setX: function ( x ) {

				this.x = x;

				return this;

			},

			setY: function ( y ) {

				this.y = y;

				return this;

			},

			setZ: function ( z ) {

				this.z = z;

				return this;

			},

			setW: function ( w ) {

				this.w = w;

				return this;

			},

			setComponent: function ( index, value ) {

				switch ( index ) {

					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					case 3: this.w = value; break;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			getComponent: function ( index ) {

				switch ( index ) {

					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					case 3: return this.w;
					default: throw new Error( 'index is out of range: ' + index );

				}

			},

			clone: function () {

				return new this.constructor( this.x, this.y, this.z, this.w );

			},

			copy: function ( v ) {

				this.x = v.x;
				this.y = v.y;
				this.z = v.z;
				this.w = ( v.w !== undefined ) ? v.w : 1;

				return this;

			},

			add: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );

				}

				this.x += v.x;
				this.y += v.y;
				this.z += v.z;
				this.w += v.w;

				return this;

			},

			addScalar: function ( s ) {

				this.x += s;
				this.y += s;
				this.z += s;
				this.w += s;

				return this;

			},

			addVectors: function ( a, b ) {

				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;
				this.w = a.w + b.w;

				return this;

			},

			addScaledVector: function ( v, s ) {

				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;
				this.w += v.w * s;

				return this;

			},

			sub: function ( v, w ) {

				if ( w !== undefined ) {

					console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );

				}

				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;
				this.w -= v.w;

				return this;

			},

			subScalar: function ( s ) {

				this.x -= s;
				this.y -= s;
				this.z -= s;
				this.w -= s;

				return this;

			},

			subVectors: function ( a, b ) {

				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;
				this.w = a.w - b.w;

				return this;

			},

			multiplyScalar: function ( scalar ) {

				if ( isFinite( scalar ) ) {

					this.x *= scalar;
					this.y *= scalar;
					this.z *= scalar;
					this.w *= scalar;

				} else {

					this.x = 0;
					this.y = 0;
					this.z = 0;
					this.w = 0;

				}

				return this;

			},

			applyMatrix4: function ( m ) {

				var x = this.x, y = this.y, z = this.z, w = this.w;
				var e = m.elements;

				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
				this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

				return this;

			},

			divideScalar: function ( scalar ) {

				return this.multiplyScalar( 1 / scalar );

			},

			setAxisAngleFromQuaternion: function ( q ) {

				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

				// q is assumed to be normalized

				this.w = 2 * Math.acos( q.w );

				var s = Math.sqrt( 1 - q.w * q.w );

				if ( s < 0.0001 ) {

					 this.x = 1;
					 this.y = 0;
					 this.z = 0;

				} else {

					 this.x = q.x / s;
					 this.y = q.y / s;
					 this.z = q.z / s;

				}

				return this;

			},

			setAxisAngleFromRotationMatrix: function ( m ) {

				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

				var angle, x, y, z,		// variables for result
					epsilon = 0.01,		// margin to allow for rounding errors
					epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

					te = m.elements,

					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

				if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
				     ( Math.abs( m13 - m31 ) < epsilon ) &&
				     ( Math.abs( m23 - m32 ) < epsilon ) ) {

					// singularity found
					// first check for identity matrix which must have +1 for all terms
					// in leading diagonal and zero in other terms

					if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
					     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
					     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
					     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

						// this singularity is identity matrix so angle = 0

						this.set( 1, 0, 0, 0 );

						return this; // zero angle, arbitrary axis

					}

					// otherwise this singularity is angle = 180

					angle = Math.PI;

					var xx = ( m11 + 1 ) / 2;
					var yy = ( m22 + 1 ) / 2;
					var zz = ( m33 + 1 ) / 2;
					var xy = ( m12 + m21 ) / 4;
					var xz = ( m13 + m31 ) / 4;
					var yz = ( m23 + m32 ) / 4;

					if ( ( xx > yy ) && ( xx > zz ) ) {

						// m11 is the largest diagonal term

						if ( xx < epsilon ) {

							x = 0;
							y = 0.707106781;
							z = 0.707106781;

						} else {

							x = Math.sqrt( xx );
							y = xy / x;
							z = xz / x;

						}

					} else if ( yy > zz ) {

						// m22 is the largest diagonal term

						if ( yy < epsilon ) {

							x = 0.707106781;
							y = 0;
							z = 0.707106781;

						} else {

							y = Math.sqrt( yy );
							x = xy / y;
							z = yz / y;

						}

					} else {

						// m33 is the largest diagonal term so base result on this

						if ( zz < epsilon ) {

							x = 0.707106781;
							y = 0.707106781;
							z = 0;

						} else {

							z = Math.sqrt( zz );
							x = xz / z;
							y = yz / z;

						}

					}

					this.set( x, y, z, angle );

					return this; // return 180 deg rotation

				}

				// as we have reached here there are no singularities so we can handle normally

				var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
				                   ( m13 - m31 ) * ( m13 - m31 ) +
				                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

				if ( Math.abs( s ) < 0.001 ) s = 1;

				// prevent divide by zero, should not happen if matrix is orthogonal and should be
				// caught by singularity test above, but I've left it in just in case

				this.x = ( m32 - m23 ) / s;
				this.y = ( m13 - m31 ) / s;
				this.z = ( m21 - m12 ) / s;
				this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

				return this;

			},

			min: function ( v ) {

				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );
				this.w = Math.min( this.w, v.w );

				return this;

			},

			max: function ( v ) {

				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );
				this.w = Math.max( this.w, v.w );

				return this;

			},

			clamp: function ( min, max ) {

				// This function assumes min < max, if this assumption isn't true it will not operate correctly

				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );
				this.w = Math.max( min.w, Math.min( max.w, this.w ) );

				return this;

			},

			clampScalar: function () {

				var min, max;

				return function clampScalar( minVal, maxVal ) {

					if ( min === undefined ) {

						min = new THREE.Vector4();
						max = new THREE.Vector4();

					}

					min.set( minVal, minVal, minVal, minVal );
					max.set( maxVal, maxVal, maxVal, maxVal );

					return this.clamp( min, max );

				};

			}(),

			floor: function () {

				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );
				this.w = Math.floor( this.w );

				return this;

			},

			ceil: function () {

				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );
				this.w = Math.ceil( this.w );

				return this;

			},

			round: function () {

				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );
				this.w = Math.round( this.w );

				return this;

			},

			roundToZero: function () {

				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
				this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

				return this;

			},

			negate: function () {

				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;
				this.w = - this.w;

				return this;

			},

			dot: function ( v ) {

				return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

			},

			lengthSq: function () {

				return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

			},

			length: function () {

				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

			},

			lengthManhattan: function () {

				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

			},

			normalize: function () {

				return this.divideScalar( this.length() );

			},

			setLength: function ( length ) {

				return this.multiplyScalar( length / this.length() );

			},

			lerp: function ( v, alpha ) {

				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;
				this.w += ( v.w - this.w ) * alpha;

				return this;

			},

			lerpVectors: function ( v1, v2, alpha ) {

				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

			},

			equals: function ( v ) {

				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

			},

			fromArray: function ( array, offset ) {

				if ( offset === undefined ) offset = 0;

				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];
				this.w = array[ offset + 3 ];

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;
				array[ offset + 3 ] = this.w;

				return array;

			},

			fromAttribute: function ( attribute, index, offset ) {

				if ( offset === undefined ) offset = 0;

				index = index * attribute.itemSize + offset;

				this.x = attribute.array[ index ];
				this.y = attribute.array[ index + 1 ];
				this.z = attribute.array[ index + 2 ];
				this.w = attribute.array[ index + 3 ];

				return this;

			}

		};

		// File:src/math/Euler.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */

		THREE.Euler = function ( x, y, z, order ) {

			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._order = order || THREE.Euler.DefaultOrder;

		};

		THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

		THREE.Euler.DefaultOrder = 'XYZ';

		THREE.Euler.prototype = {

			constructor: THREE.Euler,

			get x () {

				return this._x;

			},

			set x ( value ) {

				this._x = value;
				this.onChangeCallback();

			},

			get y () {

				return this._y;

			},

			set y ( value ) {

				this._y = value;
				this.onChangeCallback();

			},

			get z () {

				return this._z;

			},

			set z ( value ) {

				this._z = value;
				this.onChangeCallback();

			},

			get order () {

				return this._order;

			},

			set order ( value ) {

				this._order = value;
				this.onChangeCallback();

			},

			set: function ( x, y, z, order ) {

				this._x = x;
				this._y = y;
				this._z = z;
				this._order = order || this._order;

				this.onChangeCallback();

				return this;

			},

			clone: function () {

				return new this.constructor( this._x, this._y, this._z, this._order );

			},

			copy: function ( euler ) {

				this._x = euler._x;
				this._y = euler._y;
				this._z = euler._z;
				this._order = euler._order;

				this.onChangeCallback();

				return this;

			},

			setFromRotationMatrix: function ( m, order, update ) {

				var clamp = THREE.Math.clamp;

				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

				var te = m.elements;
				var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
				var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
				var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

				order = order || this._order;

				if ( order === 'XYZ' ) {

					this._y = Math.asin( clamp( m13, - 1, 1 ) );

					if ( Math.abs( m13 ) < 0.99999 ) {

						this._x = Math.atan2( - m23, m33 );
						this._z = Math.atan2( - m12, m11 );

					} else {

						this._x = Math.atan2( m32, m22 );
						this._z = 0;

					}

				} else if ( order === 'YXZ' ) {

					this._x = Math.asin( - clamp( m23, - 1, 1 ) );

					if ( Math.abs( m23 ) < 0.99999 ) {

						this._y = Math.atan2( m13, m33 );
						this._z = Math.atan2( m21, m22 );

					} else {

						this._y = Math.atan2( - m31, m11 );
						this._z = 0;

					}

				} else if ( order === 'ZXY' ) {

					this._x = Math.asin( clamp( m32, - 1, 1 ) );

					if ( Math.abs( m32 ) < 0.99999 ) {

						this._y = Math.atan2( - m31, m33 );
						this._z = Math.atan2( - m12, m22 );

					} else {

						this._y = 0;
						this._z = Math.atan2( m21, m11 );

					}

				} else if ( order === 'ZYX' ) {

					this._y = Math.asin( - clamp( m31, - 1, 1 ) );

					if ( Math.abs( m31 ) < 0.99999 ) {

						this._x = Math.atan2( m32, m33 );
						this._z = Math.atan2( m21, m11 );

					} else {

						this._x = 0;
						this._z = Math.atan2( - m12, m22 );

					}

				} else if ( order === 'YZX' ) {

					this._z = Math.asin( clamp( m21, - 1, 1 ) );

					if ( Math.abs( m21 ) < 0.99999 ) {

						this._x = Math.atan2( - m23, m22 );
						this._y = Math.atan2( - m31, m11 );

					} else {

						this._x = 0;
						this._y = Math.atan2( m13, m33 );

					}

				} else if ( order === 'XZY' ) {

					this._z = Math.asin( - clamp( m12, - 1, 1 ) );

					if ( Math.abs( m12 ) < 0.99999 ) {

						this._x = Math.atan2( m32, m22 );
						this._y = Math.atan2( m13, m11 );

					} else {

						this._x = Math.atan2( - m23, m33 );
						this._y = 0;

					}

				} else {

					console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

				}

				this._order = order;

				if ( update !== false ) this.onChangeCallback();

				return this;

			},

			setFromQuaternion: function () {

				var matrix;

				return function setFromQuaternion( q, order, update ) {

					if ( matrix === undefined ) matrix = new THREE.Matrix4();

					matrix.makeRotationFromQuaternion( q );

					return this.setFromRotationMatrix( matrix, order, update );

				};

			}(),

			setFromVector3: function ( v, order ) {

				return this.set( v.x, v.y, v.z, order || this._order );

			},

			reorder: function () {

				// WARNING: this discards revolution information -bhouston

				var q = new THREE.Quaternion();

				return function reorder( newOrder ) {

					q.setFromEuler( this );
					
					return this.setFromQuaternion( q, newOrder );

				};

			}(),

			equals: function ( euler ) {

				return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

			},

			fromArray: function ( array ) {

				this._x = array[ 0 ];
				this._y = array[ 1 ];
				this._z = array[ 2 ];
				if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

				this.onChangeCallback();

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._order;

				return array;

			},

			toVector3: function ( optionalResult ) {

				if ( optionalResult ) {

					return optionalResult.set( this._x, this._y, this._z );

				} else {

					return new THREE.Vector3( this._x, this._y, this._z );

				}

			},

			onChange: function ( callback ) {

				this.onChangeCallback = callback;

				return this;

			},

			onChangeCallback: function () {}

		};

		// File:src/math/Line3.js

		/**
		 * @author bhouston / http://clara.io
		 */

		THREE.Line3 = function ( start, end ) {

			this.start = ( start !== undefined ) ? start : new THREE.Vector3();
			this.end = ( end !== undefined ) ? end : new THREE.Vector3();

		};

		THREE.Line3.prototype = {

			constructor: THREE.Line3,

			set: function ( start, end ) {

				this.start.copy( start );
				this.end.copy( end );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( line ) {

				this.start.copy( line.start );
				this.end.copy( line.end );

				return this;

			},

			center: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();
				return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

			},

			delta: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();
				return result.subVectors( this.end, this.start );

			},

			distanceSq: function () {

				return this.start.distanceToSquared( this.end );

			},

			distance: function () {

				return this.start.distanceTo( this.end );

			},

			at: function ( t, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				return this.delta( result ).multiplyScalar( t ).add( this.start );

			},

			closestPointToPointParameter: function () {

				var startP = new THREE.Vector3();
				var startEnd = new THREE.Vector3();

				return function closestPointToPointParameter( point, clampToLine ) {

					startP.subVectors( point, this.start );
					startEnd.subVectors( this.end, this.start );

					var startEnd2 = startEnd.dot( startEnd );
					var startEnd_startP = startEnd.dot( startP );

					var t = startEnd_startP / startEnd2;

					if ( clampToLine ) {

						t = THREE.Math.clamp( t, 0, 1 );

					}

					return t;

				};

			}(),

			closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

				var t = this.closestPointToPointParameter( point, clampToLine );

				var result = optionalTarget || new THREE.Vector3();

				return this.delta( result ).multiplyScalar( t ).add( this.start );

			},

			applyMatrix4: function ( matrix ) {

				this.start.applyMatrix4( matrix );
				this.end.applyMatrix4( matrix );

				return this;

			},

			equals: function ( line ) {

				return line.start.equals( this.start ) && line.end.equals( this.end );

			}

		};

		// File:src/math/Box2.js

		/**
		 * @author bhouston / http://clara.io
		 */

		THREE.Box2 = function ( min, max ) {

			this.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );

		};

		THREE.Box2.prototype = {

			constructor: THREE.Box2,

			set: function ( min, max ) {

				this.min.copy( min );
				this.max.copy( max );

				return this;

			},

			setFromPoints: function ( points ) {

				this.makeEmpty();

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					this.expandByPoint( points[ i ] );

				}

				return this;

			},

			setFromCenterAndSize: function () {

				var v1 = new THREE.Vector2();

				return function setFromCenterAndSize( center, size ) {

					var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
					this.min.copy( center ).sub( halfSize );
					this.max.copy( center ).add( halfSize );

					return this;

				};

			}(),

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( box ) {

				this.min.copy( box.min );
				this.max.copy( box.max );

				return this;

			},

			makeEmpty: function () {

				this.min.x = this.min.y = + Infinity;
				this.max.x = this.max.y = - Infinity;

				return this;

			},

			isEmpty: function () {

				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

			},

			center: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector2();
				return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

			},

			size: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector2();
				return result.subVectors( this.max, this.min );

			},

			expandByPoint: function ( point ) {

				this.min.min( point );
				this.max.max( point );

				return this;

			},

			expandByVector: function ( vector ) {

				this.min.sub( vector );
				this.max.add( vector );

				return this;

			},

			expandByScalar: function ( scalar ) {

				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );

				return this;

			},

			containsPoint: function ( point ) {

				if ( point.x < this.min.x || point.x > this.max.x ||
				     point.y < this.min.y || point.y > this.max.y ) {

					return false;

				}

				return true;

			},

			containsBox: function ( box ) {

				if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

					return true;

				}

				return false;

			},

			getParameter: function ( point, optionalTarget ) {

				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.

				var result = optionalTarget || new THREE.Vector2();

				return result.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y )
				);

			},

			intersectsBox: function ( box ) {

				// using 6 splitting planes to rule out intersections.

				if ( box.max.x < this.min.x || box.min.x > this.max.x ||
				     box.max.y < this.min.y || box.min.y > this.max.y ) {

					return false;

				}

				return true;

			},

			clampPoint: function ( point, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector2();
				return result.copy( point ).clamp( this.min, this.max );

			},

			distanceToPoint: function () {

				var v1 = new THREE.Vector2();

				return function distanceToPoint( point ) {

					var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
					return clampedPoint.sub( point ).length();

				};

			}(),

			intersect: function ( box ) {

				this.min.max( box.min );
				this.max.min( box.max );

				return this;

			},

			union: function ( box ) {

				this.min.min( box.min );
				this.max.max( box.max );

				return this;

			},

			translate: function ( offset ) {

				this.min.add( offset );
				this.max.add( offset );

				return this;

			},

			equals: function ( box ) {

				return box.min.equals( this.min ) && box.max.equals( this.max );

			}

		};

		// File:src/math/Box3.js

		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */

		THREE.Box3 = function ( min, max ) {

			this.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );

		};

		THREE.Box3.prototype = {

			constructor: THREE.Box3,

			set: function ( min, max ) {

				this.min.copy( min );
				this.max.copy( max );

				return this;

			},

			setFromArray: function ( array ) {

				var minX = + Infinity;
				var minY = + Infinity;
				var minZ = + Infinity;

				var maxX = - Infinity;
				var maxY = - Infinity;
				var maxZ = - Infinity;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var x = array[ i ];
					var y = array[ i + 1 ];
					var z = array[ i + 2 ];

					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( z < minZ ) minZ = z;

					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;
					if ( z > maxZ ) maxZ = z;

				}

				this.min.set( minX, minY, minZ );
				this.max.set( maxX, maxY, maxZ );

			},

			setFromPoints: function ( points ) {

				this.makeEmpty();

				for ( var i = 0, il = points.length; i < il; i ++ ) {

					this.expandByPoint( points[ i ] );

				}

				return this;

			},

			setFromCenterAndSize: function () {

				var v1 = new THREE.Vector3();

				return function setFromCenterAndSize( center, size ) {

					var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

					this.min.copy( center ).sub( halfSize );
					this.max.copy( center ).add( halfSize );

					return this;

				};

			}(),

			setFromObject: function () {

				// Computes the world-axis-aligned bounding box of an object (including its children),
				// accounting for both the object's, and children's, world transforms

				var v1 = new THREE.Vector3();

				return function setFromObject( object ) {

					var scope = this;

					object.updateMatrixWorld( true );

					this.makeEmpty();

					object.traverse( function ( node ) {

						var geometry = node.geometry;

						if ( geometry !== undefined ) {

							if ( geometry instanceof THREE.Geometry ) {

								var vertices = geometry.vertices;

								for ( var i = 0, il = vertices.length; i < il; i ++ ) {

									v1.copy( vertices[ i ] );
									v1.applyMatrix4( node.matrixWorld );

									scope.expandByPoint( v1 );

								}

							} else if ( geometry instanceof THREE.BufferGeometry ) {

								var attribute = geometry.attributes.position;

								if ( attribute !== undefined ) {

									var array, offset, stride;

									if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

										array = attribute.data.array;
										offset = attribute.offset;
										stride = attribute.data.stride;

									} else {

										array = attribute.array;
										offset = 0;
										stride = 3;

									}

									for ( var i = offset, il = array.length; i < il; i += stride ) {

										v1.fromArray( array, i );
										v1.applyMatrix4( node.matrixWorld );

										scope.expandByPoint( v1 );

									}

								}

							}

						}

					} );

					return this;

				};

			}(),

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( box ) {

				this.min.copy( box.min );
				this.max.copy( box.max );

				return this;

			},

			makeEmpty: function () {

				this.min.x = this.min.y = this.min.z = + Infinity;
				this.max.x = this.max.y = this.max.z = - Infinity;

				return this;

			},

			isEmpty: function () {

				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

			},

			center: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();
				return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

			},

			size: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();
				return result.subVectors( this.max, this.min );

			},

			expandByPoint: function ( point ) {

				this.min.min( point );
				this.max.max( point );

				return this;

			},

			expandByVector: function ( vector ) {

				this.min.sub( vector );
				this.max.add( vector );

				return this;

			},

			expandByScalar: function ( scalar ) {

				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );

				return this;

			},

			containsPoint: function ( point ) {

				if ( point.x < this.min.x || point.x > this.max.x ||
						 point.y < this.min.y || point.y > this.max.y ||
						 point.z < this.min.z || point.z > this.max.z ) {

					return false;

				}

				return true;

			},

			containsBox: function ( box ) {

				if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
					 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
					 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

					return true;

				}

				return false;

			},

			getParameter: function ( point, optionalTarget ) {

				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.

				var result = optionalTarget || new THREE.Vector3();

				return result.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y ),
					( point.z - this.min.z ) / ( this.max.z - this.min.z )
				);

			},

			intersectsBox: function ( box ) {

				// using 6 splitting planes to rule out intersections.

				if ( box.max.x < this.min.x || box.min.x > this.max.x ||
						 box.max.y < this.min.y || box.min.y > this.max.y ||
						 box.max.z < this.min.z || box.min.z > this.max.z ) {

					return false;

				}

				return true;

			},

			intersectsSphere: ( function () {

				var closestPoint;

				return function intersectsSphere( sphere ) {

					if ( closestPoint === undefined ) closestPoint = new THREE.Vector3();

					// Find the point on the AABB closest to the sphere center.
					this.clampPoint( sphere.center, closestPoint );

					// If that point is inside the sphere, the AABB and sphere intersect.
					return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

				};

			} )(),

			intersectsPlane: function ( plane ) {

				// We compute the minimum and maximum dot product values. If those values
				// are on the same side (back or front) of the plane, then there is no intersection.

				var min, max;

				if ( plane.normal.x > 0 ) {

					min = plane.normal.x * this.min.x;
					max = plane.normal.x * this.max.x;

				} else {

					min = plane.normal.x * this.max.x;
					max = plane.normal.x * this.min.x;

				}

				if ( plane.normal.y > 0 ) {

					min += plane.normal.y * this.min.y;
					max += plane.normal.y * this.max.y;

				} else {

					min += plane.normal.y * this.max.y;
					max += plane.normal.y * this.min.y;

				}

				if ( plane.normal.z > 0 ) {

					min += plane.normal.z * this.min.z;
					max += plane.normal.z * this.max.z;

				} else {

					min += plane.normal.z * this.max.z;
					max += plane.normal.z * this.min.z;

				}

				return ( min <= plane.constant && max >= plane.constant );

			},

			clampPoint: function ( point, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();
				return result.copy( point ).clamp( this.min, this.max );

			},

			distanceToPoint: function () {

				var v1 = new THREE.Vector3();

				return function distanceToPoint( point ) {

					var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
					return clampedPoint.sub( point ).length();

				};

			}(),

			getBoundingSphere: function () {

				var v1 = new THREE.Vector3();

				return function getBoundingSphere( optionalTarget ) {

					var result = optionalTarget || new THREE.Sphere();

					result.center = this.center();
					result.radius = this.size( v1 ).length() * 0.5;

					return result;

				};

			}(),

			intersect: function ( box ) {

				this.min.max( box.min );
				this.max.min( box.max );

				// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
				if( this.isEmpty() ) this.makeEmpty();

				return this;

			},

			union: function ( box ) {

				this.min.min( box.min );
				this.max.max( box.max );

				return this;

			},

			applyMatrix4: function () {

				var points = [
					new THREE.Vector3(),
					new THREE.Vector3(),
					new THREE.Vector3(),
					new THREE.Vector3(),
					new THREE.Vector3(),
					new THREE.Vector3(),
					new THREE.Vector3(),
					new THREE.Vector3()
				];

				return function applyMatrix4( matrix ) {

					// transform of empty box is an empty box.
					if( this.isEmpty() ) return this;

					// NOTE: I am using a binary pattern to specify all 2^3 combinations below
					points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
					points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
					points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
					points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
					points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
					points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
					points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
					points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

					this.setFromPoints( points );

					return this;

				};

			}(),

			translate: function ( offset ) {

				this.min.add( offset );
				this.max.add( offset );

				return this;

			},

			equals: function ( box ) {

				return box.min.equals( this.min ) && box.max.equals( this.max );

			}

		};

		// File:src/math/Matrix3.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 * @author tschw
		 */

		THREE.Matrix3 = function () {

			this.elements = new Float32Array( [

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			] );

			if ( arguments.length > 0 ) {

				console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

			}

		};

		THREE.Matrix3.prototype = {

			constructor: THREE.Matrix3,

			set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

				var te = this.elements;

				te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
				te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
				te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

				return this;

			},

			identity: function () {

				this.set(

					1, 0, 0,
					0, 1, 0,
					0, 0, 1

				);

				return this;

			},

			clone: function () {

				return new this.constructor().fromArray( this.elements );

			},

			copy: function ( m ) {

				var me = m.elements;

				this.set(

					me[ 0 ], me[ 3 ], me[ 6 ],
					me[ 1 ], me[ 4 ], me[ 7 ],
					me[ 2 ], me[ 5 ], me[ 8 ]

				);

				return this;

			},

			setFromMatrix4: function( m ) {

				var me = m.elements;

				this.set(

					me[ 0 ], me[ 4 ], me[  8 ],
					me[ 1 ], me[ 5 ], me[  9 ],
					me[ 2 ], me[ 6 ], me[ 10 ]

				);

				return this;

			},

			applyToVector3Array: function () {

				var v1;

				return function applyToVector3Array( array, offset, length ) {

					if ( v1 === undefined ) v1 = new THREE.Vector3();
					if ( offset === undefined ) offset = 0;
					if ( length === undefined ) length = array.length;

					for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

						v1.fromArray( array, j );
						v1.applyMatrix3( this );
						v1.toArray( array, j );

					}

					return array;

				};

			}(),

			applyToBuffer: function () {

				var v1;

				return function applyToBuffer( buffer, offset, length ) {

					if ( v1 === undefined ) v1 = new THREE.Vector3();
					if ( offset === undefined ) offset = 0;
					if ( length === undefined ) length = buffer.length / buffer.itemSize;

					for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

						v1.x = buffer.getX( j );
						v1.y = buffer.getY( j );
						v1.z = buffer.getZ( j );

						v1.applyMatrix3( this );

						buffer.setXYZ( v1.x, v1.y, v1.z );

					}

					return buffer;

				};

			}(),

			multiplyScalar: function ( s ) {

				var te = this.elements;

				te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
				te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
				te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

				return this;

			},

			determinant: function () {

				var te = this.elements;

				var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
					d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
					g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

				return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

			},

			getInverse: function ( matrix, throwOnDegenerate ) {

				if ( matrix instanceof THREE.Matrix4 ) {

					console.error( "THREE.Matrix3.getInverse no longer takes a Matrix4 argument." );

				}

				var me = matrix.elements,
					te = this.elements,

					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
					n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
					n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

					t11 = n33 * n22 - n32 * n23,
					t12 = n32 * n13 - n33 * n12,
					t13 = n23 * n12 - n22 * n13,

					det = n11 * t11 + n21 * t12 + n31 * t13;

				if ( det === 0 ) {

					var msg = "THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";

					if ( throwOnDegenerate || false ) {

						throw new Error( msg );

					} else {

						console.warn( msg );

					}

					return this.identity();
				}
				
				var detInv = 1 / det;

				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
				te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

				te[ 3 ] = t12 * detInv;
				te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
				te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

				te[ 6 ] = t13 * detInv;
				te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
				te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

				return this;

			},

			transpose: function () {

				var tmp, m = this.elements;

				tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
				tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
				tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

				return this;

			},

			flattenToArrayOffset: function ( array, offset ) {

				console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
						"- just use .toArray instead." );

				return this.toArray( array, offset );

			},

			getNormalMatrix: function ( matrix4 ) {

				return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

			},

			transposeIntoArray: function ( r ) {

				var m = this.elements;

				r[ 0 ] = m[ 0 ];
				r[ 1 ] = m[ 3 ];
				r[ 2 ] = m[ 6 ];
				r[ 3 ] = m[ 1 ];
				r[ 4 ] = m[ 4 ];
				r[ 5 ] = m[ 7 ];
				r[ 6 ] = m[ 2 ];
				r[ 7 ] = m[ 5 ];
				r[ 8 ] = m[ 8 ];

				return this;

			},

			fromArray: function ( array ) {

				this.elements.set( array );

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				var te = this.elements;

				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];

				array[ offset + 3 ] = te[ 3 ];
				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];

				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];
				array[ offset + 8 ]  = te[ 8 ];

				return array;

			}

		};

		// File:src/math/Matrix4.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author jordi_ros / http://plattsoft.com
		 * @author D1plo1d / http://github.com/D1plo1d
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author timknip / http://www.floorplanner.com/
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */

		THREE.Matrix4 = function () {

			this.elements = new Float32Array( [

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			] );

			if ( arguments.length > 0 ) {

				console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

			}

		};

		THREE.Matrix4.prototype = {

			constructor: THREE.Matrix4,

			set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

				var te = this.elements;

				te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
				te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
				te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
				te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

				return this;

			},

			identity: function () {

				this.set(

					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1

				);

				return this;

			},

			clone: function () {

				return new THREE.Matrix4().fromArray( this.elements );

			},

			copy: function ( m ) {

				this.elements.set( m.elements );

				return this;

			},

			copyPosition: function ( m ) {

				var te = this.elements;
				var me = m.elements;

				te[ 12 ] = me[ 12 ];
				te[ 13 ] = me[ 13 ];
				te[ 14 ] = me[ 14 ];

				return this;

			},

			extractBasis: function ( xAxis, yAxis, zAxis ) {

				xAxis.setFromMatrixColumn( this, 0 );
				yAxis.setFromMatrixColumn( this, 1 );
				zAxis.setFromMatrixColumn( this, 2 );

				return this;

			},

			makeBasis: function ( xAxis, yAxis, zAxis ) {

				this.set(
					xAxis.x, yAxis.x, zAxis.x, 0,
					xAxis.y, yAxis.y, zAxis.y, 0,
					xAxis.z, yAxis.z, zAxis.z, 0,
					0,       0,       0,       1
				);

				return this;

			},

			extractRotation: function () {

				var v1;

				return function extractRotation( m ) {

					if ( v1 === undefined ) v1 = new THREE.Vector3();

					var te = this.elements;
					var me = m.elements;

					var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
					var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
					var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

					te[ 0 ] = me[ 0 ] * scaleX;
					te[ 1 ] = me[ 1 ] * scaleX;
					te[ 2 ] = me[ 2 ] * scaleX;

					te[ 4 ] = me[ 4 ] * scaleY;
					te[ 5 ] = me[ 5 ] * scaleY;
					te[ 6 ] = me[ 6 ] * scaleY;

					te[ 8 ] = me[ 8 ] * scaleZ;
					te[ 9 ] = me[ 9 ] * scaleZ;
					te[ 10 ] = me[ 10 ] * scaleZ;

					return this;

				};

			}(),

			makeRotationFromEuler: function ( euler ) {

				if ( euler instanceof THREE.Euler === false ) {

					console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

				}

				var te = this.elements;

				var x = euler.x, y = euler.y, z = euler.z;
				var a = Math.cos( x ), b = Math.sin( x );
				var c = Math.cos( y ), d = Math.sin( y );
				var e = Math.cos( z ), f = Math.sin( z );

				if ( euler.order === 'XYZ' ) {

					var ae = a * e, af = a * f, be = b * e, bf = b * f;

					te[ 0 ] = c * e;
					te[ 4 ] = - c * f;
					te[ 8 ] = d;

					te[ 1 ] = af + be * d;
					te[ 5 ] = ae - bf * d;
					te[ 9 ] = - b * c;

					te[ 2 ] = bf - ae * d;
					te[ 6 ] = be + af * d;
					te[ 10 ] = a * c;

				} else if ( euler.order === 'YXZ' ) {

					var ce = c * e, cf = c * f, de = d * e, df = d * f;

					te[ 0 ] = ce + df * b;
					te[ 4 ] = de * b - cf;
					te[ 8 ] = a * d;

					te[ 1 ] = a * f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b;

					te[ 2 ] = cf * b - de;
					te[ 6 ] = df + ce * b;
					te[ 10 ] = a * c;

				} else if ( euler.order === 'ZXY' ) {

					var ce = c * e, cf = c * f, de = d * e, df = d * f;

					te[ 0 ] = ce - df * b;
					te[ 4 ] = - a * f;
					te[ 8 ] = de + cf * b;

					te[ 1 ] = cf + de * b;
					te[ 5 ] = a * e;
					te[ 9 ] = df - ce * b;

					te[ 2 ] = - a * d;
					te[ 6 ] = b;
					te[ 10 ] = a * c;

				} else if ( euler.order === 'ZYX' ) {

					var ae = a * e, af = a * f, be = b * e, bf = b * f;

					te[ 0 ] = c * e;
					te[ 4 ] = be * d - af;
					te[ 8 ] = ae * d + bf;

					te[ 1 ] = c * f;
					te[ 5 ] = bf * d + ae;
					te[ 9 ] = af * d - be;

					te[ 2 ] = - d;
					te[ 6 ] = b * c;
					te[ 10 ] = a * c;

				} else if ( euler.order === 'YZX' ) {

					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

					te[ 0 ] = c * e;
					te[ 4 ] = bd - ac * f;
					te[ 8 ] = bc * f + ad;

					te[ 1 ] = f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b * e;

					te[ 2 ] = - d * e;
					te[ 6 ] = ad * f + bc;
					te[ 10 ] = ac - bd * f;

				} else if ( euler.order === 'XZY' ) {

					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

					te[ 0 ] = c * e;
					te[ 4 ] = - f;
					te[ 8 ] = d * e;

					te[ 1 ] = ac * f + bd;
					te[ 5 ] = a * e;
					te[ 9 ] = ad * f - bc;

					te[ 2 ] = bc * f - ad;
					te[ 6 ] = b * e;
					te[ 10 ] = bd * f + ac;

				}

				// last column
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;

				// bottom row
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;

				return this;

			},

			makeRotationFromQuaternion: function ( q ) {

				var te = this.elements;

				var x = q.x, y = q.y, z = q.z, w = q.w;
				var x2 = x + x, y2 = y + y, z2 = z + z;
				var xx = x * x2, xy = x * y2, xz = x * z2;
				var yy = y * y2, yz = y * z2, zz = z * z2;
				var wx = w * x2, wy = w * y2, wz = w * z2;

				te[ 0 ] = 1 - ( yy + zz );
				te[ 4 ] = xy - wz;
				te[ 8 ] = xz + wy;

				te[ 1 ] = xy + wz;
				te[ 5 ] = 1 - ( xx + zz );
				te[ 9 ] = yz - wx;

				te[ 2 ] = xz - wy;
				te[ 6 ] = yz + wx;
				te[ 10 ] = 1 - ( xx + yy );

				// last column
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;

				// bottom row
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;

				return this;

			},

			lookAt: function () {

				var x, y, z;

				return function lookAt( eye, target, up ) {

					if ( x === undefined ) {

						x = new THREE.Vector3();
						y = new THREE.Vector3();
						z = new THREE.Vector3();

					}

					var te = this.elements;

					z.subVectors( eye, target ).normalize();

					if ( z.lengthSq() === 0 ) {

						z.z = 1;

					}

					x.crossVectors( up, z ).normalize();

					if ( x.lengthSq() === 0 ) {

						z.z += 0.0001;
						x.crossVectors( up, z ).normalize();

					}

					y.crossVectors( z, x );


					te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
					te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
					te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

					return this;

				};

			}(),

			multiply: function ( m, n ) {

				if ( n !== undefined ) {

					console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
					return this.multiplyMatrices( m, n );

				}

				return this.multiplyMatrices( this, m );

			},

			premultiply: function ( m ) {

				return this.multiplyMatrices( m, this );

			},

			multiplyMatrices: function ( a, b ) {

				var ae = a.elements;
				var be = b.elements;
				var te = this.elements;

				var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
				var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
				var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
				var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

				var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
				var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
				var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
				var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

				te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
				te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
				te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
				te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

				te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
				te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
				te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
				te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

				te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
				te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
				te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
				te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

				te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
				te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
				te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
				te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

				return this;

			},

			multiplyToArray: function ( a, b, r ) {

				var te = this.elements;

				this.multiplyMatrices( a, b );

				r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
				r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
				r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
				r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

				return this;

			},

			multiplyScalar: function ( s ) {

				var te = this.elements;

				te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
				te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
				te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
				te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

				return this;

			},

			applyToVector3Array: function () {

				var v1;

				return function applyToVector3Array( array, offset, length ) {

					if ( v1 === undefined ) v1 = new THREE.Vector3();
					if ( offset === undefined ) offset = 0;
					if ( length === undefined ) length = array.length;

					for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {

						v1.fromArray( array, j );
						v1.applyMatrix4( this );
						v1.toArray( array, j );

					}

					return array;

				};

			}(),

			applyToBuffer: function () {

				var v1;

				return function applyToBuffer( buffer, offset, length ) {

					if ( v1 === undefined ) v1 = new THREE.Vector3();
					if ( offset === undefined ) offset = 0;
					if ( length === undefined ) length = buffer.length / buffer.itemSize;

					for ( var i = 0, j = offset; i < length; i ++, j ++ ) {

						v1.x = buffer.getX( j );
						v1.y = buffer.getY( j );
						v1.z = buffer.getZ( j );

						v1.applyMatrix4( this );

						buffer.setXYZ( v1.x, v1.y, v1.z );

					}

					return buffer;

				};

			}(),

			determinant: function () {

				var te = this.elements;

				var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
				var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
				var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
				var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

				//TODO: make this more efficient
				//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

				return (
					n41 * (
						+ n14 * n23 * n32
						 - n13 * n24 * n32
						 - n14 * n22 * n33
						 + n12 * n24 * n33
						 + n13 * n22 * n34
						 - n12 * n23 * n34
					) +
					n42 * (
						+ n11 * n23 * n34
						 - n11 * n24 * n33
						 + n14 * n21 * n33
						 - n13 * n21 * n34
						 + n13 * n24 * n31
						 - n14 * n23 * n31
					) +
					n43 * (
						+ n11 * n24 * n32
						 - n11 * n22 * n34
						 - n14 * n21 * n32
						 + n12 * n21 * n34
						 + n14 * n22 * n31
						 - n12 * n24 * n31
					) +
					n44 * (
						- n13 * n22 * n31
						 - n11 * n23 * n32
						 + n11 * n22 * n33
						 + n13 * n21 * n32
						 - n12 * n21 * n33
						 + n12 * n23 * n31
					)

				);

			},

			transpose: function () {

				var te = this.elements;
				var tmp;

				tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
				tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
				tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

				tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
				tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
				tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

				return this;

			},

			flattenToArrayOffset: function ( array, offset ) {

				console.warn( "THREE.Matrix3: .flattenToArrayOffset is deprecated " +
						"- just use .toArray instead." );

				return this.toArray( array, offset );

			},

			getPosition: function () {

				var v1;

				return function getPosition() {

					if ( v1 === undefined ) v1 = new THREE.Vector3();
					console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

					return v1.setFromMatrixColumn( this, 3 );

				};

			}(),

			setPosition: function ( v ) {

				var te = this.elements;

				te[ 12 ] = v.x;
				te[ 13 ] = v.y;
				te[ 14 ] = v.z;

				return this;

			},

			getInverse: function ( m, throwOnDegenerate ) {

				// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
				var te = this.elements,
					me = m.elements,

					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
					n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
					n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
					n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

					t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
					t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
					t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
					t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

				var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

				if ( det === 0 ) {

					var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";

					if ( throwOnDegenerate || false ) {

						throw new Error( msg );

					} else {

						console.warn( msg );

					}

					return this.identity();

				}
				
				var detInv = 1 / det;

				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
				te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
				te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

				te[ 4 ] = t12 * detInv;
				te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
				te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
				te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

				te[ 8 ] = t13 * detInv;
				te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
				te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
				te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

				te[ 12 ] = t14 * detInv;
				te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
				te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
				te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

				return this;

			},

			scale: function ( v ) {

				var te = this.elements;
				var x = v.x, y = v.y, z = v.z;

				te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
				te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
				te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
				te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

				return this;

			},

			getMaxScaleOnAxis: function () {

				var te = this.elements;

				var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
				var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
				var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

				return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

			},

			makeTranslation: function ( x, y, z ) {

				this.set(

					1, 0, 0, x,
					0, 1, 0, y,
					0, 0, 1, z,
					0, 0, 0, 1

				);

				return this;

			},

			makeRotationX: function ( theta ) {

				var c = Math.cos( theta ), s = Math.sin( theta );

				this.set(

					1, 0,  0, 0,
					0, c, - s, 0,
					0, s,  c, 0,
					0, 0,  0, 1

				);

				return this;

			},

			makeRotationY: function ( theta ) {

				var c = Math.cos( theta ), s = Math.sin( theta );

				this.set(

					 c, 0, s, 0,
					 0, 1, 0, 0,
					- s, 0, c, 0,
					 0, 0, 0, 1

				);

				return this;

			},

			makeRotationZ: function ( theta ) {

				var c = Math.cos( theta ), s = Math.sin( theta );

				this.set(

					c, - s, 0, 0,
					s,  c, 0, 0,
					0,  0, 1, 0,
					0,  0, 0, 1

				);

				return this;

			},

			makeRotationAxis: function ( axis, angle ) {

				// Based on http://www.gamedev.net/reference/articles/article1199.asp

				var c = Math.cos( angle );
				var s = Math.sin( angle );
				var t = 1 - c;
				var x = axis.x, y = axis.y, z = axis.z;
				var tx = t * x, ty = t * y;

				this.set(

					tx * x + c, tx * y - s * z, tx * z + s * y, 0,
					tx * y + s * z, ty * y + c, ty * z - s * x, 0,
					tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
					0, 0, 0, 1

				);

				 return this;

			},

			makeScale: function ( x, y, z ) {

				this.set(

					x, 0, 0, 0,
					0, y, 0, 0,
					0, 0, z, 0,
					0, 0, 0, 1

				);

				return this;

			},

			compose: function ( position, quaternion, scale ) {

				this.makeRotationFromQuaternion( quaternion );
				this.scale( scale );
				this.setPosition( position );

				return this;

			},

			decompose: function () {

				var vector, matrix;

				return function decompose( position, quaternion, scale ) {

					if ( vector === undefined ) {

						vector = new THREE.Vector3();
						matrix = new THREE.Matrix4();

					}

					var te = this.elements;

					var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
					var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
					var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

					// if determine is negative, we need to invert one scale
					var det = this.determinant();
					if ( det < 0 ) {

						sx = - sx;

					}

					position.x = te[ 12 ];
					position.y = te[ 13 ];
					position.z = te[ 14 ];

					// scale the rotation part

					matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

					var invSX = 1 / sx;
					var invSY = 1 / sy;
					var invSZ = 1 / sz;

					matrix.elements[ 0 ] *= invSX;
					matrix.elements[ 1 ] *= invSX;
					matrix.elements[ 2 ] *= invSX;

					matrix.elements[ 4 ] *= invSY;
					matrix.elements[ 5 ] *= invSY;
					matrix.elements[ 6 ] *= invSY;

					matrix.elements[ 8 ] *= invSZ;
					matrix.elements[ 9 ] *= invSZ;
					matrix.elements[ 10 ] *= invSZ;

					quaternion.setFromRotationMatrix( matrix );

					scale.x = sx;
					scale.y = sy;
					scale.z = sz;

					return this;

				};

			}(),

			makeFrustum: function ( left, right, bottom, top, near, far ) {

				var te = this.elements;
				var x = 2 * near / ( right - left );
				var y = 2 * near / ( top - bottom );

				var a = ( right + left ) / ( right - left );
				var b = ( top + bottom ) / ( top - bottom );
				var c = - ( far + near ) / ( far - near );
				var d = - 2 * far * near / ( far - near );

				te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
				te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

				return this;

			},

			makePerspective: function ( fov, aspect, near, far ) {

				var ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );
				var ymin = - ymax;
				var xmin = ymin * aspect;
				var xmax = ymax * aspect;

				return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

			},

			makeOrthographic: function ( left, right, top, bottom, near, far ) {

				var te = this.elements;
				var w = 1.0 / ( right - left );
				var h = 1.0 / ( top - bottom );
				var p = 1.0 / ( far - near );

				var x = ( right + left ) * w;
				var y = ( top + bottom ) * h;
				var z = ( far + near ) * p;

				te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
				te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

				return this;

			},

			equals: function ( matrix ) {

				var te = this.elements;
				var me = matrix.elements;

				for ( var i = 0; i < 16; i ++ ) {

					if ( te[ i ] !== me[ i ] ) return false;

				}

				return true;

			},

			fromArray: function ( array ) {

				this.elements.set( array );

				return this;

			},

			toArray: function ( array, offset ) {

				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;

				var te = this.elements;

				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];
				array[ offset + 3 ] = te[ 3 ];

				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];
				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];

				array[ offset + 8 ]  = te[ 8 ];
				array[ offset + 9 ]  = te[ 9 ];
				array[ offset + 10 ] = te[ 10 ];
				array[ offset + 11 ] = te[ 11 ];

				array[ offset + 12 ] = te[ 12 ];
				array[ offset + 13 ] = te[ 13 ];
				array[ offset + 14 ] = te[ 14 ];
				array[ offset + 15 ] = te[ 15 ];

				return array;

			}

		};

		// File:src/math/Ray.js

		/**
		 * @author bhouston / http://clara.io
		 */

		THREE.Ray = function ( origin, direction ) {

			this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
			this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();

		};

		THREE.Ray.prototype = {

			constructor: THREE.Ray,

			set: function ( origin, direction ) {

				this.origin.copy( origin );
				this.direction.copy( direction );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( ray ) {

				this.origin.copy( ray.origin );
				this.direction.copy( ray.direction );

				return this;

			},

			at: function ( t, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

			},

			lookAt: function ( v ) {

				this.direction.copy( v ).sub( this.origin ).normalize();

				return this;

			},

			recast: function () {

				var v1 = new THREE.Vector3();

				return function recast( t ) {

					this.origin.copy( this.at( t, v1 ) );

					return this;

				};

			}(),

			closestPointToPoint: function ( point, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();
				result.subVectors( point, this.origin );
				var directionDistance = result.dot( this.direction );

				if ( directionDistance < 0 ) {

					return result.copy( this.origin );

				}

				return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			},

			distanceToPoint: function ( point ) {

				return Math.sqrt( this.distanceSqToPoint( point ) );

			},

			distanceSqToPoint: function () {

				var v1 = new THREE.Vector3();

				return function distanceSqToPoint( point ) {

					var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

					// point behind the ray

					if ( directionDistance < 0 ) {

						return this.origin.distanceToSquared( point );

					}

					v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

					return v1.distanceToSquared( point );

				};

			}(),

			distanceSqToSegment: function () {

				var segCenter = new THREE.Vector3();
				var segDir = new THREE.Vector3();
				var diff = new THREE.Vector3();

				return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

					// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
					// It returns the min distance between the ray and the segment
					// defined by v0 and v1
					// It can also set two optional targets :
					// - The closest point on the ray
					// - The closest point on the segment

					segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
					segDir.copy( v1 ).sub( v0 ).normalize();
					diff.copy( this.origin ).sub( segCenter );

					var segExtent = v0.distanceTo( v1 ) * 0.5;
					var a01 = - this.direction.dot( segDir );
					var b0 = diff.dot( this.direction );
					var b1 = - diff.dot( segDir );
					var c = diff.lengthSq();
					var det = Math.abs( 1 - a01 * a01 );
					var s0, s1, sqrDist, extDet;

					if ( det > 0 ) {

						// The ray and segment are not parallel.

						s0 = a01 * b1 - b0;
						s1 = a01 * b0 - b1;
						extDet = segExtent * det;

						if ( s0 >= 0 ) {

							if ( s1 >= - extDet ) {

								if ( s1 <= extDet ) {

									// region 0
									// Minimum at interior points of ray and segment.

									var invDet = 1 / det;
									s0 *= invDet;
									s1 *= invDet;
									sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

								} else {

									// region 1

									s1 = segExtent;
									s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
									sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

								}

							} else {

								// region 5

								s1 = - segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						} else {

							if ( s1 <= - extDet ) {

								// region 4

								s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
								s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							} else if ( s1 <= extDet ) {

								// region 3

								s0 = 0;
								s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = s1 * ( s1 + 2 * b1 ) + c;

							} else {

								// region 2

								s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
								s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

							}

						}

					} else {

						// Ray and segment are parallel.

						s1 = ( a01 > 0 ) ? - segExtent : segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

					if ( optionalPointOnRay ) {

						optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

					}

					if ( optionalPointOnSegment ) {

						optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

					}

					return sqrDist;

				};

			}(),

			intersectSphere: function () {

				var v1 = new THREE.Vector3();

				return function intersectSphere( sphere, optionalTarget ) {

					v1.subVectors( sphere.center, this.origin );
					var tca = v1.dot( this.direction );
					var d2 = v1.dot( v1 ) - tca * tca;
					var radius2 = sphere.radius * sphere.radius;

					if ( d2 > radius2 ) return null;

					var thc = Math.sqrt( radius2 - d2 );

					// t0 = first intersect point - entrance on front of sphere
					var t0 = tca - thc;

					// t1 = second intersect point - exit point on back of sphere
					var t1 = tca + thc;

					// test to see if both t0 and t1 are behind the ray - if so, return null
					if ( t0 < 0 && t1 < 0 ) return null;

					// test to see if t0 is behind the ray:
					// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
					// in order to always return an intersect point that is in front of the ray.
					if ( t0 < 0 ) return this.at( t1, optionalTarget );

					// else t0 is in front of the ray, so return the first collision point scaled by t0
					return this.at( t0, optionalTarget );

				};

			}(),

			intersectsSphere: function ( sphere ) {

				return this.distanceToPoint( sphere.center ) <= sphere.radius;

			},

			distanceToPlane: function ( plane ) {

				var denominator = plane.normal.dot( this.direction );

				if ( denominator === 0 ) {

					// line is coplanar, return origin
					if ( plane.distanceToPoint( this.origin ) === 0 ) {

						return 0;

					}

					// Null is preferable to undefined since undefined means.... it is undefined

					return null;

				}

				var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

				// Return if the ray never intersects the plane

				return t >= 0 ? t :  null;

			},

			intersectPlane: function ( plane, optionalTarget ) {

				var t = this.distanceToPlane( plane );

				if ( t === null ) {

					return null;

				}

				return this.at( t, optionalTarget );

			},



			intersectsPlane: function ( plane ) {

				// check if the ray lies on the plane first

				var distToPoint = plane.distanceToPoint( this.origin );

				if ( distToPoint === 0 ) {

					return true;

				}

				var denominator = plane.normal.dot( this.direction );

				if ( denominator * distToPoint < 0 ) {

					return true;

				}

				// ray origin is behind the plane (and is pointing behind it)

				return false;

			},

			intersectBox: function ( box, optionalTarget ) {

				var tmin, tmax, tymin, tymax, tzmin, tzmax;

				var invdirx = 1 / this.direction.x,
					invdiry = 1 / this.direction.y,
					invdirz = 1 / this.direction.z;

				var origin = this.origin;

				if ( invdirx >= 0 ) {

					tmin = ( box.min.x - origin.x ) * invdirx;
					tmax = ( box.max.x - origin.x ) * invdirx;

				} else {

					tmin = ( box.max.x - origin.x ) * invdirx;
					tmax = ( box.min.x - origin.x ) * invdirx;

				}

				if ( invdiry >= 0 ) {

					tymin = ( box.min.y - origin.y ) * invdiry;
					tymax = ( box.max.y - origin.y ) * invdiry;

				} else {

					tymin = ( box.max.y - origin.y ) * invdiry;
					tymax = ( box.min.y - origin.y ) * invdiry;

				}

				if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

				// These lines also handle the case where tmin or tmax is NaN
				// (result of 0 * Infinity). x !== x returns true if x is NaN

				if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

				if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

				if ( invdirz >= 0 ) {

					tzmin = ( box.min.z - origin.z ) * invdirz;
					tzmax = ( box.max.z - origin.z ) * invdirz;

				} else {

					tzmin = ( box.max.z - origin.z ) * invdirz;
					tzmax = ( box.min.z - origin.z ) * invdirz;

				}

				if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

				if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

				if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

				//return point closest to the ray (positive side)

				if ( tmax < 0 ) return null;

				return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

			},

			intersectsBox: ( function () {

				var v = new THREE.Vector3();

				return function intersectsBox( box ) {

					return this.intersectBox( box, v ) !== null;

				};

			} )(),

			intersectTriangle: function () {

				// Compute the offset origin, edges, and normal.
				var diff = new THREE.Vector3();
				var edge1 = new THREE.Vector3();
				var edge2 = new THREE.Vector3();
				var normal = new THREE.Vector3();

				return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

					// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

					edge1.subVectors( b, a );
					edge2.subVectors( c, a );
					normal.crossVectors( edge1, edge2 );

					// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
					// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
					//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
					//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
					//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
					var DdN = this.direction.dot( normal );
					var sign;

					if ( DdN > 0 ) {

						if ( backfaceCulling ) return null;
						sign = 1;

					} else if ( DdN < 0 ) {

						sign = - 1;
						DdN = - DdN;

					} else {

						return null;

					}

					diff.subVectors( this.origin, a );
					var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

					// b1 < 0, no intersection
					if ( DdQxE2 < 0 ) {

						return null;

					}

					var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

					// b2 < 0, no intersection
					if ( DdE1xQ < 0 ) {

						return null;

					}

					// b1+b2 > 1, no intersection
					if ( DdQxE2 + DdE1xQ > DdN ) {

						return null;

					}

					// Line intersects triangle, check if ray does.
					var QdN = - sign * diff.dot( normal );

					// t < 0, no intersection
					if ( QdN < 0 ) {

						return null;

					}

					// Ray intersects triangle.
					return this.at( QdN / DdN, optionalTarget );

				};

			}(),

			applyMatrix4: function ( matrix4 ) {

				this.direction.add( this.origin ).applyMatrix4( matrix4 );
				this.origin.applyMatrix4( matrix4 );
				this.direction.sub( this.origin );
				this.direction.normalize();

				return this;

			},

			equals: function ( ray ) {

				return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

			}

		};

		// File:src/math/Sphere.js

		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Sphere = function ( center, radius ) {

			this.center = ( center !== undefined ) ? center : new THREE.Vector3();
			this.radius = ( radius !== undefined ) ? radius : 0;

		};

		THREE.Sphere.prototype = {

			constructor: THREE.Sphere,

			set: function ( center, radius ) {

				this.center.copy( center );
				this.radius = radius;

				return this;

			},

			setFromPoints: function () {

				var box = new THREE.Box3();

				return function setFromPoints( points, optionalCenter ) {

					var center = this.center;

					if ( optionalCenter !== undefined ) {

						center.copy( optionalCenter );

					} else {

						box.setFromPoints( points ).center( center );

					}

					var maxRadiusSq = 0;

					for ( var i = 0, il = points.length; i < il; i ++ ) {

						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

					}

					this.radius = Math.sqrt( maxRadiusSq );

					return this;

				};

			}(),

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( sphere ) {

				this.center.copy( sphere.center );
				this.radius = sphere.radius;

				return this;

			},

			empty: function () {

				return ( this.radius <= 0 );

			},

			containsPoint: function ( point ) {

				return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

			},

			distanceToPoint: function ( point ) {

				return ( point.distanceTo( this.center ) - this.radius );

			},

			intersectsSphere: function ( sphere ) {

				var radiusSum = this.radius + sphere.radius;

				return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

			},

			intersectsBox: function ( box ) {

				return box.intersectsSphere( this );

			},

			intersectsPlane: function ( plane ) {

				// We use the following equation to compute the signed distance from
				// the center of the sphere to the plane.
				//
				// distance = q * n - d
				//
				// If this distance is greater than the radius of the sphere,
				// then there is no intersection.

				return Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;

			},

			clampPoint: function ( point, optionalTarget ) {

				var deltaLengthSq = this.center.distanceToSquared( point );

				var result = optionalTarget || new THREE.Vector3();

				result.copy( point );

				if ( deltaLengthSq > ( this.radius * this.radius ) ) {

					result.sub( this.center ).normalize();
					result.multiplyScalar( this.radius ).add( this.center );

				}

				return result;

			},

			getBoundingBox: function ( optionalTarget ) {

				var box = optionalTarget || new THREE.Box3();

				box.set( this.center, this.center );
				box.expandByScalar( this.radius );

				return box;

			},

			applyMatrix4: function ( matrix ) {

				this.center.applyMatrix4( matrix );
				this.radius = this.radius * matrix.getMaxScaleOnAxis();

				return this;

			},

			translate: function ( offset ) {

				this.center.add( offset );

				return this;

			},

			equals: function ( sphere ) {

				return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

			}

		};

		// File:src/math/Frustum.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / http://clara.io
		 */

		THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {

			this.planes = [

				( p0 !== undefined ) ? p0 : new THREE.Plane(),
				( p1 !== undefined ) ? p1 : new THREE.Plane(),
				( p2 !== undefined ) ? p2 : new THREE.Plane(),
				( p3 !== undefined ) ? p3 : new THREE.Plane(),
				( p4 !== undefined ) ? p4 : new THREE.Plane(),
				( p5 !== undefined ) ? p5 : new THREE.Plane()

			];

		};

		THREE.Frustum.prototype = {

			constructor: THREE.Frustum,

			set: function ( p0, p1, p2, p3, p4, p5 ) {

				var planes = this.planes;

				planes[ 0 ].copy( p0 );
				planes[ 1 ].copy( p1 );
				planes[ 2 ].copy( p2 );
				planes[ 3 ].copy( p3 );
				planes[ 4 ].copy( p4 );
				planes[ 5 ].copy( p5 );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( frustum ) {

				var planes = this.planes;

				for ( var i = 0; i < 6; i ++ ) {

					planes[ i ].copy( frustum.planes[ i ] );

				}

				return this;

			},

			setFromMatrix: function ( m ) {

				var planes = this.planes;
				var me = m.elements;
				var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
				var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
				var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
				var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

				planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
				planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
				planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
				planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
				planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
				planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

				return this;

			},

			intersectsObject: function () {

				var sphere = new THREE.Sphere();

				return function intersectsObject( object ) {

					var geometry = object.geometry;

					if ( geometry.boundingSphere === null )
						geometry.computeBoundingSphere();

					sphere.copy( geometry.boundingSphere )
						.applyMatrix4( object.matrixWorld );

					return this.intersectsSphere( sphere );

				};

			}(),

			intersectsSprite: function () {

				var sphere = new THREE.Sphere();

				return function intersectsSprite( sprite ) {

					sphere.center.set( 0, 0, 0 );
					sphere.radius = 0.7071067811865476;
					sphere.applyMatrix4( sprite.matrixWorld );

					return this.intersectsSphere( sphere );

				};

			}(),

			intersectsSphere: function ( sphere ) {

				var planes = this.planes;
				var center = sphere.center;
				var negRadius = - sphere.radius;

				for ( var i = 0; i < 6; i ++ ) {

					var distance = planes[ i ].distanceToPoint( center );

					if ( distance < negRadius ) {

						return false;

					}

				}

				return true;

			},

			intersectsBox: function () {

				var p1 = new THREE.Vector3(),
					p2 = new THREE.Vector3();

				return function intersectsBox( box ) {

					var planes = this.planes;

					for ( var i = 0; i < 6 ; i ++ ) {

						var plane = planes[ i ];

						p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
						p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
						p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
						p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
						p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
						p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

						var d1 = plane.distanceToPoint( p1 );
						var d2 = plane.distanceToPoint( p2 );

						// if both outside plane, no intersection

						if ( d1 < 0 && d2 < 0 ) {

							return false;

						}

					}

					return true;

				};

			}(),


			containsPoint: function ( point ) {

				var planes = this.planes;

				for ( var i = 0; i < 6; i ++ ) {

					if ( planes[ i ].distanceToPoint( point ) < 0 ) {

						return false;

					}

				}

				return true;

			}

		};

		// File:src/math/Plane.js

		/**
		 * @author bhouston / http://clara.io
		 */

		THREE.Plane = function ( normal, constant ) {

			this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
			this.constant = ( constant !== undefined ) ? constant : 0;

		};

		THREE.Plane.prototype = {

			constructor: THREE.Plane,

			set: function ( normal, constant ) {

				this.normal.copy( normal );
				this.constant = constant;

				return this;

			},

			setComponents: function ( x, y, z, w ) {

				this.normal.set( x, y, z );
				this.constant = w;

				return this;

			},

			setFromNormalAndCoplanarPoint: function ( normal, point ) {

				this.normal.copy( normal );
				this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

				return this;

			},

			setFromCoplanarPoints: function () {

				var v1 = new THREE.Vector3();
				var v2 = new THREE.Vector3();

				return function setFromCoplanarPoints( a, b, c ) {

					var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

					// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

					this.setFromNormalAndCoplanarPoint( normal, a );

					return this;

				};

			}(),

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( plane ) {

				this.normal.copy( plane.normal );
				this.constant = plane.constant;

				return this;

			},

			normalize: function () {

				// Note: will lead to a divide by zero if the plane is invalid.

				var inverseNormalLength = 1.0 / this.normal.length();
				this.normal.multiplyScalar( inverseNormalLength );
				this.constant *= inverseNormalLength;

				return this;

			},

			negate: function () {

				this.constant *= - 1;
				this.normal.negate();

				return this;

			},

			distanceToPoint: function ( point ) {

				return this.normal.dot( point ) + this.constant;

			},

			distanceToSphere: function ( sphere ) {

				return this.distanceToPoint( sphere.center ) - sphere.radius;

			},

			projectPoint: function ( point, optionalTarget ) {

				return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

			},

			orthoPoint: function ( point, optionalTarget ) {

				var perpendicularMagnitude = this.distanceToPoint( point );

				var result = optionalTarget || new THREE.Vector3();
				return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

			},

			intersectLine: function () {

				var v1 = new THREE.Vector3();

				return function intersectLine( line, optionalTarget ) {

					var result = optionalTarget || new THREE.Vector3();

					var direction = line.delta( v1 );

					var denominator = this.normal.dot( direction );

					if ( denominator === 0 ) {

						// line is coplanar, return origin
						if ( this.distanceToPoint( line.start ) === 0 ) {

							return result.copy( line.start );

						}

						// Unsure if this is the correct method to handle this case.
						return undefined;

					}

					var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

					if ( t < 0 || t > 1 ) {

						return undefined;

					}

					return result.copy( direction ).multiplyScalar( t ).add( line.start );

				};

			}(),

			intersectsLine: function ( line ) {

				// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

				var startSign = this.distanceToPoint( line.start );
				var endSign = this.distanceToPoint( line.end );

				return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

			},

			intersectsBox: function ( box ) {

				return box.intersectsPlane( this );

			},

			intersectsSphere: function ( sphere ) {

				return sphere.intersectsPlane( this );

			},

			coplanarPoint: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();
				return result.copy( this.normal ).multiplyScalar( - this.constant );

			},

			applyMatrix4: function () {

				var v1 = new THREE.Vector3();
				var m1 = new THREE.Matrix3();

				return function applyMatrix4( matrix, optionalNormalMatrix ) {

					var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

					// transform normal based on theory here:
					// http://www.songho.ca/opengl/gl_normaltransform.html
					var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
					var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

					// recalculate constant (like in setFromNormalAndCoplanarPoint)
					this.constant = - referencePoint.dot( normal );

					return this;

				};

			}(),

			translate: function ( offset ) {

				this.constant = this.constant - offset.dot( this.normal );

				return this;

			},

			equals: function ( plane ) {

				return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

			}

		};

		// File:src/math/Spherical.js

		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
		 *
		 * The poles (phi) are at the positive and negative y axis.
		 * The equator starts at positive z.
		 */

		THREE.Spherical = function ( radius, phi, theta ) {

			this.radius = ( radius !== undefined ) ? radius : 1.0;
			this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
			this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

			return this;

		};

		THREE.Spherical.prototype = {

			constructor: THREE.Spherical,

			set: function ( radius, phi, theta ) {

				this.radius = radius;
				this.phi = phi;
				this.theta = theta;

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( other ) {

				this.radius.copy( other.radius );
				this.phi.copy( other.phi );
				this.theta.copy( other.theta );

				return this;

			},

			// restrict phi to be betwee EPS and PI-EPS
			makeSafe: function() {

				var EPS = 0.000001;
				this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

				return this;

			},

			setFromVector3: function( vec3 ) {

				this.radius = vec3.length();

				if ( this.radius === 0 ) {

					this.theta = 0;
					this.phi = 0;

				} else {

					this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
					this.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

				}

				return this;

			},

		};

		// File:src/math/Math.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Math = {

			DEG2RAD: Math.PI / 180,
			RAD2DEG: 180 / Math.PI,

			generateUUID: function () {

				// http://www.broofa.com/Tools/Math.uuid.htm

				var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
				var uuid = new Array( 36 );
				var rnd = 0, r;

				return function generateUUID() {

					for ( var i = 0; i < 36; i ++ ) {

						if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

							uuid[ i ] = '-';

						} else if ( i === 14 ) {

							uuid[ i ] = '4';

						} else {

							if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
							r = rnd & 0xf;
							rnd = rnd >> 4;
							uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

						}

					}

					return uuid.join( '' );

				};

			}(),

			clamp: function ( value, min, max ) {

				return Math.max( min, Math.min( max, value ) );

			},

			// compute euclidian modulo of m % n
			// https://en.wikipedia.org/wiki/Modulo_operation

			euclideanModulo: function ( n, m ) {

				return ( ( n % m ) + m ) % m;

			},

			// Linear mapping from range <a1, a2> to range <b1, b2>

			mapLinear: function ( x, a1, a2, b1, b2 ) {

				return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

			},

			// http://en.wikipedia.org/wiki/Smoothstep

			smoothstep: function ( x, min, max ) {

				if ( x <= min ) return 0;
				if ( x >= max ) return 1;

				x = ( x - min ) / ( max - min );

				return x * x * ( 3 - 2 * x );

			},

			smootherstep: function ( x, min, max ) {

				if ( x <= min ) return 0;
				if ( x >= max ) return 1;

				x = ( x - min ) / ( max - min );

				return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

			},

			random16: function () {

				console.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );
				return Math.random();

			},

			// Random integer from <low, high> interval

			randInt: function ( low, high ) {

				return low + Math.floor( Math.random() * ( high - low + 1 ) );

			},

			// Random float from <low, high> interval

			randFloat: function ( low, high ) {

				return low + Math.random() * ( high - low );

			},

			// Random float from <-range/2, range/2> interval

			randFloatSpread: function ( range ) {

				return range * ( 0.5 - Math.random() );

			},

			degToRad: function ( degrees ) {

				return degrees * THREE.Math.DEG2RAD;

			},

			radToDeg: function ( radians ) {

				return radians * THREE.Math.RAD2DEG;

			},

			isPowerOfTwo: function ( value ) {

				return ( value & ( value - 1 ) ) === 0 && value !== 0;

			},

			nearestPowerOfTwo: function ( value ) {

				return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );

			},

			nextPowerOfTwo: function ( value ) {

				value --;
				value |= value >> 1;
				value |= value >> 2;
				value |= value >> 4;
				value |= value >> 8;
				value |= value >> 16;
				value ++;

				return value;

			}

		};

		// File:src/math/Spline.js

		/**
		 * Spline from Tween.js, slightly optimized (and trashed)
		 * http://sole.github.com/tween.js/examples/05_spline.html
		 *
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Spline = function ( points ) {

			this.points = points;

			var c = [], v3 = { x: 0, y: 0, z: 0 },
			point, intPoint, weight, w2, w3,
			pa, pb, pc, pd;

			this.initFromArray = function ( a ) {

				this.points = [];

				for ( var i = 0; i < a.length; i ++ ) {

					this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

				}

			};

			this.getPoint = function ( k ) {

				point = ( this.points.length - 1 ) * k;
				intPoint = Math.floor( point );
				weight = point - intPoint;

				c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
				c[ 1 ] = intPoint;
				c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
				c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

				pa = this.points[ c[ 0 ] ];
				pb = this.points[ c[ 1 ] ];
				pc = this.points[ c[ 2 ] ];
				pd = this.points[ c[ 3 ] ];

				w2 = weight * weight;
				w3 = weight * w2;

				v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
				v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
				v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

				return v3;

			};

			this.getControlPointsArray = function () {

				var i, p, l = this.points.length,
					coords = [];

				for ( i = 0; i < l; i ++ ) {

					p = this.points[ i ];
					coords[ i ] = [ p.x, p.y, p.z ];

				}

				return coords;

			};

			// approximate length by summing linear segments

			this.getLength = function ( nSubDivisions ) {

				var i, index, nSamples, position,
					point = 0, intPoint = 0, oldIntPoint = 0,
					oldPosition = new THREE.Vector3(),
					tmpVec = new THREE.Vector3(),
					chunkLengths = [],
					totalLength = 0;

				// first point has 0 length

				chunkLengths[ 0 ] = 0;

				if ( ! nSubDivisions ) nSubDivisions = 100;

				nSamples = this.points.length * nSubDivisions;

				oldPosition.copy( this.points[ 0 ] );

				for ( i = 1; i < nSamples; i ++ ) {

					index = i / nSamples;

					position = this.getPoint( index );
					tmpVec.copy( position );

					totalLength += tmpVec.distanceTo( oldPosition );

					oldPosition.copy( position );

					point = ( this.points.length - 1 ) * index;
					intPoint = Math.floor( point );

					if ( intPoint !== oldIntPoint ) {

						chunkLengths[ intPoint ] = totalLength;
						oldIntPoint = intPoint;

					}

				}

				// last point ends with total length

				chunkLengths[ chunkLengths.length ] = totalLength;

				return { chunks: chunkLengths, total: totalLength };

			};

			this.reparametrizeByArcLength = function ( samplingCoef ) {

				var i, j,
					index, indexCurrent, indexNext,
					realDistance,
					sampling, position,
					newpoints = [],
					tmpVec = new THREE.Vector3(),
					sl = this.getLength();

				newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

				for ( i = 1; i < this.points.length; i ++ ) {

					//tmpVec.copy( this.points[ i - 1 ] );
					//linearDistance = tmpVec.distanceTo( this.points[ i ] );

					realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

					sampling = Math.ceil( samplingCoef * realDistance / sl.total );

					indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
					indexNext = i / ( this.points.length - 1 );

					for ( j = 1; j < sampling - 1; j ++ ) {

						index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

						position = this.getPoint( index );
						newpoints.push( tmpVec.copy( position ).clone() );

					}

					newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

				}

				this.points = newpoints;

			};

			// Catmull-Rom

			function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

				var v0 = ( p2 - p0 ) * 0.5,
					v1 = ( p3 - p1 ) * 0.5;

				return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

			}

		};

		// File:src/math/Triangle.js

		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Triangle = function ( a, b, c ) {

			this.a = ( a !== undefined ) ? a : new THREE.Vector3();
			this.b = ( b !== undefined ) ? b : new THREE.Vector3();
			this.c = ( c !== undefined ) ? c : new THREE.Vector3();

		};

		THREE.Triangle.normal = function () {

			var v0 = new THREE.Vector3();

			return function normal( a, b, c, optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				result.subVectors( c, b );
				v0.subVectors( a, b );
				result.cross( v0 );

				var resultLengthSq = result.lengthSq();
				if ( resultLengthSq > 0 ) {

					return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

				}

				return result.set( 0, 0, 0 );

			};

		}();

		// static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
		THREE.Triangle.barycoordFromPoint = function () {

			var v0 = new THREE.Vector3();
			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();

			return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

				v0.subVectors( c, a );
				v1.subVectors( b, a );
				v2.subVectors( point, a );

				var dot00 = v0.dot( v0 );
				var dot01 = v0.dot( v1 );
				var dot02 = v0.dot( v2 );
				var dot11 = v1.dot( v1 );
				var dot12 = v1.dot( v2 );

				var denom = ( dot00 * dot11 - dot01 * dot01 );

				var result = optionalTarget || new THREE.Vector3();

				// collinear or singular triangle
				if ( denom === 0 ) {

					// arbitrary location outside of triangle?
					// not sure if this is the best idea, maybe should be returning undefined
					return result.set( - 2, - 1, - 1 );

				}

				var invDenom = 1 / denom;
				var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
				var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

				// barycentric coordinates must always sum to 1
				return result.set( 1 - u - v, v, u );

			};

		}();

		THREE.Triangle.containsPoint = function () {

			var v1 = new THREE.Vector3();

			return function containsPoint( point, a, b, c ) {

				var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );

				return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

			};

		}();

		THREE.Triangle.prototype = {

			constructor: THREE.Triangle,

			set: function ( a, b, c ) {

				this.a.copy( a );
				this.b.copy( b );
				this.c.copy( c );

				return this;

			},

			setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

				this.a.copy( points[ i0 ] );
				this.b.copy( points[ i1 ] );
				this.c.copy( points[ i2 ] );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( triangle ) {

				this.a.copy( triangle.a );
				this.b.copy( triangle.b );
				this.c.copy( triangle.c );

				return this;

			},

			area: function () {

				var v0 = new THREE.Vector3();
				var v1 = new THREE.Vector3();

				return function area() {

					v0.subVectors( this.c, this.b );
					v1.subVectors( this.a, this.b );

					return v0.cross( v1 ).length() * 0.5;

				};

			}(),

			midpoint: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();
				return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

			},

			normal: function ( optionalTarget ) {

				return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );

			},

			plane: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Plane();

				return result.setFromCoplanarPoints( this.a, this.b, this.c );

			},

			barycoordFromPoint: function ( point, optionalTarget ) {

				return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

			},

			containsPoint: function ( point ) {

				return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );

			},

			closestPointToPoint: function () {

				var plane, edgeList, projectedPoint, closestPoint;

				return function closestPointToPoint( point, optionalTarget ) {

					if ( plane === undefined ) {

						plane = new THREE.Plane();
						edgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];
						projectedPoint = new THREE.Vector3();
						closestPoint = new THREE.Vector3();

					}

					var result = optionalTarget || new THREE.Vector3();
					var minDistance = Infinity;

					// project the point onto the plane of the triangle

					plane.setFromCoplanarPoints( this.a, this.b, this.c );
					plane.projectPoint( point, projectedPoint );

					// check if the projection lies within the triangle

					if( this.containsPoint( projectedPoint ) === true ) {

						// if so, this is the closest point

						result.copy( projectedPoint );

					} else {

						// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

						edgeList[ 0 ].set( this.a, this.b );
						edgeList[ 1 ].set( this.b, this.c );
						edgeList[ 2 ].set( this.c, this.a );

						for( var i = 0; i < edgeList.length; i ++ ) {

							edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

							var distance = projectedPoint.distanceToSquared( closestPoint );

							if( distance < minDistance ) {

								minDistance = distance;

								result.copy( closestPoint );

							}

						}

					}

					return result;

				};

			}(),

			equals: function ( triangle ) {

				return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

			}

		};

		// File:src/math/Interpolant.js

		/**
		 * Abstract base class of interpolants over parametric samples.
		 *
		 * The parameter domain is one dimensional, typically the time or a path
		 * along a curve defined by the data.
		 *
		 * The sample values can have any dimensionality and derived classes may
		 * apply special interpretations to the data.
		 *
		 * This class provides the interval seek in a Template Method, deferring
		 * the actual interpolation to derived classes.
		 *
		 * Time complexity is O(1) for linear access crossing at most two points
		 * and O(log N) for random access, where N is the number of positions.
		 *
		 * References:
		 *
		 * 		http://www.oodesign.com/template-method-pattern.html
		 *
		 * @author tschw
		 */

		THREE.Interpolant = function(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			this.parameterPositions = parameterPositions;
			this._cachedIndex = 0;

			this.resultBuffer = resultBuffer !== undefined ?
					resultBuffer : new sampleValues.constructor( sampleSize );
			this.sampleValues = sampleValues;
			this.valueSize = sampleSize;

		};

		THREE.Interpolant.prototype = {

			constructor: THREE.Interpolant,

			evaluate: function( t ) {

				var pp = this.parameterPositions,
					i1 = this._cachedIndex,

					t1 = pp[   i1   ],
					t0 = pp[ i1 - 1 ];

				validate_interval: {

					seek: {

						var right;

						linear_scan: {
		//- See http://jsperf.com/comparison-to-undefined/3
		//- slower code:
		//-
		//- 				if ( t >= t1 || t1 === undefined ) {
							forward_scan: if ( ! ( t < t1 ) ) {

								for ( var giveUpAt = i1 + 2; ;) {

									if ( t1 === undefined ) {

										if ( t < t0 ) break forward_scan;

										// after end

										i1 = pp.length;
										this._cachedIndex = i1;
										return this.afterEnd_( i1 - 1, t, t0 );

									}

									if ( i1 === giveUpAt ) break; // this loop

									t0 = t1;
									t1 = pp[ ++ i1 ];

									if ( t < t1 ) {

										// we have arrived at the sought interval
										break seek;

									}

								}

								// prepare binary search on the right side of the index
								right = pp.length;
								break linear_scan;

							}

		//- slower code:
		//-					if ( t < t0 || t0 === undefined ) {
							if ( ! ( t >= t0 ) ) {

								// looping?

								var t1global = pp[ 1 ];

								if ( t < t1global ) {

									i1 = 2; // + 1, using the scan for the details
									t0 = t1global;

								}

								// linear reverse scan

								for ( var giveUpAt = i1 - 2; ;) {

									if ( t0 === undefined ) {

										// before start

										this._cachedIndex = 0;
										return this.beforeStart_( 0, t, t1 );

									}

									if ( i1 === giveUpAt ) break; // this loop

									t1 = t0;
									t0 = pp[ -- i1 - 1 ];

									if ( t >= t0 ) {

										// we have arrived at the sought interval
										break seek;

									}

								}

								// prepare binary search on the left side of the index
								right = i1;
								i1 = 0;
								break linear_scan;

							}

							// the interval is valid

							break validate_interval;

						} // linear scan

						// binary search

						while ( i1 < right ) {

							var mid = ( i1 + right ) >>> 1;

							if ( t < pp[ mid ] ) {

								right = mid;

							} else {

								i1 = mid + 1;

							}

						}

						t1 = pp[   i1   ];
						t0 = pp[ i1 - 1 ];

						// check boundary cases, again

						if ( t0 === undefined ) {

							this._cachedIndex = 0;
							return this.beforeStart_( 0, t, t1 );

						}

						if ( t1 === undefined ) {

							i1 = pp.length;
							this._cachedIndex = i1;
							return this.afterEnd_( i1 - 1, t0, t );

						}

					} // seek

					this._cachedIndex = i1;

					this.intervalChanged_( i1, t0, t1 );

				} // validate_interval

				return this.interpolate_( i1, t0, t, t1 );

			},

			settings: null, // optional, subclass-specific settings structure
			// Note: The indirection allows central control of many interpolants.

			// --- Protected interface

			DefaultSettings_: {},

			getSettings_: function() {

				return this.settings || this.DefaultSettings_;

			},

			copySampleValue_: function( index ) {

				// copies a sample value to the result buffer

				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
					offset = index * stride;

				for ( var i = 0; i !== stride; ++ i ) {

					result[ i ] = values[ offset + i ];

				}

				return result;

			},

			// Template methods for derived classes:

			interpolate_: function( i1, t0, t, t1 ) {

				throw new Error( "call to abstract method" );
				// implementations shall return this.resultBuffer

			},

			intervalChanged_: function( i1, t0, t1 ) {

				// empty

			}

		};

		Object.assign( THREE.Interpolant.prototype, {

			beforeStart_: //( 0, t, t0 ), returns this.resultBuffer
				THREE.Interpolant.prototype.copySampleValue_,

			afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer
				THREE.Interpolant.prototype.copySampleValue_

		} );

		// File:src/math/interpolants/CubicInterpolant.js

		/**
		 * Fast and simple cubic spline interpolant.
		 *
		 * It was derived from a Hermitian construction setting the first derivative
		 * at each sample position to the linear slope between neighboring positions
		 * over their parameter interval.
		 *
		 * @author tschw
		 */

		THREE.CubicInterpolant = function(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			THREE.Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );

			this._weightPrev = -0;
			this._offsetPrev = -0;
			this._weightNext = -0;
			this._offsetNext = -0;

		};

		THREE.CubicInterpolant.prototype =
				Object.assign( Object.create( THREE.Interpolant.prototype ), {

			constructor: THREE.CubicInterpolant,

			DefaultSettings_: {

				endingStart: 	THREE.ZeroCurvatureEnding,
				endingEnd:		THREE.ZeroCurvatureEnding

			},

			intervalChanged_: function( i1, t0, t1 ) {

				var pp = this.parameterPositions,
					iPrev = i1 - 2,
					iNext = i1 + 1,

					tPrev = pp[ iPrev ],
					tNext = pp[ iNext ];

				if ( tPrev === undefined ) {

					switch ( this.getSettings_().endingStart ) {

						case THREE.ZeroSlopeEnding:

							// f'(t0) = 0
							iPrev = i1;
							tPrev = 2 * t0 - t1;

							break;

						case THREE.WrapAroundEnding:

							// use the other end of the curve
							iPrev = pp.length - 2;
							tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

							break;

						default: // ZeroCurvatureEnding

							// f''(t0) = 0 a.k.a. Natural Spline
							iPrev = i1;
							tPrev = t1;

					}

				}

				if ( tNext === undefined ) {

					switch ( this.getSettings_().endingEnd ) {

						case THREE.ZeroSlopeEnding:

							// f'(tN) = 0
							iNext = i1;
							tNext = 2 * t1 - t0;

							break;

						case THREE.WrapAroundEnding:

							// use the other end of the curve
							iNext = 1;
							tNext = t1 + pp[ 1 ] - pp[ 0 ];

							break;

						default: // ZeroCurvatureEnding

							// f''(tN) = 0, a.k.a. Natural Spline
							iNext = i1 - 1;
							tNext = t0;

					}

				}

				var halfDt = ( t1 - t0 ) * 0.5,
					stride = this.valueSize;

				this._weightPrev = halfDt / ( t0 - tPrev );
				this._weightNext = halfDt / ( tNext - t1 );
				this._offsetPrev = iPrev * stride;
				this._offsetNext = iNext * stride;

			},

			interpolate_: function( i1, t0, t, t1 ) {

				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,

					o1 = i1 * stride,		o0 = o1 - stride,
					oP = this._offsetPrev, 	oN = this._offsetNext,
					wP = this._weightPrev,	wN = this._weightNext,

					p = ( t - t0 ) / ( t1 - t0 ),
					pp = p * p,
					ppp = pp * p;

				// evaluate polynomials

				var sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;
				var s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;
				var s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;
				var sN =       wN   * ppp   -           wN      * pp;

				// combine data linearly

				for ( var i = 0; i !== stride; ++ i ) {

					result[ i ] =
							sP * values[ oP + i ] +
							s0 * values[ o0 + i ] +
							s1 * values[ o1 + i ] +
							sN * values[ oN + i ];

				}

				return result;

			}

		} );

		// File:src/math/interpolants/DiscreteInterpolant.js

		/**
		 *
		 * Interpolant that evaluates to the sample value at the position preceeding
		 * the parameter.
		 *
		 * @author tschw
		 */

		THREE.DiscreteInterpolant = function(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			THREE.Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		};

		THREE.DiscreteInterpolant.prototype =
				Object.assign( Object.create( THREE.Interpolant.prototype ), {

			constructor: THREE.DiscreteInterpolant,

			interpolate_: function( i1, t0, t, t1 ) {

				return this.copySampleValue_( i1 - 1 );

			}

		} );

		// File:src/math/interpolants/LinearInterpolant.js

		/**
		 * @author tschw
		 */

		THREE.LinearInterpolant = function(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			THREE.Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		};

		THREE.LinearInterpolant.prototype =
				Object.assign( Object.create( THREE.Interpolant.prototype ), {

			constructor: THREE.LinearInterpolant,

			interpolate_: function( i1, t0, t, t1 ) {

				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,

					offset1 = i1 * stride,
					offset0 = offset1 - stride,

					weight1 = ( t - t0 ) / ( t1 - t0 ),
					weight0 = 1 - weight1;

				for ( var i = 0; i !== stride; ++ i ) {

					result[ i ] =
							values[ offset0 + i ] * weight0 +
							values[ offset1 + i ] * weight1;

				}

				return result;

			}

		} );

		// File:src/math/interpolants/QuaternionLinearInterpolant.js

		/**
		 * Spherical linear unit quaternion interpolant.
		 *
		 * @author tschw
		 */

		THREE.QuaternionLinearInterpolant = function(
				parameterPositions, sampleValues, sampleSize, resultBuffer ) {

			THREE.Interpolant.call(
					this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		};

		THREE.QuaternionLinearInterpolant.prototype =
				Object.assign( Object.create( THREE.Interpolant.prototype ), {

			constructor: THREE.QuaternionLinearInterpolant,

			interpolate_: function( i1, t0, t, t1 ) {

				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,

					offset = i1 * stride,

					alpha = ( t - t0 ) / ( t1 - t0 );

				for ( var end = offset + stride; offset !== end; offset += 4 ) {

					THREE.Quaternion.slerpFlat( result, 0,
							values, offset - stride, values, offset, alpha );

				}

				return result;

			}

		} );

		// File:src/core/Clock.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Clock = function ( autoStart ) {

			this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

			this.startTime = 0;
			this.oldTime = 0;
			this.elapsedTime = 0;

			this.running = false;

		};

		THREE.Clock.prototype = {

			constructor: THREE.Clock,

			start: function () {

				this.startTime = ( performance || Date ).now();

				this.oldTime = this.startTime;
				this.running = true;

			},

			stop: function () {

				this.getElapsedTime();
				this.running = false;

			},

			getElapsedTime: function () {

				this.getDelta();
				return this.elapsedTime;

			},

			getDelta: function () {

				var diff = 0;

				if ( this.autoStart && ! this.running ) {

					this.start();

				}

				if ( this.running ) {

					var newTime = ( performance || Date ).now();

					diff = ( newTime - this.oldTime ) / 1000;
					this.oldTime = newTime;

					this.elapsedTime += diff;

				}

				return diff;

			}

		};

		// File:src/core/EventDispatcher.js

		/**
		 * https://github.com/mrdoob/eventdispatcher.js/
		 */

		THREE.EventDispatcher = function () {};

		Object.assign( THREE.EventDispatcher.prototype, {

			addEventListener: function ( type, listener ) {

				if ( this._listeners === undefined ) this._listeners = {};

				var listeners = this._listeners;

				if ( listeners[ type ] === undefined ) {

					listeners[ type ] = [];

				}

				if ( listeners[ type ].indexOf( listener ) === - 1 ) {

					listeners[ type ].push( listener );

				}

			},

			hasEventListener: function ( type, listener ) {

				if ( this._listeners === undefined ) return false;

				var listeners = this._listeners;

				if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

					return true;

				}

				return false;

			},

			removeEventListener: function ( type, listener ) {

				if ( this._listeners === undefined ) return;

				var listeners = this._listeners;
				var listenerArray = listeners[ type ];

				if ( listenerArray !== undefined ) {

					var index = listenerArray.indexOf( listener );

					if ( index !== - 1 ) {

						listenerArray.splice( index, 1 );

					}

				}

			},

			dispatchEvent: function ( event ) {

				if ( this._listeners === undefined ) return;

				var listeners = this._listeners;
				var listenerArray = listeners[ event.type ];

				if ( listenerArray !== undefined ) {

					event.target = this;

					var array = [], i = 0;
					var length = listenerArray.length;

					for ( i = 0; i < length; i ++ ) {

						array[ i ] = listenerArray[ i ];

					}

					for ( i = 0; i < length; i ++ ) {

						array[ i ].call( this, event );

					}

				}

			}

		} );

		// File:src/core/Layers.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Layers = function () {

			this.mask = 1;

		};

		THREE.Layers.prototype = {

			constructor: THREE.Layers,

			set: function ( channel ) {

				this.mask = 1 << channel;

			},

			enable: function ( channel ) {

				this.mask |= 1 << channel;

			},

			toggle: function ( channel ) {

				this.mask ^= 1 << channel;

			},

			disable: function ( channel ) {

				this.mask &= ~ ( 1 << channel );

			},

			test: function ( layers ) {

				return ( this.mask & layers.mask ) !== 0;

			}

		};

		// File:src/core/Raycaster.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author bhouston / http://clara.io/
		 * @author stephomi / http://stephaneginier.com/
		 */

		( function ( THREE ) {

			THREE.Raycaster = function ( origin, direction, near, far ) {

				this.ray = new THREE.Ray( origin, direction );
				// direction is assumed to be normalized (for accurate distance calculations)

				this.near = near || 0;
				this.far = far || Infinity;

				this.params = {
					Mesh: {},
					Line: {},
					LOD: {},
					Points: { threshold: 1 },
					Sprite: {}
				};

				Object.defineProperties( this.params, {
					PointCloud: {
						get: function () {
							console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
							return this.Points;
						}
					}
				} );

			};

			function ascSort( a, b ) {

				return a.distance - b.distance;

			}

			function intersectObject( object, raycaster, intersects, recursive ) {

				if ( object.visible === false ) return;

				object.raycast( raycaster, intersects );

				if ( recursive === true ) {

					var children = object.children;

					for ( var i = 0, l = children.length; i < l; i ++ ) {

						intersectObject( children[ i ], raycaster, intersects, true );

					}

				}

			}

			//

			THREE.Raycaster.prototype = {

				constructor: THREE.Raycaster,

				linePrecision: 1,

				set: function ( origin, direction ) {

					// direction is assumed to be normalized (for accurate distance calculations)

					this.ray.set( origin, direction );

				},

				setFromCamera: function ( coords, camera ) {

					if ( camera instanceof THREE.PerspectiveCamera ) {

						this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
						this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

					} else if ( camera instanceof THREE.OrthographicCamera ) {

						this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
						this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

					} else {

						console.error( 'THREE.Raycaster: Unsupported camera type.' );

					}

				},

				intersectObject: function ( object, recursive ) {

					var intersects = [];

					intersectObject( object, this, intersects, recursive );

					intersects.sort( ascSort );

					return intersects;

				},

				intersectObjects: function ( objects, recursive ) {

					var intersects = [];

					if ( Array.isArray( objects ) === false ) {

						console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
						return intersects;

					}

					for ( var i = 0, l = objects.length; i < l; i ++ ) {

						intersectObject( objects[ i ], this, intersects, recursive );

					}

					intersects.sort( ascSort );

					return intersects;

				}

			};

		}( THREE ) );

		// File:src/core/Object3D.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author elephantatwork / www.elephantatwork.ch
		 */

		THREE.Object3D = function () {

			Object.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );

			this.uuid = THREE.Math.generateUUID();

			this.name = '';
			this.type = 'Object3D';

			this.parent = null;
			this.children = [];

			this.up = THREE.Object3D.DefaultUp.clone();

			var position = new THREE.Vector3();
			var rotation = new THREE.Euler();
			var quaternion = new THREE.Quaternion();
			var scale = new THREE.Vector3( 1, 1, 1 );

			function onRotationChange() {

				quaternion.setFromEuler( rotation, false );

			}

			function onQuaternionChange() {

				rotation.setFromQuaternion( quaternion, undefined, false );

			}

			rotation.onChange( onRotationChange );
			quaternion.onChange( onQuaternionChange );

			Object.defineProperties( this, {
				position: {
					enumerable: true,
					value: position
				},
				rotation: {
					enumerable: true,
					value: rotation
				},
				quaternion: {
					enumerable: true,
					value: quaternion
				},
				scale: {
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new THREE.Matrix4()
				},
				normalMatrix: {
					value: new THREE.Matrix3()
				}
			} );

			this.matrix = new THREE.Matrix4();
			this.matrixWorld = new THREE.Matrix4();

			this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;
			this.matrixWorldNeedsUpdate = false;

			this.layers = new THREE.Layers();
			this.visible = true;

			this.castShadow = false;
			this.receiveShadow = false;

			this.frustumCulled = true;
			this.renderOrder = 0;

			this.userData = {};

		};

		THREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );
		THREE.Object3D.DefaultMatrixAutoUpdate = true;

		Object.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {

			applyMatrix: function ( matrix ) {

				this.matrix.multiplyMatrices( matrix, this.matrix );

				this.matrix.decompose( this.position, this.quaternion, this.scale );

			},

			setRotationFromAxisAngle: function ( axis, angle ) {

				// assumes axis is normalized

				this.quaternion.setFromAxisAngle( axis, angle );

			},

			setRotationFromEuler: function ( euler ) {

				this.quaternion.setFromEuler( euler, true );

			},

			setRotationFromMatrix: function ( m ) {

				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

				this.quaternion.setFromRotationMatrix( m );

			},

			setRotationFromQuaternion: function ( q ) {

				// assumes q is normalized

				this.quaternion.copy( q );

			},

			rotateOnAxis: function () {

				// rotate object on axis in object space
				// axis is assumed to be normalized

				var q1 = new THREE.Quaternion();

				return function rotateOnAxis( axis, angle ) {

					q1.setFromAxisAngle( axis, angle );

					this.quaternion.multiply( q1 );

					return this;

				};

			}(),

			rotateX: function () {

				var v1 = new THREE.Vector3( 1, 0, 0 );

				return function rotateX( angle ) {

					return this.rotateOnAxis( v1, angle );

				};

			}(),

			rotateY: function () {

				var v1 = new THREE.Vector3( 0, 1, 0 );

				return function rotateY( angle ) {

					return this.rotateOnAxis( v1, angle );

				};

			}(),

			rotateZ: function () {

				var v1 = new THREE.Vector3( 0, 0, 1 );

				return function rotateZ( angle ) {

					return this.rotateOnAxis( v1, angle );

				};

			}(),

			translateOnAxis: function () {

				// translate object by distance along axis in object space
				// axis is assumed to be normalized

				var v1 = new THREE.Vector3();

				return function translateOnAxis( axis, distance ) {

					v1.copy( axis ).applyQuaternion( this.quaternion );

					this.position.add( v1.multiplyScalar( distance ) );

					return this;

				};

			}(),

			translateX: function () {

				var v1 = new THREE.Vector3( 1, 0, 0 );

				return function translateX( distance ) {

					return this.translateOnAxis( v1, distance );

				};

			}(),

			translateY: function () {

				var v1 = new THREE.Vector3( 0, 1, 0 );

				return function translateY( distance ) {

					return this.translateOnAxis( v1, distance );

				};

			}(),

			translateZ: function () {

				var v1 = new THREE.Vector3( 0, 0, 1 );

				return function translateZ( distance ) {

					return this.translateOnAxis( v1, distance );

				};

			}(),

			localToWorld: function ( vector ) {

				return vector.applyMatrix4( this.matrixWorld );

			},

			worldToLocal: function () {

				var m1 = new THREE.Matrix4();

				return function worldToLocal( vector ) {

					return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

				};

			}(),

			lookAt: function () {

				// This routine does not support objects with rotated and/or translated parent(s)

				var m1 = new THREE.Matrix4();

				return function lookAt( vector ) {

					m1.lookAt( vector, this.position, this.up );

					this.quaternion.setFromRotationMatrix( m1 );

				};

			}(),

			add: function ( object ) {

				if ( arguments.length > 1 ) {

					for ( var i = 0; i < arguments.length; i ++ ) {

						this.add( arguments[ i ] );

					}

					return this;

				}

				if ( object === this ) {

					console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
					return this;

				}

				if ( object instanceof THREE.Object3D ) {

					if ( object.parent !== null ) {

						object.parent.remove( object );

					}

					object.parent = this;
					object.dispatchEvent( { type: 'added' } );

					this.children.push( object );

				} else {

					console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

				}

				return this;

			},

			remove: function ( object ) {

				if ( arguments.length > 1 ) {

					for ( var i = 0; i < arguments.length; i ++ ) {

						this.remove( arguments[ i ] );

					}

				}

				var index = this.children.indexOf( object );

				if ( index !== - 1 ) {

					object.parent = null;

					object.dispatchEvent( { type: 'removed' } );

					this.children.splice( index, 1 );

				}

			},

			getObjectById: function ( id ) {

				return this.getObjectByProperty( 'id', id );

			},

			getObjectByName: function ( name ) {

				return this.getObjectByProperty( 'name', name );

			},

			getObjectByProperty: function ( name, value ) {

				if ( this[ name ] === value ) return this;

				for ( var i = 0, l = this.children.length; i < l; i ++ ) {

					var child = this.children[ i ];
					var object = child.getObjectByProperty( name, value );

					if ( object !== undefined ) {

						return object;

					}

				}

				return undefined;

			},

			getWorldPosition: function ( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				this.updateMatrixWorld( true );

				return result.setFromMatrixPosition( this.matrixWorld );

			},

			getWorldQuaternion: function () {

				var position = new THREE.Vector3();
				var scale = new THREE.Vector3();

				return function getWorldQuaternion( optionalTarget ) {

					var result = optionalTarget || new THREE.Quaternion();

					this.updateMatrixWorld( true );

					this.matrixWorld.decompose( position, result, scale );

					return result;

				};

			}(),

			getWorldRotation: function () {

				var quaternion = new THREE.Quaternion();

				return function getWorldRotation( optionalTarget ) {

					var result = optionalTarget || new THREE.Euler();

					this.getWorldQuaternion( quaternion );

					return result.setFromQuaternion( quaternion, this.rotation.order, false );

				};

			}(),

			getWorldScale: function () {

				var position = new THREE.Vector3();
				var quaternion = new THREE.Quaternion();

				return function getWorldScale( optionalTarget ) {

					var result = optionalTarget || new THREE.Vector3();

					this.updateMatrixWorld( true );

					this.matrixWorld.decompose( position, quaternion, result );

					return result;

				};

			}(),

			getWorldDirection: function () {

				var quaternion = new THREE.Quaternion();

				return function getWorldDirection( optionalTarget ) {

					var result = optionalTarget || new THREE.Vector3();

					this.getWorldQuaternion( quaternion );

					return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

				};

			}(),

			raycast: function () {},

			traverse: function ( callback ) {

				callback( this );

				var children = this.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					children[ i ].traverse( callback );

				}

			},

			traverseVisible: function ( callback ) {

				if ( this.visible === false ) return;

				callback( this );

				var children = this.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					children[ i ].traverseVisible( callback );

				}

			},

			traverseAncestors: function ( callback ) {

				var parent = this.parent;

				if ( parent !== null ) {

					callback( parent );

					parent.traverseAncestors( callback );

				}

			},

			updateMatrix: function () {

				this.matrix.compose( this.position, this.quaternion, this.scale );

				this.matrixWorldNeedsUpdate = true;

			},

			updateMatrixWorld: function ( force ) {

				if ( this.matrixAutoUpdate === true ) this.updateMatrix();

				if ( this.matrixWorldNeedsUpdate === true || force === true ) {

					if ( this.parent === null ) {

						this.matrixWorld.copy( this.matrix );

					} else {

						this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

					}

					this.matrixWorldNeedsUpdate = false;

					force = true;

				}

				// update children

				for ( var i = 0, l = this.children.length; i < l; i ++ ) {

					this.children[ i ].updateMatrixWorld( force );

				}

			},

			toJSON: function ( meta ) {

				// meta is '' when called from JSON.stringify
				var isRootObject = ( meta === undefined || meta === '' );

				var output = {};

				// meta is a hash used to collect geometries, materials.
				// not providing it implies that this is the root object
				// being serialized.
				if ( isRootObject ) {

					// initialize meta obj
					meta = {
						geometries: {},
						materials: {},
						textures: {},
						images: {}
					};

					output.metadata = {
						version: 4.4,
						type: 'Object',
						generator: 'Object3D.toJSON'
					};

				}

				// standard Object3D serialization

				var object = {};

				object.uuid = this.uuid;
				object.type = this.type;

				if ( this.name !== '' ) object.name = this.name;
				if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
				if ( this.castShadow === true ) object.castShadow = true;
				if ( this.receiveShadow === true ) object.receiveShadow = true;
				if ( this.visible === false ) object.visible = false;

				object.matrix = this.matrix.toArray();

				//

				if ( this.geometry !== undefined ) {

					if ( meta.geometries[ this.geometry.uuid ] === undefined ) {

						meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );

					}

					object.geometry = this.geometry.uuid;

				}

				if ( this.material !== undefined ) {

					if ( meta.materials[ this.material.uuid ] === undefined ) {

						meta.materials[ this.material.uuid ] = this.material.toJSON( meta );

					}

					object.material = this.material.uuid;

				}

				//

				if ( this.children.length > 0 ) {

					object.children = [];

					for ( var i = 0; i < this.children.length; i ++ ) {

						object.children.push( this.children[ i ].toJSON( meta ).object );

					}

				}

				if ( isRootObject ) {

					var geometries = extractFromCache( meta.geometries );
					var materials = extractFromCache( meta.materials );
					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );

					if ( geometries.length > 0 ) output.geometries = geometries;
					if ( materials.length > 0 ) output.materials = materials;
					if ( textures.length > 0 ) output.textures = textures;
					if ( images.length > 0 ) output.images = images;

				}

				output.object = object;

				return output;

				// extract data from the cache hash
				// remove metadata on each item
				// and return as array
				function extractFromCache ( cache ) {

					var values = [];
					for ( var key in cache ) {

						var data = cache[ key ];
						delete data.metadata;
						values.push( data );

					}
					return values;

				}

			},

			clone: function ( recursive ) {

				return new this.constructor().copy( this, recursive );

			},

			copy: function ( source, recursive ) {

				if ( recursive === undefined ) recursive = true;

				this.name = source.name;

				this.up.copy( source.up );

				this.position.copy( source.position );
				this.quaternion.copy( source.quaternion );
				this.scale.copy( source.scale );

				this.matrix.copy( source.matrix );
				this.matrixWorld.copy( source.matrixWorld );

				this.matrixAutoUpdate = source.matrixAutoUpdate;
				this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

				this.visible = source.visible;

				this.castShadow = source.castShadow;
				this.receiveShadow = source.receiveShadow;

				this.frustumCulled = source.frustumCulled;
				this.renderOrder = source.renderOrder;

				this.userData = JSON.parse( JSON.stringify( source.userData ) );

				if ( recursive === true ) {

					for ( var i = 0; i < source.children.length; i ++ ) {

						var child = source.children[ i ];
						this.add( child.clone() );

					}

				}

				return this;

			}

		} );

		THREE.Object3DIdCount = 0;

		// File:src/core/Face3.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {

			this.a = a;
			this.b = b;
			this.c = c;

			this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
			this.vertexNormals = Array.isArray( normal ) ? normal : [];

			this.color = color instanceof THREE.Color ? color : new THREE.Color();
			this.vertexColors = Array.isArray( color ) ? color : [];

			this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

		};

		THREE.Face3.prototype = {

			constructor: THREE.Face3,

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( source ) {

				this.a = source.a;
				this.b = source.b;
				this.c = source.c;

				this.normal.copy( source.normal );
				this.color.copy( source.color );

				this.materialIndex = source.materialIndex;

				for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

					this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

				}

				for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

					this.vertexColors[ i ] = source.vertexColors[ i ].clone();

				}

				return this;

			}

		};

		// File:src/core/BufferAttribute.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.BufferAttribute = function ( array, itemSize, normalized ) {

			this.uuid = THREE.Math.generateUUID();

			this.array = array;
			this.itemSize = itemSize;

			this.dynamic = false;
			this.updateRange = { offset: 0, count: - 1 };

			this.version = 0;
			this.normalized = normalized === true;

		};

		THREE.BufferAttribute.prototype = {

			constructor: THREE.BufferAttribute,

			get count() {

				return this.array.length / this.itemSize;

			},

			set needsUpdate( value ) {

				if ( value === true ) this.version ++;

			},

			setDynamic: function ( value ) {

				this.dynamic = value;

				return this;

			},

			copy: function ( source ) {

				this.array = new source.array.constructor( source.array );
				this.itemSize = source.itemSize;

				this.dynamic = source.dynamic;

				return this;

			},

			copyAt: function ( index1, attribute, index2 ) {

				index1 *= this.itemSize;
				index2 *= attribute.itemSize;

				for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

					this.array[ index1 + i ] = attribute.array[ index2 + i ];

				}

				return this;

			},

			copyArray: function ( array ) {

				this.array.set( array );

				return this;

			},

			copyColorsArray: function ( colors ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = colors.length; i < l; i ++ ) {

					var color = colors[ i ];

					if ( color === undefined ) {

						console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
						color = new THREE.Color();

					}

					array[ offset ++ ] = color.r;
					array[ offset ++ ] = color.g;
					array[ offset ++ ] = color.b;

				}

				return this;

			},

			copyIndicesArray: function ( indices ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					var index = indices[ i ];

					array[ offset ++ ] = index.a;
					array[ offset ++ ] = index.b;
					array[ offset ++ ] = index.c;

				}

				return this;

			},

			copyVector2sArray: function ( vectors ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = vectors.length; i < l; i ++ ) {

					var vector = vectors[ i ];

					if ( vector === undefined ) {

						console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
						vector = new THREE.Vector2();

					}

					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;

				}

				return this;

			},

			copyVector3sArray: function ( vectors ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = vectors.length; i < l; i ++ ) {

					var vector = vectors[ i ];

					if ( vector === undefined ) {

						console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
						vector = new THREE.Vector3();

					}

					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;

				}

				return this;

			},

			copyVector4sArray: function ( vectors ) {

				var array = this.array, offset = 0;

				for ( var i = 0, l = vectors.length; i < l; i ++ ) {

					var vector = vectors[ i ];

					if ( vector === undefined ) {

						console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
						vector = new THREE.Vector4();

					}

					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;
					array[ offset ++ ] = vector.w;

				}

				return this;

			},

			set: function ( value, offset ) {

				if ( offset === undefined ) offset = 0;

				this.array.set( value, offset );

				return this;

			},

			getX: function ( index ) {

				return this.array[ index * this.itemSize ];

			},

			setX: function ( index, x ) {

				this.array[ index * this.itemSize ] = x;

				return this;

			},

			getY: function ( index ) {

				return this.array[ index * this.itemSize + 1 ];

			},

			setY: function ( index, y ) {

				this.array[ index * this.itemSize + 1 ] = y;

				return this;

			},

			getZ: function ( index ) {

				return this.array[ index * this.itemSize + 2 ];

			},

			setZ: function ( index, z ) {

				this.array[ index * this.itemSize + 2 ] = z;

				return this;

			},

			getW: function ( index ) {

				return this.array[ index * this.itemSize + 3 ];

			},

			setW: function ( index, w ) {

				this.array[ index * this.itemSize + 3 ] = w;

				return this;

			},

			setXY: function ( index, x, y ) {

				index *= this.itemSize;

				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;

				return this;

			},

			setXYZ: function ( index, x, y, z ) {

				index *= this.itemSize;

				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;

				return this;

			},

			setXYZW: function ( index, x, y, z, w ) {

				index *= this.itemSize;

				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;
				this.array[ index + 3 ] = w;

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			}

		};

		//

		THREE.Int8Attribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Int8Array( array ), itemSize );

		};

		THREE.Uint8Attribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Uint8Array( array ), itemSize );

		};

		THREE.Uint8ClampedAttribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );

		};

		THREE.Int16Attribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Int16Array( array ), itemSize );

		};

		THREE.Uint16Attribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Uint16Array( array ), itemSize );

		};

		THREE.Int32Attribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Int32Array( array ), itemSize );

		};

		THREE.Uint32Attribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Uint32Array( array ), itemSize );

		};

		THREE.Float32Attribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Float32Array( array ), itemSize );

		};

		THREE.Float64Attribute = function ( array, itemSize ) {

			return new THREE.BufferAttribute( new Float64Array( array ), itemSize );

		};


		// Deprecated

		THREE.DynamicBufferAttribute = function ( array, itemSize ) {

			console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
			return new THREE.BufferAttribute( array, itemSize ).setDynamic( true );

		};

		// File:src/core/InstancedBufferAttribute.js

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		THREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {

			THREE.BufferAttribute.call( this, array, itemSize );

			this.meshPerAttribute = meshPerAttribute || 1;

		};

		THREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );
		THREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;

		THREE.InstancedBufferAttribute.prototype.copy = function ( source ) {

			THREE.BufferAttribute.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		};

		// File:src/core/InterleavedBuffer.js

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		THREE.InterleavedBuffer = function ( array, stride ) {

			this.uuid = THREE.Math.generateUUID();

			this.array = array;
			this.stride = stride;

			this.dynamic = false;
			this.updateRange = { offset: 0, count: - 1 };

			this.version = 0;

		};

		THREE.InterleavedBuffer.prototype = {

			constructor: THREE.InterleavedBuffer,

			get length () {

				return this.array.length;

			},

			get count () {

				return this.array.length / this.stride;

			},

			set needsUpdate( value ) {

				if ( value === true ) this.version ++;

			},

			setDynamic: function ( value ) {

				this.dynamic = value;

				return this;

			},

			copy: function ( source ) {

				this.array = new source.array.constructor( source.array );
				this.stride = source.stride;
				this.dynamic = source.dynamic;

				return this;

			},

			copyAt: function ( index1, attribute, index2 ) {

				index1 *= this.stride;
				index2 *= attribute.stride;

				for ( var i = 0, l = this.stride; i < l; i ++ ) {

					this.array[ index1 + i ] = attribute.array[ index2 + i ];

				}

				return this;

			},

			set: function ( value, offset ) {

				if ( offset === undefined ) offset = 0;

				this.array.set( value, offset );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			}

		};

		// File:src/core/InstancedInterleavedBuffer.js

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		THREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {

			THREE.InterleavedBuffer.call( this, array, stride );

			this.meshPerAttribute = meshPerAttribute || 1;

		};

		THREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );
		THREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;

		THREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {

			THREE.InterleavedBuffer.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		};

		// File:src/core/InterleavedBufferAttribute.js

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		THREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset, normalized ) {

			this.uuid = THREE.Math.generateUUID();

			this.data = interleavedBuffer;
			this.itemSize = itemSize;
			this.offset = offset;

			this.normalized = normalized === true;

		};


		THREE.InterleavedBufferAttribute.prototype = {

			constructor: THREE.InterleavedBufferAttribute,

			get length() {

				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
				return this.array.length;

			},

			get count() {

				return this.data.count;

			},

			get array() {

				return this.data.array;

			},

			setX: function ( index, x ) {

				this.data.array[ index * this.data.stride + this.offset ] = x;

				return this;

			},

			setY: function ( index, y ) {

				this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

				return this;

			},

			setZ: function ( index, z ) {

				this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

				return this;

			},

			setW: function ( index, w ) {

				this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

				return this;

			},

			getX: function ( index ) {

				return this.data.array[ index * this.data.stride + this.offset ];

			},

			getY: function ( index ) {

				return this.data.array[ index * this.data.stride + this.offset + 1 ];

			},

			getZ: function ( index ) {

				return this.data.array[ index * this.data.stride + this.offset + 2 ];

			},

			getW: function ( index ) {

				return this.data.array[ index * this.data.stride + this.offset + 3 ];

			},

			setXY: function ( index, x, y ) {

				index = index * this.data.stride + this.offset;

				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;

				return this;

			},

			setXYZ: function ( index, x, y, z ) {

				index = index * this.data.stride + this.offset;

				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;

				return this;

			},

			setXYZW: function ( index, x, y, z, w ) {

				index = index * this.data.stride + this.offset;

				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;
				this.data.array[ index + 3 ] = w;

				return this;

			}

		};

		// File:src/core/Geometry.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author kile / http://kile.stravaganza.org/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author bhouston / http://clara.io
		 */

		THREE.Geometry = function () {

			Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

			this.uuid = THREE.Math.generateUUID();

			this.name = '';
			this.type = 'Geometry';

			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];

			this.morphTargets = [];
			this.morphNormals = [];

			this.skinWeights = [];
			this.skinIndices = [];

			this.lineDistances = [];

			this.boundingBox = null;
			this.boundingSphere = null;

			// update flags

			this.elementsNeedUpdate = false;
			this.verticesNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.lineDistancesNeedUpdate = false;
			this.groupsNeedUpdate = false;

		};

		Object.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {

			applyMatrix: function ( matrix ) {

				var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

				for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

					var vertex = this.vertices[ i ];
					vertex.applyMatrix4( matrix );

				}

				for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

					var face = this.faces[ i ];
					face.normal.applyMatrix3( normalMatrix ).normalize();

					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

						face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

					}

				}

				if ( this.boundingBox !== null ) {

					this.computeBoundingBox();

				}

				if ( this.boundingSphere !== null ) {

					this.computeBoundingSphere();

				}

				this.verticesNeedUpdate = true;
				this.normalsNeedUpdate = true;

				return this;

			},

			rotateX: function () {

				// rotate geometry around world x-axis

				var m1;

				return function rotateX( angle ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeRotationX( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			rotateY: function () {

				// rotate geometry around world y-axis

				var m1;

				return function rotateY( angle ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeRotationY( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			rotateZ: function () {

				// rotate geometry around world z-axis

				var m1;

				return function rotateZ( angle ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeRotationZ( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			translate: function () {

				// translate geometry

				var m1;

				return function translate( x, y, z ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeTranslation( x, y, z );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			scale: function () {

				// scale geometry

				var m1;

				return function scale( x, y, z ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeScale( x, y, z );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			lookAt: function () {

				var obj;

				return function lookAt( vector ) {

					if ( obj === undefined ) obj = new THREE.Object3D();

					obj.lookAt( vector );

					obj.updateMatrix();

					this.applyMatrix( obj.matrix );

				};

			}(),

			fromBufferGeometry: function ( geometry ) {

				var scope = this;

				var indices = geometry.index !== null ? geometry.index.array : undefined;
				var attributes = geometry.attributes;

				var positions = attributes.position.array;
				var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
				var colors = attributes.color !== undefined ? attributes.color.array : undefined;
				var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
				var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

				if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

				var tempNormals = [];
				var tempUVs = [];
				var tempUVs2 = [];

				for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

					scope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

					if ( normals !== undefined ) {

						tempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

					}

					if ( colors !== undefined ) {

						scope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

					}

					if ( uvs !== undefined ) {

						tempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );

					}

					if ( uvs2 !== undefined ) {

						tempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

					}

				}

				function addFace( a, b, c, materialIndex ) {

					var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
					var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

					var face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

					scope.faces.push( face );

					if ( uvs !== undefined ) {

						scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

					}

					if ( uvs2 !== undefined ) {

						scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

					}

				}

				if ( indices !== undefined ) {

					var groups = geometry.groups;

					if ( groups.length > 0 ) {

						for ( var i = 0; i < groups.length; i ++ ) {

							var group = groups[ i ];

							var start = group.start;
							var count = group.count;

							for ( var j = start, jl = start + count; j < jl; j += 3 ) {

								addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );

							}

						}

					} else {

						for ( var i = 0; i < indices.length; i += 3 ) {

							addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

						}

					}

				} else {

					for ( var i = 0; i < positions.length / 3; i += 3 ) {

						addFace( i, i + 1, i + 2 );

					}

				}

				this.computeFaceNormals();

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				return this;

			},

			center: function () {

				this.computeBoundingBox();

				var offset = this.boundingBox.center().negate();

				this.translate( offset.x, offset.y, offset.z );

				return offset;

			},

			normalize: function () {

				this.computeBoundingSphere();

				var center = this.boundingSphere.center;
				var radius = this.boundingSphere.radius;

				var s = radius === 0 ? 1 : 1.0 / radius;

				var matrix = new THREE.Matrix4();
				matrix.set(
					s, 0, 0, - s * center.x,
					0, s, 0, - s * center.y,
					0, 0, s, - s * center.z,
					0, 0, 0, 1
				);

				this.applyMatrix( matrix );

				return this;

			},

			computeFaceNormals: function () {

				var cb = new THREE.Vector3(), ab = new THREE.Vector3();

				for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

					var face = this.faces[ f ];

					var vA = this.vertices[ face.a ];
					var vB = this.vertices[ face.b ];
					var vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					cb.normalize();

					face.normal.copy( cb );

				}

			},

			computeVertexNormals: function ( areaWeighted ) {

				if ( areaWeighted === undefined ) areaWeighted = true;

				var v, vl, f, fl, face, vertices;

				vertices = new Array( this.vertices.length );

				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

					vertices[ v ] = new THREE.Vector3();

				}

				if ( areaWeighted ) {

					// vertex normals weighted by triangle areas
					// http://www.iquilezles.org/www/articles/normals/normals.htm

					var vA, vB, vC;
					var cb = new THREE.Vector3(), ab = new THREE.Vector3();

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						face = this.faces[ f ];

						vA = this.vertices[ face.a ];
						vB = this.vertices[ face.b ];
						vC = this.vertices[ face.c ];

						cb.subVectors( vC, vB );
						ab.subVectors( vA, vB );
						cb.cross( ab );

						vertices[ face.a ].add( cb );
						vertices[ face.b ].add( cb );
						vertices[ face.c ].add( cb );

					}

				} else {

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						face = this.faces[ f ];

						vertices[ face.a ].add( face.normal );
						vertices[ face.b ].add( face.normal );
						vertices[ face.c ].add( face.normal );

					}

				}

				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

					vertices[ v ].normalize();

				}

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					var vertexNormals = face.vertexNormals;

					if ( vertexNormals.length === 3 ) {

						vertexNormals[ 0 ].copy( vertices[ face.a ] );
						vertexNormals[ 1 ].copy( vertices[ face.b ] );
						vertexNormals[ 2 ].copy( vertices[ face.c ] );

					} else {

						vertexNormals[ 0 ] = vertices[ face.a ].clone();
						vertexNormals[ 1 ] = vertices[ face.b ].clone();
						vertexNormals[ 2 ] = vertices[ face.c ].clone();

					}

				}

				if ( this.faces.length > 0 ) {

					this.normalsNeedUpdate = true;

				}

			},

			computeMorphNormals: function () {

				var i, il, f, fl, face;

				// save original normals
				// - create temp variables on first access
				//   otherwise just copy (for faster repeated calls)

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					if ( ! face.__originalFaceNormal ) {

						face.__originalFaceNormal = face.normal.clone();

					} else {

						face.__originalFaceNormal.copy( face.normal );

					}

					if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

					for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

						if ( ! face.__originalVertexNormals[ i ] ) {

							face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

						} else {

							face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

						}

					}

				}

				// use temp geometry to compute face and vertex normals for each morph

				var tmpGeo = new THREE.Geometry();
				tmpGeo.faces = this.faces;

				for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

					// create on first access

					if ( ! this.morphNormals[ i ] ) {

						this.morphNormals[ i ] = {};
						this.morphNormals[ i ].faceNormals = [];
						this.morphNormals[ i ].vertexNormals = [];

						var dstNormalsFace = this.morphNormals[ i ].faceNormals;
						var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

						var faceNormal, vertexNormals;

						for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

							faceNormal = new THREE.Vector3();
							vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };

							dstNormalsFace.push( faceNormal );
							dstNormalsVertex.push( vertexNormals );

						}

					}

					var morphNormals = this.morphNormals[ i ];

					// set vertices to morph target

					tmpGeo.vertices = this.morphTargets[ i ].vertices;

					// compute morph normals

					tmpGeo.computeFaceNormals();
					tmpGeo.computeVertexNormals();

					// store morph normals

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						face = this.faces[ f ];

						faceNormal = morphNormals.faceNormals[ f ];
						vertexNormals = morphNormals.vertexNormals[ f ];

						faceNormal.copy( face.normal );

						vertexNormals.a.copy( face.vertexNormals[ 0 ] );
						vertexNormals.b.copy( face.vertexNormals[ 1 ] );
						vertexNormals.c.copy( face.vertexNormals[ 2 ] );

					}

				}

				// restore original normals

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					face.normal = face.__originalFaceNormal;
					face.vertexNormals = face.__originalVertexNormals;

				}

			},

			computeTangents: function () {

				console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

			},

			computeLineDistances: function () {

				var d = 0;
				var vertices = this.vertices;

				for ( var i = 0, il = vertices.length; i < il; i ++ ) {

					if ( i > 0 ) {

						d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

					}

					this.lineDistances[ i ] = d;

				}

			},

			computeBoundingBox: function () {

				if ( this.boundingBox === null ) {

					this.boundingBox = new THREE.Box3();

				}

				this.boundingBox.setFromPoints( this.vertices );

			},

			computeBoundingSphere: function () {

				if ( this.boundingSphere === null ) {

					this.boundingSphere = new THREE.Sphere();

				}

				this.boundingSphere.setFromPoints( this.vertices );

			},

			merge: function ( geometry, matrix, materialIndexOffset ) {

				if ( geometry instanceof THREE.Geometry === false ) {

					console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
					return;

				}

				var normalMatrix,
				vertexOffset = this.vertices.length,
				vertices1 = this.vertices,
				vertices2 = geometry.vertices,
				faces1 = this.faces,
				faces2 = geometry.faces,
				uvs1 = this.faceVertexUvs[ 0 ],
				uvs2 = geometry.faceVertexUvs[ 0 ];

				if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

				if ( matrix !== undefined ) {

					normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

				}

				// vertices

				for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

					var vertex = vertices2[ i ];

					var vertexCopy = vertex.clone();

					if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

					vertices1.push( vertexCopy );

				}

				// faces

				for ( i = 0, il = faces2.length; i < il; i ++ ) {

					var face = faces2[ i ], faceCopy, normal, color,
					faceVertexNormals = face.vertexNormals,
					faceVertexColors = face.vertexColors;

					faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
					faceCopy.normal.copy( face.normal );

					if ( normalMatrix !== undefined ) {

						faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

					}

					for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

						normal = faceVertexNormals[ j ].clone();

						if ( normalMatrix !== undefined ) {

							normal.applyMatrix3( normalMatrix ).normalize();

						}

						faceCopy.vertexNormals.push( normal );

					}

					faceCopy.color.copy( face.color );

					for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

						color = faceVertexColors[ j ];
						faceCopy.vertexColors.push( color.clone() );

					}

					faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

					faces1.push( faceCopy );

				}

				// uvs

				for ( i = 0, il = uvs2.length; i < il; i ++ ) {

					var uv = uvs2[ i ], uvCopy = [];

					if ( uv === undefined ) {

						continue;

					}

					for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

						uvCopy.push( uv[ j ].clone() );

					}

					uvs1.push( uvCopy );

				}

			},

			mergeMesh: function ( mesh ) {

				if ( mesh instanceof THREE.Mesh === false ) {

					console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
					return;

				}

				mesh.matrixAutoUpdate && mesh.updateMatrix();

				this.merge( mesh.geometry, mesh.matrix );

			},

			/*
			 * Checks for duplicate vertices with hashmap.
			 * Duplicated vertices are removed
			 * and faces' vertices are updated.
			 */

			mergeVertices: function () {

				var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
				var unique = [], changes = [];

				var v, key;
				var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
				var precision = Math.pow( 10, precisionPoints );
				var i, il, face;
				var indices, j, jl;

				for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

					v = this.vertices[ i ];
					key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

					if ( verticesMap[ key ] === undefined ) {

						verticesMap[ key ] = i;
						unique.push( this.vertices[ i ] );
						changes[ i ] = unique.length - 1;

					} else {

						//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
						changes[ i ] = changes[ verticesMap[ key ] ];

					}

				}


				// if faces are completely degenerate after merging vertices, we
				// have to remove them from the geometry.
				var faceIndicesToRemove = [];

				for ( i = 0, il = this.faces.length; i < il; i ++ ) {

					face = this.faces[ i ];

					face.a = changes[ face.a ];
					face.b = changes[ face.b ];
					face.c = changes[ face.c ];

					indices = [ face.a, face.b, face.c ];

					var dupIndex = - 1;

					// if any duplicate vertices are found in a Face3
					// we have to remove the face as nothing can be saved
					for ( var n = 0; n < 3; n ++ ) {

						if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

							dupIndex = n;
							faceIndicesToRemove.push( i );
							break;

						}

					}

				}

				for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

					var idx = faceIndicesToRemove[ i ];

					this.faces.splice( idx, 1 );

					for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

						this.faceVertexUvs[ j ].splice( idx, 1 );

					}

				}

				// Use unique set of vertices

				var diff = this.vertices.length - unique.length;
				this.vertices = unique;
				return diff;

			},

			sortFacesByMaterialIndex: function () {

				var faces = this.faces;
				var length = faces.length;

				// tag faces

				for ( var i = 0; i < length; i ++ ) {

					faces[ i ]._id = i;

				}

				// sort faces

				function materialIndexSort( a, b ) {

					return a.materialIndex - b.materialIndex;

				}

				faces.sort( materialIndexSort );

				// sort uvs

				var uvs1 = this.faceVertexUvs[ 0 ];
				var uvs2 = this.faceVertexUvs[ 1 ];

				var newUvs1, newUvs2;

				if ( uvs1 && uvs1.length === length ) newUvs1 = [];
				if ( uvs2 && uvs2.length === length ) newUvs2 = [];

				for ( var i = 0; i < length; i ++ ) {

					var id = faces[ i ]._id;

					if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
					if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

				}

				if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
				if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

			},

			toJSON: function () {

				var data = {
					metadata: {
						version: 4.4,
						type: 'Geometry',
						generator: 'Geometry.toJSON'
					}
				};

				// standard Geometry serialization

				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) data.name = this.name;

				if ( this.parameters !== undefined ) {

					var parameters = this.parameters;

					for ( var key in parameters ) {

						if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

					}

					return data;

				}

				var vertices = [];

				for ( var i = 0; i < this.vertices.length; i ++ ) {

					var vertex = this.vertices[ i ];
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

				var faces = [];
				var normals = [];
				var normalsHash = {};
				var colors = [];
				var colorsHash = {};
				var uvs = [];
				var uvsHash = {};

				for ( var i = 0; i < this.faces.length; i ++ ) {

					var face = this.faces[ i ];

					var hasMaterial = true;
					var hasFaceUv = false; // deprecated
					var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
					var hasFaceNormal = face.normal.length() > 0;
					var hasFaceVertexNormal = face.vertexNormals.length > 0;
					var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
					var hasFaceVertexColor = face.vertexColors.length > 0;

					var faceType = 0;

					faceType = setBit( faceType, 0, 0 ); // isQuad
					faceType = setBit( faceType, 1, hasMaterial );
					faceType = setBit( faceType, 2, hasFaceUv );
					faceType = setBit( faceType, 3, hasFaceVertexUv );
					faceType = setBit( faceType, 4, hasFaceNormal );
					faceType = setBit( faceType, 5, hasFaceVertexNormal );
					faceType = setBit( faceType, 6, hasFaceColor );
					faceType = setBit( faceType, 7, hasFaceVertexColor );

					faces.push( faceType );
					faces.push( face.a, face.b, face.c );
					faces.push( face.materialIndex );

					if ( hasFaceVertexUv ) {

						var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

						faces.push(
							getUvIndex( faceVertexUvs[ 0 ] ),
							getUvIndex( faceVertexUvs[ 1 ] ),
							getUvIndex( faceVertexUvs[ 2 ] )
						);

					}

					if ( hasFaceNormal ) {

						faces.push( getNormalIndex( face.normal ) );

					}

					if ( hasFaceVertexNormal ) {

						var vertexNormals = face.vertexNormals;

						faces.push(
							getNormalIndex( vertexNormals[ 0 ] ),
							getNormalIndex( vertexNormals[ 1 ] ),
							getNormalIndex( vertexNormals[ 2 ] )
						);

					}

					if ( hasFaceColor ) {

						faces.push( getColorIndex( face.color ) );

					}

					if ( hasFaceVertexColor ) {

						var vertexColors = face.vertexColors;

						faces.push(
							getColorIndex( vertexColors[ 0 ] ),
							getColorIndex( vertexColors[ 1 ] ),
							getColorIndex( vertexColors[ 2 ] )
						);

					}

				}

				function setBit( value, position, enabled ) {

					return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

				}

				function getNormalIndex( normal ) {

					var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

					if ( normalsHash[ hash ] !== undefined ) {

						return normalsHash[ hash ];

					}

					normalsHash[ hash ] = normals.length / 3;
					normals.push( normal.x, normal.y, normal.z );

					return normalsHash[ hash ];

				}

				function getColorIndex( color ) {

					var hash = color.r.toString() + color.g.toString() + color.b.toString();

					if ( colorsHash[ hash ] !== undefined ) {

						return colorsHash[ hash ];

					}

					colorsHash[ hash ] = colors.length;
					colors.push( color.getHex() );

					return colorsHash[ hash ];

				}

				function getUvIndex( uv ) {

					var hash = uv.x.toString() + uv.y.toString();

					if ( uvsHash[ hash ] !== undefined ) {

						return uvsHash[ hash ];

					}

					uvsHash[ hash ] = uvs.length / 2;
					uvs.push( uv.x, uv.y );

					return uvsHash[ hash ];

				}

				data.data = {};

				data.data.vertices = vertices;
				data.data.normals = normals;
				if ( colors.length > 0 ) data.data.colors = colors;
				if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
				data.data.faces = faces;

				return data;

			},

			clone: function () {

				/*
				// Handle primitives

				var parameters = this.parameters;

				if ( parameters !== undefined ) {

					var values = [];

					for ( var key in parameters ) {

						values.push( parameters[ key ] );

					}

					var geometry = Object.create( this.constructor.prototype );
					this.constructor.apply( geometry, values );
					return geometry;

				}

				return new this.constructor().copy( this );
				*/

				return new THREE.Geometry().copy( this );

			},

			copy: function ( source ) {

				this.vertices = [];
				this.faces = [];
				this.faceVertexUvs = [ [] ];

				var vertices = source.vertices;

				for ( var i = 0, il = vertices.length; i < il; i ++ ) {

					this.vertices.push( vertices[ i ].clone() );

				}

				var faces = source.faces;

				for ( var i = 0, il = faces.length; i < il; i ++ ) {

					this.faces.push( faces[ i ].clone() );

				}

				for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

					var faceVertexUvs = source.faceVertexUvs[ i ];

					if ( this.faceVertexUvs[ i ] === undefined ) {

						this.faceVertexUvs[ i ] = [];

					}

					for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

						var uvs = faceVertexUvs[ j ], uvsCopy = [];

						for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {

							var uv = uvs[ k ];

							uvsCopy.push( uv.clone() );

						}

						this.faceVertexUvs[ i ].push( uvsCopy );

					}

				}

				return this;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		} );

		THREE.GeometryIdCount = 0;

		// File:src/core/DirectGeometry.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.DirectGeometry = function () {

			Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

			this.uuid = THREE.Math.generateUUID();

			this.name = '';
			this.type = 'DirectGeometry';

			this.indices = [];
			this.vertices = [];
			this.normals = [];
			this.colors = [];
			this.uvs = [];
			this.uvs2 = [];

			this.groups = [];

			this.morphTargets = {};

			this.skinWeights = [];
			this.skinIndices = [];

			// this.lineDistances = [];

			this.boundingBox = null;
			this.boundingSphere = null;

			// update flags

			this.verticesNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.groupsNeedUpdate = false;

		};

		Object.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {

			computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,
			computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,

			computeFaceNormals: function () {

				console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );

			},

			computeVertexNormals: function () {

				console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );

			},

			computeGroups: function ( geometry ) {

				var group;
				var groups = [];
				var materialIndex;

				var faces = geometry.faces;

				for ( var i = 0; i < faces.length; i ++ ) {

					var face = faces[ i ];

					// materials

					if ( face.materialIndex !== materialIndex ) {

						materialIndex = face.materialIndex;

						if ( group !== undefined ) {

							group.count = ( i * 3 ) - group.start;
							groups.push( group );

						}

						group = {
							start: i * 3,
							materialIndex: materialIndex
						};

					}

				}

				if ( group !== undefined ) {

					group.count = ( i * 3 ) - group.start;
					groups.push( group );

				}

				this.groups = groups;

			},

			fromGeometry: function ( geometry ) {

				var faces = geometry.faces;
				var vertices = geometry.vertices;
				var faceVertexUvs = geometry.faceVertexUvs;

				var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
				var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

				// morphs

				var morphTargets = geometry.morphTargets;
				var morphTargetsLength = morphTargets.length;

				var morphTargetsPosition;

				if ( morphTargetsLength > 0 ) {

					morphTargetsPosition = [];

					for ( var i = 0; i < morphTargetsLength; i ++ ) {

						morphTargetsPosition[ i ] = [];

					}

					this.morphTargets.position = morphTargetsPosition;

				}

				var morphNormals = geometry.morphNormals;
				var morphNormalsLength = morphNormals.length;

				var morphTargetsNormal;

				if ( morphNormalsLength > 0 ) {

					morphTargetsNormal = [];

					for ( var i = 0; i < morphNormalsLength; i ++ ) {

						morphTargetsNormal[ i ] = [];

					}

					this.morphTargets.normal = morphTargetsNormal;

				}

				// skins

				var skinIndices = geometry.skinIndices;
				var skinWeights = geometry.skinWeights;

				var hasSkinIndices = skinIndices.length === vertices.length;
				var hasSkinWeights = skinWeights.length === vertices.length;

				//

				for ( var i = 0; i < faces.length; i ++ ) {

					var face = faces[ i ];

					this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

					var vertexNormals = face.vertexNormals;

					if ( vertexNormals.length === 3 ) {

						this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

					} else {

						var normal = face.normal;

						this.normals.push( normal, normal, normal );

					}

					var vertexColors = face.vertexColors;

					if ( vertexColors.length === 3 ) {

						this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

					} else {

						var color = face.color;

						this.colors.push( color, color, color );

					}

					if ( hasFaceVertexUv === true ) {

						var vertexUvs = faceVertexUvs[ 0 ][ i ];

						if ( vertexUvs !== undefined ) {

							this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

						} else {

							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

							this.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );

						}

					}

					if ( hasFaceVertexUv2 === true ) {

						var vertexUvs = faceVertexUvs[ 1 ][ i ];

						if ( vertexUvs !== undefined ) {

							this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

						} else {

							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

							this.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );

						}

					}

					// morphs

					for ( var j = 0; j < morphTargetsLength; j ++ ) {

						var morphTarget = morphTargets[ j ].vertices;

						morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

					}

					for ( var j = 0; j < morphNormalsLength; j ++ ) {

						var morphNormal = morphNormals[ j ].vertexNormals[ i ];

						morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

					}

					// skins

					if ( hasSkinIndices ) {

						this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

					}

					if ( hasSkinWeights ) {

						this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

					}

				}

				this.computeGroups( geometry );

				this.verticesNeedUpdate = geometry.verticesNeedUpdate;
				this.normalsNeedUpdate = geometry.normalsNeedUpdate;
				this.colorsNeedUpdate = geometry.colorsNeedUpdate;
				this.uvsNeedUpdate = geometry.uvsNeedUpdate;
				this.groupsNeedUpdate = geometry.groupsNeedUpdate;

				return this;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		} );

		// File:src/core/BufferGeometry.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.BufferGeometry = function () {

			Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

			this.uuid = THREE.Math.generateUUID();

			this.name = '';
			this.type = 'BufferGeometry';

			this.index = null;
			this.attributes = {};

			this.morphAttributes = {};

			this.groups = [];

			this.boundingBox = null;
			this.boundingSphere = null;

			this.drawRange = { start: 0, count: Infinity };

		};

		Object.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {

			getIndex: function () {

				return this.index;

			},

			setIndex: function ( index ) {

				this.index = index;

			},

			addAttribute: function ( name, attribute ) {

				if ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {

					console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

					this.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

					return;

				}

				if ( name === 'index' ) {

					console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
					this.setIndex( attribute );

					return;

				}

				this.attributes[ name ] = attribute;

				return this;

			},

			getAttribute: function ( name ) {

				return this.attributes[ name ];

			},

			removeAttribute: function ( name ) {

				delete this.attributes[ name ];

				return this;

			},

			addGroup: function ( start, count, materialIndex ) {

				this.groups.push( {

					start: start,
					count: count,
					materialIndex: materialIndex !== undefined ? materialIndex : 0

				} );

			},

			clearGroups: function () {

				this.groups = [];

			},

			setDrawRange: function ( start, count ) {

				this.drawRange.start = start;
				this.drawRange.count = count;

			},

			applyMatrix: function ( matrix ) {

				var position = this.attributes.position;

				if ( position !== undefined ) {

					matrix.applyToVector3Array( position.array );
					position.needsUpdate = true;

				}

				var normal = this.attributes.normal;

				if ( normal !== undefined ) {

					var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

					normalMatrix.applyToVector3Array( normal.array );
					normal.needsUpdate = true;

				}

				if ( this.boundingBox !== null ) {

					this.computeBoundingBox();

				}

				if ( this.boundingSphere !== null ) {

					this.computeBoundingSphere();

				}

				return this;

			},

			rotateX: function () {

				// rotate geometry around world x-axis

				var m1;

				return function rotateX( angle ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeRotationX( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			rotateY: function () {

				// rotate geometry around world y-axis

				var m1;

				return function rotateY( angle ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeRotationY( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			rotateZ: function () {

				// rotate geometry around world z-axis

				var m1;

				return function rotateZ( angle ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeRotationZ( angle );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			translate: function () {

				// translate geometry

				var m1;

				return function translate( x, y, z ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeTranslation( x, y, z );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			scale: function () {

				// scale geometry

				var m1;

				return function scale( x, y, z ) {

					if ( m1 === undefined ) m1 = new THREE.Matrix4();

					m1.makeScale( x, y, z );

					this.applyMatrix( m1 );

					return this;

				};

			}(),

			lookAt: function () {

				var obj;

				return function lookAt( vector ) {

					if ( obj === undefined ) obj = new THREE.Object3D();

					obj.lookAt( vector );

					obj.updateMatrix();

					this.applyMatrix( obj.matrix );

				};

			}(),

			center: function () {

				this.computeBoundingBox();

				var offset = this.boundingBox.center().negate();

				this.translate( offset.x, offset.y, offset.z );

				return offset;

			},

			setFromObject: function ( object ) {

				// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

				var geometry = object.geometry;

				if ( object instanceof THREE.Points || object instanceof THREE.Line ) {

					var positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );
					var colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );

					this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
					this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

					if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

						var lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );

						this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

					}

					if ( geometry.boundingSphere !== null ) {

						this.boundingSphere = geometry.boundingSphere.clone();

					}

					if ( geometry.boundingBox !== null ) {

						this.boundingBox = geometry.boundingBox.clone();

					}

				} else if ( object instanceof THREE.Mesh ) {

					if ( geometry instanceof THREE.Geometry ) {

						this.fromGeometry( geometry );

					}

				}

				return this;

			},

			updateFromObject: function ( object ) {

				var geometry = object.geometry;

				if ( object instanceof THREE.Mesh ) {

					var direct = geometry.__directGeometry;

					if ( direct === undefined || geometry.elementsNeedUpdate === true ) {

						return this.fromGeometry( geometry );

					}

					direct.verticesNeedUpdate = geometry.verticesNeedUpdate || geometry.elementsNeedUpdate;
					direct.normalsNeedUpdate = geometry.normalsNeedUpdate || geometry.elementsNeedUpdate;
					direct.colorsNeedUpdate = geometry.colorsNeedUpdate || geometry.elementsNeedUpdate;
					direct.uvsNeedUpdate = geometry.uvsNeedUpdate || geometry.elementsNeedUpdate;
					direct.groupsNeedUpdate = geometry.groupsNeedUpdate || geometry.elementsNeedUpdate;

					geometry.elementsNeedUpdate = false;
					geometry.verticesNeedUpdate = false;
					geometry.normalsNeedUpdate = false;
					geometry.colorsNeedUpdate = false;
					geometry.uvsNeedUpdate = false;
					geometry.groupsNeedUpdate = false;

					geometry = direct;

				}

				var attribute;

				if ( geometry.verticesNeedUpdate === true ) {

					attribute = this.attributes.position;

					if ( attribute !== undefined ) {

						attribute.copyVector3sArray( geometry.vertices );
						attribute.needsUpdate = true;

					}

					geometry.verticesNeedUpdate = false;

				}

				if ( geometry.normalsNeedUpdate === true ) {

					attribute = this.attributes.normal;

					if ( attribute !== undefined ) {

						attribute.copyVector3sArray( geometry.normals );
						attribute.needsUpdate = true;

					}

					geometry.normalsNeedUpdate = false;

				}

				if ( geometry.colorsNeedUpdate === true ) {

					attribute = this.attributes.color;

					if ( attribute !== undefined ) {

						attribute.copyColorsArray( geometry.colors );
						attribute.needsUpdate = true;

					}

					geometry.colorsNeedUpdate = false;

				}

				if ( geometry.uvsNeedUpdate ) {

					attribute = this.attributes.uv;

					if ( attribute !== undefined ) {

						attribute.copyVector2sArray( geometry.uvs );
						attribute.needsUpdate = true;

					}

					geometry.uvsNeedUpdate = false;

				}

				if ( geometry.lineDistancesNeedUpdate ) {

					attribute = this.attributes.lineDistance;

					if ( attribute !== undefined ) {

						attribute.copyArray( geometry.lineDistances );
						attribute.needsUpdate = true;

					}

					geometry.lineDistancesNeedUpdate = false;

				}

				if ( geometry.groupsNeedUpdate ) {

					geometry.computeGroups( object.geometry );
					this.groups = geometry.groups;

					geometry.groupsNeedUpdate = false;

				}

				return this;

			},

			fromGeometry: function ( geometry ) {

				geometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );

				return this.fromDirectGeometry( geometry.__directGeometry );

			},

			fromDirectGeometry: function ( geometry ) {

				var positions = new Float32Array( geometry.vertices.length * 3 );
				this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

				if ( geometry.normals.length > 0 ) {

					var normals = new Float32Array( geometry.normals.length * 3 );
					this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

				}

				if ( geometry.colors.length > 0 ) {

					var colors = new Float32Array( geometry.colors.length * 3 );
					this.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

				}

				if ( geometry.uvs.length > 0 ) {

					var uvs = new Float32Array( geometry.uvs.length * 2 );
					this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

				}

				if ( geometry.uvs2.length > 0 ) {

					var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
					this.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

				}

				if ( geometry.indices.length > 0 ) {

					var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
					var indices = new TypeArray( geometry.indices.length * 3 );
					this.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

				}

				// groups

				this.groups = geometry.groups;

				// morphs

				for ( var name in geometry.morphTargets ) {

					var array = [];
					var morphTargets = geometry.morphTargets[ name ];

					for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

						var morphTarget = morphTargets[ i ];

						var attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );

						array.push( attribute.copyVector3sArray( morphTarget ) );

					}

					this.morphAttributes[ name ] = array;

				}

				// skinning

				if ( geometry.skinIndices.length > 0 ) {

					var skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );
					this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

				}

				if ( geometry.skinWeights.length > 0 ) {

					var skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );
					this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

				}

				//

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

				return this;

			},

			computeBoundingBox: function () {

				if ( this.boundingBox === null ) {

					this.boundingBox = new THREE.Box3();

				}

				var positions = this.attributes.position.array;

				if ( positions !== undefined ) {

					this.boundingBox.setFromArray( positions );

				} else {

					this.boundingBox.makeEmpty();

				}

				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

				}

			},

			computeBoundingSphere: function () {

				var box = new THREE.Box3();
				var vector = new THREE.Vector3();

				return function computeBoundingSphere() {

					if ( this.boundingSphere === null ) {

						this.boundingSphere = new THREE.Sphere();

					}

					var positions = this.attributes.position;

					if ( positions ) {

						var array = positions.array;
						var center = this.boundingSphere.center;

						box.setFromArray( array );
						box.center( center );

						// hoping to find a boundingSphere with a radius smaller than the
						// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

						var maxRadiusSq = 0;

						for ( var i = 0, il = array.length; i < il; i += 3 ) {

							vector.fromArray( array, i );
							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

						}

						this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

						if ( isNaN( this.boundingSphere.radius ) ) {

							console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

						}

					}

				};

			}(),

			computeFaceNormals: function () {

				// backwards compatibility

			},

			computeVertexNormals: function () {

				var index = this.index;
				var attributes = this.attributes;
				var groups = this.groups;

				if ( attributes.position ) {

					var positions = attributes.position.array;

					if ( attributes.normal === undefined ) {

						this.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );

					} else {

						// reset existing normals to zero

						var array = attributes.normal.array;

						for ( var i = 0, il = array.length; i < il; i ++ ) {

							array[ i ] = 0;

						}

					}

					var normals = attributes.normal.array;

					var vA, vB, vC,

					pA = new THREE.Vector3(),
					pB = new THREE.Vector3(),
					pC = new THREE.Vector3(),

					cb = new THREE.Vector3(),
					ab = new THREE.Vector3();

					// indexed elements

					if ( index ) {

						var indices = index.array;

						if ( groups.length === 0 ) {

							this.addGroup( 0, indices.length );

						}

						for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

							var group = groups[ j ];

							var start = group.start;
							var count = group.count;

							for ( var i = start, il = start + count; i < il; i += 3 ) {

								vA = indices[ i + 0 ] * 3;
								vB = indices[ i + 1 ] * 3;
								vC = indices[ i + 2 ] * 3;

								pA.fromArray( positions, vA );
								pB.fromArray( positions, vB );
								pC.fromArray( positions, vC );

								cb.subVectors( pC, pB );
								ab.subVectors( pA, pB );
								cb.cross( ab );

								normals[ vA ] += cb.x;
								normals[ vA + 1 ] += cb.y;
								normals[ vA + 2 ] += cb.z;

								normals[ vB ] += cb.x;
								normals[ vB + 1 ] += cb.y;
								normals[ vB + 2 ] += cb.z;

								normals[ vC ] += cb.x;
								normals[ vC + 1 ] += cb.y;
								normals[ vC + 2 ] += cb.z;

							}

						}

					} else {

						// non-indexed elements (unconnected triangle soup)

						for ( var i = 0, il = positions.length; i < il; i += 9 ) {

							pA.fromArray( positions, i );
							pB.fromArray( positions, i + 3 );
							pC.fromArray( positions, i + 6 );

							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );

							normals[ i ] = cb.x;
							normals[ i + 1 ] = cb.y;
							normals[ i + 2 ] = cb.z;

							normals[ i + 3 ] = cb.x;
							normals[ i + 4 ] = cb.y;
							normals[ i + 5 ] = cb.z;

							normals[ i + 6 ] = cb.x;
							normals[ i + 7 ] = cb.y;
							normals[ i + 8 ] = cb.z;

						}

					}

					this.normalizeNormals();

					attributes.normal.needsUpdate = true;

				}

			},

			merge: function ( geometry, offset ) {

				if ( geometry instanceof THREE.BufferGeometry === false ) {

					console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
					return;

				}

				if ( offset === undefined ) offset = 0;

				var attributes = this.attributes;

				for ( var key in attributes ) {

					if ( geometry.attributes[ key ] === undefined ) continue;

					var attribute1 = attributes[ key ];
					var attributeArray1 = attribute1.array;

					var attribute2 = geometry.attributes[ key ];
					var attributeArray2 = attribute2.array;

					var attributeSize = attribute2.itemSize;

					for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

						attributeArray1[ j ] = attributeArray2[ i ];

					}

				}

				return this;

			},

			normalizeNormals: function () {

				var normals = this.attributes.normal.array;

				var x, y, z, n;

				for ( var i = 0, il = normals.length; i < il; i += 3 ) {

					x = normals[ i ];
					y = normals[ i + 1 ];
					z = normals[ i + 2 ];

					n = 1.0 / Math.sqrt( x * x + y * y + z * z );

					normals[ i ] *= n;
					normals[ i + 1 ] *= n;
					normals[ i + 2 ] *= n;

				}

			},

			toNonIndexed: function () {

				if ( this.index === null ) {

					console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
					return this;

				}

				var geometry2 = new THREE.BufferGeometry();

				var indices = this.index.array;
				var attributes = this.attributes;

				for ( var name in attributes ) {

					var attribute = attributes[ name ];

					var array = attribute.array;
					var itemSize = attribute.itemSize;

					var array2 = new array.constructor( indices.length * itemSize );

					var index = 0, index2 = 0;

					for ( var i = 0, l = indices.length; i < l; i ++ ) {

						index = indices[ i ] * itemSize;

						for ( var j = 0; j < itemSize; j ++ ) {

							array2[ index2 ++ ] = array[ index ++ ];

						}

					}

					geometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );

				}

				return geometry2;

			},

			toJSON: function () {

				var data = {
					metadata: {
						version: 4.4,
						type: 'BufferGeometry',
						generator: 'BufferGeometry.toJSON'
					}
				};

				// standard BufferGeometry serialization

				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) data.name = this.name;

				if ( this.parameters !== undefined ) {

					var parameters = this.parameters;

					for ( var key in parameters ) {

						if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

					}

					return data;

				}

				data.data = { attributes: {} };

				var index = this.index;

				if ( index !== null ) {

					var array = Array.prototype.slice.call( index.array );

					data.data.index = {
						type: index.array.constructor.name,
						array: array
					};

				}

				var attributes = this.attributes;

				for ( var key in attributes ) {

					var attribute = attributes[ key ];

					var array = Array.prototype.slice.call( attribute.array );

					data.data.attributes[ key ] = {
						itemSize: attribute.itemSize,
						type: attribute.array.constructor.name,
						array: array,
						normalized: attribute.normalized
					};

				}

				var groups = this.groups;

				if ( groups.length > 0 ) {

					data.data.groups = JSON.parse( JSON.stringify( groups ) );

				}

				var boundingSphere = this.boundingSphere;

				if ( boundingSphere !== null ) {

					data.data.boundingSphere = {
						center: boundingSphere.center.toArray(),
						radius: boundingSphere.radius
					};

				}

				return data;

			},

			clone: function () {

				/*
				// Handle primitives

				var parameters = this.parameters;

				if ( parameters !== undefined ) {

					var values = [];

					for ( var key in parameters ) {

						values.push( parameters[ key ] );

					}

					var geometry = Object.create( this.constructor.prototype );
					this.constructor.apply( geometry, values );
					return geometry;

				}

				return new this.constructor().copy( this );
				*/

				return new THREE.BufferGeometry().copy( this );

			},

			copy: function ( source ) {

				var index = source.index;

				if ( index !== null ) {

					this.setIndex( index.clone() );

				}

				var attributes = source.attributes;

				for ( var name in attributes ) {

					var attribute = attributes[ name ];
					this.addAttribute( name, attribute.clone() );

				}

				var groups = source.groups;

				for ( var i = 0, l = groups.length; i < l; i ++ ) {

					var group = groups[ i ];
					this.addGroup( group.start, group.count, group.materialIndex );

				}

				return this;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		} );

		THREE.BufferGeometry.MaxIndex = 65535;

		// File:src/core/InstancedBufferGeometry.js

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		THREE.InstancedBufferGeometry = function () {

			THREE.BufferGeometry.call( this );

			this.type = 'InstancedBufferGeometry';
			this.maxInstancedCount = undefined;

		};

		THREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;

		THREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {

			this.groups.push( {

				start: start,
				count: count,
				instances: instances

			} );

		};

		THREE.InstancedBufferGeometry.prototype.copy = function ( source ) {

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			var attributes = source.attributes;

			for ( var name in attributes ) {

				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );

			}

			var groups = source.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.instances );

			}

			return this;

		};

		// File:src/core/Uniform.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Uniform = function ( value ) {

			if ( typeof value === 'string' ) {

				console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
				value = arguments[ 1 ];

			}

			this.value = value;

			this.dynamic = false;

		};

		THREE.Uniform.prototype = {

			constructor: THREE.Uniform,

			onUpdate: function ( callback ) {

				this.dynamic = true;
				this.onUpdateCallback = callback;

				return this;

			}

		};

		// File:src/animation/AnimationAction.js

		/**
		 *
		 * Action provided by AnimationMixer for scheduling clip playback on specific
		 * objects.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 *
		 */

		THREE.AnimationAction = function() {

			throw new Error( "THREE.AnimationAction: " +
					"Use mixer.clipAction for construction." );

		};

		THREE.AnimationAction._new =
				function AnimationAction( mixer, clip, localRoot ) {

			this._mixer = mixer;
			this._clip = clip;
			this._localRoot = localRoot || null;

			var tracks = clip.tracks,
				nTracks = tracks.length,
				interpolants = new Array( nTracks );

			var interpolantSettings = {
					endingStart: 	THREE.ZeroCurvatureEnding,
					endingEnd:		THREE.ZeroCurvatureEnding
			};

			for ( var i = 0; i !== nTracks; ++ i ) {

				var interpolant = tracks[ i ].createInterpolant( null );
				interpolants[ i ] = interpolant;
				interpolant.settings = interpolantSettings;

			}

			this._interpolantSettings = interpolantSettings;

			this._interpolants = interpolants;	// bound by the mixer

			// inside: PropertyMixer (managed by the mixer)
			this._propertyBindings = new Array( nTracks );

			this._cacheIndex = null;			// for the memory manager
			this._byClipCacheIndex = null;		// for the memory manager

			this._timeScaleInterpolant = null;
			this._weightInterpolant = null;

			this.loop = THREE.LoopRepeat;
			this._loopCount = -1;

			// global mixer time when the action is to be started
			// it's set back to 'null' upon start of the action
			this._startTime = null;

			// scaled local time of the action
			// gets clamped or wrapped to 0..clip.duration according to loop
			this.time = 0;

			this.timeScale = 1;
			this._effectiveTimeScale = 1;

			this.weight = 1;
			this._effectiveWeight = 1;

			this.repetitions = Infinity; 		// no. of repetitions when looping

			this.paused = false;				// false -> zero effective time scale
			this.enabled = true;				// true -> zero effective weight

			this.clampWhenFinished 	= false;	// keep feeding the last frame?

			this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
			this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

		};

		THREE.AnimationAction._new.prototype = {

			constructor: THREE.AnimationAction._new,

			// State & Scheduling

			play: function() {

				this._mixer._activateAction( this );

				return this;

			},

			stop: function() {

				this._mixer._deactivateAction( this );

				return this.reset();

			},

			reset: function() {

				this.paused = false;
				this.enabled = true;

				this.time = 0;			// restart clip
				this._loopCount = -1;	// forget previous loops
				this._startTime = null;	// forget scheduling

				return this.stopFading().stopWarping();

			},

			isRunning: function() {

				var start = this._startTime;

				return this.enabled && ! this.paused && this.timeScale !== 0 &&
						this._startTime === null && this._mixer._isActiveAction( this );

			},

			// return true when play has been called
			isScheduled: function() {

				return this._mixer._isActiveAction( this );

			},

			startAt: function( time ) {

				this._startTime = time;

				return this;

			},

			setLoop: function( mode, repetitions ) {

				this.loop = mode;
				this.repetitions = repetitions;

				return this;

			},

			// Weight

			// set the weight stopping any scheduled fading
			// although .enabled = false yields an effective weight of zero, this
			// method does *not* change .enabled, because it would be confusing
			setEffectiveWeight: function( weight ) {

				this.weight = weight;

				// note: same logic as when updated at runtime
				this._effectiveWeight = this.enabled ? weight : 0;

				return this.stopFading();

			},

			// return the weight considering fading and .enabled
			getEffectiveWeight: function() {

				return this._effectiveWeight;

			},

			fadeIn: function( duration ) {

				return this._scheduleFading( duration, 0, 1 );

			},

			fadeOut: function( duration ) {

				return this._scheduleFading( duration, 1, 0 );

			},

			crossFadeFrom: function( fadeOutAction, duration, warp ) {

				var mixer = this._mixer;

				fadeOutAction.fadeOut( duration );
				this.fadeIn( duration );

				if( warp ) {

					var fadeInDuration = this._clip.duration,
						fadeOutDuration = fadeOutAction._clip.duration,

						startEndRatio = fadeOutDuration / fadeInDuration,
						endStartRatio = fadeInDuration / fadeOutDuration;

					fadeOutAction.warp( 1.0, startEndRatio, duration );
					this.warp( endStartRatio, 1.0, duration );

				}

				return this;

			},

			crossFadeTo: function( fadeInAction, duration, warp ) {

				return fadeInAction.crossFadeFrom( this, duration, warp );

			},

			stopFading: function() {

				var weightInterpolant = this._weightInterpolant;

				if ( weightInterpolant !== null ) {

					this._weightInterpolant = null;
					this._mixer._takeBackControlInterpolant( weightInterpolant );

				}

				return this;

			},

			// Time Scale Control

			// set the weight stopping any scheduled warping
			// although .paused = true yields an effective time scale of zero, this
			// method does *not* change .paused, because it would be confusing
			setEffectiveTimeScale: function( timeScale ) {

				this.timeScale = timeScale;
				this._effectiveTimeScale = this.paused ? 0 :timeScale;

				return this.stopWarping();

			},

			// return the time scale considering warping and .paused
			getEffectiveTimeScale: function() {

				return this._effectiveTimeScale;

			},

			setDuration: function( duration ) {

				this.timeScale = this._clip.duration / duration;

				return this.stopWarping();

			},

			syncWith: function( action ) {

				this.time = action.time;
				this.timeScale = action.timeScale;

				return this.stopWarping();

			},

			halt: function( duration ) {

				return this.warp( this._effectiveTimeScale, 0, duration );

			},

			warp: function( startTimeScale, endTimeScale, duration ) {

				var mixer = this._mixer, now = mixer.time,
					interpolant = this._timeScaleInterpolant,

					timeScale = this.timeScale;

				if ( interpolant === null ) {

					interpolant = mixer._lendControlInterpolant(),
					this._timeScaleInterpolant = interpolant;

				}

				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;

				times[ 0 ] = now;
				times[ 1 ] = now + duration;

				values[ 0 ] = startTimeScale / timeScale;
				values[ 1 ] = endTimeScale / timeScale;

				return this;

			},

			stopWarping: function() {

				var timeScaleInterpolant = this._timeScaleInterpolant;

				if ( timeScaleInterpolant !== null ) {

					this._timeScaleInterpolant = null;
					this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

				}

				return this;

			},

			// Object Accessors

			getMixer: function() {

				return this._mixer;

			},

			getClip: function() {

				return this._clip;

			},

			getRoot: function() {

				return this._localRoot || this._mixer._root;

			},

			// Interna

			_update: function( time, deltaTime, timeDirection, accuIndex ) {
				// called by the mixer

				var startTime = this._startTime;

				if ( startTime !== null ) {

					// check for scheduled start of action

					var timeRunning = ( time - startTime ) * timeDirection;
					if ( timeRunning < 0 || timeDirection === 0 ) {

						return; // yet to come / don't decide when delta = 0

					}

					// start

					this._startTime = null; // unschedule
					deltaTime = timeDirection * timeRunning;

				}

				// apply time scale and advance time

				deltaTime *= this._updateTimeScale( time );
				var clipTime = this._updateTime( deltaTime );

				// note: _updateTime may disable the action resulting in
				// an effective weight of 0

				var weight = this._updateWeight( time );

				if ( weight > 0 ) {

					var interpolants = this._interpolants;
					var propertyMixers = this._propertyBindings;

					for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

						interpolants[ j ].evaluate( clipTime );
						propertyMixers[ j ].accumulate( accuIndex, weight );

					}

				}

			},

			_updateWeight: function( time ) {

				var weight = 0;

				if ( this.enabled ) {

					weight = this.weight;
					var interpolant = this._weightInterpolant;

					if ( interpolant !== null ) {

						var interpolantValue = interpolant.evaluate( time )[ 0 ];

						weight *= interpolantValue;

						if ( time > interpolant.parameterPositions[ 1 ] ) {

							this.stopFading();

							if ( interpolantValue === 0 ) {

								// faded out, disable
								this.enabled = false;

							}

						}

					}

				}

				this._effectiveWeight = weight;
				return weight;

			},

			_updateTimeScale: function( time ) {

				var timeScale = 0;

				if ( ! this.paused ) {

					timeScale = this.timeScale;

					var interpolant = this._timeScaleInterpolant;

					if ( interpolant !== null ) {

						var interpolantValue = interpolant.evaluate( time )[ 0 ];

						timeScale *= interpolantValue;

						if ( time > interpolant.parameterPositions[ 1 ] ) {

							this.stopWarping();

							if ( timeScale === 0 ) {

								// motion has halted, pause
								this.paused = true;

							} else {

								// warp done - apply final time scale
								this.timeScale = timeScale;

							}

						}

					}

				}

				this._effectiveTimeScale = timeScale;
				return timeScale;

			},

			_updateTime: function( deltaTime ) {

				var time = this.time + deltaTime;

				if ( deltaTime === 0 ) return time;

				var duration = this._clip.duration,

					loop = this.loop,
					loopCount = this._loopCount;

				if ( loop === THREE.LoopOnce ) {

					if ( loopCount === -1 ) {
						// just started

						this.loopCount = 0;
						this._setEndings( true, true, false );

					}

					handle_stop: {

						if ( time >= duration ) {

							time = duration;

						} else if ( time < 0 ) {

							time = 0;

						} else break handle_stop;

						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime < 0 ? -1 : 1
						} );

					}

				} else { // repetitive Repeat or PingPong

					var pingPong = ( loop === THREE.LoopPingPong );

					if ( loopCount === -1 ) {
						// just started

						if ( deltaTime >= 0 ) {

							loopCount = 0;

							this._setEndings(
									true, this.repetitions === 0, pingPong );

						} else {

							// when looping in reverse direction, the initial
							// transition through zero counts as a repetition,
							// so leave loopCount at -1

							this._setEndings(
									this.repetitions === 0, true, pingPong );

						}

					}

					if ( time >= duration || time < 0 ) {
						// wrap around

						var loopDelta = Math.floor( time / duration ); // signed
						time -= duration * loopDelta;

						loopCount += Math.abs( loopDelta );

						var pending = this.repetitions - loopCount;

						if ( pending < 0 ) {
							// have to stop (switch state, clamp time, fire event)

							if ( this.clampWhenFinished ) this.paused = true;
							else this.enabled = false;

							time = deltaTime > 0 ? duration : 0;

							this._mixer.dispatchEvent( {
								type: 'finished', action: this,
								direction: deltaTime > 0 ? 1 : -1
							} );

						} else {
							// keep running

							if ( pending === 0 ) {
								// entering the last round

								var atStart = deltaTime < 0;
								this._setEndings( atStart, ! atStart, pingPong );

							} else {

								this._setEndings( false, false, pingPong );

							}

							this._loopCount = loopCount;

							this._mixer.dispatchEvent( {
								type: 'loop', action: this, loopDelta: loopDelta
							} );

						}

					}

					if ( pingPong && ( loopCount & 1 ) === 1 ) {
						// invert time for the "pong round"

						this.time = time;
						return duration - time;

					}

				}

				this.time = time;
				return time;

			},

			_setEndings: function( atStart, atEnd, pingPong ) {

				var settings = this._interpolantSettings;

				if ( pingPong ) {

					settings.endingStart 	= THREE.ZeroSlopeEnding;
					settings.endingEnd		= THREE.ZeroSlopeEnding;

				} else {

					// assuming for LoopOnce atStart == atEnd == true

					if ( atStart ) {

						settings.endingStart = this.zeroSlopeAtStart ?
								THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;

					} else {

						settings.endingStart = THREE.WrapAroundEnding;

					}

					if ( atEnd ) {

						settings.endingEnd = this.zeroSlopeAtEnd ?
								THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;

					} else {

						settings.endingEnd 	 = THREE.WrapAroundEnding;

					}

				}

			},

			_scheduleFading: function( duration, weightNow, weightThen ) {

				var mixer = this._mixer, now = mixer.time,
					interpolant = this._weightInterpolant;

				if ( interpolant === null ) {

					interpolant = mixer._lendControlInterpolant(),
					this._weightInterpolant = interpolant;

				}

				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;

				times[ 0 ] = now; 				values[ 0 ] = weightNow;
				times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

				return this;

			}

		};


		// File:src/animation/AnimationClip.js

		/**
		 *
		 * Reusable set of Tracks that represent an animation.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */

		THREE.AnimationClip = function ( name, duration, tracks ) {

			this.name = name;
			this.tracks = tracks;
			this.duration = ( duration !== undefined ) ? duration : -1;

			this.uuid = THREE.Math.generateUUID();

			// this means it should figure out its duration by scanning the tracks
			if ( this.duration < 0 ) {

				this.resetDuration();

			}

			// maybe only do these on demand, as doing them here could potentially slow down loading
			// but leaving these here during development as this ensures a lot of testing of these functions
			this.trim();
			this.optimize();

		};

		THREE.AnimationClip.prototype = {

			constructor: THREE.AnimationClip,

			resetDuration: function() {

				var tracks = this.tracks,
					duration = 0;

				for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

					var track = this.tracks[ i ];

					duration = Math.max(
							duration, track.times[ track.times.length - 1 ] );

				}

				this.duration = duration;

			},

			trim: function() {

				for ( var i = 0; i < this.tracks.length; i ++ ) {

					this.tracks[ i ].trim( 0, this.duration );

				}

				return this;

			},

			optimize: function() {

				for ( var i = 0; i < this.tracks.length; i ++ ) {

					this.tracks[ i ].optimize();

				}

				return this;

			}

		};

		// Static methods:

		Object.assign( THREE.AnimationClip, {

			parse: function( json ) {

				var tracks = [],
					jsonTracks = json.tracks,
					frameTime = 1.0 / ( json.fps || 1.0 );

				for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

					tracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

				}

				return new THREE.AnimationClip( json.name, json.duration, tracks );

			},


			toJSON: function( clip ) {

				var tracks = [],
					clipTracks = clip.tracks;

				var json = {

					'name': clip.name,
					'duration': clip.duration,
					'tracks': tracks

				};

				for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

					tracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );

				}

				return json;

			},


			CreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {

				var numMorphTargets = morphTargetSequence.length;
				var tracks = [];

				for ( var i = 0; i < numMorphTargets; i ++ ) {

					var times = [];
					var values = [];

					times.push(
							( i + numMorphTargets - 1 ) % numMorphTargets,
							i,
							( i + 1 ) % numMorphTargets );

					values.push( 0, 1, 0 );

					var order = THREE.AnimationUtils.getKeyframeOrder( times );
					times = THREE.AnimationUtils.sortedArray( times, 1, order );
					values = THREE.AnimationUtils.sortedArray( values, 1, order );

					// if there is a key at the first frame, duplicate it as the
					// last frame as well for perfect loop.
					if ( ! noLoop && times[ 0 ] === 0 ) {

						times.push( numMorphTargets );
						values.push( values[ 0 ] );

					}

					tracks.push(
							new THREE.NumberKeyframeTrack(
								'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
								times, values
							).scale( 1.0 / fps ) );
				}

				return new THREE.AnimationClip( name, -1, tracks );

			},

			findByName: function( objectOrClipArray, name ) {

				var clipArray = objectOrClipArray;

				if ( ! Array.isArray( objectOrClipArray ) ) {

					var o = objectOrClipArray;
					clipArray = o.geometry && o.geometry.animations || o.animations;

				}

				for ( var i = 0; i < clipArray.length; i ++ ) {

					if ( clipArray[ i ].name === name ) {

						return clipArray[ i ];

					}
				}

				return null;

			},

			CreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {

				var animationToMorphTargets = {};

				// tested with https://regex101.com/ on trick sequences
				// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
				var pattern = /^([\w-]*?)([\d]+)$/;

				// sort morph target names into animation groups based
				// patterns like Walk_001, Walk_002, Run_001, Run_002
				for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

					var morphTarget = morphTargets[ i ];
					var parts = morphTarget.name.match( pattern );

					if ( parts && parts.length > 1 ) {

						var name = parts[ 1 ];

						var animationMorphTargets = animationToMorphTargets[ name ];
						if ( ! animationMorphTargets ) {

							animationToMorphTargets[ name ] = animationMorphTargets = [];

						}

						animationMorphTargets.push( morphTarget );

					}

				}

				var clips = [];

				for ( var name in animationToMorphTargets ) {

					clips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

				}

				return clips;

			},

			// parse the animation.hierarchy format
			parseAnimation: function( animation, bones, nodeName ) {

				if ( ! animation ) {

					console.error( "  no animation in JSONLoader data" );
					return null;

				}

				var addNonemptyTrack = function(
						trackType, trackName, animationKeys, propertyName, destTracks ) {

					// only return track if there are actually keys.
					if ( animationKeys.length !== 0 ) {

						var times = [];
						var values = [];

						THREE.AnimationUtils.flattenJSON(
								animationKeys, times, values, propertyName );

						// empty keys are filtered out, so check again
						if ( times.length !== 0 ) {

							destTracks.push( new trackType( trackName, times, values ) );

						}

					}

				};

				var tracks = [];

				var clipName = animation.name || 'default';
				// automatic length determination in AnimationClip.
				var duration = animation.length || -1;
				var fps = animation.fps || 30;

				var hierarchyTracks = animation.hierarchy || [];

				for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

					var animationKeys = hierarchyTracks[ h ].keys;

					// skip empty tracks
					if ( ! animationKeys || animationKeys.length === 0 ) continue;

					// process morph targets in a way exactly compatible
					// with AnimationHandler.init( animation )
					if ( animationKeys[0].morphTargets ) {

						// figure out all morph targets used in this track
						var morphTargetNames = {};
						for ( var k = 0; k < animationKeys.length; k ++ ) {

							if ( animationKeys[k].morphTargets ) {

								for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {

									morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
								}

							}

						}

						// create a track for each morph target with all zero
						// morphTargetInfluences except for the keys in which
						// the morphTarget is named.
						for ( var morphTargetName in morphTargetNames ) {

							var times = [];
							var values = [];

							for ( var m = 0;
									m !== animationKeys[k].morphTargets.length; ++ m ) {

								var animationKey = animationKeys[k];

								times.push( animationKey.time );
								values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

							}

							tracks.push( new THREE.NumberKeyframeTrack(
									'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

						}

						duration = morphTargetNames.length * ( fps || 1.0 );

					} else {
						// ...assume skeletal animation

						var boneName = '.bones[' + bones[ h ].name + ']';

						addNonemptyTrack(
								THREE.VectorKeyframeTrack, boneName + '.position',
								animationKeys, 'pos', tracks );

						addNonemptyTrack(
								THREE.QuaternionKeyframeTrack, boneName + '.quaternion',
								animationKeys, 'rot', tracks );

						addNonemptyTrack(
								THREE.VectorKeyframeTrack, boneName + '.scale',
								animationKeys, 'scl', tracks );

					}

				}

				if ( tracks.length === 0 ) {

					return null;

				}

				var clip = new THREE.AnimationClip( clipName, duration, tracks );

				return clip;

			}

		} );

		// File:src/animation/AnimationMixer.js

		/**
		 *
		 * Player for AnimationClips.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.AnimationMixer = function( root ) {

			this._root = root;
			this._initMemoryManager();
			this._accuIndex = 0;

			this.time = 0;

			this.timeScale = 1.0;

		};

		Object.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {

			// return an action for a clip optionally using a custom root target
			// object (this method allocates a lot of dynamic memory in case a
			// previously unknown clip/root combination is specified)
			clipAction: function( clip, optionalRoot ) {

				var root = optionalRoot || this._root,
					rootUuid = root.uuid,

					clipObject = typeof clip === 'string' ?
							THREE.AnimationClip.findByName( root, clip ) : clip,

					clipUuid = clipObject !== null ? clipObject.uuid : clip,

					actionsForClip = this._actionsByClip[ clipUuid ],
					prototypeAction = null;

				if ( actionsForClip !== undefined ) {

					var existingAction =
							actionsForClip.actionByRoot[ rootUuid ];

					if ( existingAction !== undefined ) {

						return existingAction;

					}

					// we know the clip, so we don't have to parse all
					// the bindings again but can just copy
					prototypeAction = actionsForClip.knownActions[ 0 ];

					// also, take the clip from the prototype action
					if ( clipObject === null )
						clipObject = prototypeAction._clip;

				}

				// clip must be known when specified via string
				if ( clipObject === null ) return null;

				// allocate all resources required to run it
				var newAction = new THREE.
						AnimationMixer._Action( this, clipObject, optionalRoot );

				this._bindAction( newAction, prototypeAction );

				// and make the action known to the memory manager
				this._addInactiveAction( newAction, clipUuid, rootUuid );

				return newAction;

			},

			// get an existing action
			existingAction: function( clip, optionalRoot ) {

				var root = optionalRoot || this._root,
					rootUuid = root.uuid,

					clipObject = typeof clip === 'string' ?
							THREE.AnimationClip.findByName( root, clip ) : clip,

					clipUuid = clipObject ? clipObject.uuid : clip,

					actionsForClip = this._actionsByClip[ clipUuid ];

				if ( actionsForClip !== undefined ) {

					return actionsForClip.actionByRoot[ rootUuid ] || null;

				}

				return null;

			},

			// deactivates all previously scheduled actions
			stopAllAction: function() {

				var actions = this._actions,
					nActions = this._nActiveActions,
					bindings = this._bindings,
					nBindings = this._nActiveBindings;

				this._nActiveActions = 0;
				this._nActiveBindings = 0;

				for ( var i = 0; i !== nActions; ++ i ) {

					actions[ i ].reset();

				}

				for ( var i = 0; i !== nBindings; ++ i ) {

					bindings[ i ].useCount = 0;

				}

				return this;

			},

			// advance the time and update apply the animation
			update: function( deltaTime ) {

				deltaTime *= this.timeScale;

				var actions = this._actions,
					nActions = this._nActiveActions,

					time = this.time += deltaTime,
					timeDirection = Math.sign( deltaTime ),

					accuIndex = this._accuIndex ^= 1;

				// run active actions

				for ( var i = 0; i !== nActions; ++ i ) {

					var action = actions[ i ];

					if ( action.enabled ) {

						action._update( time, deltaTime, timeDirection, accuIndex );

					}

				}

				// update scene graph

				var bindings = this._bindings,
					nBindings = this._nActiveBindings;

				for ( var i = 0; i !== nBindings; ++ i ) {

					bindings[ i ].apply( accuIndex );

				}

				return this;

			},

			// return this mixer's root target object
			getRoot: function() {

				return this._root;

			},

			// free all resources specific to a particular clip
			uncacheClip: function( clip ) {

				var actions = this._actions,
					clipUuid = clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];

				if ( actionsForClip !== undefined ) {

					// note: just calling _removeInactiveAction would mess up the
					// iteration state and also require updating the state we can
					// just throw away

					var actionsToRemove = actionsForClip.knownActions;

					for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

						var action = actionsToRemove[ i ];

						this._deactivateAction( action );

						var cacheIndex = action._cacheIndex,
							lastInactiveAction = actions[ actions.length - 1 ];

						action._cacheIndex = null;
						action._byClipCacheIndex = null;

						lastInactiveAction._cacheIndex = cacheIndex;
						actions[ cacheIndex ] = lastInactiveAction;
						actions.pop();

						this._removeInactiveBindingsForAction( action );

					}

					delete actionsByClip[ clipUuid ];

				}

			},

			// free all resources specific to a particular root target object
			uncacheRoot: function( root ) {

				var rootUuid = root.uuid,
					actionsByClip = this._actionsByClip;

				for ( var clipUuid in actionsByClip ) {

					var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
						action = actionByRoot[ rootUuid ];

					if ( action !== undefined ) {

						this._deactivateAction( action );
						this._removeInactiveAction( action );

					}

				}

				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ];

				if ( bindingByName !== undefined ) {

					for ( var trackName in bindingByName ) {

						var binding = bindingByName[ trackName ];
						binding.restoreOriginalState();
						this._removeInactiveBinding( binding );

					}

				}

			},

			// remove a targeted clip from the cache
			uncacheAction: function( clip, optionalRoot ) {

				var action = this.existingAction( clip, optionalRoot );

				if ( action !== null ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

		} );

		THREE.AnimationMixer._Action = THREE.AnimationAction._new;

		// Implementation details:

		Object.assign( THREE.AnimationMixer.prototype, {

			_bindAction: function( action, prototypeAction ) {

				var root = action._localRoot || this._root,
					tracks = action._clip.tracks,
					nTracks = tracks.length,
					bindings = action._propertyBindings,
					interpolants = action._interpolants,
					rootUuid = root.uuid,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingsByName = bindingsByRoot[ rootUuid ];

				if ( bindingsByName === undefined ) {

					bindingsByName = {};
					bindingsByRoot[ rootUuid ] = bindingsByName;

				}

				for ( var i = 0; i !== nTracks; ++ i ) {

					var track = tracks[ i ],
						trackName = track.name,
						binding = bindingsByName[ trackName ];

					if ( binding !== undefined ) {

						bindings[ i ] = binding;

					} else {

						binding = bindings[ i ];

						if ( binding !== undefined ) {

							// existing binding, make sure the cache knows

							if ( binding._cacheIndex === null ) {

								++ binding.referenceCount;
								this._addInactiveBinding( binding, rootUuid, trackName );

							}

							continue;

						}

						var path = prototypeAction && prototypeAction.
								_propertyBindings[ i ].binding.parsedPath;

						binding = new THREE.PropertyMixer(
								THREE.PropertyBinding.create( root, trackName, path ),
								track.ValueTypeName, track.getValueSize() );

						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );

						bindings[ i ] = binding;

					}

					interpolants[ i ].resultBuffer = binding.buffer;

				}

			},

			_activateAction: function( action ) {

				if ( ! this._isActiveAction( action ) ) {

					if ( action._cacheIndex === null ) {

						// this action has been forgotten by the cache, but the user
						// appears to be still using it -> rebind

						var rootUuid = ( action._localRoot || this._root ).uuid,
							clipUuid = action._clip.uuid,
							actionsForClip = this._actionsByClip[ clipUuid ];

						this._bindAction( action,
								actionsForClip && actionsForClip.knownActions[ 0 ] );

						this._addInactiveAction( action, clipUuid, rootUuid );

					}

					var bindings = action._propertyBindings;

					// increment reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

						var binding = bindings[ i ];

						if ( binding.useCount ++ === 0 ) {

							this._lendBinding( binding );
							binding.saveOriginalState();

						}

					}

					this._lendAction( action );

				}

			},

			_deactivateAction: function( action ) {

				if ( this._isActiveAction( action ) ) {

					var bindings = action._propertyBindings;

					// decrement reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

						var binding = bindings[ i ];

						if ( -- binding.useCount === 0 ) {

							binding.restoreOriginalState();
							this._takeBackBinding( binding );

						}

					}

					this._takeBackAction( action );

				}

			},

			// Memory manager

			_initMemoryManager: function() {

				this._actions = []; // 'nActiveActions' followed by inactive ones
				this._nActiveActions = 0;

				this._actionsByClip = {};
				// inside:
				// {
				// 		knownActions: Array< _Action >	- used as prototypes
				// 		actionByRoot: _Action			- lookup
				// }


				this._bindings = []; // 'nActiveBindings' followed by inactive ones
				this._nActiveBindings = 0;

				this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


				this._controlInterpolants = []; // same game as above
				this._nActiveControlInterpolants = 0;

				var scope = this;

				this.stats = {

					actions: {
						get total() { return scope._actions.length; },
						get inUse() { return scope._nActiveActions; }
					},
					bindings: {
						get total() { return scope._bindings.length; },
						get inUse() { return scope._nActiveBindings; }
					},
					controlInterpolants: {
						get total() { return scope._controlInterpolants.length; },
						get inUse() { return scope._nActiveControlInterpolants; }
					}

				};

			},

			// Memory management for _Action objects

			_isActiveAction: function( action ) {

				var index = action._cacheIndex;
				return index !== null && index < this._nActiveActions;

			},

			_addInactiveAction: function( action, clipUuid, rootUuid ) {

				var actions = this._actions,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];

				if ( actionsForClip === undefined ) {

					actionsForClip = {

						knownActions: [ action ],
						actionByRoot: {}

					};

					action._byClipCacheIndex = 0;

					actionsByClip[ clipUuid ] = actionsForClip;

				} else {

					var knownActions = actionsForClip.knownActions;

					action._byClipCacheIndex = knownActions.length;
					knownActions.push( action );

				}

				action._cacheIndex = actions.length;
				actions.push( action );

				actionsForClip.actionByRoot[ rootUuid ] = action;

			},

			_removeInactiveAction: function( action ) {

				var actions = this._actions,
					lastInactiveAction = actions[ actions.length - 1 ],
					cacheIndex = action._cacheIndex;

				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();

				action._cacheIndex = null;


				var clipUuid = action._clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ],
					knownActionsForClip = actionsForClip.knownActions,

					lastKnownAction =
						knownActionsForClip[ knownActionsForClip.length - 1 ],

					byClipCacheIndex = action._byClipCacheIndex;

				lastKnownAction._byClipCacheIndex = byClipCacheIndex;
				knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
				knownActionsForClip.pop();

				action._byClipCacheIndex = null;


				var actionByRoot = actionsForClip.actionByRoot,
					rootUuid = ( actions._localRoot || this._root ).uuid;

				delete actionByRoot[ rootUuid ];

				if ( knownActionsForClip.length === 0 ) {

					delete actionsByClip[ clipUuid ];

				}

				this._removeInactiveBindingsForAction( action );

			},

			_removeInactiveBindingsForAction: function( action ) {

				var bindings = action._propertyBindings;
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.referenceCount === 0 ) {

						this._removeInactiveBinding( binding );

					}

				}

			},

			_lendAction: function( action ) {

				// [ active actions |  inactive actions  ]
				// [  active actions >| inactive actions ]
				//                 s        a
				//                  <-swap->
				//                 a        s

				var actions = this._actions,
					prevIndex = action._cacheIndex,

					lastActiveIndex = this._nActiveActions ++,

					firstInactiveAction = actions[ lastActiveIndex ];

				action._cacheIndex = lastActiveIndex;
				actions[ lastActiveIndex ] = action;

				firstInactiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = firstInactiveAction;

			},

			_takeBackAction: function( action ) {

				// [  active actions  | inactive actions ]
				// [ active actions |< inactive actions  ]
				//        a        s
				//         <-swap->
				//        s        a

				var actions = this._actions,
					prevIndex = action._cacheIndex,

					firstInactiveIndex = -- this._nActiveActions,

					lastActiveAction = actions[ firstInactiveIndex ];

				action._cacheIndex = firstInactiveIndex;
				actions[ firstInactiveIndex ] = action;

				lastActiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = lastActiveAction;

			},

			// Memory management for PropertyMixer objects

			_addInactiveBinding: function( binding, rootUuid, trackName ) {

				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],

					bindings = this._bindings;

				if ( bindingByName === undefined ) {

					bindingByName = {};
					bindingsByRoot[ rootUuid ] = bindingByName;

				}

				bindingByName[ trackName ] = binding;

				binding._cacheIndex = bindings.length;
				bindings.push( binding );

			},

			_removeInactiveBinding: function( binding ) {

				var bindings = this._bindings,
					propBinding = binding.binding,
					rootUuid = propBinding.rootNode.uuid,
					trackName = propBinding.path,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],

					lastInactiveBinding = bindings[ bindings.length - 1 ],
					cacheIndex = binding._cacheIndex;

				lastInactiveBinding._cacheIndex = cacheIndex;
				bindings[ cacheIndex ] = lastInactiveBinding;
				bindings.pop();

				delete bindingByName[ trackName ];

				remove_empty_map: {

					for ( var _ in bindingByName ) break remove_empty_map;

					delete bindingsByRoot[ rootUuid ];

				}

			},

			_lendBinding: function( binding ) {

				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,

					lastActiveIndex = this._nActiveBindings ++,

					firstInactiveBinding = bindings[ lastActiveIndex ];

				binding._cacheIndex = lastActiveIndex;
				bindings[ lastActiveIndex ] = binding;

				firstInactiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = firstInactiveBinding;

			},

			_takeBackBinding: function( binding ) {

				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,

					firstInactiveIndex = -- this._nActiveBindings,

					lastActiveBinding = bindings[ firstInactiveIndex ];

				binding._cacheIndex = firstInactiveIndex;
				bindings[ firstInactiveIndex ] = binding;

				lastActiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = lastActiveBinding;

			},


			// Memory management of Interpolants for weight and time scale

			_lendControlInterpolant: function() {

				var interpolants = this._controlInterpolants,
					lastActiveIndex = this._nActiveControlInterpolants ++,
					interpolant = interpolants[ lastActiveIndex ];

				if ( interpolant === undefined ) {

					interpolant = new THREE.LinearInterpolant(
							new Float32Array( 2 ), new Float32Array( 2 ),
								1, this._controlInterpolantsResultBuffer );

					interpolant.__cacheIndex = lastActiveIndex;
					interpolants[ lastActiveIndex ] = interpolant;

				}

				return interpolant;

			},

			_takeBackControlInterpolant: function( interpolant ) {

				var interpolants = this._controlInterpolants,
					prevIndex = interpolant.__cacheIndex,

					firstInactiveIndex = -- this._nActiveControlInterpolants,

					lastActiveInterpolant = interpolants[ firstInactiveIndex ];

				interpolant.__cacheIndex = firstInactiveIndex;
				interpolants[ firstInactiveIndex ] = interpolant;

				lastActiveInterpolant.__cacheIndex = prevIndex;
				interpolants[ prevIndex ] = lastActiveInterpolant;

			},

			_controlInterpolantsResultBuffer: new Float32Array( 1 )

		} );

		// File:src/animation/AnimationObjectGroup.js

		/**
		 *
		 * A group of objects that receives a shared animation state.
		 *
		 * Usage:
		 *
		 * 	-	Add objects you would otherwise pass as 'root' to the
		 * 		constructor or the .clipAction method of AnimationMixer.
		 *
		 * 	-	Instead pass this object as 'root'.
		 *
		 * 	-	You can also add and remove objects later when the mixer
		 * 		is running.
		 *
		 * Note:
		 *
		 *  	Objects of this class appear as one object to the mixer,
		 *  	so cache control of the individual objects must be done
		 *  	on the group.
		 *
		 * Limitation:
		 *
		 * 	- 	The animated properties must be compatible among the
		 * 		all objects in the group.
		 *
		 *  -	A single property can either be controlled through a
		 *  	target group or directly, but not both.
		 *
		 * @author tschw
		 */

		THREE.AnimationObjectGroup = function( var_args ) {

			this.uuid = THREE.Math.generateUUID();

			// cached objects followed by the active ones
			this._objects = Array.prototype.slice.call( arguments );

			this.nCachedObjects_ = 0;			// threshold
			// note: read by PropertyBinding.Composite

			var indices = {};
			this._indicesByUUID = indices;		// for bookkeeping

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				indices[ arguments[ i ].uuid ] = i;

			}

			this._paths = [];					// inside: string
			this._parsedPaths = [];				// inside: { we don't care, here }
			this._bindings = []; 				// inside: Array< PropertyBinding >
			this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

			var scope = this;

			this.stats = {

				objects: {
					get total() { return scope._objects.length; },
					get inUse() { return this.total - scope.nCachedObjects_;  }
				},

				get bindingsPerObject() { return scope._bindings.length; }

			};

		};

		THREE.AnimationObjectGroup.prototype = {

			constructor: THREE.AnimationObjectGroup,

			add: function( var_args ) {

				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					nBindings = bindings.length;

				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];

					if ( index === undefined ) {

						// unknown object -> add it to the ACTIVE region

						index = nObjects ++;
						indicesByUUID[ uuid ] = index;
						objects.push( object );

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							bindings[ j ].push(
									new THREE.PropertyBinding(
										object, paths[ j ], parsedPaths[ j ] ) );

						}

					} else if ( index < nCachedObjects ) {

						var knownObject = objects[ index ];

						// move existing object to the ACTIVE region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ];

						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						indicesByUUID[ uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = object;

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								binding = bindingsForPath[ index ];

							bindingsForPath[ index ] = lastCached;

							if ( binding === undefined ) {

								// since we do not bother to create new bindings
								// for objects that are cached, the binding may
								// or may not exist

								binding = new THREE.PropertyBinding(
										object, paths[ j ], parsedPaths[ j ] );

							}

							bindingsForPath[ firstActiveIndex ] = binding;

						}

					} else if ( objects[ index ] !== knownObject) {

						console.error( "Different objects with the same UUID " +
								"detected. Clean the caches or recreate your " +
								"infrastructure when reloading scenes..." );

					} // else the object is already where we want it to be

				} // for arguments

				this.nCachedObjects_ = nCachedObjects;

			},

			remove: function( var_args ) {

				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;

				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];

					if ( index !== undefined && index >= nCachedObjects ) {

						// move existing object into the CACHED region

						var lastCachedIndex = nCachedObjects ++,
							firstActiveObject = objects[ lastCachedIndex ];

						indicesByUUID[ firstActiveObject.uuid ] = index;
						objects[ index ] = firstActiveObject;

						indicesByUUID[ uuid ] = lastCachedIndex;
						objects[ lastCachedIndex ] = object;

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								firstActive = bindingsForPath[ lastCachedIndex ],
								binding = bindingsForPath[ index ];

							bindingsForPath[ index ] = firstActive;
							bindingsForPath[ lastCachedIndex ] = binding;

						}

					}

				} // for arguments

				this.nCachedObjects_ = nCachedObjects;

			},

			// remove & forget
			uncache: function( var_args ) {

				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;

				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];

					if ( index !== undefined ) {

						delete indicesByUUID[ uuid ];

						if ( index < nCachedObjects ) {

							// object is cached, shrink the CACHED region

							var firstActiveIndex = -- nCachedObjects,
								lastCachedObject = objects[ firstActiveIndex ],
								lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];

							// last cached object takes this object's place
							indicesByUUID[ lastCachedObject.uuid ] = index;
							objects[ index ] = lastCachedObject;

							// last object goes to the activated slot and pop
							indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
							objects[ firstActiveIndex ] = lastObject;
							objects.pop();

							// accounting is done, now do the same for all bindings

							for ( var j = 0, m = nBindings; j !== m; ++ j ) {

								var bindingsForPath = bindings[ j ],
									lastCached = bindingsForPath[ firstActiveIndex ],
									last = bindingsForPath[ lastIndex ];

								bindingsForPath[ index ] = lastCached;
								bindingsForPath[ firstActiveIndex ] = last;
								bindingsForPath.pop();

							}

						} else {

							// object is active, just swap with the last and pop

							var lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];

							indicesByUUID[ lastObject.uuid ] = index;
							objects[ index ] = lastObject;
							objects.pop();

							// accounting is done, now do the same for all bindings

							for ( var j = 0, m = nBindings; j !== m; ++ j ) {

								var bindingsForPath = bindings[ j ];

								bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
								bindingsForPath.pop();

							}

						} // cached or active

					} // if object is known

				} // for arguments

				this.nCachedObjects_ = nCachedObjects;

			},

			// Internal interface used by befriended PropertyBinding.Composite:

			subscribe_: function( path, parsedPath ) {
				// returns an array of bindings for the given path that is changed
				// according to the contained objects in the group

				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ],
					bindings = this._bindings;

				if ( index !== undefined ) return bindings[ index ];

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					bindingsForPath = new Array( nObjects );

				index = bindings.length;

				indicesByPath[ path ] = index;

				paths.push( path );
				parsedPaths.push( parsedPath );
				bindings.push( bindingsForPath );

				for ( var i = nCachedObjects,
						n = objects.length; i !== n; ++ i ) {

					var object = objects[ i ];

					bindingsForPath[ i ] =
							new THREE.PropertyBinding( object, path, parsedPath );

				}

				return bindingsForPath;

			},

			unsubscribe_: function( path ) {
				// tells the group to forget about a property path and no longer
				// update the array previously obtained with 'subscribe_'

				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ];

				if ( index !== undefined ) {

					var paths = this._paths,
						parsedPaths = this._parsedPaths,
						bindings = this._bindings,
						lastBindingsIndex = bindings.length - 1,
						lastBindings = bindings[ lastBindingsIndex ],
						lastBindingsPath = path[ lastBindingsIndex ];

					indicesByPath[ lastBindingsPath ] = index;

					bindings[ index ] = lastBindings;
					bindings.pop();

					parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
					parsedPaths.pop();

					paths[ index ] = paths[ lastBindingsIndex ];
					paths.pop();

				}

			}

		};


		// File:src/animation/AnimationUtils.js

		/**
		 * @author tschw
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */

		THREE.AnimationUtils = {

			// same as Array.prototype.slice, but also works on typed arrays
			arraySlice: function( array, from, to ) {

				if ( THREE.AnimationUtils.isTypedArray( array ) ) {

					return new array.constructor( array.subarray( from, to ) );

				}

				return array.slice( from, to );

			},

			// converts an array to a specific type
			convertArray: function( array, type, forceClone ) {

				if ( ! array || // let 'undefined' and 'null' pass
						! forceClone && array.constructor === type ) return array;

				if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

					return new type( array ); // create typed array

				}

				return Array.prototype.slice.call( array ); // create Array

			},

			isTypedArray: function( object ) {

				return ArrayBuffer.isView( object ) &&
						! ( object instanceof DataView );

			},

			// returns an array by which times and values can be sorted
			getKeyframeOrder: function( times ) {

				function compareTime( i, j ) {

					return times[ i ] - times[ j ];

				}

				var n = times.length;
				var result = new Array( n );
				for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

				result.sort( compareTime );

				return result;

			},

			// uses the array previously returned by 'getKeyframeOrder' to sort data
			sortedArray: function( values, stride, order ) {

				var nValues = values.length;
				var result = new values.constructor( nValues );

				for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

					var srcOffset = order[ i ] * stride;

					for ( var j = 0; j !== stride; ++ j ) {

						result[ dstOffset ++ ] = values[ srcOffset + j ];

					}

				}

				return result;

			},

			// function for parsing AOS keyframe formats
			flattenJSON: function( jsonKeys, times, values, valuePropertyName ) {

				var i = 1, key = jsonKeys[ 0 ];

				while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

					key = jsonKeys[ i ++ ];

				}

				if ( key === undefined ) return; // no data

				var value = key[ valuePropertyName ];
				if ( value === undefined ) return; // no data

				if ( Array.isArray( value ) ) {

					do {

						value = key[ valuePropertyName ];

						if ( value !== undefined ) {

							times.push( key.time );
							values.push.apply( values, value ); // push all elements

						}

						key = jsonKeys[ i ++ ];

					} while ( key !== undefined );

				} else if ( value.toArray !== undefined ) {
					// ...assume THREE.Math-ish

					do {

						value = key[ valuePropertyName ];

						if ( value !== undefined ) {

							times.push( key.time );
							value.toArray( values, values.length );

						}

						key = jsonKeys[ i ++ ];

					} while ( key !== undefined );

				} else {
					// otherwise push as-is

					do {

						value = key[ valuePropertyName ];

						if ( value !== undefined ) {

							times.push( key.time );
							values.push( value );

						}

						key = jsonKeys[ i ++ ];

					} while ( key !== undefined );

				}

			}

		};

		// File:src/animation/KeyframeTrack.js

		/**
		 *
		 * A timed sequence of keyframes for a specific property.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.KeyframeTrack = function ( name, times, values, interpolation ) {

			if( name === undefined ) throw new Error( "track name is undefined" );

			if( times === undefined || times.length === 0 ) {

				throw new Error( "no keyframes in track named " + name );

			}

			this.name = name;

			this.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );
			this.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );

			this.setInterpolation( interpolation || this.DefaultInterpolation );

			this.validate();
			this.optimize();

		};

		THREE.KeyframeTrack.prototype = {

			constructor: THREE.KeyframeTrack,

			TimeBufferType: Float32Array,
			ValueBufferType: Float32Array,

			DefaultInterpolation: THREE.InterpolateLinear,

			InterpolantFactoryMethodDiscrete: function( result ) {

				return new THREE.DiscreteInterpolant(
						this.times, this.values, this.getValueSize(), result );

			},

			InterpolantFactoryMethodLinear: function( result ) {

				return new THREE.LinearInterpolant(
						this.times, this.values, this.getValueSize(), result );

			},

			InterpolantFactoryMethodSmooth: function( result ) {

				return new THREE.CubicInterpolant(
						this.times, this.values, this.getValueSize(), result );

			},

			setInterpolation: function( interpolation ) {

				var factoryMethod;

				switch ( interpolation ) {

					case THREE.InterpolateDiscrete:

						factoryMethod = this.InterpolantFactoryMethodDiscrete;

						break;

					case THREE.InterpolateLinear:

						factoryMethod = this.InterpolantFactoryMethodLinear;

						break;

					case THREE.InterpolateSmooth:

						factoryMethod = this.InterpolantFactoryMethodSmooth;

						break;

				}

				if ( factoryMethod === undefined ) {

					var message = "unsupported interpolation for " +
							this.ValueTypeName + " keyframe track named " + this.name;

					if ( this.createInterpolant === undefined ) {

						// fall back to default, unless the default itself is messed up
						if ( interpolation !== this.DefaultInterpolation ) {

							this.setInterpolation( this.DefaultInterpolation );

						} else {

							throw new Error( message ); // fatal, in this case

						}

					}

					console.warn( message );
					return;

				}

				this.createInterpolant = factoryMethod;

			},

			getInterpolation: function() {

				switch ( this.createInterpolant ) {

					case this.InterpolantFactoryMethodDiscrete:

						return THREE.InterpolateDiscrete;

					case this.InterpolantFactoryMethodLinear:

						return THREE.InterpolateLinear;

					case this.InterpolantFactoryMethodSmooth:

						return THREE.InterpolateSmooth;

				}

			},

			getValueSize: function() {

				return this.values.length / this.times.length;

			},

			// move all keyframes either forwards or backwards in time
			shift: function( timeOffset ) {

				if( timeOffset !== 0.0 ) {

					var times = this.times;

					for( var i = 0, n = times.length; i !== n; ++ i ) {

						times[ i ] += timeOffset;

					}

				}

				return this;

			},

			// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
			scale: function( timeScale ) {

				if( timeScale !== 1.0 ) {

					var times = this.times;

					for( var i = 0, n = times.length; i !== n; ++ i ) {

						times[ i ] *= timeScale;

					}

				}

				return this;

			},

			// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
			// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
			trim: function( startTime, endTime ) {

				var times = this.times,
					nKeys = times.length,
					from = 0,
					to = nKeys - 1;

				while ( from !== nKeys && times[ from ] < startTime ) ++ from;
				while ( to !== -1 && times[ to ] > endTime ) -- to;

				++ to; // inclusive -> exclusive bound

				if( from !== 0 || to !== nKeys ) {

					// empty tracks are forbidden, so keep at least one keyframe
					if ( from >= to ) to = Math.max( to , 1 ), from = to - 1;

					var stride = this.getValueSize();
					this.times = THREE.AnimationUtils.arraySlice( times, from, to );
					this.values = THREE.AnimationUtils.
							arraySlice( this.values, from * stride, to * stride );

				}

				return this;

			},

			// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
			validate: function() {

				var valid = true;

				var valueSize = this.getValueSize();
				if ( valueSize - Math.floor( valueSize ) !== 0 ) {

					console.error( "invalid value size in track", this );
					valid = false;

				}

				var times = this.times,
					values = this.values,

					nKeys = times.length;

				if( nKeys === 0 ) {

					console.error( "track is empty", this );
					valid = false;

				}

				var prevTime = null;

				for( var i = 0; i !== nKeys; i ++ ) {

					var currTime = times[ i ];

					if ( typeof currTime === 'number' && isNaN( currTime ) ) {

						console.error( "time is not a valid number", this, i, currTime );
						valid = false;
						break;

					}

					if( prevTime !== null && prevTime > currTime ) {

						console.error( "out of order keys", this, i, currTime, prevTime );
						valid = false;
						break;

					}

					prevTime = currTime;

				}

				if ( values !== undefined ) {

					if ( THREE.AnimationUtils.isTypedArray( values ) ) {

						for ( var i = 0, n = values.length; i !== n; ++ i ) {

							var value = values[ i ];

							if ( isNaN( value ) ) {

								console.error( "value is not a valid number", this, i, value );
								valid = false;
								break;

							}

						}

					}

				}

				return valid;

			},

			// removes equivalent sequential keys as common in morph target sequences
			// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
			optimize: function() {

				var times = this.times,
					values = this.values,
					stride = this.getValueSize(),

					writeIndex = 1;

				for( var i = 1, n = times.length - 1; i <= n; ++ i ) {

					var keep = false;

					var time = times[ i ];
					var timeNext = times[ i + 1 ];

					// remove adjacent keyframes scheduled at the same time

					if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

						// remove unnecessary keyframes same as their neighbors
						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;

						for ( var j = 0; j !== stride; ++ j ) {

							var value = values[ offset + j ];

							if ( value !== values[ offsetP + j ] ||
									value !== values[ offsetN + j ] ) {

								keep = true;
								break;

							}

						}

					}

					// in-place compaction

					if ( keep ) {

						if ( i !== writeIndex ) {

							times[ writeIndex ] = times[ i ];

							var readOffset = i * stride,
								writeOffset = writeIndex * stride;

							for ( var j = 0; j !== stride; ++ j ) {

								values[ writeOffset + j ] = values[ readOffset + j ];

							}


						}

						++ writeIndex;

					}

				}

				if ( writeIndex !== times.length ) {

					this.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );
					this.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );

				}

				return this;

			}

		};

		// Static methods:

		Object.assign( THREE.KeyframeTrack, {

			// Serialization (in static context, because of constructor invocation
			// and automatic invocation of .toJSON):

			parse: function( json ) {

				if( json.type === undefined ) {

					throw new Error( "track type undefined, can not parse" );

				}

				var trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );

				if ( json.times === undefined ) {

					var times = [], values = [];

					THREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

					json.times = times;
					json.values = values;

				}

				// derived classes can define a static parse method
				if ( trackType.parse !== undefined ) {

					return trackType.parse( json );

				} else {

					// by default, we asssume a constructor compatible with the base
					return new trackType(
							json.name, json.times, json.values, json.interpolation );

				}

			},

			toJSON: function( track ) {

				var trackType = track.constructor;

				var json;

				// derived classes can define a static toJSON method
				if ( trackType.toJSON !== undefined ) {

					json = trackType.toJSON( track );

				} else {

					// by default, we assume the data can be serialized as-is
					json = {

						'name': track.name,
						'times': THREE.AnimationUtils.convertArray( track.times, Array ),
						'values': THREE.AnimationUtils.convertArray( track.values, Array )

					};

					var interpolation = track.getInterpolation();

					if ( interpolation !== track.DefaultInterpolation ) {

						json.interpolation = interpolation;

					}

				}

				json.type = track.ValueTypeName; // mandatory

				return json;

			},

			_getTrackTypeForValueTypeName: function( typeName ) {

				switch( typeName.toLowerCase() ) {

					case "scalar":
					case "double":
					case "float":
					case "number":
					case "integer":

						return THREE.NumberKeyframeTrack;

					case "vector":
					case "vector2":
					case "vector3":
					case "vector4":

						return THREE.VectorKeyframeTrack;

					case "color":

						return THREE.ColorKeyframeTrack;

					case "quaternion":

						return THREE.QuaternionKeyframeTrack;

					case "bool":
					case "boolean":

						return THREE.BooleanKeyframeTrack;

					case "string":

						return THREE.StringKeyframeTrack;

				}

				throw new Error( "Unsupported typeName: " + typeName );

			}

		} );

		// File:src/animation/PropertyBinding.js

		/**
		 *
		 * A reference to a real property in the scene graph.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.PropertyBinding = function ( rootNode, path, parsedPath ) {

			this.path = path;
			this.parsedPath = parsedPath ||
					THREE.PropertyBinding.parseTrackName( path );

			this.node = THREE.PropertyBinding.findNode(
					rootNode, this.parsedPath.nodeName ) || rootNode;

			this.rootNode = rootNode;

		};

		THREE.PropertyBinding.prototype = {

			constructor: THREE.PropertyBinding,

			getValue: function getValue_unbound( targetArray, offset ) {

				this.bind();
				this.getValue( targetArray, offset );

				// Note: This class uses a State pattern on a per-method basis:
				// 'bind' sets 'this.getValue' / 'setValue' and shadows the
				// prototype version of these methods with one that represents
				// the bound state. When the property is not found, the methods
				// become no-ops.

			},

			setValue: function getValue_unbound( sourceArray, offset ) {

				this.bind();
				this.setValue( sourceArray, offset );

			},

			// create getter / setter pair for a property in the scene graph
			bind: function() {

				var targetObject = this.node,
					parsedPath = this.parsedPath,

					objectName = parsedPath.objectName,
					propertyName = parsedPath.propertyName,
					propertyIndex = parsedPath.propertyIndex;

				if ( ! targetObject ) {

					targetObject = THREE.PropertyBinding.findNode(
							this.rootNode, parsedPath.nodeName ) || this.rootNode;

					this.node = targetObject;

				}

				// set fail state so we can just 'return' on error
				this.getValue = this._getValue_unavailable;
				this.setValue = this._setValue_unavailable;

		 		// ensure there is a value node
				if ( ! targetObject ) {

					console.error( "  trying to update node for track: " + this.path + " but it wasn't found." );
					return;

				}

				if ( objectName ) {

					var objectIndex = parsedPath.objectIndex;

					// special cases were we need to reach deeper into the hierarchy to get the face materials....
					switch ( objectName ) {

						case 'materials':

							if ( ! targetObject.material ) {

								console.error( '  can not bind to material as node does not have a material', this );
								return;

							}

							if ( ! targetObject.material.materials ) {

								console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
								return;

							}

							targetObject = targetObject.material.materials;

							break;

						case 'bones':

							if ( ! targetObject.skeleton ) {

								console.error( '  can not bind to bones as node does not have a skeleton', this );
								return;

							}

							// potential future optimization: skip this if propertyIndex is already an integer
							// and convert the integer string to a true integer.

							targetObject = targetObject.skeleton.bones;

							// support resolving morphTarget names into indices.
							for ( var i = 0; i < targetObject.length; i ++ ) {

								if ( targetObject[ i ].name === objectIndex ) {

									objectIndex = i;
									break;

								}

							}

							break;

						default:

							if ( targetObject[ objectName ] === undefined ) {

								console.error( '  can not bind to objectName of node, undefined', this );
								return;

							}

							targetObject = targetObject[ objectName ];

					}


					if ( objectIndex !== undefined ) {

						if ( targetObject[ objectIndex ] === undefined ) {

							console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
							return;

						}

						targetObject = targetObject[ objectIndex ];

					}

				}

				// resolve property
				var nodeProperty = targetObject[ propertyName ];

				if ( nodeProperty === undefined ) {

					var nodeName = parsedPath.nodeName;

					console.error( "  trying to update property for track: " + nodeName +
							'.' + propertyName + " but it wasn't found.", targetObject );
					return;

				}

				// determine versioning scheme
				var versioning = this.Versioning.None;

				if ( targetObject.needsUpdate !== undefined ) { // material

					versioning = this.Versioning.NeedsUpdate;
					this.targetObject = targetObject;

				} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

					versioning = this.Versioning.MatrixWorldNeedsUpdate;
					this.targetObject = targetObject;

				}

				// determine how the property gets bound
				var bindingType = this.BindingType.Direct;

				if ( propertyIndex !== undefined ) {
					// access a sub element of the property array (only primitives are supported right now)

					if ( propertyName === "morphTargetInfluences" ) {
						// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

						// support resolving morphTarget names into indices.
						if ( ! targetObject.geometry ) {

							console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
							return;

						}

						if ( ! targetObject.geometry.morphTargets ) {

							console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

							if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}

					}

					bindingType = this.BindingType.ArrayElement;

					this.resolvedProperty = nodeProperty;
					this.propertyIndex = propertyIndex;

				} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
					// must use copy for Object3D.Euler/Quaternion

					bindingType = this.BindingType.HasFromToArray;

					this.resolvedProperty = nodeProperty;

				} else if ( nodeProperty.length !== undefined ) {

					bindingType = this.BindingType.EntireArray;

					this.resolvedProperty = nodeProperty;

				} else {

					this.propertyName = propertyName;

				}

				// select getter / setter
				this.getValue = this.GetterByBindingType[ bindingType ];
				this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

			},

			unbind: function() {

				this.node = null;

				// back to the prototype version of getValue / setValue
				// note: avoiding to mutate the shape of 'this' via 'delete'
				this.getValue = this._getValue_unbound;
				this.setValue = this._setValue_unbound;

			}

		};

		Object.assign( THREE.PropertyBinding.prototype, { // prototype, continued

			// these are used to "bind" a nonexistent property
			_getValue_unavailable: function() {},
			_setValue_unavailable: function() {},

			// initial state of these methods that calls 'bind'
			_getValue_unbound: THREE.PropertyBinding.prototype.getValue,
			_setValue_unbound: THREE.PropertyBinding.prototype.setValue,

			BindingType: {
				Direct: 0,
				EntireArray: 1,
				ArrayElement: 2,
				HasFromToArray: 3
			},

			Versioning: {
				None: 0,
				NeedsUpdate: 1,
				MatrixWorldNeedsUpdate: 2
			},

			GetterByBindingType: [

				function getValue_direct( buffer, offset ) {

					buffer[ offset ] = this.node[ this.propertyName ];

				},

				function getValue_array( buffer, offset ) {

					var source = this.resolvedProperty;

					for ( var i = 0, n = source.length; i !== n; ++ i ) {

						buffer[ offset ++ ] = source[ i ];

					}

				},

				function getValue_arrayElement( buffer, offset ) {

					buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

				},

				function getValue_toArray( buffer, offset ) {

					this.resolvedProperty.toArray( buffer, offset );

				}

			],

			SetterByBindingTypeAndVersioning: [

				[
					// Direct

					function setValue_direct( buffer, offset ) {

						this.node[ this.propertyName ] = buffer[ offset ];

					},

					function setValue_direct_setNeedsUpdate( buffer, offset ) {

						this.node[ this.propertyName ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;

					},

					function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

						this.node[ this.propertyName ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;

					}

				], [

					// EntireArray

					function setValue_array( buffer, offset ) {

						var dest = this.resolvedProperty;

						for ( var i = 0, n = dest.length; i !== n; ++ i ) {

							dest[ i ] = buffer[ offset ++ ];

						}

					},

					function setValue_array_setNeedsUpdate( buffer, offset ) {

						var dest = this.resolvedProperty;

						for ( var i = 0, n = dest.length; i !== n; ++ i ) {

							dest[ i ] = buffer[ offset ++ ];

						}

						this.targetObject.needsUpdate = true;

					},

					function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

						var dest = this.resolvedProperty;

						for ( var i = 0, n = dest.length; i !== n; ++ i ) {

							dest[ i ] = buffer[ offset ++ ];

						}

						this.targetObject.matrixWorldNeedsUpdate = true;

					}

				], [

					// ArrayElement

					function setValue_arrayElement( buffer, offset ) {

						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

					},

					function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;

					},

					function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;

					}

				], [

					// HasToFromArray

					function setValue_fromArray( buffer, offset ) {

						this.resolvedProperty.fromArray( buffer, offset );

					},

					function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.needsUpdate = true;

					},

					function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.matrixWorldNeedsUpdate = true;

					}

				]

			]

		} );

		THREE.PropertyBinding.Composite =
				function( targetGroup, path, optionalParsedPath ) {

			var parsedPath = optionalParsedPath ||
					THREE.PropertyBinding.parseTrackName( path );

			this._targetGroup = targetGroup;
			this._bindings = targetGroup.subscribe_( path, parsedPath );

		};

		THREE.PropertyBinding.Composite.prototype = {

			constructor: THREE.PropertyBinding.Composite,

			getValue: function( array, offset ) {

				this.bind(); // bind all binding

				var firstValidIndex = this._targetGroup.nCachedObjects_,
					binding = this._bindings[ firstValidIndex ];

				// and only call .getValue on the first
				if ( binding !== undefined ) binding.getValue( array, offset );

			},

			setValue: function( array, offset ) {

				var bindings = this._bindings;

				for ( var i = this._targetGroup.nCachedObjects_,
						n = bindings.length; i !== n; ++ i ) {

					bindings[ i ].setValue( array, offset );

				}

			},

			bind: function() {

				var bindings = this._bindings;

				for ( var i = this._targetGroup.nCachedObjects_,
						n = bindings.length; i !== n; ++ i ) {

					bindings[ i ].bind();

				}

			},

			unbind: function() {

				var bindings = this._bindings;

				for ( var i = this._targetGroup.nCachedObjects_,
						n = bindings.length; i !== n; ++ i ) {

					bindings[ i ].unbind();

				}

			}

		};

		THREE.PropertyBinding.create = function( root, path, parsedPath ) {

			if ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {

				return new THREE.PropertyBinding( root, path, parsedPath );

			} else {

				return new THREE.PropertyBinding.Composite( root, path, parsedPath );

			}

		};

		THREE.PropertyBinding.parseTrackName = function( trackName ) {

			// matches strings in the form of:
			//    nodeName.property
			//    nodeName.property[accessor]
			//    nodeName.material.property[accessor]
			//    uuid.property[accessor]
			//    uuid.objectName[objectIndex].propertyName[propertyIndex]
			//    parentName/nodeName.property
			//    parentName/parentName/nodeName.property[index]
			//	  .bone[Armature.DEF_cog].position
			// created and tested via https://regex101.com/#javascript

			var re = /^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_.:\- ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/;
			var matches = re.exec( trackName );

			if ( ! matches ) {

				throw new Error( "cannot parse trackName at all: " + trackName );

			}

			if ( matches.index === re.lastIndex ) {

				re.lastIndex++;

			}

			var results = {
				// directoryName: matches[ 1 ], // (tschw) currently unused
				nodeName: matches[ 3 ], 	// allowed to be null, specified root node.
				objectName: matches[ 5 ],
				objectIndex: matches[ 7 ],
				propertyName: matches[ 9 ],
				propertyIndex: matches[ 11 ]	// allowed to be null, specifies that the whole property is set.
			};

			if ( results.propertyName === null || results.propertyName.length === 0 ) {

				throw new Error( "can not parse propertyName from trackName: " + trackName );

			}

			return results;

		};

		THREE.PropertyBinding.findNode = function( root, nodeName ) {

			if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {

				return root;

			}

			// search into skeleton bones.
			if ( root.skeleton ) {

				var searchSkeleton = function( skeleton ) {

					for( var i = 0; i < skeleton.bones.length; i ++ ) {

						var bone = skeleton.bones[ i ];

						if ( bone.name === nodeName ) {

							return bone;

						}
					}

					return null;

				};

				var bone = searchSkeleton( root.skeleton );

				if ( bone ) {

					return bone;

				}
			}

			// search into node subtree.
			if ( root.children ) {

				var searchNodeSubtree = function( children ) {

					for( var i = 0; i < children.length; i ++ ) {

						var childNode = children[ i ];

						if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

							return childNode;

						}

						var result = searchNodeSubtree( childNode.children );

						if ( result ) return result;

					}

					return null;

				};

				var subTreeNode = searchNodeSubtree( root.children );

				if ( subTreeNode ) {

					return subTreeNode;

				}

			}

			return null;

		};

		// File:src/animation/PropertyMixer.js

		/**
		 *
		 * Buffered scene graph property that allows weighted accumulation.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.PropertyMixer = function ( binding, typeName, valueSize ) {

			this.binding = binding;
			this.valueSize = valueSize;

			var bufferType = Float64Array,
				mixFunction;

			switch ( typeName ) {

				case 'quaternion':			mixFunction = this._slerp;		break;

				case 'string':
				case 'bool':

					bufferType = Array,		mixFunction = this._select;		break;

				default:					mixFunction = this._lerp;

			}

			this.buffer = new bufferType( valueSize * 4 );
			// layout: [ incoming | accu0 | accu1 | orig ]
			//
			// interpolators can use .buffer as their .result
			// the data then goes to 'incoming'
			//
			// 'accu0' and 'accu1' are used frame-interleaved for
			// the cumulative result and are compared to detect
			// changes
			//
			// 'orig' stores the original state of the property

			this._mixBufferRegion = mixFunction;

			this.cumulativeWeight = 0;

			this.useCount = 0;
			this.referenceCount = 0;

		};

		THREE.PropertyMixer.prototype = {

			constructor: THREE.PropertyMixer,

			// accumulate data in the 'incoming' region into 'accu<i>'
			accumulate: function( accuIndex, weight ) {

				// note: happily accumulating nothing when weight = 0, the caller knows
				// the weight and shouldn't have made the call in the first place

				var buffer = this.buffer,
					stride = this.valueSize,
					offset = accuIndex * stride + stride,

					currentWeight = this.cumulativeWeight;

				if ( currentWeight === 0 ) {

					// accuN := incoming * weight

					for ( var i = 0; i !== stride; ++ i ) {

						buffer[ offset + i ] = buffer[ i ];

					}

					currentWeight = weight;

				} else {

					// accuN := accuN + incoming * weight

					currentWeight += weight;
					var mix = weight / currentWeight;
					this._mixBufferRegion( buffer, offset, 0, mix, stride );

				}

				this.cumulativeWeight = currentWeight;

			},

			// apply the state of 'accu<i>' to the binding when accus differ
			apply: function( accuIndex ) {

				var stride = this.valueSize,
					buffer = this.buffer,
					offset = accuIndex * stride + stride,

					weight = this.cumulativeWeight,

					binding = this.binding;

				this.cumulativeWeight = 0;

				if ( weight < 1 ) {

					// accuN := accuN + original * ( 1 - cumulativeWeight )

					var originalValueOffset = stride * 3;

					this._mixBufferRegion(
							buffer, offset, originalValueOffset, 1 - weight, stride );

				}

				for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

					if ( buffer[ i ] !== buffer[ i + stride ] ) {

						// value has changed -> update scene graph

						binding.setValue( buffer, offset );
						break;

					}

				}

			},

			// remember the state of the bound property and copy it to both accus
			saveOriginalState: function() {

				var binding = this.binding;

				var buffer = this.buffer,
					stride = this.valueSize,

					originalValueOffset = stride * 3;

				binding.getValue( buffer, originalValueOffset );

				// accu[0..1] := orig -- initially detect changes against the original
				for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

					buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

				}

				this.cumulativeWeight = 0;

			},

			// apply the state previously taken via 'saveOriginalState' to the binding
			restoreOriginalState: function() {

				var originalValueOffset = this.valueSize * 3;
				this.binding.setValue( this.buffer, originalValueOffset );

			},


			// mix functions

			_select: function( buffer, dstOffset, srcOffset, t, stride ) {

				if ( t >= 0.5 ) {

					for ( var i = 0; i !== stride; ++ i ) {

						buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

					}

				}

			},

			_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {

				THREE.Quaternion.slerpFlat( buffer, dstOffset,
						buffer, dstOffset, buffer, srcOffset, t );

			},

			_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {

				var s = 1 - t;

				for ( var i = 0; i !== stride; ++ i ) {

					var j = dstOffset + i;

					buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

				}

			}

		};

		// File:src/animation/tracks/BooleanKeyframeTrack.js

		/**
		 *
		 * A Track of Boolean keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.BooleanKeyframeTrack = function ( name, times, values ) {

			THREE.KeyframeTrack.call( this, name, times, values );

		};

		THREE.BooleanKeyframeTrack.prototype =
				Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

			constructor: THREE.BooleanKeyframeTrack,

			ValueTypeName: 'bool',
			ValueBufferType: Array,

			DefaultInterpolation: THREE.InterpolateDiscrete,

			InterpolantFactoryMethodLinear: undefined,
			InterpolantFactoryMethodSmooth: undefined

			// Note: Actually this track could have a optimized / compressed
			// representation of a single value and a custom interpolant that
			// computes "firstValue ^ isOdd( index )".

		} );

		// File:src/animation/tracks/ColorKeyframeTrack.js

		/**
		 *
		 * A Track of keyframe values that represent color.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {

			THREE.KeyframeTrack.call( this, name, times, values, interpolation );

		};

		THREE.ColorKeyframeTrack.prototype =
				Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

			constructor: THREE.ColorKeyframeTrack,

			ValueTypeName: 'color'

			// ValueBufferType is inherited

			// DefaultInterpolation is inherited


			// Note: Very basic implementation and nothing special yet.
			// However, this is the place for color space parameterization.

		} );

		// File:src/animation/tracks/NumberKeyframeTrack.js

		/**
		 *
		 * A Track of numeric keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {

			THREE.KeyframeTrack.call( this, name, times, values, interpolation );

		};

		THREE.NumberKeyframeTrack.prototype =
				Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

			constructor: THREE.NumberKeyframeTrack,

			ValueTypeName: 'number',

			// ValueBufferType is inherited

			// DefaultInterpolation is inherited

		} );

		// File:src/animation/tracks/QuaternionKeyframeTrack.js

		/**
		 *
		 * A Track of quaternion keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {

			THREE.KeyframeTrack.call( this, name, times, values, interpolation );

		};

		THREE.QuaternionKeyframeTrack.prototype =
				Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

			constructor: THREE.QuaternionKeyframeTrack,

			ValueTypeName: 'quaternion',

			// ValueBufferType is inherited

			DefaultInterpolation: THREE.InterpolateLinear,

			InterpolantFactoryMethodLinear: function( result ) {

				return new THREE.QuaternionLinearInterpolant(
						this.times, this.values, this.getValueSize(), result );

			},

			InterpolantFactoryMethodSmooth: undefined // not yet implemented

		} );

		// File:src/animation/tracks/StringKeyframeTrack.js

		/**
		 *
		 * A Track that interpolates Strings
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {

			THREE.KeyframeTrack.call( this, name, times, values, interpolation );

		};

		THREE.StringKeyframeTrack.prototype =
				Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

			constructor: THREE.StringKeyframeTrack,

			ValueTypeName: 'string',
			ValueBufferType: Array,

			DefaultInterpolation: THREE.InterpolateDiscrete,

			InterpolantFactoryMethodLinear: undefined,

			InterpolantFactoryMethodSmooth: undefined

		} );

		// File:src/animation/tracks/VectorKeyframeTrack.js

		/**
		 *
		 * A Track of vectored keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */

		THREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {

			THREE.KeyframeTrack.call( this, name, times, values, interpolation );

		};

		THREE.VectorKeyframeTrack.prototype =
				Object.assign( Object.create( THREE.KeyframeTrack.prototype ), {

			constructor: THREE.VectorKeyframeTrack,

			ValueTypeName: 'vector'

			// ValueBufferType is inherited

			// DefaultInterpolation is inherited

		} );

		// File:src/audio/Audio.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */

		THREE.Audio = function ( listener ) {

			THREE.Object3D.call( this );

			this.type = 'Audio';

			this.context = listener.context;
			this.source = this.context.createBufferSource();
			this.source.onended = this.onEnded.bind( this );

			this.gain = this.context.createGain();
			this.gain.connect( listener.getInput() );

			this.autoplay = false;

			this.startTime = 0;
			this.playbackRate = 1;
			this.isPlaying = false;
			this.hasPlaybackControl = true;
			this.sourceType = 'empty';

			this.filters = [];

		};

		THREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.Audio,

			getOutput: function () {

				return this.gain;

			},

			setNodeSource: function ( audioNode ) {

				this.hasPlaybackControl = false;
				this.sourceType = 'audioNode';
				this.source = audioNode;
				this.connect();

				return this;

			},

			setBuffer: function ( audioBuffer ) {

				this.source.buffer = audioBuffer;
				this.sourceType = 'buffer';

				if ( this.autoplay ) this.play();

				return this;

			},

			play: function () {

				if ( this.isPlaying === true ) {

					console.warn( 'THREE.Audio: Audio is already playing.' );
					return;

				}

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				var source = this.context.createBufferSource();

				source.buffer = this.source.buffer;
				source.loop = this.source.loop;
				source.onended = this.source.onended;
				source.start( 0, this.startTime );
				source.playbackRate.value = this.playbackRate;

				this.isPlaying = true;

				this.source = source;

				return this.connect();

			},

			pause: function () {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				this.source.stop();
				this.startTime = this.context.currentTime;
				this.isPlaying = false;

				return this;

			},

			stop: function () {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				this.source.stop();
				this.startTime = 0;
				this.isPlaying = false;

				return this;

			},

			connect: function () {

				if ( this.filters.length > 0 ) {

					this.source.connect( this.filters[ 0 ] );

					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

						this.filters[ i - 1 ].connect( this.filters[ i ] );

					}

					this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

				} else {

					this.source.connect( this.getOutput() );

				}

				return this;

			},

			disconnect: function () {

				if ( this.filters.length > 0 ) {

					this.source.disconnect( this.filters[ 0 ] );

					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

						this.filters[ i - 1 ].disconnect( this.filters[ i ] );

					}

					this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

				} else {

					this.source.disconnect( this.getOutput() );

				}

				return this;

			},

			getFilters: function () {

				return this.filters;

			},

			setFilters: function ( value ) {

				if ( ! value ) value = [];

				if ( this.isPlaying === true ) {

					this.disconnect();
					this.filters = value;
					this.connect();

				} else {

					this.filters = value;

				}

				return this;

			},

			getFilter: function () {

				return this.getFilters()[ 0 ];

			},

			setFilter: function ( filter ) {

				return this.setFilters( filter ? [ filter ] : [] );

			},

			setPlaybackRate: function ( value ) {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				this.playbackRate = value;

				if ( this.isPlaying === true ) {

					this.source.playbackRate.value = this.playbackRate;

				}

				return this;

			},

			getPlaybackRate: function () {

				return this.playbackRate;

			},

			onEnded: function () {

				this.isPlaying = false;

			},

			getLoop: function () {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return false;

				}

				return this.source.loop;

			},

			setLoop: function ( value ) {

				if ( this.hasPlaybackControl === false ) {

					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;

				}

				this.source.loop = value;

			},

			getVolume: function () {

				return this.gain.gain.value;

			},


			setVolume: function ( value ) {

				this.gain.gain.value = value;

				return this;

			}

		} );

		// File:src/audio/AudioAnalyser.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.AudioAnalyser = function ( audio, fftSize ) {

			this.analyser = audio.context.createAnalyser();
			this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

			this.data = new Uint8Array( this.analyser.frequencyBinCount );

			audio.getOutput().connect( this.analyser );

		};

		Object.assign( THREE.AudioAnalyser.prototype, {

			getFrequencyData: function () {

				this.analyser.getByteFrequencyData( this.data );

				return this.data;

			},

			getAverageFrequency: function () {

				var value = 0, data = this.getFrequencyData();

				for ( var i = 0; i < data.length; i ++ ) {

					value += data[ i ];

				}

				return value / data.length;

			}

		} );

		// File:src/audio/AudioContext.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		Object.defineProperty( THREE, 'AudioContext', {

			get: ( function () {

				var context;

				return function get() {

					if ( context === undefined ) {

						context = new ( window.AudioContext || window.webkitAudioContext )();

					}

					return context;

				};

			} )()

		} );

		// File:src/audio/PositionalAudio.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.PositionalAudio = function ( listener ) {

			THREE.Audio.call( this, listener );

			this.panner = this.context.createPanner();
			this.panner.connect( this.gain );

		};

		THREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {

			constructor: THREE.PositionalAudio,

			getOutput: function () {

				return this.panner;

			},

			getRefDistance: function () {

				return this.panner.refDistance;

			},

			setRefDistance: function ( value ) {

				this.panner.refDistance = value;

			},

			getRolloffFactor: function () {

				return this.panner.rolloffFactor;

			},

			setRolloffFactor: function ( value ) {

				this.panner.rolloffFactor = value;

			},

			getDistanceModel: function () {

				return this.panner.distanceModel;

			},

			setDistanceModel: function ( value ) {

				this.panner.distanceModel = value;

			},

			getMaxDistance: function () {

				return this.panner.maxDistance;

			},

			setMaxDistance: function ( value ) {

				this.panner.maxDistance = value;

			},

			updateMatrixWorld: ( function () {

				var position = new THREE.Vector3();

				return function updateMatrixWorld( force ) {

					THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

					position.setFromMatrixPosition( this.matrixWorld );

					this.panner.setPosition( position.x, position.y, position.z );

				};

			} )()


		} );

		// File:src/audio/AudioListener.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.AudioListener = function () {

			THREE.Object3D.call( this );

			this.type = 'AudioListener';

			this.context = THREE.AudioContext;

			this.gain = this.context.createGain();
			this.gain.connect( this.context.destination );

			this.filter = null;

		};

		THREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.AudioListener,

			getInput: function () {

				return this.gain;

			},

			removeFilter: function ( ) {

				if ( this.filter !== null ) {

					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );
					this.gain.connect( this.context.destination );
					this.filter = null;

				}

			},

			getFilter: function () {

				return this.filter;

			},

			setFilter: function ( value ) {

				if ( this.filter !== null ) {

					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );

				} else {

					this.gain.disconnect( this.context.destination );

				}

				this.filter = value;
				this.gain.connect( this.filter );
				this.filter.connect( this.context.destination );

			},

			getMasterVolume: function () {

				return this.gain.gain.value;

			},

			setMasterVolume: function ( value ) {

				this.gain.gain.value = value;

			},

			updateMatrixWorld: ( function () {

				var position = new THREE.Vector3();
				var quaternion = new THREE.Quaternion();
				var scale = new THREE.Vector3();

				var orientation = new THREE.Vector3();

				return function updateMatrixWorld( force ) {

					THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

					var listener = this.context.listener;
					var up = this.up;

					this.matrixWorld.decompose( position, quaternion, scale );

					orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

					listener.setPosition( position.x, position.y, position.z );
					listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

				};

			} )()

		} );

		// File:src/cameras/Camera.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author WestLangley / http://github.com/WestLangley
		*/

		THREE.Camera = function () {

			THREE.Object3D.call( this );

			this.type = 'Camera';

			this.matrixWorldInverse = new THREE.Matrix4();
			this.projectionMatrix = new THREE.Matrix4();

		};

		THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );
		THREE.Camera.prototype.constructor = THREE.Camera;

		THREE.Camera.prototype.getWorldDirection = function () {

			var quaternion = new THREE.Quaternion();

			return function getWorldDirection( optionalTarget ) {

				var result = optionalTarget || new THREE.Vector3();

				this.getWorldQuaternion( quaternion );

				return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			};

		}();

		THREE.Camera.prototype.lookAt = function () {

			// This routine does not support cameras with rotated and/or translated parent(s)

			var m1 = new THREE.Matrix4();

			return function lookAt( vector ) {

				m1.lookAt( this.position, vector, this.up );

				this.quaternion.setFromRotationMatrix( m1 );

			};

		}();

		THREE.Camera.prototype.clone = function () {

			return new this.constructor().copy( this );

		};

		THREE.Camera.prototype.copy = function ( source ) {

			THREE.Object3D.prototype.copy.call( this, source );

			this.matrixWorldInverse.copy( source.matrixWorldInverse );
			this.projectionMatrix.copy( source.projectionMatrix );

			return this;

		};

		// File:src/cameras/CubeCamera.js

		/**
		 * Camera for rendering cube maps
		 *	- renders scene into axis-aligned cube
		 *
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.CubeCamera = function ( near, far, cubeResolution ) {

			THREE.Object3D.call( this );

			this.type = 'CubeCamera';

			var fov = 90, aspect = 1;

			var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
			cameraPX.up.set( 0, - 1, 0 );
			cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
			this.add( cameraPX );

			var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
			cameraNX.up.set( 0, - 1, 0 );
			cameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );
			this.add( cameraNX );

			var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
			cameraPY.up.set( 0, 0, 1 );
			cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
			this.add( cameraPY );

			var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
			cameraNY.up.set( 0, 0, - 1 );
			cameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );
			this.add( cameraNY );

			var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
			cameraPZ.up.set( 0, - 1, 0 );
			cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
			this.add( cameraPZ );

			var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
			cameraNZ.up.set( 0, - 1, 0 );
			cameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );
			this.add( cameraNZ );

			var options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };

			this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );

			this.updateCubeMap = function ( renderer, scene ) {

				if ( this.parent === null ) this.updateMatrixWorld();

				var renderTarget = this.renderTarget;
				var generateMipmaps = renderTarget.texture.generateMipmaps;

				renderTarget.texture.generateMipmaps = false;

				renderTarget.activeCubeFace = 0;
				renderer.render( scene, cameraPX, renderTarget );

				renderTarget.activeCubeFace = 1;
				renderer.render( scene, cameraNX, renderTarget );

				renderTarget.activeCubeFace = 2;
				renderer.render( scene, cameraPY, renderTarget );

				renderTarget.activeCubeFace = 3;
				renderer.render( scene, cameraNY, renderTarget );

				renderTarget.activeCubeFace = 4;
				renderer.render( scene, cameraPZ, renderTarget );

				renderTarget.texture.generateMipmaps = generateMipmaps;

				renderTarget.activeCubeFace = 5;
				renderer.render( scene, cameraNZ, renderTarget );

				renderer.setRenderTarget( null );

			};

		};

		THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );
		THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;

		// File:src/cameras/OrthographicCamera.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author arose / http://github.com/arose
		 */

		THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {

			THREE.Camera.call( this );

			this.type = 'OrthographicCamera';

			this.zoom = 1;
			this.view = null;

			this.left = left;
			this.right = right;
			this.top = top;
			this.bottom = bottom;

			this.near = ( near !== undefined ) ? near : 0.1;
			this.far = ( far !== undefined ) ? far : 2000;

			this.updateProjectionMatrix();

		};

		THREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {

			constructor: THREE.OrthographicCamera,

			copy: function ( source ) {

				THREE.Camera.prototype.copy.call( this, source );

				this.left = source.left;
				this.right = source.right;
				this.top = source.top;
				this.bottom = source.bottom;
				this.near = source.near;
				this.far = source.far;

				this.zoom = source.zoom;
				this.view = source.view === null ? null : Object.assign( {}, source.view );

				return this;

			},

			setViewOffset: function( fullWidth, fullHeight, x, y, width, height ) {

				this.view = {
					fullWidth: fullWidth,
					fullHeight: fullHeight,
					offsetX: x,
					offsetY: y,
					width: width,
					height: height
				};

				this.updateProjectionMatrix();

			},

			clearViewOffset: function() {

				this.view = null;
				this.updateProjectionMatrix();

			},

			updateProjectionMatrix: function () {

				var dx = ( this.right - this.left ) / ( 2 * this.zoom );
				var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
				var cx = ( this.right + this.left ) / 2;
				var cy = ( this.top + this.bottom ) / 2;

				var left = cx - dx;
				var right = cx + dx;
				var top = cy + dy;
				var bottom = cy - dy;

				if ( this.view !== null ) {

					var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
					var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
					var scaleW = ( this.right - this.left ) / this.view.width;
					var scaleH = ( this.top - this.bottom ) / this.view.height;

					left += scaleW * ( this.view.offsetX / zoomW );
					right = left + scaleW * ( this.view.width / zoomW );
					top -= scaleH * ( this.view.offsetY / zoomH );
					bottom = top - scaleH * ( this.view.height / zoomH );

				}

				this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

			},

			toJSON: function ( meta ) {

				var data = THREE.Object3D.prototype.toJSON.call( this, meta );

				data.object.zoom = this.zoom;
				data.object.left = this.left;
				data.object.right = this.right;
				data.object.top = this.top;
				data.object.bottom = this.bottom;
				data.object.near = this.near;
				data.object.far = this.far;

				if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

				return data;

			}

		} );

		// File:src/cameras/PerspectiveCamera.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author greggman / http://games.greggman.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author tschw
		 */

		THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {

			THREE.Camera.call( this );

			this.type = 'PerspectiveCamera';

			this.fov = fov !== undefined ? fov : 50;
			this.zoom = 1;

			this.near = near !== undefined ? near : 0.1;
			this.far = far !== undefined ? far : 2000;
			this.focus = 10;

			this.aspect = aspect !== undefined ? aspect : 1;
			this.view = null;

			this.filmGauge = 35;	// width of the film (default in millimeters)
			this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

			this.updateProjectionMatrix();

		};

		THREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {

			constructor: THREE.PerspectiveCamera,

			copy: function ( source ) {

				THREE.Camera.prototype.copy.call( this, source );

				this.fov = source.fov;
				this.zoom = source.zoom;

				this.near = source.near;
				this.far = source.far;
				this.focus = source.focus;

				this.aspect = source.aspect;
				this.view = source.view === null ? null : Object.assign( {}, source.view );

				this.filmGauge = source.filmGauge;
				this.filmOffset = source.filmOffset;

				return this;

			},

			/**
			 * Sets the FOV by focal length in respect to the current .filmGauge.
			 *
			 * The default film gauge is 35, so that the focal length can be specified for
			 * a 35mm (full frame) camera.
			 *
			 * Values for focal length and film gauge must have the same unit.
			 */
			setFocalLength: function ( focalLength ) {

				// see http://www.bobatkins.com/photography/technical/field_of_view.html
				var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

				this.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
				this.updateProjectionMatrix();

			},

			/**
			 * Calculates the focal length from the current .fov and .filmGauge.
			 */
			getFocalLength: function () {

				var vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );

				return 0.5 * this.getFilmHeight() / vExtentSlope;

			},

			getEffectiveFOV: function () {

				return THREE.Math.RAD2DEG * 2 * Math.atan(
						Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

			},

			getFilmWidth: function () {

				// film not completely covered in portrait format (aspect < 1)
				return this.filmGauge * Math.min( this.aspect, 1 );

			},

			getFilmHeight: function () {

				// film not completely covered in landscape format (aspect > 1)
				return this.filmGauge / Math.max( this.aspect, 1 );

			},

			/**
			 * Sets an offset in a larger frustum. This is useful for multi-window or
			 * multi-monitor/multi-machine setups.
			 *
			 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
			 * the monitors are in grid like this
			 *
			 *   +---+---+---+
			 *   | A | B | C |
			 *   +---+---+---+
			 *   | D | E | F |
			 *   +---+---+---+
			 *
			 * then for each monitor you would call it like this
			 *
			 *   var w = 1920;
			 *   var h = 1080;
			 *   var fullWidth = w * 3;
			 *   var fullHeight = h * 2;
			 *
			 *   --A--
			 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
			 *   --B--
			 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
			 *   --C--
			 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
			 *   --D--
			 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
			 *   --E--
			 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
			 *   --F--
			 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
			 *
			 *   Note there is no reason monitors have to be the same size or in a grid.
			 */
			setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

				this.aspect = fullWidth / fullHeight;

				this.view = {
					fullWidth: fullWidth,
					fullHeight: fullHeight,
					offsetX: x,
					offsetY: y,
					width: width,
					height: height
				};

				this.updateProjectionMatrix();

			},

			clearViewOffset: function() {

				this.view = null;
				this.updateProjectionMatrix();

			},

			updateProjectionMatrix: function () {

				var near = this.near,
					top = near * Math.tan(
							THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
					height = 2 * top,
					width = this.aspect * height,
					left = - 0.5 * width,
					view = this.view;

				if ( view !== null ) {

					var fullWidth = view.fullWidth,
						fullHeight = view.fullHeight;

					left += view.offsetX * width / fullWidth;
					top -= view.offsetY * height / fullHeight;
					width *= view.width / fullWidth;
					height *= view.height / fullHeight;

				}

				var skew = this.filmOffset;
				if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

				this.projectionMatrix.makeFrustum(
						left, left + width, top - height, top, near, this.far );

			},

			toJSON: function ( meta ) {

				var data = THREE.Object3D.prototype.toJSON.call( this, meta );

				data.object.fov = this.fov;
				data.object.zoom = this.zoom;

				data.object.near = this.near;
				data.object.far = this.far;
				data.object.focus = this.focus;

				data.object.aspect = this.aspect;

				if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

				data.object.filmGauge = this.filmGauge;
				data.object.filmOffset = this.filmOffset;

				return data;

			}

		} );

		// File:src/cameras/StereoCamera.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.StereoCamera = function () {

			this.type = 'StereoCamera';

			this.aspect = 1;

			this.cameraL = new THREE.PerspectiveCamera();
			this.cameraL.layers.enable( 1 );
			this.cameraL.matrixAutoUpdate = false;

			this.cameraR = new THREE.PerspectiveCamera();
			this.cameraR.layers.enable( 2 );
			this.cameraR.matrixAutoUpdate = false;

		};

		Object.assign( THREE.StereoCamera.prototype, {

			update: ( function () {

				var focus, fov, aspect, near, far;

				var eyeRight = new THREE.Matrix4();
				var eyeLeft = new THREE.Matrix4();

				return function update( camera ) {

					var needsUpdate = focus !== camera.focus || fov !== camera.fov ||
														aspect !== camera.aspect * this.aspect || near !== camera.near ||
														far !== camera.far;

					if ( needsUpdate ) {

						focus = camera.focus;
						fov = camera.fov;
						aspect = camera.aspect * this.aspect;
						near = camera.near;
						far = camera.far;

						// Off-axis stereoscopic effect based on
						// http://paulbourke.net/stereographics/stereorender/

						var projectionMatrix = camera.projectionMatrix.clone();
						var eyeSep = 0.064 / 2;
						var eyeSepOnProjection = eyeSep * near / focus;
						var ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );
						var xmin, xmax;

						// translate xOffset

						eyeLeft.elements[ 12 ] = - eyeSep;
						eyeRight.elements[ 12 ] = eyeSep;

						// for left eye

						xmin = - ymax * aspect + eyeSepOnProjection;
						xmax = ymax * aspect + eyeSepOnProjection;

						projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
						projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

						this.cameraL.projectionMatrix.copy( projectionMatrix );

						// for right eye

						xmin = - ymax * aspect - eyeSepOnProjection;
						xmax = ymax * aspect - eyeSepOnProjection;

						projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
						projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

						this.cameraR.projectionMatrix.copy( projectionMatrix );

					}

					this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
					this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

				};

			} )()

		} );

		// File:src/lights/Light.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Light = function ( color, intensity ) {

			THREE.Object3D.call( this );

			this.type = 'Light';

			this.color = new THREE.Color( color );
			this.intensity = intensity !== undefined ? intensity : 1;

			this.receiveShadow = undefined;

		};

		THREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.Light,

			copy: function ( source ) {

				THREE.Object3D.prototype.copy.call( this, source );

				this.color.copy( source.color );
				this.intensity = source.intensity;

				return this;

			},

			toJSON: function ( meta ) {

				var data = THREE.Object3D.prototype.toJSON.call( this, meta );

				data.object.color = this.color.getHex();
				data.object.intensity = this.intensity;

				if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

				if ( this.distance !== undefined ) data.object.distance = this.distance;
				if ( this.angle !== undefined ) data.object.angle = this.angle;
				if ( this.decay !== undefined ) data.object.decay = this.decay;
				if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

				return data;

			}

		} );

		// File:src/lights/LightShadow.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.LightShadow = function ( camera ) {

			this.camera = camera;

			this.bias = 0;
			this.radius = 1;

			this.mapSize = new THREE.Vector2( 512, 512 );

			this.map = null;
			this.matrix = new THREE.Matrix4();

		};

		Object.assign( THREE.LightShadow.prototype, {

			copy: function ( source ) {

				this.camera = source.camera.clone();

				this.bias = source.bias;
				this.radius = source.radius;

				this.mapSize.copy( source.mapSize );

				return this;

			},

			clone: function () {

				return new this.constructor().copy( this );

			}

		} );

		// File:src/lights/AmbientLight.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.AmbientLight = function ( color, intensity ) {

			THREE.Light.call( this, color, intensity );

			this.type = 'AmbientLight';

			this.castShadow = undefined;

		};

		THREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

			constructor: THREE.AmbientLight

		} );

		// File:src/lights/DirectionalLight.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.DirectionalLight = function ( color, intensity ) {

			THREE.Light.call( this, color, intensity );

			this.type = 'DirectionalLight';

			this.position.copy( THREE.Object3D.DefaultUp );
			this.updateMatrix();

			this.target = new THREE.Object3D();

			this.shadow = new THREE.DirectionalLightShadow();

		};

		THREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

			constructor: THREE.DirectionalLight,

			copy: function ( source ) {

				THREE.Light.prototype.copy.call( this, source );

				this.target = source.target.clone();

				this.shadow = source.shadow.clone();

				return this;

			}

		} );

		// File:src/lights/DirectionalLightShadow.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.DirectionalLightShadow = function ( light ) {

			THREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

		};

		THREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {

			constructor: THREE.DirectionalLightShadow

		} );

		// File:src/lights/HemisphereLight.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {

			THREE.Light.call( this, skyColor, intensity );

			this.type = 'HemisphereLight';

			this.castShadow = undefined;

			this.position.copy( THREE.Object3D.DefaultUp );
			this.updateMatrix();

			this.groundColor = new THREE.Color( groundColor );

		};

		THREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

			constructor: THREE.HemisphereLight,

			copy: function ( source ) {

				THREE.Light.prototype.copy.call( this, source );

				this.groundColor.copy( source.groundColor );

				return this;

			}

		} );

		// File:src/lights/PointLight.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */


		THREE.PointLight = function ( color, intensity, distance, decay ) {

			THREE.Light.call( this, color, intensity );

			this.type = 'PointLight';

			Object.defineProperty( this, 'power', {
				get: function () {
					// intensity = power per solid angle.
					// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					return this.intensity * 4 * Math.PI;

				},
				set: function ( power ) {
					// intensity = power per solid angle.
					// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					this.intensity = power / ( 4 * Math.PI );
				}
			} );

			this.distance = ( distance !== undefined ) ? distance : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

			this.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );

		};

		THREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

			constructor: THREE.PointLight,

			copy: function ( source ) {

				THREE.Light.prototype.copy.call( this, source );

				this.distance = source.distance;
				this.decay = source.decay;

				this.shadow = source.shadow.clone();

				return this;

			}

		} );

		// File:src/lights/SpotLight.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {

			THREE.Light.call( this, color, intensity );

			this.type = 'SpotLight';

			this.position.copy( THREE.Object3D.DefaultUp );
			this.updateMatrix();

			this.target = new THREE.Object3D();

			Object.defineProperty( this, 'power', {
				get: function () {
					// intensity = power per solid angle.
					// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					return this.intensity * Math.PI;
				},
				set: function ( power ) {
					// intensity = power per solid angle.
					// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					this.intensity = power / Math.PI;
				}
			} );

			this.distance = ( distance !== undefined ) ? distance : 0;
			this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
			this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

			this.shadow = new THREE.SpotLightShadow();

		};

		THREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {

			constructor: THREE.SpotLight,

			copy: function ( source ) {

				THREE.Light.prototype.copy.call( this, source );

				this.distance = source.distance;
				this.angle = source.angle;
				this.penumbra = source.penumbra;
				this.decay = source.decay;

				this.target = source.target.clone();

				this.shadow = source.shadow.clone();

				return this;

			}

		} );

		// File:src/lights/SpotLightShadow.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.SpotLightShadow = function () {

			THREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );

		};

		THREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {

			constructor: THREE.SpotLightShadow,

			update: function ( light ) {

				var fov = THREE.Math.RAD2DEG * 2 * light.angle;
				var aspect = this.mapSize.width / this.mapSize.height;
				var far = light.distance || 500;

				var camera = this.camera;

				if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

					camera.fov = fov;
					camera.aspect = aspect;
					camera.far = far;
					camera.updateProjectionMatrix();

				}

			}

		} );

		// File:src/loaders/AudioLoader.js

		/**
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */

		THREE.AudioLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		Object.assign( THREE.AudioLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var loader = new THREE.XHRLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );
				loader.load( url, function ( buffer ) {

					var context = THREE.AudioContext;

					context.decodeAudioData( buffer, function ( audioBuffer ) {

						onLoad( audioBuffer );

					} );

				}, onProgress, onError );

			}

		} );

		// File:src/loaders/Cache.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Cache = {

			enabled: false,

			files: {},

			add: function ( key, file ) {

				if ( this.enabled === false ) return;

				// console.log( 'THREE.Cache', 'Adding key:', key );

				this.files[ key ] = file;

			},

			get: function ( key ) {

				if ( this.enabled === false ) return;

				// console.log( 'THREE.Cache', 'Checking key:', key );

				return this.files[ key ];

			},

			remove: function ( key ) {

				delete this.files[ key ];

			},

			clear: function () {

				this.files = {};

			}

		};

		// File:src/loaders/Loader.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Loader = function () {

			this.onLoadStart = function () {};
			this.onLoadProgress = function () {};
			this.onLoadComplete = function () {};

		};

		THREE.Loader.prototype = {

			constructor: THREE.Loader,

			crossOrigin: undefined,

			extractUrlBase: function ( url ) {

				var parts = url.split( '/' );

				if ( parts.length === 1 ) return './';

				parts.pop();

				return parts.join( '/' ) + '/';

			},

			initMaterials: function ( materials, texturePath, crossOrigin ) {

				var array = [];

				for ( var i = 0; i < materials.length; ++ i ) {

					array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

				}

				return array;

			},

			createMaterial: ( function () {

				var color, textureLoader, materialLoader;

				return function createMaterial( m, texturePath, crossOrigin ) {

					if ( color === undefined ) color = new THREE.Color();
					if ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();
					if ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();

					// convert from old material format

					var textures = {};

					function loadTexture( path, repeat, offset, wrap, anisotropy ) {

						var fullPath = texturePath + path;
						var loader = THREE.Loader.Handlers.get( fullPath );

						var texture;

						if ( loader !== null ) {

							texture = loader.load( fullPath );

						} else {

							textureLoader.setCrossOrigin( crossOrigin );
							texture = textureLoader.load( fullPath );

						}

						if ( repeat !== undefined ) {

							texture.repeat.fromArray( repeat );

							if ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
							if ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

						}

						if ( offset !== undefined ) {

							texture.offset.fromArray( offset );

						}

						if ( wrap !== undefined ) {

							if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;
							if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;

							if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;
							if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;

						}

						if ( anisotropy !== undefined ) {

							texture.anisotropy = anisotropy;

						}

						var uuid = THREE.Math.generateUUID();

						textures[ uuid ] = texture;

						return uuid;

					}

					//

					var json = {
						uuid: THREE.Math.generateUUID(),
						type: 'MeshLambertMaterial'
					};

					for ( var name in m ) {

						var value = m[ name ];

						switch ( name ) {
							case 'DbgColor':
							case 'DbgIndex':
							case 'opticalDensity':
							case 'illumination':
								break;
							case 'DbgName':
								json.name = value;
								break;
							case 'blending':
								json.blending = THREE[ value ];
								break;
							case 'colorAmbient':
							case 'mapAmbient':
								console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
								break;
							case 'colorDiffuse':
								json.color = color.fromArray( value ).getHex();
								break;
							case 'colorSpecular':
								json.specular = color.fromArray( value ).getHex();
								break;
							case 'colorEmissive':
								json.emissive = color.fromArray( value ).getHex();
								break;
							case 'specularCoef':
								json.shininess = value;
								break;
							case 'shading':
								if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
								if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
								if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
								break;
							case 'mapDiffuse':
								json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
								break;
							case 'mapDiffuseRepeat':
							case 'mapDiffuseOffset':
							case 'mapDiffuseWrap':
							case 'mapDiffuseAnisotropy':
								break;
							case 'mapEmissive':
								json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
								break;
							case 'mapEmissiveRepeat':
							case 'mapEmissiveOffset':
							case 'mapEmissiveWrap':
							case 'mapEmissiveAnisotropy':
								break;
							case 'mapLight':
								json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
								break;
							case 'mapLightRepeat':
							case 'mapLightOffset':
							case 'mapLightWrap':
							case 'mapLightAnisotropy':
								break;
							case 'mapAO':
								json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
								break;
							case 'mapAORepeat':
							case 'mapAOOffset':
							case 'mapAOWrap':
							case 'mapAOAnisotropy':
								break;
							case 'mapBump':
								json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
								break;
							case 'mapBumpScale':
								json.bumpScale = value;
								break;
							case 'mapBumpRepeat':
							case 'mapBumpOffset':
							case 'mapBumpWrap':
							case 'mapBumpAnisotropy':
								break;
							case 'mapNormal':
								json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
								break;
							case 'mapNormalFactor':
								json.normalScale = [ value, value ];
								break;
							case 'mapNormalRepeat':
							case 'mapNormalOffset':
							case 'mapNormalWrap':
							case 'mapNormalAnisotropy':
								break;
							case 'mapSpecular':
								json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
								break;
							case 'mapSpecularRepeat':
							case 'mapSpecularOffset':
							case 'mapSpecularWrap':
							case 'mapSpecularAnisotropy':
								break;
							case 'mapMetalness':
								json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
								break;
							case 'mapMetalnessRepeat':
							case 'mapMetalnessOffset':
							case 'mapMetalnessWrap':
							case 'mapMetalnessAnisotropy':
								break;
							case 'mapRoughness':
								json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
								break;
							case 'mapRoughnessRepeat':
							case 'mapRoughnessOffset':
							case 'mapRoughnessWrap':
							case 'mapRoughnessAnisotropy':
								break;
							case 'mapAlpha':
								json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
								break;
							case 'mapAlphaRepeat':
							case 'mapAlphaOffset':
							case 'mapAlphaWrap':
							case 'mapAlphaAnisotropy':
								break;
							case 'flipSided':
								json.side = THREE.BackSide;
								break;
							case 'doubleSided':
								json.side = THREE.DoubleSide;
								break;
							case 'transparency':
								console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
								json.opacity = value;
								break;
							case 'depthTest':
							case 'depthWrite':
							case 'colorWrite':
							case 'opacity':
							case 'reflectivity':
							case 'transparent':
							case 'visible':
							case 'wireframe':
								json[ name ] = value;
								break;
							case 'vertexColors':
								if ( value === true ) json.vertexColors = THREE.VertexColors;
								if ( value === 'face' ) json.vertexColors = THREE.FaceColors;
								break;
							default:
								console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
								break;
						}

					}

					if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
					if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

					if ( json.opacity < 1 ) json.transparent = true;

					materialLoader.setTextures( textures );

					return materialLoader.parse( json );

				};

			} )()

		};

		THREE.Loader.Handlers = {

			handlers: [],

			add: function ( regex, loader ) {

				this.handlers.push( regex, loader );

			},

			get: function ( file ) {

				var handlers = this.handlers;

				for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

					var regex = handlers[ i ];
					var loader  = handlers[ i + 1 ];

					if ( regex.test( file ) ) {

						return loader;

					}

				}

				return null;

			}

		};

		// File:src/loaders/XHRLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.XHRLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		Object.assign( THREE.XHRLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				if ( this.path !== undefined ) url = this.path + url;

				var scope = this;

				var cached = THREE.Cache.get( url );

				if ( cached !== undefined ) {

					scope.manager.itemStart( url );

					setTimeout( function () {

						if ( onLoad ) onLoad( cached );

						scope.manager.itemEnd( url );

					}, 0 );

					return cached;

				}

				var request = new XMLHttpRequest();
				request.overrideMimeType( 'text/plain' );
				request.open( 'GET', url, true );

				request.addEventListener( 'load', function ( event ) {

					var response = event.target.response;

					THREE.Cache.add( url, response );

					if ( this.status === 200 ) {

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					} else if ( this.status === 0 ) {

						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.

						console.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );

						if ( onLoad ) onLoad( response );

						scope.manager.itemEnd( url );

					} else {

						if ( onError ) onError( event );

						scope.manager.itemError( url );

					}

				}, false );

				if ( onProgress !== undefined ) {

					request.addEventListener( 'progress', function ( event ) {

						onProgress( event );

					}, false );

				}

				request.addEventListener( 'error', function ( event ) {

					if ( onError ) onError( event );

					scope.manager.itemError( url );

				}, false );

				if ( this.responseType !== undefined ) request.responseType = this.responseType;
				if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

				request.send( null );

				scope.manager.itemStart( url );

				return request;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			},

			setResponseType: function ( value ) {

				this.responseType = value;
				return this;

			},

			setWithCredentials: function ( value ) {

				this.withCredentials = value;
				return this;

			}

		} );

		// File:src/loaders/FontLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.FontLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		Object.assign( THREE.FontLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var loader = new THREE.XHRLoader( this.manager );
				loader.load( url, function ( text ) {

					var json;

					try {

						json = JSON.parse( text );

					} catch ( e ) {

						console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
						json = JSON.parse( text.substring( 65, text.length - 2 ) );

					}

					var font = scope.parse( json );

					if ( onLoad ) onLoad( font );

				}, onProgress, onError );

			},

			parse: function ( json ) {

				return new THREE.Font( json );

			}

		} );

		// File:src/loaders/ImageLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.ImageLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		Object.assign( THREE.ImageLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
				image.onload = function () {

					URL.revokeObjectURL( image.src );

					if ( onLoad ) onLoad( image );

					scope.manager.itemEnd( url );

				};

				if ( url.indexOf( 'data:' ) === 0 ) {

					image.src = url;

				} else {

					var loader = new THREE.XHRLoader();
					loader.setPath( this.path );
					loader.setResponseType( 'blob' );
					loader.load( url, function ( blob ) {

						image.src = URL.createObjectURL( blob );

					}, onProgress, onError );

				}

				scope.manager.itemStart( url );

				return image;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;
				return this;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			}

		} );

		// File:src/loaders/JSONLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.JSONLoader = function ( manager ) {

			if ( typeof manager === 'boolean' ) {

				console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
				manager = undefined;

			}

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

			this.withCredentials = false;

		};

		Object.assign( THREE.JSONLoader.prototype, {

			load: function( url, onLoad, onProgress, onError ) {

				var scope = this;

				var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );

				var loader = new THREE.XHRLoader( this.manager );
				loader.setWithCredentials( this.withCredentials );
				loader.load( url, function ( text ) {

					var json = JSON.parse( text );
					var metadata = json.metadata;

					if ( metadata !== undefined ) {

						var type = metadata.type;

						if ( type !== undefined ) {

							if ( type.toLowerCase() === 'object' ) {

								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
								return;

							}

							if ( type.toLowerCase() === 'scene' ) {

								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
								return;

							}

						}

					}

					var object = scope.parse( json, texturePath );
					onLoad( object.geometry, object.materials );

				}, onProgress, onError );

			},

			setTexturePath: function ( value ) {

				this.texturePath = value;

			},

			parse: function ( json, texturePath ) {

				var geometry = new THREE.Geometry(),
				scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

				parseModel( scale );

				parseSkin();
				parseMorphing( scale );
				parseAnimations();

				geometry.computeFaceNormals();
				geometry.computeBoundingSphere();

				function parseModel( scale ) {

					function isBitSet( value, position ) {

						return value & ( 1 << position );

					}

					var i, j, fi,

					offset, zLength,

				colorIndex, normalIndex, uvIndex, materialIndex,

					type,
					isQuad,
					hasMaterial,
					hasFaceVertexUv,
					hasFaceNormal, hasFaceVertexNormal,
					hasFaceColor, hasFaceVertexColor,

				vertex, face, faceA, faceB, hex, normal,

					uvLayer, uv, u, v,

					faces = json.faces,
					vertices = json.vertices,
					normals = json.normals,
					colors = json.colors,

					nUvLayers = 0;

					if ( json.uvs !== undefined ) {

						// disregard empty arrays

						for ( i = 0; i < json.uvs.length; i ++ ) {

							if ( json.uvs[ i ].length ) nUvLayers ++;

						}

						for ( i = 0; i < nUvLayers; i ++ ) {

							geometry.faceVertexUvs[ i ] = [];

						}

					}

					offset = 0;
					zLength = vertices.length;

					while ( offset < zLength ) {

						vertex = new THREE.Vector3();

						vertex.x = vertices[ offset ++ ] * scale;
						vertex.y = vertices[ offset ++ ] * scale;
						vertex.z = vertices[ offset ++ ] * scale;

						geometry.vertices.push( vertex );

					}

					offset = 0;
					zLength = faces.length;

					while ( offset < zLength ) {

						type = faces[ offset ++ ];


						isQuad              = isBitSet( type, 0 );
						hasMaterial         = isBitSet( type, 1 );
						hasFaceVertexUv     = isBitSet( type, 3 );
						hasFaceNormal       = isBitSet( type, 4 );
						hasFaceVertexNormal = isBitSet( type, 5 );
						hasFaceColor	     = isBitSet( type, 6 );
						hasFaceVertexColor  = isBitSet( type, 7 );

						// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

						if ( isQuad ) {

							faceA = new THREE.Face3();
							faceA.a = faces[ offset ];
							faceA.b = faces[ offset + 1 ];
							faceA.c = faces[ offset + 3 ];

							faceB = new THREE.Face3();
							faceB.a = faces[ offset + 1 ];
							faceB.b = faces[ offset + 2 ];
							faceB.c = faces[ offset + 3 ];

							offset += 4;

							if ( hasMaterial ) {

								materialIndex = faces[ offset ++ ];
								faceA.materialIndex = materialIndex;
								faceB.materialIndex = materialIndex;

							}

							// to get face <=> uv index correspondence

							fi = geometry.faces.length;

							if ( hasFaceVertexUv ) {

								for ( i = 0; i < nUvLayers; i ++ ) {

									uvLayer = json.uvs[ i ];

									geometry.faceVertexUvs[ i ][ fi ] = [];
									geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

									for ( j = 0; j < 4; j ++ ) {

										uvIndex = faces[ offset ++ ];

										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];

										uv = new THREE.Vector2( u, v );

										if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
										if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

									}

								}

							}

							if ( hasFaceNormal ) {

								normalIndex = faces[ offset ++ ] * 3;

								faceA.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								faceB.normal.copy( faceA.normal );

							}

							if ( hasFaceVertexNormal ) {

								for ( i = 0; i < 4; i ++ ) {

									normalIndex = faces[ offset ++ ] * 3;

									normal = new THREE.Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);


									if ( i !== 2 ) faceA.vertexNormals.push( normal );
									if ( i !== 0 ) faceB.vertexNormals.push( normal );

								}

							}


							if ( hasFaceColor ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								faceA.color.setHex( hex );
								faceB.color.setHex( hex );

							}


							if ( hasFaceVertexColor ) {

								for ( i = 0; i < 4; i ++ ) {

									colorIndex = faces[ offset ++ ];
									hex = colors[ colorIndex ];

									if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
									if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );

								}

							}

							geometry.faces.push( faceA );
							geometry.faces.push( faceB );

						} else {

							face = new THREE.Face3();
							face.a = faces[ offset ++ ];
							face.b = faces[ offset ++ ];
							face.c = faces[ offset ++ ];

							if ( hasMaterial ) {

								materialIndex = faces[ offset ++ ];
								face.materialIndex = materialIndex;

							}

							// to get face <=> uv index correspondence

							fi = geometry.faces.length;

							if ( hasFaceVertexUv ) {

								for ( i = 0; i < nUvLayers; i ++ ) {

									uvLayer = json.uvs[ i ];

									geometry.faceVertexUvs[ i ][ fi ] = [];

									for ( j = 0; j < 3; j ++ ) {

										uvIndex = faces[ offset ++ ];

										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];

										uv = new THREE.Vector2( u, v );

										geometry.faceVertexUvs[ i ][ fi ].push( uv );

									}

								}

							}

							if ( hasFaceNormal ) {

								normalIndex = faces[ offset ++ ] * 3;

								face.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

							}

							if ( hasFaceVertexNormal ) {

								for ( i = 0; i < 3; i ++ ) {

									normalIndex = faces[ offset ++ ] * 3;

									normal = new THREE.Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);

									face.vertexNormals.push( normal );

								}

							}


							if ( hasFaceColor ) {

								colorIndex = faces[ offset ++ ];
								face.color.setHex( colors[ colorIndex ] );

							}


							if ( hasFaceVertexColor ) {

								for ( i = 0; i < 3; i ++ ) {

									colorIndex = faces[ offset ++ ];
									face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );

								}

							}

							geometry.faces.push( face );

						}

					}

				}

				function parseSkin() {

					var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

					if ( json.skinWeights ) {

						for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

							var x =                               json.skinWeights[ i ];
							var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
							var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
							var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

							geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

						}

					}

					if ( json.skinIndices ) {

						for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

							var a =                               json.skinIndices[ i ];
							var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
							var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
							var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

							geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

						}

					}

					geometry.bones = json.bones;

					if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

						console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
							geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

					}

				}

				function parseMorphing( scale ) {

					if ( json.morphTargets !== undefined ) {

						for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

							geometry.morphTargets[ i ] = {};
							geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
							geometry.morphTargets[ i ].vertices = [];

							var dstVertices = geometry.morphTargets[ i ].vertices;
							var srcVertices = json.morphTargets[ i ].vertices;

							for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

								var vertex = new THREE.Vector3();
								vertex.x = srcVertices[ v ] * scale;
								vertex.y = srcVertices[ v + 1 ] * scale;
								vertex.z = srcVertices[ v + 2 ] * scale;

								dstVertices.push( vertex );

							}

						}

					}

					if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

						console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

						var faces = geometry.faces;
						var morphColors = json.morphColors[ 0 ].colors;

						for ( var i = 0, l = faces.length; i < l; i ++ ) {

							faces[ i ].color.fromArray( morphColors, i * 3 );

						}

					}

				}

				function parseAnimations() {

					var outputAnimations = [];

					// parse old style Bone/Hierarchy animations
					var animations = [];

					if ( json.animation !== undefined ) {

						animations.push( json.animation );

					}

					if ( json.animations !== undefined ) {

						if ( json.animations.length ) {

							animations = animations.concat( json.animations );

						} else {

							animations.push( json.animations );

						}

					}

					for ( var i = 0; i < animations.length; i ++ ) {

						var clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );
						if ( clip ) outputAnimations.push( clip );

					}

					// parse implicit morph animations
					if ( geometry.morphTargets ) {

						// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
						var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
						outputAnimations = outputAnimations.concat( morphAnimationClips );

					}

					if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

				}

				if ( json.materials === undefined || json.materials.length === 0 ) {

					return { geometry: geometry };

				} else {

					var materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

					return { geometry: geometry, materials: materials };

				}

			}

		} );

		// File:src/loaders/LoadingManager.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.LoadingManager = function ( onLoad, onProgress, onError ) {

			var scope = this;

			var isLoading = false, itemsLoaded = 0, itemsTotal = 0;

			this.onStart = undefined;
			this.onLoad = onLoad;
			this.onProgress = onProgress;
			this.onError = onError;

			this.itemStart = function ( url ) {

				itemsTotal ++;

				if ( isLoading === false ) {

					if ( scope.onStart !== undefined ) {

						scope.onStart( url, itemsLoaded, itemsTotal );

					}

				}

				isLoading = true;

			};

			this.itemEnd = function ( url ) {

				itemsLoaded ++;

				if ( scope.onProgress !== undefined ) {

					scope.onProgress( url, itemsLoaded, itemsTotal );

				}

				if ( itemsLoaded === itemsTotal ) {

					isLoading = false;

					if ( scope.onLoad !== undefined ) {

						scope.onLoad();

					}

				}

			};

			this.itemError = function ( url ) {

				if ( scope.onError !== undefined ) {

					scope.onError( url );

				}

			};

		};

		THREE.DefaultLoadingManager = new THREE.LoadingManager();

		// File:src/loaders/BufferGeometryLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.BufferGeometryLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		Object.assign( THREE.BufferGeometryLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var loader = new THREE.XHRLoader( scope.manager );
				loader.load( url, function ( text ) {

					onLoad( scope.parse( JSON.parse( text ) ) );

				}, onProgress, onError );

			},

			parse: function ( json ) {

				var geometry = new THREE.BufferGeometry();

				var index = json.data.index;

				var TYPED_ARRAYS = {
					'Int8Array': Int8Array,
					'Uint8Array': Uint8Array,
					'Uint8ClampedArray': Uint8ClampedArray,
					'Int16Array': Int16Array,
					'Uint16Array': Uint16Array,
					'Int32Array': Int32Array,
					'Uint32Array': Uint32Array,
					'Float32Array': Float32Array,
					'Float64Array': Float64Array
				};

				if ( index !== undefined ) {

					var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
					geometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );

				}

				var attributes = json.data.attributes;

				for ( var key in attributes ) {

					var attribute = attributes[ key ];
					var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

					geometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

				}

				var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

				if ( groups !== undefined ) {

					for ( var i = 0, n = groups.length; i !== n; ++ i ) {

						var group = groups[ i ];

						geometry.addGroup( group.start, group.count, group.materialIndex );

					}

				}

				var boundingSphere = json.data.boundingSphere;

				if ( boundingSphere !== undefined ) {

					var center = new THREE.Vector3();

					if ( boundingSphere.center !== undefined ) {

						center.fromArray( boundingSphere.center );

					}

					geometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );

				}

				return geometry;

			}

		} );

		// File:src/loaders/MaterialLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.MaterialLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
			this.textures = {};

		};

		Object.assign( THREE.MaterialLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var loader = new THREE.XHRLoader( scope.manager );
				loader.load( url, function ( text ) {

					onLoad( scope.parse( JSON.parse( text ) ) );

				}, onProgress, onError );

			},

			setTextures: function ( value ) {

				this.textures = value;

			},

			getTexture: function ( name ) {

				var textures = this.textures;

				if ( textures[ name ] === undefined ) {

					console.warn( 'THREE.MaterialLoader: Undefined texture', name );

				}

				return textures[ name ];

			},

			parse: function ( json ) {

				var material = new THREE[ json.type ];

				if ( json.uuid !== undefined ) material.uuid = json.uuid;
				if ( json.name !== undefined ) material.name = json.name;
				if ( json.color !== undefined ) material.color.setHex( json.color );
				if ( json.roughness !== undefined ) material.roughness = json.roughness;
				if ( json.metalness !== undefined ) material.metalness = json.metalness;
				if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
				if ( json.specular !== undefined ) material.specular.setHex( json.specular );
				if ( json.shininess !== undefined ) material.shininess = json.shininess;
				if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
				if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
				if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
				if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
				if ( json.shading !== undefined ) material.shading = json.shading;
				if ( json.blending !== undefined ) material.blending = json.blending;
				if ( json.side !== undefined ) material.side = json.side;
				if ( json.opacity !== undefined ) material.opacity = json.opacity;
				if ( json.transparent !== undefined ) material.transparent = json.transparent;
				if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
				if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
				if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
				if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
				if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
				if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;

				// for PointsMaterial
				if ( json.size !== undefined ) material.size = json.size;
				if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

				// maps

				if ( json.map !== undefined ) material.map = this.getTexture( json.map );

				if ( json.alphaMap !== undefined ) {

					material.alphaMap = this.getTexture( json.alphaMap );
					material.transparent = true;

				}

				if ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );
				if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

				if ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );
				if ( json.normalScale !== undefined ) {

					var normalScale = json.normalScale;

					if ( Array.isArray( normalScale ) === false ) {

						// Blender exporter used to export a scalar. See #7459

						normalScale = [ normalScale, normalScale ];

					}

					material.normalScale = new THREE.Vector2().fromArray( normalScale );

				}

				if ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );
				if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
				if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

				if ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );
				if ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );

				if ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );
				if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

				if ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );

				if ( json.envMap !== undefined ) {

					material.envMap = this.getTexture( json.envMap );
					material.combine = THREE.MultiplyOperation;

				}

				if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

				if ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );
				if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

				if ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );
				if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

				// MultiMaterial

				if ( json.materials !== undefined ) {

					for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

						material.materials.push( this.parse( json.materials[ i ] ) );

					}

				}

				return material;

			}

		} );

		// File:src/loaders/ObjectLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.ObjectLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
			this.texturePath = '';

		};

		Object.assign( THREE.ObjectLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				if ( this.texturePath === '' ) {

					this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

				}

				var scope = this;

				var loader = new THREE.XHRLoader( scope.manager );
				loader.load( url, function ( text ) {

					scope.parse( JSON.parse( text ), onLoad );

				}, onProgress, onError );

			},

			setTexturePath: function ( value ) {

				this.texturePath = value;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;

			},

			parse: function ( json, onLoad ) {

				var geometries = this.parseGeometries( json.geometries );

				var images = this.parseImages( json.images, function () {

					if ( onLoad !== undefined ) onLoad( object );

				} );

				var textures  = this.parseTextures( json.textures, images );
				var materials = this.parseMaterials( json.materials, textures );

				var object = this.parseObject( json.object, geometries, materials );

				if ( json.animations ) {

					object.animations = this.parseAnimations( json.animations );

				}

				if ( json.images === undefined || json.images.length === 0 ) {

					if ( onLoad !== undefined ) onLoad( object );

				}

				return object;

			},

			parseGeometries: function ( json ) {

				var geometries = {};

				if ( json !== undefined ) {

					var geometryLoader = new THREE.JSONLoader();
					var bufferGeometryLoader = new THREE.BufferGeometryLoader();

					for ( var i = 0, l = json.length; i < l; i ++ ) {

						var geometry;
						var data = json[ i ];

						switch ( data.type ) {

							case 'PlaneGeometry':
							case 'PlaneBufferGeometry':

								geometry = new THREE[ data.type ](
									data.width,
									data.height,
									data.widthSegments,
									data.heightSegments
								);

								break;

							case 'BoxGeometry':
							case 'BoxBufferGeometry':
							case 'CubeGeometry': // backwards compatible

								geometry = new THREE[ data.type ](
									data.width,
									data.height,
									data.depth,
									data.widthSegments,
									data.heightSegments,
									data.depthSegments
								);

								break;

							case 'CircleGeometry':
							case 'CircleBufferGeometry':

								geometry = new THREE[ data.type ](
									data.radius,
									data.segments,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'CylinderGeometry':
							case 'CylinderBufferGeometry':

								geometry = new THREE[ data.type ](
									data.radiusTop,
									data.radiusBottom,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'ConeGeometry':
							case 'ConeBufferGeometry':

								geometry = new THREE [ data.type ](
									data.radius,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'SphereGeometry':
							case 'SphereBufferGeometry':

								geometry = new THREE[ data.type ](
									data.radius,
									data.widthSegments,
									data.heightSegments,
									data.phiStart,
									data.phiLength,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'DodecahedronGeometry':
							case 'IcosahedronGeometry':
							case 'OctahedronGeometry':
							case 'TetrahedronGeometry':

								geometry = new THREE[ data.type ](
									data.radius,
									data.detail
								);

								break;

							case 'RingGeometry':
							case 'RingBufferGeometry':

								geometry = new THREE[ data.type ](
									data.innerRadius,
									data.outerRadius,
									data.thetaSegments,
									data.phiSegments,
									data.thetaStart,
									data.thetaLength
								);

								break;

							case 'TorusGeometry':
							case 'TorusBufferGeometry':

								geometry = new THREE[ data.type ](
									data.radius,
									data.tube,
									data.radialSegments,
									data.tubularSegments,
									data.arc
								);

								break;

							case 'TorusKnotGeometry':
							case 'TorusKnotBufferGeometry':

								geometry = new THREE[ data.type ](
									data.radius,
									data.tube,
									data.tubularSegments,
									data.radialSegments,
									data.p,
									data.q
								);

								break;

							case 'LatheGeometry':
							case 'LatheBufferGeometry':

								geometry = new THREE[ data.type ](
									data.points,
									data.segments,
									data.phiStart,
									data.phiLength
								);

								break;

							case 'BufferGeometry':

								geometry = bufferGeometryLoader.parse( data );

								break;

							case 'Geometry':

								geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;

								break;

							default:

								console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

								continue;

						}

						geometry.uuid = data.uuid;

						if ( data.name !== undefined ) geometry.name = data.name;

						geometries[ data.uuid ] = geometry;

					}

				}

				return geometries;

			},

			parseMaterials: function ( json, textures ) {

				var materials = {};

				if ( json !== undefined ) {

					var loader = new THREE.MaterialLoader();
					loader.setTextures( textures );

					for ( var i = 0, l = json.length; i < l; i ++ ) {

						var material = loader.parse( json[ i ] );
						materials[ material.uuid ] = material;

					}

				}

				return materials;

			},

			parseAnimations: function ( json ) {

				var animations = [];

				for ( var i = 0; i < json.length; i ++ ) {

					var clip = THREE.AnimationClip.parse( json[ i ] );

					animations.push( clip );

				}

				return animations;

			},

			parseImages: function ( json, onLoad ) {

				var scope = this;
				var images = {};

				function loadImage( url ) {

					scope.manager.itemStart( url );

					return loader.load( url, function () {

						scope.manager.itemEnd( url );

					} );

				}

				if ( json !== undefined && json.length > 0 ) {

					var manager = new THREE.LoadingManager( onLoad );

					var loader = new THREE.ImageLoader( manager );
					loader.setCrossOrigin( this.crossOrigin );

					for ( var i = 0, l = json.length; i < l; i ++ ) {

						var image = json[ i ];
						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

						images[ image.uuid ] = loadImage( path );

					}

				}

				return images;

			},

			parseTextures: function ( json, images ) {

				function parseConstant( value ) {

					if ( typeof( value ) === 'number' ) return value;

					console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

					return THREE[ value ];

				}

				var textures = {};

				if ( json !== undefined ) {

					for ( var i = 0, l = json.length; i < l; i ++ ) {

						var data = json[ i ];

						if ( data.image === undefined ) {

							console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

						}

						if ( images[ data.image ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

						}

						var texture = new THREE.Texture( images[ data.image ] );
						texture.needsUpdate = true;

						texture.uuid = data.uuid;

						if ( data.name !== undefined ) texture.name = data.name;

						if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );

						if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
						if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
						if ( data.wrap !== undefined ) {

							texture.wrapS = parseConstant( data.wrap[ 0 ] );
							texture.wrapT = parseConstant( data.wrap[ 1 ] );

						}

						if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );
						if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );
						if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

						if ( data.flipY !== undefined ) texture.flipY = data.flipY;

						textures[ data.uuid ] = texture;

					}

				}

				return textures;

			},

			parseObject: function () {

				var matrix = new THREE.Matrix4();

				return function parseObject( data, geometries, materials ) {

					var object;

					function getGeometry( name ) {

						if ( geometries[ name ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

						}

						return geometries[ name ];

					}

					function getMaterial( name ) {

						if ( name === undefined ) return undefined;

						if ( materials[ name ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', name );

						}

						return materials[ name ];

					}

					switch ( data.type ) {

						case 'Scene':

							object = new THREE.Scene();

							break;

						case 'PerspectiveCamera':

							object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

							if ( data.focus !== undefined ) object.focus = data.focus;
							if ( data.zoom !== undefined ) object.zoom = data.zoom;
							if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
							if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
							if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

							break;

						case 'OrthographicCamera':

							object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

							break;

						case 'AmbientLight':

							object = new THREE.AmbientLight( data.color, data.intensity );

							break;

						case 'DirectionalLight':

							object = new THREE.DirectionalLight( data.color, data.intensity );

							break;

						case 'PointLight':

							object = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );

							break;

						case 'SpotLight':

							object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

							break;

						case 'HemisphereLight':

							object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );

							break;

						case 'Mesh':

							var geometry = getGeometry( data.geometry );
							var material = getMaterial( data.material );

							if ( geometry.bones && geometry.bones.length > 0 ) {

								object = new THREE.SkinnedMesh( geometry, material );

							} else {

								object = new THREE.Mesh( geometry, material );

							}

							break;

						case 'LOD':

							object = new THREE.LOD();

							break;

						case 'Line':

							object = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

							break;

						case 'PointCloud':
						case 'Points':

							object = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );

							break;

						case 'Sprite':

							object = new THREE.Sprite( getMaterial( data.material ) );

							break;

						case 'Group':

							object = new THREE.Group();

							break;

						default:

							object = new THREE.Object3D();

					}

					object.uuid = data.uuid;

					if ( data.name !== undefined ) object.name = data.name;
					if ( data.matrix !== undefined ) {

						matrix.fromArray( data.matrix );
						matrix.decompose( object.position, object.quaternion, object.scale );

					} else {

						if ( data.position !== undefined ) object.position.fromArray( data.position );
						if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
						if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

					}

					if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
					if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

					if ( data.visible !== undefined ) object.visible = data.visible;
					if ( data.userData !== undefined ) object.userData = data.userData;

					if ( data.children !== undefined ) {

						for ( var child in data.children ) {

							object.add( this.parseObject( data.children[ child ], geometries, materials ) );

						}

					}

					if ( data.type === 'LOD' ) {

						var levels = data.levels;

						for ( var l = 0; l < levels.length; l ++ ) {

							var level = levels[ l ];
							var child = object.getObjectByProperty( 'uuid', level.object );

							if ( child !== undefined ) {

								object.addLevel( child, level.distance );

							}

						}

					}

					return object;

				};

			}()

		} );

		// File:src/loaders/TextureLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.TextureLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		Object.assign( THREE.TextureLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var texture = new THREE.Texture();

				var loader = new THREE.ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );
				loader.load( url, function ( image ) {

					// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
					var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

					texture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;
					texture.image = image;
					texture.needsUpdate = true;

					if ( onLoad !== undefined ) {

						onLoad( texture );

					}

				}, onProgress, onError );

				return texture;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;
				return this;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			}

		} );

		// File:src/loaders/CubeTextureLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.CubeTextureLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		Object.assign( THREE.CubeTextureLoader.prototype, {

			load: function ( urls, onLoad, onProgress, onError ) {

				var texture = new THREE.CubeTexture();

				var loader = new THREE.ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );

				var loaded = 0;

				function loadTexture( i ) {

					loader.load( urls[ i ], function ( image ) {

						texture.images[ i ] = image;

						loaded ++;

						if ( loaded === 6 ) {

							texture.needsUpdate = true;

							if ( onLoad ) onLoad( texture );

						}

					}, undefined, onError );

				}

				for ( var i = 0; i < urls.length; ++ i ) {

					loadTexture( i );

				}

				return texture;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;
				return this;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			}

		} );

		// File:src/loaders/BinaryTextureLoader.js

		/**
		 * @author Nikos M. / https://github.com/foo123/
		 *
		 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
		 */

		THREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

			// override in sub classes
			this._parser = null;

		};

		Object.assign( THREE.BinaryTextureLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var texture = new THREE.DataTexture();

				var loader = new THREE.XHRLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );

				loader.load( url, function ( buffer ) {

					var texData = scope._parser( buffer );

					if ( ! texData ) return;

					if ( undefined !== texData.image ) {

						texture.image = texData.image;

					} else if ( undefined !== texData.data ) {

						texture.image.width = texData.width;
						texture.image.height = texData.height;
						texture.image.data = texData.data;

					}

					texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;
					texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;

					texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;
					texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;

					texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

					if ( undefined !== texData.format ) {

						texture.format = texData.format;

					}
					if ( undefined !== texData.type ) {

						texture.type = texData.type;

					}

					if ( undefined !== texData.mipmaps ) {

						texture.mipmaps = texData.mipmaps;

					}

					if ( 1 === texData.mipmapCount ) {

						texture.minFilter = THREE.LinearFilter;

					}

					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture, texData );

				}, onProgress, onError );


				return texture;

			}

		} );

		// File:src/loaders/CompressedTextureLoader.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * Abstract Base class to block based textures loader (dds, pvr, ...)
		 */

		THREE.CompressedTextureLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

			// override in sub classes
			this._parser = null;

		};

		Object.assign( THREE.CompressedTextureLoader.prototype, {

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var images = [];

				var texture = new THREE.CompressedTexture();
				texture.image = images;

				var loader = new THREE.XHRLoader( this.manager );
				loader.setPath( this.path );
				loader.setResponseType( 'arraybuffer' );

				function loadTexture( i ) {

					loader.load( url[ i ], function ( buffer ) {

						var texDatas = scope._parser( buffer, true );

						images[ i ] = {
							width: texDatas.width,
							height: texDatas.height,
							format: texDatas.format,
							mipmaps: texDatas.mipmaps
						};

						loaded += 1;

						if ( loaded === 6 ) {

							if ( texDatas.mipmapCount === 1 )
								texture.minFilter = THREE.LinearFilter;

							texture.format = texDatas.format;
							texture.needsUpdate = true;

							if ( onLoad ) onLoad( texture );

						}

					}, onProgress, onError );

				}

				if ( Array.isArray( url ) ) {

					var loaded = 0;

					for ( var i = 0, il = url.length; i < il; ++ i ) {

						loadTexture( i );

					}

				} else {

					// compressed cubemap texture stored in a single DDS file

					loader.load( url, function ( buffer ) {

						var texDatas = scope._parser( buffer, true );

						if ( texDatas.isCubemap ) {

							var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

							for ( var f = 0; f < faces; f ++ ) {

								images[ f ] = { mipmaps : [] };

								for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

									images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
									images[ f ].format = texDatas.format;
									images[ f ].width = texDatas.width;
									images[ f ].height = texDatas.height;

								}

							}

						} else {

							texture.image.width = texDatas.width;
							texture.image.height = texDatas.height;
							texture.mipmaps = texDatas.mipmaps;

						}

						if ( texDatas.mipmapCount === 1 ) {

							texture.minFilter = THREE.LinearFilter;

						}

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}, onProgress, onError );

				}

				return texture;

			},

			setPath: function ( value ) {

				this.path = value;
				return this;

			}

		} );

		// File:src/materials/Material.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Material = function () {

			Object.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );

			this.uuid = THREE.Math.generateUUID();

			this.name = '';
			this.type = 'Material';

			this.fog = true;
			this.lights = true;

			this.blending = THREE.NormalBlending;
			this.side = THREE.FrontSide;
			this.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading
			this.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

			this.opacity = 1;
			this.transparent = false;

			this.blendSrc = THREE.SrcAlphaFactor;
			this.blendDst = THREE.OneMinusSrcAlphaFactor;
			this.blendEquation = THREE.AddEquation;
			this.blendSrcAlpha = null;
			this.blendDstAlpha = null;
			this.blendEquationAlpha = null;

			this.depthFunc = THREE.LessEqualDepth;
			this.depthTest = true;
			this.depthWrite = true;

			this.clippingPlanes = null;
			this.clipShadows = false;

			this.colorWrite = true;

			this.precision = null; // override the renderer's default precision for this material

			this.polygonOffset = false;
			this.polygonOffsetFactor = 0;
			this.polygonOffsetUnits = 0;

			this.alphaTest = 0;
			this.premultipliedAlpha = false;

			this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

			this.visible = true;

			this._needsUpdate = true;

		};

		THREE.Material.prototype = {

			constructor: THREE.Material,

			get needsUpdate() {

				return this._needsUpdate;

			},

			set needsUpdate( value ) {

				if ( value === true ) this.update();
				this._needsUpdate = value;

			},

			setValues: function ( values ) {

				if ( values === undefined ) return;

				for ( var key in values ) {

					var newValue = values[ key ];

					if ( newValue === undefined ) {

						console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
						continue;

					}

					var currentValue = this[ key ];

					if ( currentValue === undefined ) {

						console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
						continue;

					}

					if ( currentValue instanceof THREE.Color ) {

						currentValue.set( newValue );

					} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

						currentValue.copy( newValue );

					} else if ( key === 'overdraw' ) {

						// ensure overdraw is backwards-compatible with legacy boolean type
						this[ key ] = Number( newValue );

					} else {

						this[ key ] = newValue;

					}

				}

			},

			toJSON: function ( meta ) {

				var isRoot = meta === undefined;

				if ( isRoot ) {

					meta = {
						textures: {},
						images: {}
					};

				}

				var data = {
					metadata: {
						version: 4.4,
						type: 'Material',
						generator: 'Material.toJSON'
					}
				};

				// standard Material serialization
				data.uuid = this.uuid;
				data.type = this.type;

				if ( this.name !== '' ) data.name = this.name;

				if ( this.color instanceof THREE.Color ) data.color = this.color.getHex();

				if ( this.roughness !== undefined ) data.roughness = this.roughness;
				if ( this.metalness !== undefined ) data.metalness = this.metalness;

				if ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();
				if ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();
				if ( this.shininess !== undefined ) data.shininess = this.shininess;

				if ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;
				if ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
				if ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
				if ( this.bumpMap instanceof THREE.Texture ) {

					data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
					data.bumpScale = this.bumpScale;

				}
				if ( this.normalMap instanceof THREE.Texture ) {

					data.normalMap = this.normalMap.toJSON( meta ).uuid;
					data.normalScale = this.normalScale.toArray();

				}
				if ( this.displacementMap instanceof THREE.Texture ) {

					data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
					data.displacementScale = this.displacementScale;
					data.displacementBias = this.displacementBias;

				}
				if ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
				if ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

				if ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
				if ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

				if ( this.envMap instanceof THREE.Texture ) {

					data.envMap = this.envMap.toJSON( meta ).uuid;
					data.reflectivity = this.reflectivity; // Scale behind envMap

				}

				if ( this.size !== undefined ) data.size = this.size;
				if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

				if ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;
				if ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;
				if ( this.side !== THREE.FrontSide ) data.side = this.side;
				if ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;

				if ( this.opacity < 1 ) data.opacity = this.opacity;
				if ( this.transparent === true ) data.transparent = this.transparent;
				if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
				if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
				if ( this.wireframe === true ) data.wireframe = this.wireframe;
				if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;

				// TODO: Copied from Object3D.toJSON

				function extractFromCache ( cache ) {

					var values = [];

					for ( var key in cache ) {

						var data = cache[ key ];
						delete data.metadata;
						values.push( data );

					}

					return values;

				}

				if ( isRoot ) {

					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );

					if ( textures.length > 0 ) data.textures = textures;
					if ( images.length > 0 ) data.images = images;

				}

				return data;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( source ) {

				this.name = source.name;

				this.fog = source.fog;
				this.lights = source.lights;

				this.blending = source.blending;
				this.side = source.side;
				this.shading = source.shading;
				this.vertexColors = source.vertexColors;

				this.opacity = source.opacity;
				this.transparent = source.transparent;

				this.blendSrc = source.blendSrc;
				this.blendDst = source.blendDst;
				this.blendEquation = source.blendEquation;
				this.blendSrcAlpha = source.blendSrcAlpha;
				this.blendDstAlpha = source.blendDstAlpha;
				this.blendEquationAlpha = source.blendEquationAlpha;

				this.depthFunc = source.depthFunc;
				this.depthTest = source.depthTest;
				this.depthWrite = source.depthWrite;

				this.colorWrite = source.colorWrite;

				this.precision = source.precision;

				this.polygonOffset = source.polygonOffset;
				this.polygonOffsetFactor = source.polygonOffsetFactor;
				this.polygonOffsetUnits = source.polygonOffsetUnits;

				this.alphaTest = source.alphaTest;

				this.premultipliedAlpha = source.premultipliedAlpha;

				this.overdraw = source.overdraw;

				this.visible = source.visible;
				this.clipShadows = source.clipShadows;

				var srcPlanes = source.clippingPlanes,
					dstPlanes = null;

				if ( srcPlanes !== null ) {

					var n = srcPlanes.length;
					dstPlanes = new Array( n );

					for ( var i = 0; i !== n; ++ i )
						dstPlanes[ i ] = srcPlanes[ i ].clone();

				}

				this.clippingPlanes = dstPlanes;

				return this;

			},

			update: function () {

				this.dispatchEvent( { type: 'update' } );

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		};

		Object.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );

		THREE.MaterialIdCount = 0;

		// File:src/materials/LineBasicMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *  linecap: "round",
		 *  linejoin: "round"
		 * }
		 */

		THREE.LineBasicMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'LineBasicMaterial';

			this.color = new THREE.Color( 0xffffff );

			this.linewidth = 1;
			this.linecap = 'round';
			this.linejoin = 'round';

			this.lights = false;

			this.setValues( parameters );

		};

		THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;

		THREE.LineBasicMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.linewidth = source.linewidth;
			this.linecap = source.linecap;
			this.linejoin = source.linejoin;

			return this;

		};

		// File:src/materials/LineDashedMaterial.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *
		 *  scale: <float>,
		 *  dashSize: <float>,
		 *  gapSize: <float>
		 * }
		 */

		THREE.LineDashedMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'LineDashedMaterial';

			this.color = new THREE.Color( 0xffffff );

			this.linewidth = 1;

			this.scale = 1;
			this.dashSize = 3;
			this.gapSize = 1;

			this.lights = false;

			this.setValues( parameters );

		};

		THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;

		THREE.LineDashedMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.linewidth = source.linewidth;

			this.scale = source.scale;
			this.dashSize = source.dashSize;
			this.gapSize = source.gapSize;

			return this;

		};

		// File:src/materials/MeshBasicMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  shading: THREE.SmoothShading,
		 *  depthTest: <bool>,
		 *  depthWrite: <bool>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>
		 * }
		 */

		THREE.MeshBasicMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'MeshBasicMaterial';

			this.color = new THREE.Color( 0xffffff ); // emissive

			this.map = null;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.specularMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.combine = THREE.MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.skinning = false;
			this.morphTargets = false;

			this.lights = false;

			this.setValues( parameters );

		};

		THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;

		THREE.MeshBasicMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.map = source.map;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.specularMap = source.specularMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;

			return this;

		};

		// File:src/materials/MeshDepthMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / https://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 * }
		 */

		THREE.MeshDepthMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'MeshDepthMaterial';

			this.depthPacking = THREE.BasicDepthPacking;

			this.skinning = false;
			this.morphTargets = false;

			this.map = null;

			this.alphaMap = null;

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.fog = false;
			this.lights = false;

			this.setValues( parameters );

		};

		THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;

		THREE.MeshDepthMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.depthPacking = source.depthPacking;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;

			this.map = source.map;

			this.alphaMap = source.alphaMap;

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			return this;

		};

		// File:src/materials/MeshLambertMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		THREE.MeshLambertMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'MeshLambertMaterial';

			this.color = new THREE.Color( 0xffffff ); // diffuse

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.emissive = new THREE.Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;

			this.specularMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.combine = THREE.MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;

			this.setValues( parameters );

		};

		THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;

		THREE.MeshLambertMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;

			this.specularMap = source.specularMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			return this;

		};

		// File:src/materials/MeshNormalMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * parameters = {
		 *  opacity: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 * }
		 */

		THREE.MeshNormalMaterial = function ( parameters ) {

			THREE.Material.call( this, parameters );

			this.type = 'MeshNormalMaterial';

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.fog = false;
			this.lights = false;
			this.morphTargets = false;

			this.setValues( parameters );

		};

		THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;

		THREE.MeshNormalMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			return this;

		};

		// File:src/materials/MeshPhongMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  specular: <hex>,
		 *  shininess: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		THREE.MeshPhongMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'MeshPhongMaterial';

			this.color = new THREE.Color( 0xffffff ); // diffuse
			this.specular = new THREE.Color( 0x111111 );
			this.shininess = 30;

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.emissive = new THREE.Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;

			this.bumpMap = null;
			this.bumpScale = 1;

			this.normalMap = null;
			this.normalScale = new THREE.Vector2( 1, 1 );

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.specularMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.combine = THREE.MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;

			this.setValues( parameters );

		};

		THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;

		THREE.MeshPhongMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.specular.copy( source.specular );
			this.shininess = source.shininess;

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;

			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;

			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.specularMap = source.specularMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			return this;

		};

		// File:src/materials/MeshStandardMaterial.js

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  roughness: <float>,
		 *  metalness: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  roughnessMap: new THREE.Texture( <Image> ),
		 *
		 *  metalnessMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
		 *  envMapIntensity: <float>
		 *
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		THREE.MeshStandardMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.defines = { 'STANDARD': '' };

			this.type = 'MeshStandardMaterial';

			this.color = new THREE.Color( 0xffffff ); // diffuse
			this.roughness = 0.5;
			this.metalness = 0.5;

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.emissive = new THREE.Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;

			this.bumpMap = null;
			this.bumpScale = 1;

			this.normalMap = null;
			this.normalScale = new THREE.Vector2( 1, 1 );

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.roughnessMap = null;

			this.metalnessMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.envMapIntensity = 1.0;

			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;

			this.setValues( parameters );

		};

		THREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;

		THREE.MeshStandardMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.defines = { 'STANDARD': '' };

			this.color.copy( source.color );
			this.roughness = source.roughness;
			this.metalness = source.metalness;

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;

			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;

			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.roughnessMap = source.roughnessMap;

			this.metalnessMap = source.metalnessMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.envMapIntensity = source.envMapIntensity;

			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			return this;

		};

		// File:src/materials/MeshPhysicalMaterial.js

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  reflectivity: <float>
		 * }
		 */

		THREE.MeshPhysicalMaterial = function ( parameters ) {

			THREE.MeshStandardMaterial.call( this );

			this.defines = { 'PHYSICAL': '' };

			this.type = 'MeshPhysicalMaterial';

			this.reflectivity = 0.5; // maps to F0 = 0.04

			this.clearCoat = 0.0;
			this.clearCoatRoughness = 0.0;

			this.setValues( parameters );

		};

		THREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );
		THREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;

		THREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {

			THREE.MeshStandardMaterial.prototype.copy.call( this, source );

			this.defines = { 'PHYSICAL': '' };

			this.reflectivity = source.reflectivity;

			this.clearCoat = source.clearCoat;
			this.clearCoatRoughness = source.clearCoatRoughness;

			return this;

		};

		// File:src/materials/MultiMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.MultiMaterial = function ( materials ) {

			this.uuid = THREE.Math.generateUUID();

			this.type = 'MultiMaterial';

			this.materials = materials instanceof Array ? materials : [];

			this.visible = true;

		};

		THREE.MultiMaterial.prototype = {

			constructor: THREE.MultiMaterial,

			toJSON: function ( meta ) {

				var output = {
					metadata: {
						version: 4.2,
						type: 'material',
						generator: 'MaterialExporter'
					},
					uuid: this.uuid,
					type: this.type,
					materials: []
				};

				var materials = this.materials;

				for ( var i = 0, l = materials.length; i < l; i ++ ) {

					var material = materials[ i ].toJSON( meta );
					delete material.metadata;

					output.materials.push( material );

				}

				output.visible = this.visible;

				return output;

			},

			clone: function () {

				var material = new this.constructor();

				for ( var i = 0; i < this.materials.length; i ++ ) {

					material.materials.push( this.materials[ i ].clone() );

				}

				material.visible = this.visible;

				return material;

			}

		};

		// File:src/materials/PointsMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  size: <float>,
		 *  sizeAttenuation: <bool>
		 * }
		 */

		THREE.PointsMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'PointsMaterial';

			this.color = new THREE.Color( 0xffffff );

			this.map = null;

			this.size = 1;
			this.sizeAttenuation = true;

			this.lights = false;

			this.setValues( parameters );

		};

		THREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;

		THREE.PointsMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.color.copy( source.color );

			this.map = source.map;

			this.size = source.size;
			this.sizeAttenuation = source.sizeAttenuation;

			return this;

		};

		// File:src/materials/ShaderMaterial.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  defines: { "label" : "value" },
		 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
		 *
		 *  fragmentShader: <string>,
		 *  vertexShader: <string>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  lights: <bool>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */

		THREE.ShaderMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'ShaderMaterial';

			this.defines = {};
			this.uniforms = {};

			this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
			this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

			this.linewidth = 1;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.fog = false; // set to use scene fog
			this.lights = false; // set to use scene lights
			this.clipping = false; // set to use user-defined clipping planes

			this.skinning = false; // set to use skinning attribute streams
			this.morphTargets = false; // set to use morph targets
			this.morphNormals = false; // set to use morph normals

			this.extensions = {
				derivatives: false, // set to use derivatives
				fragDepth: false, // set to use fragment depth values
				drawBuffers: false, // set to use draw buffers
				shaderTextureLOD: false // set to use shader texture LOD
			};

			// When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.
			this.defaultAttributeValues = {
				'color': [ 1, 1, 1 ],
				'uv': [ 0, 0 ],
				'uv2': [ 0, 0 ]
			};

			this.index0AttributeName = undefined;

			if ( parameters !== undefined ) {

				if ( parameters.attributes !== undefined ) {

					console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

				}

				this.setValues( parameters );

			}

		};

		THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;

		THREE.ShaderMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;

			this.uniforms = THREE.UniformsUtils.clone( source.uniforms );

			this.defines = source.defines;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			this.lights = source.lights;
			this.clipping = source.clipping;

			this.skinning = source.skinning;

			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;

			this.extensions = source.extensions;

			return this;

		};

		THREE.ShaderMaterial.prototype.toJSON = function ( meta ) {

			var data = THREE.Material.prototype.toJSON.call( this, meta );

			data.uniforms = this.uniforms;
			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;

			return data;

		};

		// File:src/materials/RawShaderMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.RawShaderMaterial = function ( parameters ) {

			THREE.ShaderMaterial.call( this, parameters );

			this.type = 'RawShaderMaterial';

		};

		THREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );
		THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;

		// File:src/materials/SpriteMaterial.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *	uvOffset: new THREE.Vector2(),
		 *	uvScale: new THREE.Vector2()
		 * }
		 */

		THREE.SpriteMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'SpriteMaterial';

			this.color = new THREE.Color( 0xffffff );
			this.map = null;

			this.rotation = 0;

			this.fog = false;
			this.lights = false;

			this.setValues( parameters );

		};

		THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;

		THREE.SpriteMaterial.prototype.copy = function ( source ) {

			THREE.Material.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.map = source.map;

			this.rotation = source.rotation;

			return this;

		};

		// File:src/materials/ShadowMaterial.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.ShadowMaterial = function () {

			THREE.ShaderMaterial.call( this, {
				uniforms: THREE.UniformsUtils.merge( [
					THREE.UniformsLib[ "lights" ],
					{
						opacity: { value: 1.0 }
					}
				] ),
				vertexShader: THREE.ShaderChunk[ 'shadow_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]
			} );

			this.lights = true;
			this.transparent = true;

			Object.defineProperties( this, {
				opacity: {
					enumerable: true,
					get: function () {
						return this.uniforms.opacity.value;
					},
					set: function ( value ) {
						this.uniforms.opacity.value = value;
					}
				}
			} );

		};

		THREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );
		THREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;

		// File:src/textures/Texture.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 */

		THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

			Object.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );

			this.uuid = THREE.Math.generateUUID();

			this.name = '';
			this.sourceFile = '';

			this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;
			this.mipmaps = [];

			this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;

			this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
			this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;

			this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
			this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;

			this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

			this.format = format !== undefined ? format : THREE.RGBAFormat;
			this.type = type !== undefined ? type : THREE.UnsignedByteType;

			this.offset = new THREE.Vector2( 0, 0 );
			this.repeat = new THREE.Vector2( 1, 1 );

			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)


			// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
			//
			// Also changing the encoding after already used by a Material will not automatically make the Material
			// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
			this.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;

			this.version = 0;
			this.onUpdate = null;

		};

		THREE.Texture.DEFAULT_IMAGE = undefined;
		THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;

		THREE.Texture.prototype = {

			constructor: THREE.Texture,

			set needsUpdate( value ) {

				if ( value === true ) this.version ++;

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( source ) {

				this.image = source.image;
				this.mipmaps = source.mipmaps.slice( 0 );

				this.mapping = source.mapping;

				this.wrapS = source.wrapS;
				this.wrapT = source.wrapT;

				this.magFilter = source.magFilter;
				this.minFilter = source.minFilter;

				this.anisotropy = source.anisotropy;

				this.format = source.format;
				this.type = source.type;

				this.offset.copy( source.offset );
				this.repeat.copy( source.repeat );

				this.generateMipmaps = source.generateMipmaps;
				this.premultiplyAlpha = source.premultiplyAlpha;
				this.flipY = source.flipY;
				this.unpackAlignment = source.unpackAlignment;
				this.encoding = source.encoding;

				return this;

			},

			toJSON: function ( meta ) {

				if ( meta.textures[ this.uuid ] !== undefined ) {

					return meta.textures[ this.uuid ];

				}

				function getDataURL( image ) {

					var canvas;

					if ( image.toDataURL !== undefined ) {

						canvas = image;

					} else {

						canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
						canvas.width = image.width;
						canvas.height = image.height;

						canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );

					}

					if ( canvas.width > 2048 || canvas.height > 2048 ) {

						return canvas.toDataURL( 'image/jpeg', 0.6 );

					} else {

						return canvas.toDataURL( 'image/png' );

					}

				}

				var output = {
					metadata: {
						version: 4.4,
						type: 'Texture',
						generator: 'Texture.toJSON'
					},

					uuid: this.uuid,
					name: this.name,

					mapping: this.mapping,

					repeat: [ this.repeat.x, this.repeat.y ],
					offset: [ this.offset.x, this.offset.y ],
					wrap: [ this.wrapS, this.wrapT ],

					minFilter: this.minFilter,
					magFilter: this.magFilter,
					anisotropy: this.anisotropy,

					flipY: this.flipY
				};

				if ( this.image !== undefined ) {

					// TODO: Move to THREE.Image

					var image = this.image;

					if ( image.uuid === undefined ) {

						image.uuid = THREE.Math.generateUUID(); // UGH

					}

					if ( meta.images[ image.uuid ] === undefined ) {

						meta.images[ image.uuid ] = {
							uuid: image.uuid,
							url: getDataURL( image )
						};

					}

					output.image = image.uuid;

				}

				meta.textures[ this.uuid ] = output;

				return output;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			},

			transformUv: function ( uv ) {

				if ( this.mapping !== THREE.UVMapping )  return;

				uv.multiply( this.repeat );
				uv.add( this.offset );

				if ( uv.x < 0 || uv.x > 1 ) {

					switch ( this.wrapS ) {

						case THREE.RepeatWrapping:

							uv.x = uv.x - Math.floor( uv.x );
							break;

						case THREE.ClampToEdgeWrapping:

							uv.x = uv.x < 0 ? 0 : 1;
							break;

						case THREE.MirroredRepeatWrapping:

							if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

								uv.x = Math.ceil( uv.x ) - uv.x;

							} else {

								uv.x = uv.x - Math.floor( uv.x );

							}
							break;

					}

				}

				if ( uv.y < 0 || uv.y > 1 ) {

					switch ( this.wrapT ) {

						case THREE.RepeatWrapping:

							uv.y = uv.y - Math.floor( uv.y );
							break;

						case THREE.ClampToEdgeWrapping:

							uv.y = uv.y < 0 ? 0 : 1;
							break;

						case THREE.MirroredRepeatWrapping:

							if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

								uv.y = Math.ceil( uv.y ) - uv.y;

							} else {

								uv.y = uv.y - Math.floor( uv.y );

							}
							break;

					}

				}

				if ( this.flipY ) {

					uv.y = 1 - uv.y;

				}

			}

		};

		Object.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );

		THREE.TextureIdCount = 0;

		// File:src/textures/DepthTexture.js

		/**
		 * @author Matt DesLauriers / @mattdesl
		 */

		THREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

		  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );

		  this.image = { width: width, height: height };

		  this.type = type !== undefined ? type : THREE.UnsignedShortType;

		  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;
		  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;

		  this.flipY = false;
		  this.generateMipmaps  = false;

		};

		THREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );
		THREE.DepthTexture.prototype.constructor = THREE.DepthTexture;

		// File:src/textures/CanvasTexture.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

			THREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

			this.needsUpdate = true;

		};

		THREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );
		THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;

		// File:src/textures/CubeTexture.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;

			THREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

			this.flipY = false;

		};

		THREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );
		THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;

		Object.defineProperty( THREE.CubeTexture.prototype, 'images', {

			get: function () {

				return this.image;

			},

			set: function ( value ) {

				this.image = value;

			}

		} );

		// File:src/textures/CompressedTexture.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

			THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

			this.image = { width: width, height: height };
			this.mipmaps = mipmaps;

			// no flipping for cube textures
			// (also flipping doesn't work for compressed textures )

			this.flipY = false;

			// can't generate mipmaps for compressed textures
			// mips must be embedded in DDS files

			this.generateMipmaps = false;

		};

		THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );
		THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;

		// File:src/textures/DataTexture.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

			THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

			this.image = { data: data, width: width, height: height };

			this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;

			this.flipY = false;
			this.generateMipmaps  = false;

		};

		THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );
		THREE.DataTexture.prototype.constructor = THREE.DataTexture;

		// File:src/textures/VideoTexture.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

			THREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

			this.generateMipmaps = false;

			var scope = this;

			function update() {

				requestAnimationFrame( update );

				if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

					scope.needsUpdate = true;

				}

			}

			update();

		};

		THREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );
		THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;

		// File:src/objects/Group.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Group = function () {

			THREE.Object3D.call( this );

			this.type = 'Group';

		};

		THREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.Group

		} );

		// File:src/objects/Points.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Points = function ( geometry, material ) {

			THREE.Object3D.call( this );

			this.type = 'Points';

			this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();
			this.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );

		};

		THREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.Points,

			raycast: ( function () {

				var inverseMatrix = new THREE.Matrix4();
				var ray = new THREE.Ray();
				var sphere = new THREE.Sphere();

				return function raycast( raycaster, intersects ) {

					var object = this;
					var geometry = this.geometry;
					var matrixWorld = this.matrixWorld;
					var threshold = raycaster.params.Points.threshold;

					// Checking boundingSphere distance to ray

					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );

					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

					//

					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

					var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
					var localThresholdSq = localThreshold * localThreshold;
					var position = new THREE.Vector3();

					function testPoint( point, index ) {

						var rayPointDistanceSq = ray.distanceSqToPoint( point );

						if ( rayPointDistanceSq < localThresholdSq ) {

							var intersectPoint = ray.closestPointToPoint( point );
							intersectPoint.applyMatrix4( matrixWorld );

							var distance = raycaster.ray.origin.distanceTo( intersectPoint );

							if ( distance < raycaster.near || distance > raycaster.far ) return;

							intersects.push( {

								distance: distance,
								distanceToRay: Math.sqrt( rayPointDistanceSq ),
								point: intersectPoint.clone(),
								index: index,
								face: null,
								object: object

							} );

						}

					}

					if ( geometry instanceof THREE.BufferGeometry ) {

						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;

						if ( index !== null ) {

							var indices = index.array;

							for ( var i = 0, il = indices.length; i < il; i ++ ) {

								var a = indices[ i ];

								position.fromArray( positions, a * 3 );

								testPoint( position, a );

							}

						} else {

							for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

								position.fromArray( positions, i * 3 );

								testPoint( position, i );

							}

						}

					} else {

						var vertices = geometry.vertices;

						for ( var i = 0, l = vertices.length; i < l; i ++ ) {

							testPoint( vertices[ i ], i );

						}

					}

				};

			}() ),

			clone: function () {

				return new this.constructor( this.geometry, this.material ).copy( this );

			}

		} );

		// File:src/objects/Line.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Line = function ( geometry, material, mode ) {

			if ( mode === 1 ) {

				console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
				return new THREE.LineSegments( geometry, material );

			}

			THREE.Object3D.call( this );

			this.type = 'Line';

			this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();
			this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );

		};

		THREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.Line,

			raycast: ( function () {

				var inverseMatrix = new THREE.Matrix4();
				var ray = new THREE.Ray();
				var sphere = new THREE.Sphere();

				return function raycast( raycaster, intersects ) {

					var precision = raycaster.linePrecision;
					var precisionSq = precision * precision;

					var geometry = this.geometry;
					var matrixWorld = this.matrixWorld;

					// Checking boundingSphere distance to ray

					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );

					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

					//

					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

					var vStart = new THREE.Vector3();
					var vEnd = new THREE.Vector3();
					var interSegment = new THREE.Vector3();
					var interRay = new THREE.Vector3();
					var step = this instanceof THREE.LineSegments ? 2 : 1;

					if ( geometry instanceof THREE.BufferGeometry ) {

						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;

						if ( index !== null ) {

							var indices = index.array;

							for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

								var a = indices[ i ];
								var b = indices[ i + 1 ];

								vStart.fromArray( positions, a * 3 );
								vEnd.fromArray( positions, b * 3 );

								var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

								if ( distSq > precisionSq ) continue;

								interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

								var distance = raycaster.ray.origin.distanceTo( interRay );

								if ( distance < raycaster.near || distance > raycaster.far ) continue;

								intersects.push( {

									distance: distance,
									// What do we want? intersection point on the ray or on the segment??
									// point: raycaster.ray.at( distance ),
									point: interSegment.clone().applyMatrix4( this.matrixWorld ),
									index: i,
									face: null,
									faceIndex: null,
									object: this

								} );

							}

						} else {

							for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

								vStart.fromArray( positions, 3 * i );
								vEnd.fromArray( positions, 3 * i + 3 );

								var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

								if ( distSq > precisionSq ) continue;

								interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

								var distance = raycaster.ray.origin.distanceTo( interRay );

								if ( distance < raycaster.near || distance > raycaster.far ) continue;

								intersects.push( {

									distance: distance,
									// What do we want? intersection point on the ray or on the segment??
									// point: raycaster.ray.at( distance ),
									point: interSegment.clone().applyMatrix4( this.matrixWorld ),
									index: i,
									face: null,
									faceIndex: null,
									object: this

								} );

							}

						}

					} else if ( geometry instanceof THREE.Geometry ) {

						var vertices = geometry.vertices;
						var nbVertices = vertices.length;

						for ( var i = 0; i < nbVertices - 1; i += step ) {

							var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

							if ( distSq > precisionSq ) continue;

							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

							var distance = raycaster.ray.origin.distanceTo( interRay );

							if ( distance < raycaster.near || distance > raycaster.far ) continue;

							intersects.push( {

								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this

							} );

						}

					}

				};

			}() ),

			clone: function () {

				return new this.constructor( this.geometry, this.material ).copy( this );

			}

		} );

		// File:src/objects/LineSegments.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.LineSegments = function ( geometry, material ) {

			THREE.Line.call( this, geometry, material );

			this.type = 'LineSegments';

		};

		THREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {

			constructor: THREE.LineSegments

		} );

		// File:src/objects/Mesh.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author jonobr1 / http://jonobr1.com/
		 */

		THREE.Mesh = function ( geometry, material ) {

			THREE.Object3D.call( this );

			this.type = 'Mesh';

			this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();
			this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );

			this.drawMode = THREE.TrianglesDrawMode;

			this.updateMorphTargets();

		};

		THREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.Mesh,

			setDrawMode: function ( value ) {

				this.drawMode = value;

			},

			copy: function ( source ) {

				THREE.Object3D.prototype.copy.call( this, source );

				this.drawMode = source.drawMode;

				return this;

			},

			updateMorphTargets: function () {

				if ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {

					this.morphTargetBase = - 1;
					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;

					}

				}

			},

			getMorphTargetIndexByName: function ( name ) {

				if ( this.morphTargetDictionary[ name ] !== undefined ) {

					return this.morphTargetDictionary[ name ];

				}

				console.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );

				return 0;

			},

			raycast: ( function () {

				var inverseMatrix = new THREE.Matrix4();
				var ray = new THREE.Ray();
				var sphere = new THREE.Sphere();

				var vA = new THREE.Vector3();
				var vB = new THREE.Vector3();
				var vC = new THREE.Vector3();

				var tempA = new THREE.Vector3();
				var tempB = new THREE.Vector3();
				var tempC = new THREE.Vector3();

				var uvA = new THREE.Vector2();
				var uvB = new THREE.Vector2();
				var uvC = new THREE.Vector2();

				var barycoord = new THREE.Vector3();

				var intersectionPoint = new THREE.Vector3();
				var intersectionPointWorld = new THREE.Vector3();

				function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

					THREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

					uv1.multiplyScalar( barycoord.x );
					uv2.multiplyScalar( barycoord.y );
					uv3.multiplyScalar( barycoord.z );

					uv1.add( uv2 ).add( uv3 );

					return uv1.clone();

				}

				function checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {

					var intersect;
					var material = object.material;

					if ( material.side === THREE.BackSide ) {

						intersect = ray.intersectTriangle( pC, pB, pA, true, point );

					} else {

						intersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );

					}

					if ( intersect === null ) return null;

					intersectionPointWorld.copy( point );
					intersectionPointWorld.applyMatrix4( object.matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

					if ( distance < raycaster.near || distance > raycaster.far ) return null;

					return {
						distance: distance,
						point: intersectionPointWorld.clone(),
						object: object
					};

				}

				function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {

					vA.fromArray( positions, a * 3 );
					vB.fromArray( positions, b * 3 );
					vC.fromArray( positions, c * 3 );

					var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );

					if ( intersection ) {

						if ( uvs ) {

							uvA.fromArray( uvs, a * 2 );
							uvB.fromArray( uvs, b * 2 );
							uvC.fromArray( uvs, c * 2 );

							intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );

						}

						intersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );
						intersection.faceIndex = a;

					}

					return intersection;

				}

				return function raycast( raycaster, intersects ) {

					var geometry = this.geometry;
					var material = this.material;
					var matrixWorld = this.matrixWorld;

					if ( material === undefined ) return;

					// Checking boundingSphere distance to ray

					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );

					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

					//

					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

					// Check boundingBox before continuing

					if ( geometry.boundingBox !== null ) {

						if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

					}

					var uvs, intersection;

					if ( geometry instanceof THREE.BufferGeometry ) {

						var a, b, c;
						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;

						if ( attributes.uv !== undefined ) {

							uvs = attributes.uv.array;

						}

						if ( index !== null ) {

							var indices = index.array;

							for ( var i = 0, l = indices.length; i < l; i += 3 ) {

								a = indices[ i ];
								b = indices[ i + 1 ];
								c = indices[ i + 2 ];

								intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

								if ( intersection ) {

									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
									intersects.push( intersection );

								}

							}

						} else {


							for ( var i = 0, l = positions.length; i < l; i += 9 ) {

								a = i / 3;
								b = a + 1;
								c = a + 2;

								intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );

								if ( intersection ) {

									intersection.index = a; // triangle number in positions buffer semantics
									intersects.push( intersection );

								}

							}

						}

					} else if ( geometry instanceof THREE.Geometry ) {

						var fvA, fvB, fvC;
						var isFaceMaterial = material instanceof THREE.MultiMaterial;
						var materials = isFaceMaterial === true ? material.materials : null;

						var vertices = geometry.vertices;
						var faces = geometry.faces;
						var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
						if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

						for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

							var face = faces[ f ];
							var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;

							if ( faceMaterial === undefined ) continue;

							fvA = vertices[ face.a ];
							fvB = vertices[ face.b ];
							fvC = vertices[ face.c ];

							if ( faceMaterial.morphTargets === true ) {

								var morphTargets = geometry.morphTargets;
								var morphInfluences = this.morphTargetInfluences;

								vA.set( 0, 0, 0 );
								vB.set( 0, 0, 0 );
								vC.set( 0, 0, 0 );

								for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

									var influence = morphInfluences[ t ];

									if ( influence === 0 ) continue;

									var targets = morphTargets[ t ].vertices;

									vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
									vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
									vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

								}

								vA.add( fvA );
								vB.add( fvB );
								vC.add( fvC );

								fvA = vA;
								fvB = vB;
								fvC = vC;

							}

							intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

							if ( intersection ) {

								if ( uvs ) {

									var uvs_f = uvs[ f ];
									uvA.copy( uvs_f[ 0 ] );
									uvB.copy( uvs_f[ 1 ] );
									uvC.copy( uvs_f[ 2 ] );

									intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

								}

								intersection.face = face;
								intersection.faceIndex = f;
								intersects.push( intersection );

							}

						}

					}

				};

			}() ),

			clone: function () {

				return new this.constructor( this.geometry, this.material ).copy( this );

			}

		} );

		// File:src/objects/Bone.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */

		THREE.Bone = function ( skin ) {

			THREE.Object3D.call( this );

			this.type = 'Bone';

			this.skin = skin;

		};

		THREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.Bone,

			copy: function ( source ) {

				THREE.Object3D.prototype.copy.call( this, source );

				this.skin = source.skin;

				return this;

			}

		} );

		// File:src/objects/Skeleton.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author michael guerrero / http://realitymeltdown.com
		 * @author ikerr / http://verold.com
		 */

		THREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {

			this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

			this.identityMatrix = new THREE.Matrix4();

			// copy the bone array

			bones = bones || [];

			this.bones = bones.slice( 0 );

			// create a bone texture or an array of floats

			if ( this.useVertexTexture ) {

				// layout (1 matrix = 4 pixels)
				//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
				//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
				//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
				//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
				//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


				var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
				size = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );
				size = Math.max( size, 4 );

				this.boneTextureWidth = size;
				this.boneTextureHeight = size;

				this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
				this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );

			} else {

				this.boneMatrices = new Float32Array( 16 * this.bones.length );

			}

			// use the supplied bone inverses or calculate the inverses

			if ( boneInverses === undefined ) {

				this.calculateInverses();

			} else {

				if ( this.bones.length === boneInverses.length ) {

					this.boneInverses = boneInverses.slice( 0 );

				} else {

					console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

					this.boneInverses = [];

					for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

						this.boneInverses.push( new THREE.Matrix4() );

					}

				}

			}

		};

		Object.assign( THREE.Skeleton.prototype, {

			calculateInverses: function () {

				this.boneInverses = [];

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					var inverse = new THREE.Matrix4();

					if ( this.bones[ b ] ) {

						inverse.getInverse( this.bones[ b ].matrixWorld );

					}

					this.boneInverses.push( inverse );

				}

			},

			pose: function () {

				var bone;

				// recover the bind-time world matrices

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					bone = this.bones[ b ];

					if ( bone ) {

						bone.matrixWorld.getInverse( this.boneInverses[ b ] );

					}

				}

				// compute the local matrices, positions, rotations and scales

				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

					bone = this.bones[ b ];

					if ( bone ) {

						if ( bone.parent instanceof THREE.Bone ) {

							bone.matrix.getInverse( bone.parent.matrixWorld );
							bone.matrix.multiply( bone.matrixWorld );

						} else {

							bone.matrix.copy( bone.matrixWorld );

						}

						bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

					}

				}

			},

			update: ( function () {

				var offsetMatrix = new THREE.Matrix4();

				return function update() {

					// flatten bone matrices to array

					for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

						// compute the offset between the current and the original transform

						var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

						offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
						offsetMatrix.toArray( this.boneMatrices, b * 16 );

					}

					if ( this.useVertexTexture ) {

						this.boneTexture.needsUpdate = true;

					}

				};

			} )(),

			clone: function () {

				return new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );

			}

		} );

		// File:src/objects/SkinnedMesh.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */

		THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {

			THREE.Mesh.call( this, geometry, material );

			this.type = 'SkinnedMesh';

			this.bindMode = "attached";
			this.bindMatrix = new THREE.Matrix4();
			this.bindMatrixInverse = new THREE.Matrix4();

			// init bones

			// TODO: remove bone creation as there is no reason (other than
			// convenience) for THREE.SkinnedMesh to do this.

			var bones = [];

			if ( this.geometry && this.geometry.bones !== undefined ) {

				var bone, gbone;

				for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

					gbone = this.geometry.bones[ b ];

					bone = new THREE.Bone( this );
					bones.push( bone );

					bone.name = gbone.name;
					bone.position.fromArray( gbone.pos );
					bone.quaternion.fromArray( gbone.rotq );
					if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

				}

				for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {

					gbone = this.geometry.bones[ b ];

					if ( gbone.parent !== - 1 && gbone.parent !== null &&
							bones[ gbone.parent ] !== undefined ) {

						bones[ gbone.parent ].add( bones[ b ] );

					} else {

						this.add( bones[ b ] );

					}

				}

			}

			this.normalizeSkinWeights();

			this.updateMatrixWorld( true );
			this.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );

		};


		THREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {

			constructor: THREE.SkinnedMesh,

			bind: function( skeleton, bindMatrix ) {

				this.skeleton = skeleton;

				if ( bindMatrix === undefined ) {

					this.updateMatrixWorld( true );

					this.skeleton.calculateInverses();

					bindMatrix = this.matrixWorld;

				}

				this.bindMatrix.copy( bindMatrix );
				this.bindMatrixInverse.getInverse( bindMatrix );

			},

			pose: function () {

				this.skeleton.pose();

			},

			normalizeSkinWeights: function () {

				if ( this.geometry instanceof THREE.Geometry ) {

					for ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {

						var sw = this.geometry.skinWeights[ i ];

						var scale = 1.0 / sw.lengthManhattan();

						if ( scale !== Infinity ) {

							sw.multiplyScalar( scale );

						} else {

							sw.set( 1, 0, 0, 0 ); // do something reasonable

						}

					}

				} else if ( this.geometry instanceof THREE.BufferGeometry ) {

					var vec = new THREE.Vector4();

					var skinWeight = this.geometry.attributes.skinWeight;

					for ( var i = 0; i < skinWeight.count; i ++ ) {

						vec.x = skinWeight.getX( i );
						vec.y = skinWeight.getY( i );
						vec.z = skinWeight.getZ( i );
						vec.w = skinWeight.getW( i );

						var scale = 1.0 / vec.lengthManhattan();

						if ( scale !== Infinity ) {

							vec.multiplyScalar( scale );

						} else {

							vec.set( 1, 0, 0, 0 ); // do something reasonable

						}

						skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

					}

				}

			},

			updateMatrixWorld: function( force ) {

				THREE.Mesh.prototype.updateMatrixWorld.call( this, true );

				if ( this.bindMode === "attached" ) {

					this.bindMatrixInverse.getInverse( this.matrixWorld );

				} else if ( this.bindMode === "detached" ) {

					this.bindMatrixInverse.getInverse( this.bindMatrix );

				} else {

					console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );

				}

			},

			clone: function() {

				return new this.constructor( this.geometry, this.material, this.skeleton.useVertexTexture ).copy( this );

			}

		} );

		// File:src/objects/LOD.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.LOD = function () {

			THREE.Object3D.call( this );

			this.type = 'LOD';

			Object.defineProperties( this, {
				levels: {
					enumerable: true,
					value: []
				}
			} );

		};


		THREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.LOD,

			copy: function ( source ) {

				THREE.Object3D.prototype.copy.call( this, source, false );

				var levels = source.levels;

				for ( var i = 0, l = levels.length; i < l; i ++ ) {

					var level = levels[ i ];

					this.addLevel( level.object.clone(), level.distance );

				}

				return this;

			},

			addLevel: function ( object, distance ) {

				if ( distance === undefined ) distance = 0;

				distance = Math.abs( distance );

				var levels = this.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					if ( distance < levels[ l ].distance ) {

						break;

					}

				}

				levels.splice( l, 0, { distance: distance, object: object } );

				this.add( object );

			},

			getObjectForDistance: function ( distance ) {

				var levels = this.levels;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance < levels[ i ].distance ) {

						break;

					}

				}

				return levels[ i - 1 ].object;

			},

			raycast: ( function () {

				var matrixPosition = new THREE.Vector3();

				return function raycast( raycaster, intersects ) {

					matrixPosition.setFromMatrixPosition( this.matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( matrixPosition );

					this.getObjectForDistance( distance ).raycast( raycaster, intersects );

				};

			}() ),

			update: function () {

				var v1 = new THREE.Vector3();
				var v2 = new THREE.Vector3();

				return function update( camera ) {

					var levels = this.levels;

					if ( levels.length > 1 ) {

						v1.setFromMatrixPosition( camera.matrixWorld );
						v2.setFromMatrixPosition( this.matrixWorld );

						var distance = v1.distanceTo( v2 );

						levels[ 0 ].object.visible = true;

						for ( var i = 1, l = levels.length; i < l; i ++ ) {

							if ( distance >= levels[ i ].distance ) {

								levels[ i - 1 ].object.visible = false;
								levels[ i ].object.visible = true;

							} else {

								break;

							}

						}

						for ( ; i < l; i ++ ) {

							levels[ i ].object.visible = false;

						}

					}

				};

			}(),

			toJSON: function ( meta ) {

				var data = THREE.Object3D.prototype.toJSON.call( this, meta );

				data.object.levels = [];

				var levels = this.levels;

				for ( var i = 0, l = levels.length; i < l; i ++ ) {

					var level = levels[ i ];

					data.object.levels.push( {
						object: level.object.uuid,
						distance: level.distance
					} );

				}

				return data;

			}

		} );

		// File:src/objects/Sprite.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Sprite = function ( material ) {

			THREE.Object3D.call( this );

			this.type = 'Sprite';

			this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();

		};

		THREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.Sprite,

			raycast: ( function () {

				var matrixPosition = new THREE.Vector3();

				return function raycast( raycaster, intersects ) {

					matrixPosition.setFromMatrixPosition( this.matrixWorld );

					var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
					var guessSizeSq = this.scale.x * this.scale.y / 4;

					if ( distanceSq > guessSizeSq ) {

						return;

					}

					intersects.push( {

						distance: Math.sqrt( distanceSq ),
						point: this.position,
						face: null,
						object: this

					} );

				};

			}() ),

			clone: function () {

				return new this.constructor( this.material ).copy( this );

			}

		} );

		// File:src/objects/LensFlare.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.LensFlare = function ( texture, size, distance, blending, color ) {

			THREE.Object3D.call( this );

			this.lensFlares = [];

			this.positionScreen = new THREE.Vector3();
			this.customUpdateCallback = undefined;

			if ( texture !== undefined ) {

				this.add( texture, size, distance, blending, color );

			}

		};

		THREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {

			constructor: THREE.LensFlare,

			copy: function ( source ) {

				THREE.Object3D.prototype.copy.call( this, source );

				this.positionScreen.copy( source.positionScreen );
				this.customUpdateCallback = source.customUpdateCallback;

				for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

					this.lensFlares.push( source.lensFlares[ i ] );

				}

				return this;

			},

			add: function ( texture, size, distance, blending, color, opacity ) {

				if ( size === undefined ) size = - 1;
				if ( distance === undefined ) distance = 0;
				if ( opacity === undefined ) opacity = 1;
				if ( color === undefined ) color = new THREE.Color( 0xffffff );
				if ( blending === undefined ) blending = THREE.NormalBlending;

				distance = Math.min( distance, Math.max( 0, distance ) );

				this.lensFlares.push( {
					texture: texture,	// THREE.Texture
					size: size, 		// size in pixels (-1 = use texture.width)
					distance: distance, 	// distance (0-1) from light source (0=at light source)
					x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
					scale: 1, 		// scale
					rotation: 0, 		// rotation
					opacity: opacity,	// opacity
					color: color,		// color
					blending: blending	// blending
				} );

			},

			/*
			 * Update lens flares update positions on all flares based on the screen position
			 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
			 */

			updateLensFlares: function () {

				var f, fl = this.lensFlares.length;
				var flare;
				var vecX = - this.positionScreen.x * 2;
				var vecY = - this.positionScreen.y * 2;

				for ( f = 0; f < fl; f ++ ) {

					flare = this.lensFlares[ f ];

					flare.x = this.positionScreen.x + vecX * flare.distance;
					flare.y = this.positionScreen.y + vecY * flare.distance;

					flare.wantedRotation = flare.x * Math.PI * 0.25;
					flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

				}

			}

		} );

		// File:src/scenes/Scene.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Scene = function () {

			THREE.Object3D.call( this );

			this.type = 'Scene';

			this.background = null;
			this.fog = null;
			this.overrideMaterial = null;

			this.autoUpdate = true; // checked by the renderer

		};

		THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );
		THREE.Scene.prototype.constructor = THREE.Scene;

		THREE.Scene.prototype.copy = function ( source, recursive ) {

			THREE.Object3D.prototype.copy.call( this, source, recursive );

			if ( source.background !== null ) this.background = source.background.clone();
			if ( source.fog !== null ) this.fog = source.fog.clone();
			if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;

			return this;

		};

		// File:src/scenes/Fog.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.Fog = function ( color, near, far ) {

			this.name = '';

			this.color = new THREE.Color( color );

			this.near = ( near !== undefined ) ? near : 1;
			this.far = ( far !== undefined ) ? far : 1000;

		};

		THREE.Fog.prototype.clone = function () {

			return new THREE.Fog( this.color.getHex(), this.near, this.far );

		};

		// File:src/scenes/FogExp2.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.FogExp2 = function ( color, density ) {

			this.name = '';

			this.color = new THREE.Color( color );
			this.density = ( density !== undefined ) ? density : 0.00025;

		};

		THREE.FogExp2.prototype.clone = function () {

			return new THREE.FogExp2( this.color.getHex(), this.density );

		};

		// File:src/renderers/shaders/ShaderChunk.js

		THREE.ShaderChunk = {};

		// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl

		THREE.ShaderChunk[ 'alphamap_fragment' ] = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl

		THREE.ShaderChunk[ 'alphamap_pars_fragment' ] = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl

		THREE.ShaderChunk[ 'alphatest_fragment' ] = "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl

		THREE.ShaderChunk[ 'aomap_fragment' ] = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl

		THREE.ShaderChunk[ 'aomap_pars_fragment' ] = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl

		THREE.ShaderChunk[ 'begin_vertex' ] = "\nvec3 transformed = vec3( position );\n";

		// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl

		THREE.ShaderChunk[ 'beginnormal_vertex' ] = "\nvec3 objectNormal = vec3( normal );\n";

		// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl

		THREE.ShaderChunk[ 'bsdfs' ] = "bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\n	return any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n		if( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n			float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n			float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n			return distanceFalloff * maxDistanceCutoffFactor;\n#else\n			return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n		}\n		return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

		// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl

		THREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl

		THREE.ShaderChunk[ 'clipping_planes_fragment' ] = "#if NUM_CLIPPING_PLANES > 0\n	for ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\n		vec4 plane = clippingPlanes[ i ];\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n	}\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl

		THREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = "#if NUM_CLIPPING_PLANES > 0\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\n		varying vec3 vViewPosition;\n	#endif\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl

		THREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	varying vec3 vViewPosition;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl

		THREE.ShaderChunk[ 'clipping_planes_vertex' ] = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	vViewPosition = - mvPosition.xyz;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl

		THREE.ShaderChunk[ 'color_fragment' ] = "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl

		THREE.ShaderChunk[ 'color_pars_fragment' ] = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl

		THREE.ShaderChunk[ 'color_pars_vertex' ] = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl

		THREE.ShaderChunk[ 'color_vertex' ] = "#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/common.glsl

		THREE.ShaderChunk[ 'common' ] = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\n";

		// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl

		THREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n	vec3 absDirection = abs(direction);\n	int face = -1;\n	if( absDirection.x > absDirection.z ) {\n		if(absDirection.x > absDirection.y )\n			face = direction.x > 0.0 ? 0 : 3;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	else {\n		if(absDirection.z > absDirection.y )\n			face = direction.z > 0.0 ? 2 : 5;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	return face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n	float dxRoughness = dFdx(roughness);\n	float dyRoughness = dFdy(roughness);\n	vec3 dx = dFdx( vec * scale * dxRoughness );\n	vec3 dy = dFdy( vec * scale * dyRoughness );\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\n	float mipLevel = 0.5 * log2(d);\n	return vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n	float a = 16.0 * cubeUV_rcpTextureSize;\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n	float powScale = exp2_packed.x * exp2_packed.y;\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n	bool bRes = mipLevel == 0.0;\n	scale =  bRes && (scale < a) ? a : scale;\n	vec3 r;\n	vec2 offset;\n	int face = getFaceFromDirection(direction);\n	float rcpPowScale = 1.0 / powScale;\n	if( face == 0) {\n		r = vec3(direction.x, -direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 1) {\n		r = vec3(direction.y, direction.x, direction.z);\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 2) {\n		r = vec3(direction.z, direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\n	}\n	else if( face == 3) {\n		r = vec3(direction.x, direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	else if( face == 4) {\n		r = vec3(direction.y, direction.x, -direction.z);\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	else {\n		r = vec3(direction.z, -direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\n	}\n	r = normalize(r);\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n	vec2 base = offset + vec2( texelOffset );\n	return base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n	float roughnessVal = roughness* cubeUV_maxLods3;\n	float r1 = floor(roughnessVal);\n	float r2 = r1 + 1.0;\n	float t = fract(roughnessVal);\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n	float s = mipInfo.y;\n	float level0 = mipInfo.x;\n	float level1 = level0 + 1.0;\n	level1 = level1 > 5.0 ? 5.0 : level1;\n	level0 += min( floor( s + 0.5 ), 5.0 );\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n	vec4 result = mix(color10, color20, t);\n	return vec4(result.rgb, 1.0);\n}\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl

		THREE.ShaderChunk[ 'defaultnormal_vertex' ] = "#ifdef FLIP_SIDED\n	objectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;\n";

		// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl

		THREE.ShaderChunk[ 'displacementmap_vertex' ] = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl

		THREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl

		THREE.ShaderChunk[ 'emissivemap_fragment' ] = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl

		THREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl

		THREE.ShaderChunk[ 'encodings_pars_fragment' ] = "\nvec4 LinearToLinear( in vec4 value ) {\n  return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n  float maxComponent = max( max( value.r, value.g ), value.b );\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n  float maxRGB = max( value.x, max( value.g, value.b ) );\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n  M            = ceil( M * 255.0 ) / 255.0;\n  return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n    float maxRGB = max( value.x, max( value.g, value.b ) );\n    float D      = max( maxRange / maxRGB, 1.0 );\n    D            = min( floor( D ) / 255.0, 1.0 );\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n  vec4 vResult;\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n  vResult.w = fract(Le);\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n  return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n  float Le = value.z * 255.0 + value.w;\n  vec3 Xp_Y_XYZp;\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n  return vec4( max(vRGB, 0.0), 1.0 );\n}\n";

		// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl

		THREE.ShaderChunk[ 'encodings_fragment' ] = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

		// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl

		THREE.ShaderChunk[ 'envmap_fragment' ] = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#endif\n	envColor = envMapTexelToLinear( envColor );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl

		THREE.ShaderChunk[ 'envmap_pars_fragment' ] = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n	uniform float reflectivity;\n	uniform float envMapIntenstiy;\n#endif\n#ifdef USE_ENVMAP\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n		varying vec3 vWorldPosition;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl

		THREE.ShaderChunk[ 'envmap_pars_vertex' ] = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl

		THREE.ShaderChunk[ 'envmap_vertex' ] = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl

		THREE.ShaderChunk[ 'fog_fragment' ] = "#ifdef USE_FOG\n	#ifdef USE_LOGDEPTHBUF_EXT\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n	#else\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n	#endif\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl

		THREE.ShaderChunk[ 'fog_pars_fragment' ] = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";

		// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl

		THREE.ShaderChunk[ 'lightmap_fragment' ] = "#ifdef USE_LIGHTMAP\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl

		THREE.ShaderChunk[ 'lightmap_pars_fragment' ] = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl

		THREE.ShaderChunk[ 'lights_lambert_vertex' ] = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl

		THREE.ShaderChunk[ 'lights_pars' ] = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		if ( testLightInRange( lightDistance, pointLight.distance ) ) {\n			directLight.color = pointLight.color;\n			directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		#include <normal_flip>\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		#include <normal_flip>\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl

		THREE.ShaderChunk[ 'lights_phong_fragment' ] = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

		// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl

		THREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n";

		// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl

		THREE.ShaderChunk[ 'lights_physical_fragment' ] = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n	material.clearCoat = saturate( clearCoat );	material.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl

		THREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = "struct PhysicalMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n	#ifndef STANDARD\n		float clearCoat;\n		float clearCoatRoughness;\n	#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifndef STANDARD\n		float clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n	#else\n		float clearCoatDHR = 0.0;\n	#endif\n	reflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n	reflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	#ifndef STANDARD\n		reflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	#ifndef STANDARD\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		float dotNL = dotNV;\n		float clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n	#else\n		float clearCoatDHR = 0.0;\n	#endif\n	reflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n	#ifndef STANDARD\n		reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

		// File:src/renderers/shaders/ShaderChunk/lights_template.glsl

		THREE.ShaderChunk[ 'lights_template' ] = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#ifdef USE_LIGHTMAP\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n	 	irradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n	#endif\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	vec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n	#ifndef STANDARD\n		vec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n	#else\n		vec3 clearCoatRadiance = vec3( 0.0 );\n	#endif\n		\n	RE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl

		THREE.ShaderChunk[ 'logdepthbuf_fragment' ] = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl

		THREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = "#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl

		THREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl

		THREE.ShaderChunk[ 'logdepthbuf_vertex' ] = "#ifdef USE_LOGDEPTHBUF\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl

		THREE.ShaderChunk[ 'map_fragment' ] = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl

		THREE.ShaderChunk[ 'map_pars_fragment' ] = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl

		THREE.ShaderChunk[ 'map_particle_fragment' ] = "#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl

		THREE.ShaderChunk[ 'map_particle_pars_fragment' ] = "#ifdef USE_MAP\n	uniform vec4 offsetRepeat;\n	uniform sampler2D map;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl

		THREE.ShaderChunk[ 'metalnessmap_fragment' ] = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.r;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl

		THREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl

		THREE.ShaderChunk[ 'morphnormal_vertex' ] = "#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl

		THREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif";

		// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl

		THREE.ShaderChunk[ 'morphtarget_vertex' ] = "#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/normal_flip.glsl

		THREE.ShaderChunk[ 'normal_flip' ] = "#ifdef DOUBLE_SIDED\n	float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n	float flipNormal = 1.0;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl

		THREE.ShaderChunk[ 'normal_fragment' ] = "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl

		THREE.ShaderChunk[ 'normalmap_pars_fragment' ] = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n	}\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/packing.glsl

		THREE.ShaderChunk[ 'packing' ] = "vec3 packNormalToRGB( const in vec3 normal ) {\n  return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n  return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n  return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n  return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

		// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl

		THREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl

		THREE.ShaderChunk[ 'project_vertex' ] = "#ifdef USE_SKINNING\n	vec4 mvPosition = modelViewMatrix * skinned;\n#else\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;\n";

		// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl

		THREE.ShaderChunk[ 'roughnessmap_fragment' ] = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.r;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl

		THREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl

		THREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n		const vec2 offset = vec2( 0.0, 1.0 );\n		vec2 texelSize = vec2( 1.0 ) / size;\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n		vec2 f = fract( uv * size + 0.5 );\n		float a = mix( lb, lt, f.y );\n		float b = mix( rb, rt, f.y );\n		float c = mix( a, b, f.x );\n		return c;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			return (\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return 1.0;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		vec3 bd3D = normalize( lightToPosition );\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl

		THREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl

		THREE.ShaderChunk[ 'shadowmap_vertex' ] = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl

		THREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}\n";

		// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl

		THREE.ShaderChunk[ 'skinbase_vertex' ] = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

		// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl

		THREE.ShaderChunk[ 'skinning_pars_vertex' ] = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl

		THREE.ShaderChunk[ 'skinning_vertex' ] = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl

		THREE.ShaderChunk[ 'skinnormal_vertex' ] = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl

		THREE.ShaderChunk[ 'specularmap_fragment' ] = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl

		THREE.ShaderChunk[ 'specularmap_pars_fragment' ] = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl

		THREE.ShaderChunk[ 'tonemapping_fragment' ] = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl

		THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = "#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n  return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n  color *= toneMappingExposure;\n  color = max( vec3( 0.0 ), color - 0.004 );\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

		// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl

		THREE.ShaderChunk[ 'uv2_pars_fragment' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl

		THREE.ShaderChunk[ 'uv2_pars_vertex' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl

		THREE.ShaderChunk[ 'uv2_vertex' ] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl

		THREE.ShaderChunk[ 'uv_pars_fragment' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl

		THREE.ShaderChunk[ 'uv_pars_vertex' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n#endif\n";

		// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl

		THREE.ShaderChunk[ 'uv_vertex' ] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif";

		// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl

		THREE.ShaderChunk[ 'worldpos_vertex' ] = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n	#ifdef USE_SKINNING\n		vec4 worldPosition = modelMatrix * skinned;\n	#else\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n	#endif\n#endif\n";

		// File:src/renderers/shaders/UniformsUtils.js

		/**
		 * Uniform Utilities
		 */

		THREE.UniformsUtils = {

			merge: function ( uniforms ) {

				var merged = {};

				for ( var u = 0; u < uniforms.length; u ++ ) {

					var tmp = this.clone( uniforms[ u ] );

					for ( var p in tmp ) {

						merged[ p ] = tmp[ p ];

					}

				}

				return merged;

			},

			clone: function ( uniforms_src ) {

				var uniforms_dst = {};

				for ( var u in uniforms_src ) {

					uniforms_dst[ u ] = {};

					for ( var p in uniforms_src[ u ] ) {

						var parameter_src = uniforms_src[ u ][ p ];

						if ( parameter_src instanceof THREE.Color ||
							 parameter_src instanceof THREE.Vector2 ||
							 parameter_src instanceof THREE.Vector3 ||
							 parameter_src instanceof THREE.Vector4 ||
							 parameter_src instanceof THREE.Matrix3 ||
							 parameter_src instanceof THREE.Matrix4 ||
							 parameter_src instanceof THREE.Texture ) {

							uniforms_dst[ u ][ p ] = parameter_src.clone();

						} else if ( Array.isArray( parameter_src ) ) {

							uniforms_dst[ u ][ p ] = parameter_src.slice();

						} else {

							uniforms_dst[ u ][ p ] = parameter_src;

						}

					}

				}

				return uniforms_dst;

			}

		};

		// File:src/renderers/shaders/UniformsLib.js

		/**
		 * Uniforms library for shared webgl shaders
		 */

		THREE.UniformsLib = {

			common: {

				"diffuse": { value: new THREE.Color( 0xeeeeee ) },
				"opacity": { value: 1.0 },

				"map": { value: null },
				"offsetRepeat": { value: new THREE.Vector4( 0, 0, 1, 1 ) },

				"specularMap": { value: null },
				"alphaMap": { value: null },

				"envMap": { value: null },
				"flipEnvMap": { value: - 1 },
				"reflectivity": { value: 1.0 },
				"refractionRatio": { value: 0.98 }

			},

			aomap: {

				"aoMap": { value: null },
				"aoMapIntensity": { value: 1 }

			},

			lightmap: {

				"lightMap": { value: null },
				"lightMapIntensity": { value: 1 }

			},

			emissivemap: {

				"emissiveMap": { value: null }

			},

			bumpmap: {

				"bumpMap": { value: null },
				"bumpScale": { value: 1 }

			},

			normalmap: {

				"normalMap": { value: null },
				"normalScale": { value: new THREE.Vector2( 1, 1 ) }

			},

			displacementmap: {

				"displacementMap": { value: null },
				"displacementScale": { value: 1 },
				"displacementBias": { value: 0 }

			},

			roughnessmap: {

				"roughnessMap": { value: null }

			},

			metalnessmap: {

				"metalnessMap": { value: null }

			},

			fog: {

				"fogDensity": { value: 0.00025 },
				"fogNear": { value: 1 },
				"fogFar": { value: 2000 },
				"fogColor": { value: new THREE.Color( 0xffffff ) }

			},

			lights: {

				"ambientLightColor": { value: [] },

				"directionalLights": { value: [], properties: {
					"direction": {},
					"color": {},

					"shadow": {},
					"shadowBias": {},
					"shadowRadius": {},
					"shadowMapSize": {}
				} },

				"directionalShadowMap": { value: [] },
				"directionalShadowMatrix": { value: [] },

				"spotLights": { value: [], properties: {
					"color": {},
					"position": {},
					"direction": {},
					"distance": {},
					"coneCos": {},
					"penumbraCos": {},
					"decay": {},

					"shadow": {},
					"shadowBias": {},
					"shadowRadius": {},
					"shadowMapSize": {}
				} },

				"spotShadowMap": { value: [] },
				"spotShadowMatrix": { value: [] },

				"pointLights": { value: [], properties: {
					"color": {},
					"position": {},
					"decay": {},
					"distance": {},

					"shadow": {},
					"shadowBias": {},
					"shadowRadius": {},
					"shadowMapSize": {}
				} },

				"pointShadowMap": { value: [] },
				"pointShadowMatrix": { value: [] },

				"hemisphereLights": { value: [], properties: {
					"direction": {},
					"skyColor": {},
					"groundColor": {}
				} }

			},

			points: {

				"diffuse": { value: new THREE.Color( 0xeeeeee ) },
				"opacity": { value: 1.0 },
				"size": { value: 1.0 },
				"scale": { value: 1.0 },
				"map": { value: null },
				"offsetRepeat": { value: new THREE.Vector4( 0, 0, 1, 1 ) }

			}

		};

		// File:src/renderers/shaders/ShaderLib/cube_frag.glsl

		THREE.ShaderChunk[ 'cube_frag' ] = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n	gl_FragColor.a *= opacity;\n}\n";

		// File:src/renderers/shaders/ShaderLib/cube_vert.glsl

		THREE.ShaderChunk[ 'cube_vert' ] = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/depth_frag.glsl

		THREE.ShaderChunk[ 'depth_frag' ] = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n	#endif\n}\n";

		// File:src/renderers/shaders/ShaderLib/depth_vert.glsl

		THREE.ShaderChunk[ 'depth_vert' ] = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl

		THREE.ShaderChunk[ 'distanceRGBA_frag' ] = "uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	gl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n";

		// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl

		THREE.ShaderChunk[ 'distanceRGBA_vert' ] = "varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition;\n}\n";

		// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl

		THREE.ShaderChunk[ 'equirect_frag' ] = "uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldPosition );\n	vec2 sampleUV;\n	sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

		// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl

		THREE.ShaderChunk[ 'equirect_vert' ] = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl

		THREE.ShaderChunk[ 'linedashed_frag' ] = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

		// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl

		THREE.ShaderChunk[ 'linedashed_vert' ] = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	vLineDistance = scale * lineDistance;\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl

		THREE.ShaderChunk[ 'meshbasic_frag' ] = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight;\n	reflectedLight.directDiffuse = vec3( 0.0 );\n	reflectedLight.directSpecular = vec3( 0.0 );\n	reflectedLight.indirectDiffuse = diffuseColor.rgb;\n	reflectedLight.indirectSpecular = vec3( 0.0 );\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <normal_flip>\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

		// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl

		THREE.ShaderChunk[ 'meshbasic_vert' ] = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl

		THREE.ShaderChunk[ 'meshlambert_frag' ] = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <normal_flip>\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

		// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl

		THREE.ShaderChunk[ 'meshlambert_vert' ] = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl

		THREE.ShaderChunk[ 'meshphong_frag' ] = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_flip>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

		// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl

		THREE.ShaderChunk[ 'meshphong_vert' ] = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl

		THREE.ShaderChunk[ 'meshphysical_frag' ] = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n	uniform float clearCoat;\n	uniform float clearCoatRoughness;\n#endif\nuniform float envMapIntensity;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_flip>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

		// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl

		THREE.ShaderChunk[ 'meshphysical_vert' ] = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <displacementmap_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/normal_frag.glsl

		THREE.ShaderChunk[ 'normal_frag' ] = "uniform float opacity;\nvarying vec3 vNormal;\n#include <common>\n#include <packing>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	gl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\n	#include <logdepthbuf_fragment>\n}\n";

		// File:src/renderers/shaders/ShaderLib/normal_vert.glsl

		THREE.ShaderChunk[ 'normal_vert' ] = "varying vec3 vNormal;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vNormal = normalize( normalMatrix * normal );\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/points_frag.glsl

		THREE.ShaderChunk[ 'points_frag' ] = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n";

		// File:src/renderers/shaders/ShaderLib/points_vert.glsl

		THREE.ShaderChunk[ 'points_vert' ] = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <project_vertex>\n	#ifdef USE_SIZEATTENUATION\n		gl_PointSize = size * ( scale / - mvPosition.z );\n	#else\n		gl_PointSize = size;\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl

		THREE.ShaderChunk[ 'shadow_frag' ] = "uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\n}\n";

		// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl

		THREE.ShaderChunk[ 'shadow_vert' ] = "#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n";

		// File:src/renderers/shaders/ShaderLib.js

		/**
		 * Webgl Shader Library for three.js
		 *
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 */


		THREE.ShaderLib = {

			'basic': {

				uniforms: THREE.UniformsUtils.merge( [

					THREE.UniformsLib[ 'common' ],
					THREE.UniformsLib[ 'aomap' ],
					THREE.UniformsLib[ 'fog' ]

				] ),

				vertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]

			},

			'lambert': {

				uniforms: THREE.UniformsUtils.merge( [

					THREE.UniformsLib[ 'common' ],
					THREE.UniformsLib[ 'aomap' ],
					THREE.UniformsLib[ 'lightmap' ],
					THREE.UniformsLib[ 'emissivemap' ],
					THREE.UniformsLib[ 'fog' ],
					THREE.UniformsLib[ 'lights' ],

					{
						"emissive" : { value: new THREE.Color( 0x000000 ) }
					}

				] ),

				vertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]

			},

			'phong': {

				uniforms: THREE.UniformsUtils.merge( [

					THREE.UniformsLib[ 'common' ],
					THREE.UniformsLib[ 'aomap' ],
					THREE.UniformsLib[ 'lightmap' ],
					THREE.UniformsLib[ 'emissivemap' ],
					THREE.UniformsLib[ 'bumpmap' ],
					THREE.UniformsLib[ 'normalmap' ],
					THREE.UniformsLib[ 'displacementmap' ],
					THREE.UniformsLib[ 'fog' ],
					THREE.UniformsLib[ 'lights' ],

					{
						"emissive" : { value: new THREE.Color( 0x000000 ) },
						"specular" : { value: new THREE.Color( 0x111111 ) },
						"shininess": { value: 30 }
					}

				] ),

				vertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]

			},

			'standard': {

				uniforms: THREE.UniformsUtils.merge( [

					THREE.UniformsLib[ 'common' ],
					THREE.UniformsLib[ 'aomap' ],
					THREE.UniformsLib[ 'lightmap' ],
					THREE.UniformsLib[ 'emissivemap' ],
					THREE.UniformsLib[ 'bumpmap' ],
					THREE.UniformsLib[ 'normalmap' ],
					THREE.UniformsLib[ 'displacementmap' ],
					THREE.UniformsLib[ 'roughnessmap' ],
					THREE.UniformsLib[ 'metalnessmap' ],
					THREE.UniformsLib[ 'fog' ],
					THREE.UniformsLib[ 'lights' ],

					{
						"emissive" : { value: new THREE.Color( 0x000000 ) },
						"roughness": { value: 0.5 },
						"metalness": { value: 0 },
						"envMapIntensity" : { value: 1 }, // temporary
					}

				] ),

				vertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]

			},

			'points': {

				uniforms: THREE.UniformsUtils.merge( [

					THREE.UniformsLib[ 'points' ],
					THREE.UniformsLib[ 'fog' ]

				] ),

				vertexShader: THREE.ShaderChunk[ 'points_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'points_frag' ]

			},

			'dashed': {

				uniforms: THREE.UniformsUtils.merge( [

					THREE.UniformsLib[ 'common' ],
					THREE.UniformsLib[ 'fog' ],

					{
						"scale"    : { value: 1 },
						"dashSize" : { value: 1 },
						"totalSize": { value: 2 }
					}

				] ),

				vertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]

			},

			'depth': {

				uniforms: THREE.UniformsUtils.merge( [

					THREE.UniformsLib[ 'common' ],
					THREE.UniformsLib[ 'displacementmap' ]

				] ),

				vertexShader: THREE.ShaderChunk[ 'depth_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'depth_frag' ]

			},

			'normal': {

				uniforms: {

					"opacity" : { value: 1.0 }

				},

				vertexShader: THREE.ShaderChunk[ 'normal_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'normal_frag' ]

			},

			/* -------------------------------------------------------------------------
			//	Cube map shader
			 ------------------------------------------------------------------------- */

			'cube': {

				uniforms: {
					"tCube": { value: null },
					"tFlip": { value: - 1 },
					"opacity": { value: 1.0 }
				},

				vertexShader: THREE.ShaderChunk[ 'cube_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'cube_frag' ]

			},

			/* -------------------------------------------------------------------------
			//	Cube map shader
			 ------------------------------------------------------------------------- */

			'equirect': {

				uniforms: {
					"tEquirect": { value: null },
					"tFlip": { value: - 1 }
				},

				vertexShader: THREE.ShaderChunk[ 'equirect_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]

			},

			'distanceRGBA': {

				uniforms: {

					"lightPos": { value: new THREE.Vector3() }

				},

				vertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],
				fragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]

			}

		};

		THREE.ShaderLib[ 'physical' ] = {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.ShaderLib[ 'standard' ].uniforms,

				{
					"clearCoat": { value: 0 },
					"clearCoatRoughness": { value: 0 }
				}

			] ),

			vertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],
			fragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]

		};

		// File:src/renderers/WebGLRenderer.js

		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 * @author tschw
		 */

		THREE.WebGLRenderer = function ( parameters ) {

			console.log( 'THREE.WebGLRenderer', THREE.REVISION );

			parameters = parameters || {};

			var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
			_context = parameters.context !== undefined ? parameters.context : null,

			_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
			_depth = parameters.depth !== undefined ? parameters.depth : true,
			_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
			_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
			_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
			_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

			var lights = [];

			var opaqueObjects = [];
			var opaqueObjectsLastIndex = - 1;
			var transparentObjects = [];
			var transparentObjectsLastIndex = - 1;

			var morphInfluences = new Float32Array( 8 );

			var sprites = [];
			var lensFlares = [];

			// public properties

			this.domElement = _canvas;
			this.context = null;

			// clearing

			this.autoClear = true;
			this.autoClearColor = true;
			this.autoClearDepth = true;
			this.autoClearStencil = true;

			// scene graph

			this.sortObjects = true;

			// user-defined clipping

			this.clippingPlanes = [];
			this.localClippingEnabled = false;

			// physically based shading

			this.gammaFactor = 2.0;	// for backwards compatibility
			this.gammaInput = false;
			this.gammaOutput = false;

			// physical lights

			this.physicallyCorrectLights = false;

			// tone mapping

			this.toneMapping = THREE.LinearToneMapping;
			this.toneMappingExposure = 1.0;
			this.toneMappingWhitePoint = 1.0;

			// morphs

			this.maxMorphTargets = 8;
			this.maxMorphNormals = 4;

			// internal properties

			var _this = this,

			// internal state cache

			_currentProgram = null,
			_currentRenderTarget = null,
			_currentFramebuffer = null,
			_currentMaterialId = - 1,
			_currentGeometryProgram = '',
			_currentCamera = null,

			_currentScissor = new THREE.Vector4(),
			_currentScissorTest = null,

			_currentViewport = new THREE.Vector4(),

			//

			_usedTextureUnits = 0,

			//

			_clearColor = new THREE.Color( 0x000000 ),
			_clearAlpha = 0,

			_width = _canvas.width,
			_height = _canvas.height,

			_pixelRatio = 1,

			_scissor = new THREE.Vector4( 0, 0, _width, _height ),
			_scissorTest = false,

			_viewport = new THREE.Vector4( 0, 0, _width, _height ),

			// frustum

			_frustum = new THREE.Frustum(),

			// clipping

			_clipping = new THREE.WebGLClipping(),
			_clippingEnabled = false,
			_localClippingEnabled = false,

			_sphere = new THREE.Sphere(),

			// camera matrices cache

			_projScreenMatrix = new THREE.Matrix4(),

			_vector3 = new THREE.Vector3(),

			// light arrays cache

			_lights = {

				hash: '',

				ambient: [ 0, 0, 0 ],
				directional: [],
				directionalShadowMap: [],
				directionalShadowMatrix: [],
				spot: [],
				spotShadowMap: [],
				spotShadowMatrix: [],
				point: [],
				pointShadowMap: [],
				pointShadowMatrix: [],
				hemi: [],

				shadows: []

			},

			// info

			_infoRender = {

				calls: 0,
				vertices: 0,
				faces: 0,
				points: 0

			};

			this.info = {

				render: _infoRender,
				memory: {

					geometries: 0,
					textures: 0

				},
				programs: null

			};


			// initialize

			var _gl;

			try {

				var attributes = {
					alpha: _alpha,
					depth: _depth,
					stencil: _stencil,
					antialias: _antialias,
					premultipliedAlpha: _premultipliedAlpha,
					preserveDrawingBuffer: _preserveDrawingBuffer
				};

				_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

				if ( _gl === null ) {

					if ( _canvas.getContext( 'webgl' ) !== null ) {

						throw 'Error creating WebGL context with your selected attributes.';

					} else {

						throw 'Error creating WebGL context.';

					}

				}

				// Some experimental-webgl implementations do not have getShaderPrecisionFormat

				if ( _gl.getShaderPrecisionFormat === undefined ) {

					_gl.getShaderPrecisionFormat = function () {

						return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

					};

				}

				_canvas.addEventListener( 'webglcontextlost', onContextLost, false );

			} catch ( error ) {

				console.error( 'THREE.WebGLRenderer: ' + error );

			}

			var extensions = new THREE.WebGLExtensions( _gl );

			extensions.get( 'WEBGL_depth_texture' );
			extensions.get( 'OES_texture_float' );
			extensions.get( 'OES_texture_float_linear' );
			extensions.get( 'OES_texture_half_float' );
			extensions.get( 'OES_texture_half_float_linear' );
			extensions.get( 'OES_standard_derivatives' );
			extensions.get( 'ANGLE_instanced_arrays' );

			if ( extensions.get( 'OES_element_index_uint' ) ) {

				THREE.BufferGeometry.MaxIndex = 4294967296;

			}

			var capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );

			var state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );
			var properties = new THREE.WebGLProperties();
			var textures = new THREE.WebGLTextures( _gl, extensions, state, properties, capabilities, paramThreeToGL, this.info );
			var objects = new THREE.WebGLObjects( _gl, properties, this.info );
			var programCache = new THREE.WebGLPrograms( this, capabilities );
			var lightCache = new THREE.WebGLLights();

			this.info.programs = programCache.programs;

			var bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );
			var indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

			//

			var backgroundCamera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			var backgroundCamera2 = new THREE.PerspectiveCamera();
			var backgroundPlaneMesh = new THREE.Mesh(
				new THREE.PlaneBufferGeometry( 2, 2 ),
				new THREE.MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
			);
			var backgroundBoxShader = THREE.ShaderLib[ 'cube' ];
			var backgroundBoxMesh = new THREE.Mesh(
				new THREE.BoxBufferGeometry( 5, 5, 5 ),
				new THREE.ShaderMaterial( {
					uniforms: backgroundBoxShader.uniforms,
					vertexShader: backgroundBoxShader.vertexShader,
					fragmentShader: backgroundBoxShader.fragmentShader,
					side: THREE.BackSide,
					depthTest: false,
					depthWrite: false,
					fog: false
				} )
			);

			//

			function getTargetPixelRatio() {

				return _currentRenderTarget === null ? _pixelRatio : 1;

			}

			function glClearColor( r, g, b, a ) {

				if ( _premultipliedAlpha === true ) {

					r *= a; g *= a; b *= a;

				}

				state.clearColor( r, g, b, a );

			}

			function setDefaultGLState() {

				state.init();

				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

			}

			function resetGLState() {

				_currentProgram = null;
				_currentCamera = null;

				_currentGeometryProgram = '';
				_currentMaterialId = - 1;

				state.reset();

			}

			setDefaultGLState();

			this.context = _gl;
			this.capabilities = capabilities;
			this.extensions = extensions;
			this.properties = properties;
			this.state = state;

			// shadow map

			var shadowMap = new THREE.WebGLShadowMap( this, _lights, objects, capabilities );

			this.shadowMap = shadowMap;


			// Plugins

			var spritePlugin = new THREE.SpritePlugin( this, sprites );
			var lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );

			// API

			this.getContext = function () {

				return _gl;

			};

			this.getContextAttributes = function () {

				return _gl.getContextAttributes();

			};

			this.forceContextLoss = function () {

				extensions.get( 'WEBGL_lose_context' ).loseContext();

			};

			this.getMaxAnisotropy = function () {

				return capabilities.getMaxAnisotropy();

			};

			this.getPrecision = function () {

				return capabilities.precision;

			};

			this.getPixelRatio = function () {

				return _pixelRatio;

			};

			this.setPixelRatio = function ( value ) {

				if ( value === undefined ) return;

				_pixelRatio = value;

				this.setSize( _viewport.z, _viewport.w, false );

			};

			this.getSize = function () {

				return {
					width: _width,
					height: _height
				};

			};

			this.setSize = function ( width, height, updateStyle ) {

				_width = width;
				_height = height;

				_canvas.width = width * _pixelRatio;
				_canvas.height = height * _pixelRatio;

				if ( updateStyle !== false ) {

					_canvas.style.width = width + 'px';
					_canvas.style.height = height + 'px';

				}

				this.setViewport( 0, 0, width, height );

			};

			this.setViewport = function ( x, y, width, height ) {

				state.viewport( _viewport.set( x, y, width, height ) );

			};

			this.setScissor = function ( x, y, width, height ) {

				state.scissor( _scissor.set( x, y, width, height ) );

			};

			this.setScissorTest = function ( boolean ) {

				state.setScissorTest( _scissorTest = boolean );

			};

			// Clearing

			this.getClearColor = function () {

				return _clearColor;

			};

			this.setClearColor = function ( color, alpha ) {

				_clearColor.set( color );

				_clearAlpha = alpha !== undefined ? alpha : 1;

				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

			};

			this.getClearAlpha = function () {

				return _clearAlpha;

			};

			this.setClearAlpha = function ( alpha ) {

				_clearAlpha = alpha;

				glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

			};

			this.clear = function ( color, depth, stencil ) {

				var bits = 0;

				if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
				if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
				if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

				_gl.clear( bits );

			};

			this.clearColor = function () {

				this.clear( true, false, false );

			};

			this.clearDepth = function () {

				this.clear( false, true, false );

			};

			this.clearStencil = function () {

				this.clear( false, false, true );

			};

			this.clearTarget = function ( renderTarget, color, depth, stencil ) {

				this.setRenderTarget( renderTarget );
				this.clear( color, depth, stencil );

			};

			// Reset

			this.resetGLState = resetGLState;

			this.dispose = function() {

				transparentObjects = [];
				transparentObjectsLastIndex = -1;
				opaqueObjects = [];
				opaqueObjectsLastIndex = -1;

				_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );

			};

			// Events

			function onContextLost( event ) {

				event.preventDefault();

				resetGLState();
				setDefaultGLState();

				properties.clear();

			}

			function onMaterialDispose( event ) {

				var material = event.target;

				material.removeEventListener( 'dispose', onMaterialDispose );

				deallocateMaterial( material );

			}

			// Buffer deallocation

			function deallocateMaterial( material ) {

				releaseMaterialProgramReference( material );

				properties.delete( material );

			}


			function releaseMaterialProgramReference( material ) {

				var programInfo = properties.get( material ).program;

				material.program = undefined;

				if ( programInfo !== undefined ) {

					programCache.releaseProgram( programInfo );

				}

			}

			// Buffer rendering

			this.renderBufferImmediate = function ( object, program, material ) {

				state.initAttributes();

				var buffers = properties.get( object );

				if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
				if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
				if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
				if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

				var attributes = program.getAttributes();

				if ( object.hasPositions ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

					state.enableAttribute( attributes.position );
					_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

				}

				if ( object.hasNormals ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

					if ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {

						for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

							var array = object.normalArray;

							var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
							var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
							var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

							array[ i + 0 ] = nx;
							array[ i + 1 ] = ny;
							array[ i + 2 ] = nz;

							array[ i + 3 ] = nx;
							array[ i + 4 ] = ny;
							array[ i + 5 ] = nz;

							array[ i + 6 ] = nx;
							array[ i + 7 ] = ny;
							array[ i + 8 ] = nz;

						}

					}

					_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

					state.enableAttribute( attributes.normal );

					_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

				}

				if ( object.hasUvs && material.map ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

					state.enableAttribute( attributes.uv );

					_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

				}

				if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

					state.enableAttribute( attributes.color );

					_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

				}

				state.disableUnusedAttributes();

				_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

				object.count = 0;

			};

			this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

				setMaterial( material );

				var program = setProgram( camera, fog, material, object );

				var updateBuffers = false;
				var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;

				if ( geometryProgram !== _currentGeometryProgram ) {

					_currentGeometryProgram = geometryProgram;
					updateBuffers = true;

				}

				// morph targets

				var morphTargetInfluences = object.morphTargetInfluences;

				if ( morphTargetInfluences !== undefined ) {

					var activeInfluences = [];

					for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {

						var influence = morphTargetInfluences[ i ];
						activeInfluences.push( [ influence, i ] );

					}

					activeInfluences.sort( absNumericalSort );

					if ( activeInfluences.length > 8 ) {

						activeInfluences.length = 8;

					}

					var morphAttributes = geometry.morphAttributes;

					for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {

						var influence = activeInfluences[ i ];
						morphInfluences[ i ] = influence[ 0 ];

						if ( influence[ 0 ] !== 0 ) {

							var index = influence[ 1 ];

							if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
							if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );

						} else {

							if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
							if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );

						}

					}

					program.getUniforms().setValue(
							_gl, 'morphTargetInfluences', morphInfluences );

					updateBuffers = true;

				}

				//

				var index = geometry.index;
				var position = geometry.attributes.position;

				if ( material.wireframe === true ) {

					index = objects.getWireframeAttribute( geometry );

				}

				var renderer;

				if ( index !== null ) {

					renderer = indexedBufferRenderer;
					renderer.setIndex( index );

				} else {

					renderer = bufferRenderer;

				}

				if ( updateBuffers ) {

					setupVertexAttributes( material, program, geometry );

					if ( index !== null ) {

						_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );

					}

				}

				//

				var dataStart = 0;
				var dataCount = Infinity;

				if ( index !== null ) {

					dataCount = index.count;

				} else if ( position !== undefined ) {

					dataCount = position.count;

				}

				var rangeStart = geometry.drawRange.start;
				var rangeCount = geometry.drawRange.count;

				var groupStart = group !== null ? group.start : 0;
				var groupCount = group !== null ? group.count : Infinity;

				var drawStart = Math.max( dataStart, rangeStart, groupStart );
				var drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

				var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

				//

				if ( object instanceof THREE.Mesh ) {

					if ( material.wireframe === true ) {

						state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
						renderer.setMode( _gl.LINES );

					} else {

						switch ( object.drawMode ) {

							case THREE.TrianglesDrawMode:
								renderer.setMode( _gl.TRIANGLES );
								break;

							case THREE.TriangleStripDrawMode:
								renderer.setMode( _gl.TRIANGLE_STRIP );
								break;

							case THREE.TriangleFanDrawMode:
								renderer.setMode( _gl.TRIANGLE_FAN );
								break;

						}

					}


				} else if ( object instanceof THREE.Line ) {

					var lineWidth = material.linewidth;

					if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

					state.setLineWidth( lineWidth * getTargetPixelRatio() );

					if ( object instanceof THREE.LineSegments ) {

						renderer.setMode( _gl.LINES );

					} else {

						renderer.setMode( _gl.LINE_STRIP );

					}

				} else if ( object instanceof THREE.Points ) {

					renderer.setMode( _gl.POINTS );

				}

				if ( geometry instanceof THREE.InstancedBufferGeometry ) {

					if ( geometry.maxInstancedCount > 0 ) {

						renderer.renderInstances( geometry, drawStart, drawCount );

					}

				} else {

					renderer.render( drawStart, drawCount );

				}

			};

			function setupVertexAttributes( material, program, geometry, startIndex ) {

				var extension;

				if ( geometry instanceof THREE.InstancedBufferGeometry ) {

					extension = extensions.get( 'ANGLE_instanced_arrays' );

					if ( extension === null ) {

						console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
						return;

					}

				}

				if ( startIndex === undefined ) startIndex = 0;

				state.initAttributes();

				var geometryAttributes = geometry.attributes;

				var programAttributes = program.getAttributes();

				var materialDefaultAttributeValues = material.defaultAttributeValues;

				for ( var name in programAttributes ) {

					var programAttribute = programAttributes[ name ];

					if ( programAttribute >= 0 ) {

						var geometryAttribute = geometryAttributes[ name ];

						if ( geometryAttribute !== undefined ) {

							var type = _gl.FLOAT;
							var array = geometryAttribute.array;
							var normalized = geometryAttribute.normalized;

							if ( array instanceof Float32Array ) {

								type = _gl.FLOAT;

							} else if ( array instanceof Float64Array ) {

								console.warn("Unsupported data buffer format: Float64Array");

							} else if ( array instanceof Uint16Array ) {

								type = _gl.UNSIGNED_SHORT;

							} else if ( array instanceof Int16Array ) {

								type = _gl.SHORT;

							} else if ( array instanceof Uint32Array ) {

								type = _gl.UNSIGNED_INT;

							} else if ( array instanceof Int32Array ) {

								type = _gl.INT;

							} else if ( array instanceof Int8Array ) {

								type = _gl.BYTE;

							} else if ( array instanceof Uint8Array ) {

								type = _gl.UNSIGNED_BYTE;

							}

							var size = geometryAttribute.itemSize;
							var buffer = objects.getAttributeBuffer( geometryAttribute );

							if ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {

								var data = geometryAttribute.data;
								var stride = data.stride;
								var offset = geometryAttribute.offset;

								if ( data instanceof THREE.InstancedInterleavedBuffer ) {

									state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );

									if ( geometry.maxInstancedCount === undefined ) {

										geometry.maxInstancedCount = data.meshPerAttribute * data.count;

									}

								} else {

									state.enableAttribute( programAttribute );

								}

								_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );

							} else {

								if ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {

									state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );

									if ( geometry.maxInstancedCount === undefined ) {

										geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

									}

								} else {

									state.enableAttribute( programAttribute );

								}

								_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );

							}

						} else if ( materialDefaultAttributeValues !== undefined ) {

							var value = materialDefaultAttributeValues[ name ];

							if ( value !== undefined ) {

								switch ( value.length ) {

									case 2:
										_gl.vertexAttrib2fv( programAttribute, value );
										break;

									case 3:
										_gl.vertexAttrib3fv( programAttribute, value );
										break;

									case 4:
										_gl.vertexAttrib4fv( programAttribute, value );
										break;

									default:
										_gl.vertexAttrib1fv( programAttribute, value );

								}

							}

						}

					}

				}

				state.disableUnusedAttributes();

			}

			// Sorting

			function absNumericalSort( a, b ) {

				return Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );

			}

			function painterSortStable ( a, b ) {

				if ( a.object.renderOrder !== b.object.renderOrder ) {

					return a.object.renderOrder - b.object.renderOrder;

				} else if ( a.material.program && b.material.program && a.material.program !== b.material.program ) {

					return a.material.program.id - b.material.program.id;

				} else if ( a.material.id !== b.material.id ) {

					return a.material.id - b.material.id;

				} else if ( a.z !== b.z ) {

					return a.z - b.z;

				} else {

					return a.id - b.id;

				}

			}

			function reversePainterSortStable ( a, b ) {

				if ( a.object.renderOrder !== b.object.renderOrder ) {

					return a.object.renderOrder - b.object.renderOrder;

				} if ( a.z !== b.z ) {

					return b.z - a.z;

				} else {

					return a.id - b.id;

				}

			}

			// Rendering

			this.render = function ( scene, camera, renderTarget, forceClear ) {

				if ( camera instanceof THREE.Camera === false ) {

					console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
					return;

				}

				var fog = scene.fog;

				// reset caching for this frame

				_currentGeometryProgram = '';
				_currentMaterialId = - 1;
				_currentCamera = null;

				// update scene graph

				if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

				// update camera matrices and frustum

				if ( camera.parent === null ) camera.updateMatrixWorld();

				camera.matrixWorldInverse.getInverse( camera.matrixWorld );

				_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
				_frustum.setFromMatrix( _projScreenMatrix );

				lights.length = 0;

				opaqueObjectsLastIndex = - 1;
				transparentObjectsLastIndex = - 1;

				sprites.length = 0;
				lensFlares.length = 0;

				_localClippingEnabled = this.localClippingEnabled;
				_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

				projectObject( scene, camera );

				opaqueObjects.length = opaqueObjectsLastIndex + 1;
				transparentObjects.length = transparentObjectsLastIndex + 1;

				if ( _this.sortObjects === true ) {

					opaqueObjects.sort( painterSortStable );
					transparentObjects.sort( reversePainterSortStable );

				}

				//

				if ( _clippingEnabled ) _clipping.beginShadows();

				setupShadows( lights );

				shadowMap.render( scene, camera );

				setupLights( lights, camera );

				if ( _clippingEnabled ) _clipping.endShadows();

				//

				_infoRender.calls = 0;
				_infoRender.vertices = 0;
				_infoRender.faces = 0;
				_infoRender.points = 0;

				if ( renderTarget === undefined ) {

					renderTarget = null;

				}

				this.setRenderTarget( renderTarget );

				//

				var background = scene.background;

				if ( background === null ) {

					glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

				} else if ( background instanceof THREE.Color ) {

					glClearColor( background.r, background.g, background.b, 1 );

				}

				if ( this.autoClear || forceClear ) {

					this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

				}

				if ( background instanceof THREE.CubeTexture ) {

					backgroundCamera2.projectionMatrix.copy( camera.projectionMatrix );

					backgroundCamera2.matrixWorld.extractRotation( camera.matrixWorld );
					backgroundCamera2.matrixWorldInverse.getInverse( backgroundCamera2.matrixWorld );

					backgroundBoxMesh.material.uniforms[ "tCube" ].value = background;
					backgroundBoxMesh.modelViewMatrix.multiplyMatrices( backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld );

					objects.update( backgroundBoxMesh );

					_this.renderBufferDirect( backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null );

				} else if ( background instanceof THREE.Texture ) {

					backgroundPlaneMesh.material.map = background;

					objects.update( backgroundPlaneMesh );

					_this.renderBufferDirect( backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null );

				}

				//

				if ( scene.overrideMaterial ) {

					var overrideMaterial = scene.overrideMaterial;

					renderObjects( opaqueObjects, camera, fog, overrideMaterial );
					renderObjects( transparentObjects, camera, fog, overrideMaterial );

				} else {

					// opaque pass (front-to-back order)

					state.setBlending( THREE.NoBlending );
					renderObjects( opaqueObjects, camera, fog );

					// transparent pass (back-to-front order)

					renderObjects( transparentObjects, camera, fog );

				}

				// custom render plugins (post pass)

				spritePlugin.render( scene, camera );
				lensFlarePlugin.render( scene, camera, _currentViewport );

				// Generate mipmap if we're using any kind of mipmap filtering

				if ( renderTarget ) {

					textures.updateRenderTargetMipmap( renderTarget );

				}

				// Ensure depth buffer writing is enabled so it can be cleared on next render

				state.setDepthTest( true );
				state.setDepthWrite( true );
				state.setColorWrite( true );

				// _gl.finish();

			};

			function pushRenderItem( object, geometry, material, z, group ) {

				var array, index;

				// allocate the next position in the appropriate array

				if ( material.transparent ) {

					array = transparentObjects;
					index = ++ transparentObjectsLastIndex;

				} else {

					array = opaqueObjects;
					index = ++ opaqueObjectsLastIndex;

				}

				// recycle existing render item or grow the array

				var renderItem = array[ index ];

				if ( renderItem !== undefined ) {

					renderItem.id = object.id;
					renderItem.object = object;
					renderItem.geometry = geometry;
					renderItem.material = material;
					renderItem.z = _vector3.z;
					renderItem.group = group;

				} else {

					renderItem = {
						id: object.id,
						object: object,
						geometry: geometry,
						material: material,
						z: _vector3.z,
						group: group
					};

					// assert( index === array.length );
					array.push( renderItem );

				}

			}

			// TODO Duplicated code (Frustum)

			function isObjectViewable( object ) {

				var geometry = object.geometry;

				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();

				_sphere.copy( geometry.boundingSphere ).
					applyMatrix4( object.matrixWorld );

				return isSphereViewable( _sphere );

			}

			function isSpriteViewable( sprite ) {

				_sphere.center.set( 0, 0, 0 );
				_sphere.radius = 0.7071067811865476;
				_sphere.applyMatrix4( sprite.matrixWorld );

				return isSphereViewable( _sphere );

			}

			function isSphereViewable( sphere ) {

				if ( ! _frustum.intersectsSphere( sphere ) ) return false;

				var numPlanes = _clipping.numPlanes;

				if ( numPlanes === 0 ) return true;

				var planes = _this.clippingPlanes,

					center = sphere.center,
					negRad = - sphere.radius,
					i = 0;

				do {

					// out when deeper than radius in the negative halfspace
					if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

				} while ( ++ i !== numPlanes );

				return true;

			}

			function projectObject( object, camera ) {

				if ( object.visible === false ) return;

				if ( object.layers.test( camera.layers ) ) {

					if ( object instanceof THREE.Light ) {

						lights.push( object );

					} else if ( object instanceof THREE.Sprite ) {

						if ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {

							sprites.push( object );

						}

					} else if ( object instanceof THREE.LensFlare ) {

						lensFlares.push( object );

					} else if ( object instanceof THREE.ImmediateRenderObject ) {

						if ( _this.sortObjects === true ) {

							_vector3.setFromMatrixPosition( object.matrixWorld );
							_vector3.applyProjection( _projScreenMatrix );

						}

						pushRenderItem( object, null, object.material, _vector3.z, null );

					} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {

						if ( object instanceof THREE.SkinnedMesh ) {

							object.skeleton.update();

						}

						if ( object.frustumCulled === false || isObjectViewable( object ) === true ) {

							var material = object.material;

							if ( material.visible === true ) {

								if ( _this.sortObjects === true ) {

									_vector3.setFromMatrixPosition( object.matrixWorld );
									_vector3.applyProjection( _projScreenMatrix );

								}

								var geometry = objects.update( object );

								if ( material instanceof THREE.MultiMaterial ) {

									var groups = geometry.groups;
									var materials = material.materials;

									for ( var i = 0, l = groups.length; i < l; i ++ ) {

										var group = groups[ i ];
										var groupMaterial = materials[ group.materialIndex ];

										if ( groupMaterial.visible === true ) {

											pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );

										}

									}

								} else {

									pushRenderItem( object, geometry, material, _vector3.z, null );

								}

							}

						}

					}

				}

				var children = object.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					projectObject( children[ i ], camera );

				}

			}

			function renderObjects( renderList, camera, fog, overrideMaterial ) {

				for ( var i = 0, l = renderList.length; i < l; i ++ ) {

					var renderItem = renderList[ i ];

					var object = renderItem.object;
					var geometry = renderItem.geometry;
					var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
					var group = renderItem.group;

					object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
					object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

					if ( object instanceof THREE.ImmediateRenderObject ) {

						setMaterial( material );

						var program = setProgram( camera, fog, material, object );

						_currentGeometryProgram = '';

						object.render( function ( object ) {

							_this.renderBufferImmediate( object, program, material );

						} );

					} else {

						_this.renderBufferDirect( camera, fog, geometry, material, object, group );

					}

				}

			}

			function initMaterial( material, fog, object ) {

				var materialProperties = properties.get( material );

				var parameters = programCache.getParameters(
						material, _lights, fog, _clipping.numPlanes, object );

				var code = programCache.getProgramCode( material, parameters );

				var program = materialProperties.program;
				var programChange = true;

				if ( program === undefined ) {

					// new material
					material.addEventListener( 'dispose', onMaterialDispose );

				} else if ( program.code !== code ) {

					// changed glsl or parameters
					releaseMaterialProgramReference( material );

				} else if ( parameters.shaderID !== undefined ) {

					// same glsl and uniform list
					return;

				} else {

					// only rebuild uniform list
					programChange = false;

				}

				if ( programChange ) {

					if ( parameters.shaderID ) {

						var shader = THREE.ShaderLib[ parameters.shaderID ];

						materialProperties.__webglShader = {
							name: material.type,
							uniforms: THREE.UniformsUtils.clone( shader.uniforms ),
							vertexShader: shader.vertexShader,
							fragmentShader: shader.fragmentShader
						};

					} else {

						materialProperties.__webglShader = {
							name: material.type,
							uniforms: material.uniforms,
							vertexShader: material.vertexShader,
							fragmentShader: material.fragmentShader
						};

					}

					material.__webglShader = materialProperties.__webglShader;

					program = programCache.acquireProgram( material, parameters, code );

					materialProperties.program = program;
					material.program = program;

				}

				var attributes = program.getAttributes();

				if ( material.morphTargets ) {

					material.numSupportedMorphTargets = 0;

					for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

						if ( attributes[ 'morphTarget' + i ] >= 0 ) {

							material.numSupportedMorphTargets ++;

						}

					}

				}

				if ( material.morphNormals ) {

					material.numSupportedMorphNormals = 0;

					for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

						if ( attributes[ 'morphNormal' + i ] >= 0 ) {

							material.numSupportedMorphNormals ++;

						}

					}

				}

				var uniforms = materialProperties.__webglShader.uniforms;

				if ( ! ( material instanceof THREE.ShaderMaterial ) &&
						! ( material instanceof THREE.RawShaderMaterial ) ||
						material.clipping === true ) {

					materialProperties.numClippingPlanes = _clipping.numPlanes;
					uniforms.clippingPlanes = _clipping.uniform;

				}

				if ( material.lights ) {

					// store the light setup it was created for

					materialProperties.lightsHash = _lights.hash;

					// wire up the material to this renderer's lighting state

					uniforms.ambientLightColor.value = _lights.ambient;
					uniforms.directionalLights.value = _lights.directional;
					uniforms.spotLights.value = _lights.spot;
					uniforms.pointLights.value = _lights.point;
					uniforms.hemisphereLights.value = _lights.hemi;

					uniforms.directionalShadowMap.value = _lights.directionalShadowMap;
					uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;
					uniforms.spotShadowMap.value = _lights.spotShadowMap;
					uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;
					uniforms.pointShadowMap.value = _lights.pointShadowMap;
					uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;

				}

				var progUniforms = materialProperties.program.getUniforms(),
					uniformsList =
							THREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

				materialProperties.uniformsList = uniformsList;
				materialProperties.dynamicUniforms =
						THREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );

			}

			function setMaterial( material ) {

				if ( material.side !== THREE.DoubleSide )
					state.enable( _gl.CULL_FACE );
				else
					state.disable( _gl.CULL_FACE );

				state.setFlipSided( material.side === THREE.BackSide );

				if ( material.transparent === true ) {

					state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

				} else {

					state.setBlending( THREE.NoBlending );

				}

				state.setDepthFunc( material.depthFunc );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );
				state.setColorWrite( material.colorWrite );
				state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

			}

			function setProgram( camera, fog, material, object ) {

				_usedTextureUnits = 0;

				var materialProperties = properties.get( material );

				if ( _clippingEnabled ) {

					if ( _localClippingEnabled || camera !== _currentCamera ) {

						var useCache =
								camera === _currentCamera &&
								material.id === _currentMaterialId;

						// we might want to call this function with some ClippingGroup
						// object instead of the material, once it becomes feasible
						// (#8465, #8379)
						_clipping.setState(
								material.clippingPlanes, material.clipShadows,
								camera, materialProperties, useCache );

					}

					if ( materialProperties.numClippingPlanes !== undefined &&
						materialProperties.numClippingPlanes !== _clipping.numPlanes ) {

						material.needsUpdate = true;

					}

				}

				if ( materialProperties.program === undefined ) {

					material.needsUpdate = true;

				}

				if ( materialProperties.lightsHash !== undefined &&
					materialProperties.lightsHash !== _lights.hash ) {

					material.needsUpdate = true;

				}

				if ( material.needsUpdate ) {

					initMaterial( material, fog, object );
					material.needsUpdate = false;

				}

				var refreshProgram = false;
				var refreshMaterial = false;
				var refreshLights = false;

				var program = materialProperties.program,
					p_uniforms = program.getUniforms(),
					m_uniforms = materialProperties.__webglShader.uniforms;

				if ( program.id !== _currentProgram ) {

					_gl.useProgram( program.program );
					_currentProgram = program.id;

					refreshProgram = true;
					refreshMaterial = true;
					refreshLights = true;

				}

				if ( material.id !== _currentMaterialId ) {

					_currentMaterialId = material.id;

					refreshMaterial = true;

				}

				if ( refreshProgram || camera !== _currentCamera ) {

					p_uniforms.set( _gl, camera, 'projectionMatrix' );

					if ( capabilities.logarithmicDepthBuffer ) {

						p_uniforms.setValue( _gl, 'logDepthBufFC',
								2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

					}


					if ( camera !== _currentCamera ) {

						_currentCamera = camera;

						// lighting uniforms depend on the camera so enforce an update
						// now, in case this material supports lights - or later, when
						// the next material that does gets activated:

						refreshMaterial = true;		// set to true on material change
						refreshLights = true;		// remains set until update done

					}

					// load material specific uniforms
					// (shader material also gets them for the sake of genericity)

					if ( material instanceof THREE.ShaderMaterial ||
						 material instanceof THREE.MeshPhongMaterial ||
						 material instanceof THREE.MeshStandardMaterial ||
						 material.envMap ) {

						var uCamPos = p_uniforms.map.cameraPosition;

						if ( uCamPos !== undefined ) {

							uCamPos.setValue( _gl,
									_vector3.setFromMatrixPosition( camera.matrixWorld ) );

						}

					}

					if ( material instanceof THREE.MeshPhongMaterial ||
						 material instanceof THREE.MeshLambertMaterial ||
						 material instanceof THREE.MeshBasicMaterial ||
						 material instanceof THREE.MeshStandardMaterial ||
						 material instanceof THREE.ShaderMaterial ||
						 material.skinning ) {

						p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

					}

					p_uniforms.set( _gl, _this, 'toneMappingExposure' );
					p_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );

				}

				// skinning uniforms must be set even if material didn't change
				// auto-setting of texture unit for bone texture must go before other textures
				// not sure why, but otherwise weird things happen

				if ( material.skinning ) {

					p_uniforms.setOptional( _gl, object, 'bindMatrix' );
					p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

					var skeleton = object.skeleton;

					if ( skeleton ) {

						if ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {

							p_uniforms.set( _gl, skeleton, 'boneTexture' );
							p_uniforms.set( _gl, skeleton, 'boneTextureWidth' );
							p_uniforms.set( _gl, skeleton, 'boneTextureHeight' );

						} else {

							p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

						}

					}

				}

				if ( refreshMaterial ) {

					if ( material.lights ) {

						// the current material requires lighting info

						// note: all lighting uniforms are always set correctly
						// they simply reference the renderer's state for their
						// values
						//
						// use the current material's .needsUpdate flags to set
						// the GL state when required

						markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

					}

					// refresh uniforms common to several materials

					if ( fog && material.fog ) {

						refreshUniformsFog( m_uniforms, fog );

					}

					if ( material instanceof THREE.MeshBasicMaterial ||
						 material instanceof THREE.MeshLambertMaterial ||
						 material instanceof THREE.MeshPhongMaterial ||
						 material instanceof THREE.MeshStandardMaterial ||
						 material instanceof THREE.MeshDepthMaterial ) {

						refreshUniformsCommon( m_uniforms, material );

					}

					// refresh single material specific uniforms

					if ( material instanceof THREE.LineBasicMaterial ) {

						refreshUniformsLine( m_uniforms, material );

					} else if ( material instanceof THREE.LineDashedMaterial ) {

						refreshUniformsLine( m_uniforms, material );
						refreshUniformsDash( m_uniforms, material );

					} else if ( material instanceof THREE.PointsMaterial ) {

						refreshUniformsPoints( m_uniforms, material );

					} else if ( material instanceof THREE.MeshLambertMaterial ) {

						refreshUniformsLambert( m_uniforms, material );

					} else if ( material instanceof THREE.MeshPhongMaterial ) {

						refreshUniformsPhong( m_uniforms, material );

					} else if ( material instanceof THREE.MeshPhysicalMaterial ) {

						refreshUniformsPhysical( m_uniforms, material );

					} else if ( material instanceof THREE.MeshStandardMaterial ) {

						refreshUniformsStandard( m_uniforms, material );

					} else if ( material instanceof THREE.MeshDepthMaterial ) {

						if ( material.displacementMap ) {

							m_uniforms.displacementMap.value = material.displacementMap;
							m_uniforms.displacementScale.value = material.displacementScale;
							m_uniforms.displacementBias.value = material.displacementBias;

						}

					} else if ( material instanceof THREE.MeshNormalMaterial ) {

						m_uniforms.opacity.value = material.opacity;

					}

					THREE.WebGLUniforms.upload(
							_gl, materialProperties.uniformsList, m_uniforms, _this );

				}


				// common matrices

				p_uniforms.set( _gl, object, 'modelViewMatrix' );
				p_uniforms.set( _gl, object, 'normalMatrix' );
				p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );


				// dynamic uniforms

				var dynUniforms = materialProperties.dynamicUniforms;

				if ( dynUniforms !== null ) {

					THREE.WebGLUniforms.evalDynamic(
							dynUniforms, m_uniforms, object, camera );

					THREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );

				}

				return program;

			}

			// Uniforms (refresh uniforms objects)

			function refreshUniformsCommon ( uniforms, material ) {

				uniforms.opacity.value = material.opacity;

				uniforms.diffuse.value = material.color;

				if ( material.emissive ) {

					uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

				}

				uniforms.map.value = material.map;
				uniforms.specularMap.value = material.specularMap;
				uniforms.alphaMap.value = material.alphaMap;

				if ( material.aoMap ) {

					uniforms.aoMap.value = material.aoMap;
					uniforms.aoMapIntensity.value = material.aoMapIntensity;

				}

				// uv repeat and offset setting priorities
				// 1. color map
				// 2. specular map
				// 3. normal map
				// 4. bump map
				// 5. alpha map
				// 6. emissive map

				var uvScaleMap;

				if ( material.map ) {

					uvScaleMap = material.map;

				} else if ( material.specularMap ) {

					uvScaleMap = material.specularMap;

				} else if ( material.displacementMap ) {

					uvScaleMap = material.displacementMap;

				} else if ( material.normalMap ) {

					uvScaleMap = material.normalMap;

				} else if ( material.bumpMap ) {

					uvScaleMap = material.bumpMap;

				} else if ( material.roughnessMap ) {

					uvScaleMap = material.roughnessMap;

				} else if ( material.metalnessMap ) {

					uvScaleMap = material.metalnessMap;

				} else if ( material.alphaMap ) {

					uvScaleMap = material.alphaMap;

				} else if ( material.emissiveMap ) {

					uvScaleMap = material.emissiveMap;

				}

				if ( uvScaleMap !== undefined ) {

					// backwards compatibility
					if ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {

						uvScaleMap = uvScaleMap.texture;

					}

					var offset = uvScaleMap.offset;
					var repeat = uvScaleMap.repeat;

					uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

				}

				uniforms.envMap.value = material.envMap;

				// don't flip CubeTexture envMaps, flip everything else:
				//  WebGLRenderTargetCube will be flipped for backwards compatibility
				//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
				// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
				uniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;

				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;

			}

			function refreshUniformsLine ( uniforms, material ) {

				uniforms.diffuse.value = material.color;
				uniforms.opacity.value = material.opacity;

			}

			function refreshUniformsDash ( uniforms, material ) {

				uniforms.dashSize.value = material.dashSize;
				uniforms.totalSize.value = material.dashSize + material.gapSize;
				uniforms.scale.value = material.scale;

			}

			function refreshUniformsPoints ( uniforms, material ) {

				uniforms.diffuse.value = material.color;
				uniforms.opacity.value = material.opacity;
				uniforms.size.value = material.size * _pixelRatio;
				uniforms.scale.value = _canvas.clientHeight * 0.5;

				uniforms.map.value = material.map;

				if ( material.map !== null ) {

					var offset = material.map.offset;
					var repeat = material.map.repeat;

					uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

				}

			}

			function refreshUniformsFog ( uniforms, fog ) {

				uniforms.fogColor.value = fog.color;

				if ( fog instanceof THREE.Fog ) {

					uniforms.fogNear.value = fog.near;
					uniforms.fogFar.value = fog.far;

				} else if ( fog instanceof THREE.FogExp2 ) {

					uniforms.fogDensity.value = fog.density;

				}

			}

			function refreshUniformsLambert ( uniforms, material ) {

				if ( material.lightMap ) {

					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;

				}

				if ( material.emissiveMap ) {

					uniforms.emissiveMap.value = material.emissiveMap;

				}

			}

			function refreshUniformsPhong ( uniforms, material ) {

				uniforms.specular.value = material.specular;
				uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

				if ( material.lightMap ) {

					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;

				}

				if ( material.emissiveMap ) {

					uniforms.emissiveMap.value = material.emissiveMap;

				}

				if ( material.bumpMap ) {

					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;

				}

				if ( material.normalMap ) {

					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );

				}

				if ( material.displacementMap ) {

					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;

				}

			}

			function refreshUniformsStandard ( uniforms, material ) {

				uniforms.roughness.value = material.roughness;
				uniforms.metalness.value = material.metalness;

				if ( material.roughnessMap ) {

					uniforms.roughnessMap.value = material.roughnessMap;

				}

				if ( material.metalnessMap ) {

					uniforms.metalnessMap.value = material.metalnessMap;

				}

				if ( material.lightMap ) {

					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;

				}

				if ( material.emissiveMap ) {

					uniforms.emissiveMap.value = material.emissiveMap;

				}

				if ( material.bumpMap ) {

					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;

				}

				if ( material.normalMap ) {

					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );

				}

				if ( material.displacementMap ) {

					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;

				}

				if ( material.envMap ) {

					//uniforms.envMap.value = material.envMap; // part of uniforms common
					uniforms.envMapIntensity.value = material.envMapIntensity;

				}

			}

			function refreshUniformsPhysical ( uniforms, material ) {

				uniforms.clearCoat.value = material.clearCoat;
				uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

				refreshUniformsStandard( uniforms, material );

			}

			// If uniforms are marked as clean, they don't need to be loaded to the GPU.

			function markUniformsLightsNeedsUpdate ( uniforms, value ) {

				uniforms.ambientLightColor.needsUpdate = value;

				uniforms.directionalLights.needsUpdate = value;
				uniforms.pointLights.needsUpdate = value;
				uniforms.spotLights.needsUpdate = value;
				uniforms.hemisphereLights.needsUpdate = value;

			}

			// Lighting

			function setupShadows ( lights ) {

				var lightShadowsLength = 0;

				for ( var i = 0, l = lights.length; i < l; i ++ ) {

					var light = lights[ i ];

					if ( light.castShadow ) {

						_lights.shadows[ lightShadowsLength ++ ] = light;

					}

				}

				_lights.shadows.length = lightShadowsLength;

			}

			function setupLights ( lights, camera ) {

				var l, ll, light,
				r = 0, g = 0, b = 0,
				color,
				intensity,
				distance,
				shadowMap,

				viewMatrix = camera.matrixWorldInverse,

				directionalLength = 0,
				pointLength = 0,
				spotLength = 0,
				hemiLength = 0;

				for ( l = 0, ll = lights.length; l < ll; l ++ ) {

					light = lights[ l ];

					color = light.color;
					intensity = light.intensity;
					distance = light.distance;

					shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

					if ( light instanceof THREE.AmbientLight ) {

						r += color.r * intensity;
						g += color.g * intensity;
						b += color.b * intensity;

					} else if ( light instanceof THREE.DirectionalLight ) {

						var uniforms = lightCache.get( light );

						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						_vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( _vector3 );
						uniforms.direction.transformDirection( viewMatrix );

						uniforms.shadow = light.castShadow;

						if ( light.castShadow ) {

							uniforms.shadowBias = light.shadow.bias;
							uniforms.shadowRadius = light.shadow.radius;
							uniforms.shadowMapSize = light.shadow.mapSize;

						}

						_lights.directionalShadowMap[ directionalLength ] = shadowMap;
						_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
						_lights.directional[ directionalLength ++ ] = uniforms;

					} else if ( light instanceof THREE.SpotLight ) {

						var uniforms = lightCache.get( light );

						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );

						uniforms.color.copy( color ).multiplyScalar( intensity );
						uniforms.distance = distance;

						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						_vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( _vector3 );
						uniforms.direction.transformDirection( viewMatrix );

						uniforms.coneCos = Math.cos( light.angle );
						uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
						uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

						uniforms.shadow = light.castShadow;

						if ( light.castShadow ) {

							uniforms.shadowBias = light.shadow.bias;
							uniforms.shadowRadius = light.shadow.radius;
							uniforms.shadowMapSize = light.shadow.mapSize;

						}

						_lights.spotShadowMap[ spotLength ] = shadowMap;
						_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
						_lights.spot[ spotLength ++ ] = uniforms;

					} else if ( light instanceof THREE.PointLight ) {

						var uniforms = lightCache.get( light );

						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );

						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.distance = light.distance;
						uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

						uniforms.shadow = light.castShadow;

						if ( light.castShadow ) {

							uniforms.shadowBias = light.shadow.bias;
							uniforms.shadowRadius = light.shadow.radius;
							uniforms.shadowMapSize = light.shadow.mapSize;

						}

						_lights.pointShadowMap[ pointLength ] = shadowMap;

						if ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {

							_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();

						}

						// for point lights we set the shadow matrix to be a translation-only matrix
						// equal to inverse of the light's position
						_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
						_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );

						_lights.point[ pointLength ++ ] = uniforms;

					} else if ( light instanceof THREE.HemisphereLight ) {

						var uniforms = lightCache.get( light );

						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						uniforms.direction.transformDirection( viewMatrix );
						uniforms.direction.normalize();

						uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
						uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

						_lights.hemi[ hemiLength ++ ] = uniforms;

					}

				}

				_lights.ambient[ 0 ] = r;
				_lights.ambient[ 1 ] = g;
				_lights.ambient[ 2 ] = b;

				_lights.directional.length = directionalLength;
				_lights.spot.length = spotLength;
				_lights.point.length = pointLength;
				_lights.hemi.length = hemiLength;

				_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;

			}

			// GL state setting

			this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

				state.setCullFace( cullFace );
				state.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );

			};

			// Textures

			function allocTextureUnit() {

				var textureUnit = _usedTextureUnits;

				if ( textureUnit >= capabilities.maxTextures ) {

					console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

				}

				_usedTextureUnits += 1;

				return textureUnit;

			}

			this.allocTextureUnit = allocTextureUnit;

			// this.setTexture2D = setTexture2D;
			this.setTexture2D = ( function() {

				var warned = false;

				// backwards compatibility: peel texture.texture
				return function setTexture2D( texture, slot ) {

					if ( texture instanceof THREE.WebGLRenderTarget ) {

						if ( ! warned ) {

							console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
							warned = true;

						}

						texture = texture.texture;

					}

					textures.setTexture2D( texture, slot );

				};

			}() );

			this.setTexture = ( function() {

				var warned = false;

				return function setTexture( texture, slot ) {

					if ( ! warned ) {

						console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
						warned = true;

					}

					textures.setTexture2D( texture, slot );

				};

			}() );

			this.setTextureCube = ( function() {

				var warned = false;

				return function setTextureCube( texture, slot ) {

					// backwards compatibility: peel texture.texture
					if ( texture instanceof THREE.WebGLRenderTargetCube ) {

						if ( ! warned ) {

							console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
							warned = true;

						}

						texture = texture.texture;

					}

					// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
					// TODO: unify these code paths
					if ( texture instanceof THREE.CubeTexture ||
						 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

						// CompressedTexture can have Array in image :/

						// this function alone should take care of cube textures
						textures.setTextureCube( texture, slot );

					} else {

						// assumed: texture property of THREE.WebGLRenderTargetCube

						textures.setTextureCubeDynamic( texture, slot );

					}

				};

			}() );

			this.getCurrentRenderTarget = function() {

				return _currentRenderTarget;

			};

			this.setRenderTarget = function ( renderTarget ) {

				_currentRenderTarget = renderTarget;

				if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

					textures.setupRenderTarget( renderTarget );

				}

				var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
				var framebuffer;

				if ( renderTarget ) {

					var renderTargetProperties = properties.get( renderTarget );

					if ( isCube ) {

						framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];

					} else {

						framebuffer = renderTargetProperties.__webglFramebuffer;

					}

					_currentScissor.copy( renderTarget.scissor );
					_currentScissorTest = renderTarget.scissorTest;

					_currentViewport.copy( renderTarget.viewport );

				} else {

					framebuffer = null;

					_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
					_currentScissorTest = _scissorTest;

					_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );

				}

				if ( _currentFramebuffer !== framebuffer ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
					_currentFramebuffer = framebuffer;

				}

				state.scissor( _currentScissor );
				state.setScissorTest( _currentScissorTest );

				state.viewport( _currentViewport );

				if ( isCube ) {

					var textureProperties = properties.get( renderTarget.texture );
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

				}

			};

			this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

				if ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
					return;

				}

				var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( framebuffer ) {

					var restore = false;

					if ( framebuffer !== _currentFramebuffer ) {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

						restore = true;

					}

					try {

						var texture = renderTarget.texture;

						if ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
							return;

						}

						if ( texture.type !== THREE.UnsignedByteType &&
						     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&
						     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&
						     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
							return;

						}

						if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

							// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

							if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

								_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );

							}

						} else {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

						}

					} finally {

						if ( restore ) {

							_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

						}

					}

				}

			};

			// Map three.js constants to WebGL constants

			function paramThreeToGL ( p ) {

				var extension;

				if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
				if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
				if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

				if ( p === THREE.NearestFilter ) return _gl.NEAREST;
				if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
				if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

				if ( p === THREE.LinearFilter ) return _gl.LINEAR;
				if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
				if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

				if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
				if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
				if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
				if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

				if ( p === THREE.ByteType ) return _gl.BYTE;
				if ( p === THREE.ShortType ) return _gl.SHORT;
				if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
				if ( p === THREE.IntType ) return _gl.INT;
				if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
				if ( p === THREE.FloatType ) return _gl.FLOAT;

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) {

					if ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;

				}

				if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
				if ( p === THREE.RGBFormat ) return _gl.RGB;
				if ( p === THREE.RGBAFormat ) return _gl.RGBA;
				if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
				if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
				if ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;

				if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
				if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
				if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

				if ( p === THREE.ZeroFactor ) return _gl.ZERO;
				if ( p === THREE.OneFactor ) return _gl.ONE;
				if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
				if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
				if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
				if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
				if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
				if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

				if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
				if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
				if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

				}

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

				}

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) {

					if ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

				}

				extension = extensions.get( 'EXT_blend_minmax' );

				if ( extension !== null ) {

					if ( p === THREE.MinEquation ) return extension.MIN_EXT;
					if ( p === THREE.MaxEquation ) return extension.MAX_EXT;

				}

				return 0;

			}

		};

		// File:src/renderers/WebGLRenderTarget.js

		/**
		 * @author szimek / https://github.com/szimek/
		 * @author alteredq / http://alteredqualia.com/
		 * @author Marius Kintel / https://github.com/kintel
		 */

		/*
		 In options, we can specify:
		 * Texture parameters for an auto-generated target texture
		 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
		*/
		THREE.WebGLRenderTarget = function ( width, height, options ) {

			this.uuid = THREE.Math.generateUUID();

			this.width = width;
			this.height = height;

			this.scissor = new THREE.Vector4( 0, 0, width, height );
			this.scissorTest = false;

			this.viewport = new THREE.Vector4( 0, 0, width, height );

			options = options || {};

			if ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;

			this.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

			this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
			this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
			this.depthTexture = null;

		};

		Object.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {

			setSize: function ( width, height ) {

				if ( this.width !== width || this.height !== height ) {

					this.width = width;
					this.height = height;

					this.dispose();

				}

				this.viewport.set( 0, 0, width, height );
				this.scissor.set( 0, 0, width, height );

			},

			clone: function () {

				return new this.constructor().copy( this );

			},

			copy: function ( source ) {

				this.width = source.width;
				this.height = source.height;

				this.viewport.copy( source.viewport );

				this.texture = source.texture.clone();

				this.depthBuffer = source.depthBuffer;
				this.stencilBuffer = source.stencilBuffer;
				this.depthTexture = source.depthTexture;

				return this;

			},

			dispose: function () {

				this.dispatchEvent( { type: 'dispose' } );

			}

		} );

		// File:src/renderers/WebGLRenderTargetCube.js

		/**
		 * @author alteredq / http://alteredqualia.com
		 */

		THREE.WebGLRenderTargetCube = function ( width, height, options ) {

			THREE.WebGLRenderTarget.call( this, width, height, options );

			this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
			this.activeMipMapLevel = 0;

		};

		THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );
		THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;

		// File:src/renderers/webgl/WebGLBufferRenderer.js

		/**
		* @author mrdoob / http://mrdoob.com/
		*/

		THREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {

			var mode;

			function setMode( value ) {

				mode = value;

			}

			function render( start, count ) {

				_gl.drawArrays( mode, start, count );

				_infoRender.calls ++;
				_infoRender.vertices += count;
				if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;

			}

			function renderInstances( geometry ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

				var position = geometry.attributes.position;

				var count = 0;

				if ( position instanceof THREE.InterleavedBufferAttribute ) {

					count = position.data.count;

					extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

				} else {

					count = position.count;

					extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

				}

				_infoRender.calls ++;
				_infoRender.vertices += count * geometry.maxInstancedCount;
				if ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;

			}

			this.setMode = setMode;
			this.render = render;
			this.renderInstances = renderInstances;

		};

		// File:src/renderers/webgl/WebGLClipping.js

		THREE.WebGLClipping = function() {

			var scope = this,

				globalState = null,
				numGlobalPlanes = 0,
				localClippingEnabled = false,
				renderingShadows = false,

				plane = new THREE.Plane(),
				viewNormalMatrix = new THREE.Matrix3(),

				uniform = { value: null, needsUpdate: false };

			this.uniform = uniform;
			this.numPlanes = 0;

			this.init = function( planes, enableLocalClipping, camera ) {

				var enabled =
					planes.length !== 0 ||
					enableLocalClipping ||
					// enable state of previous frame - the clipping code has to
					// run another frame in order to reset the state:
					numGlobalPlanes !== 0 ||
					localClippingEnabled;

				localClippingEnabled = enableLocalClipping;

				globalState = projectPlanes( planes, camera, 0 );
				numGlobalPlanes = planes.length;

				return enabled;

			};

			this.beginShadows = function() {

				renderingShadows = true;
				projectPlanes( null );

			};

			this.endShadows = function() {

				renderingShadows = false;
				resetGlobalState();

			};

			this.setState = function( planes, clipShadows, camera, cache, fromCache ) {

				if ( ! localClippingEnabled ||
						planes === null || planes.length === 0 ||
						renderingShadows && ! clipShadows ) {
					// there's no local clipping

					if ( renderingShadows ) {
						// there's no global clipping

						projectPlanes( null );

					} else {

						resetGlobalState();
					}

				} else {

					var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
						lGlobal = nGlobal * 4,

						dstArray = cache.clippingState || null;

					uniform.value = dstArray; // ensure unique state

					dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

					for ( var i = 0; i !== lGlobal; ++ i ) {

						dstArray[ i ] = globalState[ i ];

					}

					cache.clippingState = dstArray;
					this.numPlanes += nGlobal;

				}


			};

			function resetGlobalState() {

				if ( uniform.value !== globalState ) {

					uniform.value = globalState;
					uniform.needsUpdate = numGlobalPlanes > 0;

				}

				scope.numPlanes = numGlobalPlanes;

			}

			function projectPlanes( planes, camera, dstOffset, skipTransform ) {

				var nPlanes = planes !== null ? planes.length : 0,
					dstArray = null;

				if ( nPlanes !== 0 ) {

					dstArray = uniform.value;

					if ( skipTransform !== true || dstArray === null ) {

						var flatSize = dstOffset + nPlanes * 4,
							viewMatrix = camera.matrixWorldInverse;

						viewNormalMatrix.getNormalMatrix( viewMatrix );

						if ( dstArray === null || dstArray.length < flatSize ) {

							dstArray = new Float32Array( flatSize );

						}

						for ( var i = 0, i4 = dstOffset;
											i !== nPlanes; ++ i, i4 += 4 ) {

							plane.copy( planes[ i ] ).
									applyMatrix4( viewMatrix, viewNormalMatrix );

							plane.normal.toArray( dstArray, i4 );
							dstArray[ i4 + 3 ] = plane.constant;

						}

					}

					uniform.value = dstArray;
					uniform.needsUpdate = true;

				}

				scope.numPlanes = nPlanes;
				return dstArray;

			}

		};


		// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js

		/**
		* @author mrdoob / http://mrdoob.com/
		*/

		THREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {

			var mode;

			function setMode( value ) {

				mode = value;

			}

			var type, size;

			function setIndex( index ) {

				if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

					type = _gl.UNSIGNED_INT;
					size = 4;

				} else {

					type = _gl.UNSIGNED_SHORT;
					size = 2;

				}

			}

			function render( start, count ) {

				_gl.drawElements( mode, count, type, start * size );

				_infoRender.calls ++;
				_infoRender.vertices += count;
				if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;

			}

			function renderInstances( geometry, start, count ) {

				var extension = extensions.get( 'ANGLE_instanced_arrays' );

				if ( extension === null ) {

					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

				extension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );

				_infoRender.calls ++;
				_infoRender.vertices += count * geometry.maxInstancedCount;
				if ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;
			}

			this.setMode = setMode;
			this.setIndex = setIndex;
			this.render = render;
			this.renderInstances = renderInstances;

		};

		// File:src/renderers/webgl/WebGLExtensions.js

		/**
		* @author mrdoob / http://mrdoob.com/
		*/

		THREE.WebGLExtensions = function ( gl ) {

			var extensions = {};

			this.get = function ( name ) {

				if ( extensions[ name ] !== undefined ) {

					return extensions[ name ];

				}

				var extension;

				switch ( name ) {

					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;

					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;

					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;

					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;

					case 'WEBGL_compressed_texture_etc1':
						extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
						break;

					default:
						extension = gl.getExtension( name );

				}

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				extensions[ name ] = extension;

				return extension;

			};

		};

		// File:src/renderers/webgl/WebGLCapabilities.js

		THREE.WebGLCapabilities = function ( gl, extensions, parameters ) {

			var maxAnisotropy;

			function getMaxAnisotropy() {

				if ( maxAnisotropy !== undefined ) return maxAnisotropy;

				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				if ( extension !== null ) {

					maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

				} else {

					maxAnisotropy = 0;

				}

				return maxAnisotropy;

			}

			function getMaxPrecision( precision ) {

				if ( precision === 'highp' ) {

					if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
					     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

						return 'highp';

					}

					precision = 'mediump';

				}

				if ( precision === 'mediump' ) {

					if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
					     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

						return 'mediump';

					}

				}

				return 'lowp';

			}

			this.getMaxAnisotropy = getMaxAnisotropy;
			this.getMaxPrecision = getMaxPrecision;

			this.precision = parameters.precision !== undefined ? parameters.precision : 'highp';
			this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;

			this.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
			this.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
			this.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
			this.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

			this.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
			this.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
			this.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
			this.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

			this.vertexTextures = this.maxVertexTextures > 0;
			this.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
			this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;

			var _maxPrecision = getMaxPrecision( this.precision );

			if ( _maxPrecision !== this.precision ) {

				console.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );
				this.precision = _maxPrecision;

			}

			if ( this.logarithmicDepthBuffer ) {

				this.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );

			}

		};

		// File:src/renderers/webgl/WebGLGeometries.js

		/**
		* @author mrdoob / http://mrdoob.com/
		*/

		THREE.WebGLGeometries = function ( gl, properties, info ) {

			var geometries = {};

			function get( object ) {

				var geometry = object.geometry;

				if ( geometries[ geometry.id ] !== undefined ) {

					return geometries[ geometry.id ];

				}

				geometry.addEventListener( 'dispose', onGeometryDispose );

				var buffergeometry;

				if ( geometry instanceof THREE.BufferGeometry ) {

					buffergeometry = geometry;

				} else if ( geometry instanceof THREE.Geometry ) {

					if ( geometry._bufferGeometry === undefined ) {

						geometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );

					}

					buffergeometry = geometry._bufferGeometry;

				}

				geometries[ geometry.id ] = buffergeometry;

				info.memory.geometries ++;

				return buffergeometry;

			}

			function onGeometryDispose( event ) {

				var geometry = event.target;
				var buffergeometry = geometries[ geometry.id ];

				if ( buffergeometry.index !== null ) {

					deleteAttribute( buffergeometry.index );

				}

				deleteAttributes( buffergeometry.attributes );

				geometry.removeEventListener( 'dispose', onGeometryDispose );

				delete geometries[ geometry.id ];

				// TODO

				var property = properties.get( geometry );

				if ( property.wireframe ) {

					deleteAttribute( property.wireframe );

				}

				properties.delete( geometry );

				var bufferproperty = properties.get( buffergeometry );

				if ( bufferproperty.wireframe ) {

					deleteAttribute( bufferproperty.wireframe );

				}

				properties.delete( buffergeometry );

				//

				info.memory.geometries --;

			}

			function getAttributeBuffer( attribute ) {

				if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

					return properties.get( attribute.data ).__webglBuffer;

				}

				return properties.get( attribute ).__webglBuffer;

			}

			function deleteAttribute( attribute ) {

				var buffer = getAttributeBuffer( attribute );

				if ( buffer !== undefined ) {

					gl.deleteBuffer( buffer );
					removeAttributeBuffer( attribute );

				}

			}

			function deleteAttributes( attributes ) {

				for ( var name in attributes ) {

					deleteAttribute( attributes[ name ] );

				}

			}

			function removeAttributeBuffer( attribute ) {

				if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

					properties.delete( attribute.data );

				} else {

					properties.delete( attribute );

				}

			}

			this.get = get;

		};

		// File:src/renderers/webgl/WebGLLights.js

		/**
		* @author mrdoob / http://mrdoob.com/
		*/

		THREE.WebGLLights = function () {

			var lights = {};

			this.get = function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				var uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new THREE.Vector3(),
							color: new THREE.Color(),

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new THREE.Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new THREE.Vector3(),
							direction: new THREE.Vector3(),
							color: new THREE.Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new THREE.Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new THREE.Vector3(),
							color: new THREE.Color(),
							distance: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new THREE.Vector2()
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new THREE.Vector3(),
							skyColor: new THREE.Color(),
							groundColor: new THREE.Color()
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			};

		};

		// File:src/renderers/webgl/WebGLObjects.js

		/**
		* @author mrdoob / http://mrdoob.com/
		*/

		THREE.WebGLObjects = function ( gl, properties, info ) {

			var geometries = new THREE.WebGLGeometries( gl, properties, info );

			//

			function update( object ) {

				// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.

				var geometry = geometries.get( object );

				if ( object.geometry instanceof THREE.Geometry ) {

					geometry.updateFromObject( object );

				}

				var index = geometry.index;
				var attributes = geometry.attributes;

				if ( index !== null ) {

					updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );

				}

				for ( var name in attributes ) {

					updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );

				}

				// morph targets

				var morphAttributes = geometry.morphAttributes;

				for ( var name in morphAttributes ) {

					var array = morphAttributes[ name ];

					for ( var i = 0, l = array.length; i < l; i ++ ) {

						updateAttribute( array[ i ], gl.ARRAY_BUFFER );

					}

				}

				return geometry;

			}

			function updateAttribute( attribute, bufferType ) {

				var data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;

				var attributeProperties = properties.get( data );

				if ( attributeProperties.__webglBuffer === undefined ) {

					createBuffer( attributeProperties, data, bufferType );

				} else if ( attributeProperties.version !== data.version ) {

					updateBuffer( attributeProperties, data, bufferType );

				}

			}

			function createBuffer( attributeProperties, data, bufferType ) {

				attributeProperties.__webglBuffer = gl.createBuffer();
				gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

				var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

				gl.bufferData( bufferType, data.array, usage );

				attributeProperties.version = data.version;

			}

			function updateBuffer( attributeProperties, data, bufferType ) {

				gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );

				if ( data.dynamic === false || data.updateRange.count === - 1 ) {

					// Not using update ranges

					gl.bufferSubData( bufferType, 0, data.array );

				} else if ( data.updateRange.count === 0 ) {

					console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

				} else {

					gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
									  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );

					data.updateRange.count = 0; // reset range

				}

				attributeProperties.version = data.version;

			}

			function getAttributeBuffer( attribute ) {

				if ( attribute instanceof THREE.InterleavedBufferAttribute ) {

					return properties.get( attribute.data ).__webglBuffer;

				}

				return properties.get( attribute ).__webglBuffer;

			}

			function getWireframeAttribute( geometry ) {

				var property = properties.get( geometry );

				if ( property.wireframe !== undefined ) {

					return property.wireframe;

				}

				var indices = [];

				var index = geometry.index;
				var attributes = geometry.attributes;
				var position = attributes.position;

				// console.time( 'wireframe' );

				if ( index !== null ) {

					var edges = {};
					var array = index.array;

					for ( var i = 0, l = array.length; i < l; i += 3 ) {

						var a = array[ i + 0 ];
						var b = array[ i + 1 ];
						var c = array[ i + 2 ];

						if ( checkEdge( edges, a, b ) ) indices.push( a, b );
						if ( checkEdge( edges, b, c ) ) indices.push( b, c );
						if ( checkEdge( edges, c, a ) ) indices.push( c, a );

					}

				} else {

					var array = attributes.position.array;

					for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

						var a = i + 0;
						var b = i + 1;
						var c = i + 2;

						indices.push( a, b, b, c, c, a );

					}

				}

				// console.timeEnd( 'wireframe' );

				var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
				var attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );

				updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );

				property.wireframe = attribute;

				return attribute;

			}

			function checkEdge( edges, a, b ) {

				if ( a > b ) {

					var tmp = a;
					a = b;
					b = tmp;

				}

				var list = edges[ a ];

				if ( list === undefined ) {

					edges[ a ] = [ b ];
					return true;

				} else if ( list.indexOf( b ) === -1 ) {

					list.push( b );
					return true;

				}

				return false;

			}

			this.getAttributeBuffer = getAttributeBuffer;
			this.getWireframeAttribute = getWireframeAttribute;

			this.update = update;

		};

		// File:src/renderers/webgl/WebGLProgram.js

		THREE.WebGLProgram = ( function () {

			var programIdCount = 0;

			function getEncodingComponents( encoding ) {

				switch ( encoding ) {

					case THREE.LinearEncoding:
						return [ 'Linear','( value )' ];
					case THREE.sRGBEncoding:
						return [ 'sRGB','( value )' ];
					case THREE.RGBEEncoding:
						return [ 'RGBE','( value )' ];
					case THREE.RGBM7Encoding:
						return [ 'RGBM','( value, 7.0 )' ];
					case THREE.RGBM16Encoding:
						return [ 'RGBM','( value, 16.0 )' ];
					case THREE.RGBDEncoding:
						return [ 'RGBD','( value, 256.0 )' ];
					case THREE.GammaEncoding:
						return [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];
					default:
						throw new Error( 'unsupported encoding: ' + encoding );

				}

			}

			function getTexelDecodingFunction( functionName, encoding ) {

				var components = getEncodingComponents( encoding );
				return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

			}

			function getTexelEncodingFunction( functionName, encoding ) {

				var components = getEncodingComponents( encoding );
				return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

			}

			function getToneMappingFunction( functionName, toneMapping ) {

				var toneMappingName;

				switch ( toneMapping ) {

					case THREE.LinearToneMapping:
						toneMappingName = "Linear";
						break;

					case THREE.ReinhardToneMapping:
						toneMappingName = "Reinhard";
						break;

					case THREE.Uncharted2ToneMapping:
						toneMappingName = "Uncharted2";
						break;

					case THREE.CineonToneMapping:
						toneMappingName = "OptimizedCineon";
						break;

					default:
						throw new Error( 'unsupported toneMapping: ' + toneMapping );

				}

				return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

			}

			function generateExtensions( extensions, parameters, rendererExtensions ) {

				extensions = extensions || {};

				var chunks = [
					( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
					( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
					( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
					( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',
				];

				return chunks.filter( filterEmptyLine ).join( '\n' );

			}

			function generateDefines( defines ) {

				var chunks = [];

				for ( var name in defines ) {

					var value = defines[ name ];

					if ( value === false ) continue;

					chunks.push( '#define ' + name + ' ' + value );

				}

				return chunks.join( '\n' );

			}

			function fetchAttributeLocations( gl, program, identifiers ) {

				var attributes = {};

				var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

				for ( var i = 0; i < n; i ++ ) {

					var info = gl.getActiveAttrib( program, i );
					var name = info.name;

					// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );

					attributes[ name ] = gl.getAttribLocation( program, name );

				}

				return attributes;

			}

			function filterEmptyLine( string ) {

				return string !== '';

			}

			function replaceLightNums( string, parameters ) {

				return string
					.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
					.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
					.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
					.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

			}

			function parseIncludes( string ) {

				var pattern = /#include +<([\w\d.]+)>/g;

				function replace( match, include ) {

					var replace = THREE.ShaderChunk[ include ];

					if ( replace === undefined ) {

						throw new Error( 'Can not resolve #include <' + include + '>' );

					}

					return parseIncludes( replace );

				}

				return string.replace( pattern, replace );

			}

			function unrollLoops( string ) {

				var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

				function replace( match, start, end, snippet ) {

					var unroll = '';

					for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

						unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

					}

					return unroll;

				}

				return string.replace( pattern, replace );

			}

			return function WebGLProgram( renderer, code, material, parameters ) {

				var gl = renderer.context;

				var extensions = material.extensions;
				var defines = material.defines;

				var vertexShader = material.__webglShader.vertexShader;
				var fragmentShader = material.__webglShader.fragmentShader;

				var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

				if ( parameters.shadowMapType === THREE.PCFShadowMap ) {

					shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

				} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {

					shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

				}

				var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
				var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
				var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

				if ( parameters.envMap ) {

					switch ( material.envMap.mapping ) {

						case THREE.CubeReflectionMapping:
						case THREE.CubeRefractionMapping:
							envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
							break;

						case THREE.CubeUVReflectionMapping:
						case THREE.CubeUVRefractionMapping:
							envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
							break;

						case THREE.EquirectangularReflectionMapping:
						case THREE.EquirectangularRefractionMapping:
							envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
							break;

						case THREE.SphericalReflectionMapping:
							envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
							break;

					}

					switch ( material.envMap.mapping ) {

						case THREE.CubeRefractionMapping:
						case THREE.EquirectangularRefractionMapping:
							envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
							break;

					}

					switch ( material.combine ) {

						case THREE.MultiplyOperation:
							envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
							break;

						case THREE.MixOperation:
							envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
							break;

						case THREE.AddOperation:
							envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
							break;

					}

				}

				var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

				// console.log( 'building new program ' );

				//

				var customExtensions = generateExtensions( extensions, parameters, renderer.extensions );

				var customDefines = generateDefines( defines );

				//

				var program = gl.createProgram();

				var prefixVertex, prefixFragment;

				if ( material instanceof THREE.RawShaderMaterial ) {

					prefixVertex = [

						customDefines

					].filter( filterEmptyLine ).join( '\n' );

					prefixFragment = [

						customDefines

					].filter( filterEmptyLine ).join( '\n' );

				} else {

					prefixVertex = [

						'precision ' + parameters.precision + ' float;',
						'precision ' + parameters.precision + ' int;',

						'#define SHADER_NAME ' + material.__webglShader.name,

						customDefines,

						parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

						'#define GAMMA_FACTOR ' + gammaFactorDefine,

						'#define MAX_BONES ' + parameters.maxBones,

						parameters.map ? '#define USE_MAP' : '',
						parameters.envMap ? '#define USE_ENVMAP' : '',
						parameters.envMap ? '#define ' + envMapModeDefine : '',
						parameters.lightMap ? '#define USE_LIGHTMAP' : '',
						parameters.aoMap ? '#define USE_AOMAP' : '',
						parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
						parameters.bumpMap ? '#define USE_BUMPMAP' : '',
						parameters.normalMap ? '#define USE_NORMALMAP' : '',
						parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
						parameters.specularMap ? '#define USE_SPECULARMAP' : '',
						parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
						parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
						parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
						parameters.vertexColors ? '#define USE_COLOR' : '',

						parameters.flatShading ? '#define FLAT_SHADED' : '',

						parameters.skinning ? '#define USE_SKINNING' : '',
						parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

						parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
						parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
						parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
						parameters.flipSided ? '#define FLIP_SIDED' : '',

						'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

						parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
						parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

						parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

						parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
						parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

						'uniform mat4 modelMatrix;',
						'uniform mat4 modelViewMatrix;',
						'uniform mat4 projectionMatrix;',
						'uniform mat4 viewMatrix;',
						'uniform mat3 normalMatrix;',
						'uniform vec3 cameraPosition;',

						'attribute vec3 position;',
						'attribute vec3 normal;',
						'attribute vec2 uv;',

						'#ifdef USE_COLOR',

						'	attribute vec3 color;',

						'#endif',

						'#ifdef USE_MORPHTARGETS',

						'	attribute vec3 morphTarget0;',
						'	attribute vec3 morphTarget1;',
						'	attribute vec3 morphTarget2;',
						'	attribute vec3 morphTarget3;',

						'	#ifdef USE_MORPHNORMALS',

						'		attribute vec3 morphNormal0;',
						'		attribute vec3 morphNormal1;',
						'		attribute vec3 morphNormal2;',
						'		attribute vec3 morphNormal3;',

						'	#else',

						'		attribute vec3 morphTarget4;',
						'		attribute vec3 morphTarget5;',
						'		attribute vec3 morphTarget6;',
						'		attribute vec3 morphTarget7;',

						'	#endif',

						'#endif',

						'#ifdef USE_SKINNING',

						'	attribute vec4 skinIndex;',
						'	attribute vec4 skinWeight;',

						'#endif',

						'\n'

					].filter( filterEmptyLine ).join( '\n' );

					prefixFragment = [

						customExtensions,

						'precision ' + parameters.precision + ' float;',
						'precision ' + parameters.precision + ' int;',

						'#define SHADER_NAME ' + material.__webglShader.name,

						customDefines,

						parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

						'#define GAMMA_FACTOR ' + gammaFactorDefine,

						( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
						( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

						parameters.map ? '#define USE_MAP' : '',
						parameters.envMap ? '#define USE_ENVMAP' : '',
						parameters.envMap ? '#define ' + envMapTypeDefine : '',
						parameters.envMap ? '#define ' + envMapModeDefine : '',
						parameters.envMap ? '#define ' + envMapBlendingDefine : '',
						parameters.lightMap ? '#define USE_LIGHTMAP' : '',
						parameters.aoMap ? '#define USE_AOMAP' : '',
						parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
						parameters.bumpMap ? '#define USE_BUMPMAP' : '',
						parameters.normalMap ? '#define USE_NORMALMAP' : '',
						parameters.specularMap ? '#define USE_SPECULARMAP' : '',
						parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
						parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
						parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
						parameters.vertexColors ? '#define USE_COLOR' : '',

						parameters.flatShading ? '#define FLAT_SHADED' : '',

						parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
						parameters.flipSided ? '#define FLIP_SIDED' : '',

						'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

						parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
						parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

						parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

						parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

						parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
						parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

						parameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

						'uniform mat4 viewMatrix;',
						'uniform vec3 cameraPosition;',

						( parameters.toneMapping !== THREE.NoToneMapping ) ? "#define TONE_MAPPING" : '',
						( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below
						( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

						( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
						parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
						parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
						parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
						parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

						parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

						'\n'

					].filter( filterEmptyLine ).join( '\n' );

				}

				vertexShader = parseIncludes( vertexShader, parameters );
				vertexShader = replaceLightNums( vertexShader, parameters );

				fragmentShader = parseIncludes( fragmentShader, parameters );
				fragmentShader = replaceLightNums( fragmentShader, parameters );

				if ( material instanceof THREE.ShaderMaterial === false ) {

					vertexShader = unrollLoops( vertexShader );
					fragmentShader = unrollLoops( fragmentShader );

				}

				var vertexGlsl = prefixVertex + vertexShader;
				var fragmentGlsl = prefixFragment + fragmentShader;

				// console.log( '*VERTEX*', vertexGlsl );
				// console.log( '*FRAGMENT*', fragmentGlsl );

				var glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
				var glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

				gl.attachShader( program, glVertexShader );
				gl.attachShader( program, glFragmentShader );

				// Force a particular attribute to index 0.

				if ( material.index0AttributeName !== undefined ) {

					gl.bindAttribLocation( program, 0, material.index0AttributeName );

				} else if ( parameters.morphTargets === true ) {

					// programs with morphTargets displace position out of attribute 0
					gl.bindAttribLocation( program, 0, 'position' );

				}

				gl.linkProgram( program );

				var programLog = gl.getProgramInfoLog( program );
				var vertexLog = gl.getShaderInfoLog( glVertexShader );
				var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

				var runnable = true;
				var haveDiagnostics = true;

				// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
				// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

				if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

					runnable = false;

					console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

				} else if ( programLog !== '' ) {

					console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

				} else if ( vertexLog === '' || fragmentLog === '' ) {

					haveDiagnostics = false;

				}

				if ( haveDiagnostics ) {

					this.diagnostics = {

						runnable: runnable,
						material: material,

						programLog: programLog,

						vertexShader: {

							log: vertexLog,
							prefix: prefixVertex

						},

						fragmentShader: {

							log: fragmentLog,
							prefix: prefixFragment

						}

					};

				}

				// clean up

				gl.deleteShader( glVertexShader );
				gl.deleteShader( glFragmentShader );

				// set up caching for uniform locations

				var cachedUniforms;

				this.getUniforms = function() {

					if ( cachedUniforms === undefined ) {

						cachedUniforms =
								new THREE.WebGLUniforms( gl, program, renderer );

					}

					return cachedUniforms;

				};

				// set up caching for attribute locations

				var cachedAttributes;

				this.getAttributes = function() {

					if ( cachedAttributes === undefined ) {

						cachedAttributes = fetchAttributeLocations( gl, program );

					}

					return cachedAttributes;

				};

				// free resource

				this.destroy = function() {

					gl.deleteProgram( program );
					this.program = undefined;

				};

				// DEPRECATED

				Object.defineProperties( this, {

					uniforms: {
						get: function() {

							console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
							return this.getUniforms();

						}
					},

					attributes: {
						get: function() {

							console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
							return this.getAttributes();

						}
					}

				} );


				//

				this.id = programIdCount ++;
				this.code = code;
				this.usedTimes = 1;
				this.program = program;
				this.vertexShader = glVertexShader;
				this.fragmentShader = glFragmentShader;

				return this;

			};

		} )();

		// File:src/renderers/webgl/WebGLPrograms.js

		THREE.WebGLPrograms = function ( renderer, capabilities ) {

			var programs = [];

			var shaderIDs = {
				MeshDepthMaterial: 'depth',
				MeshNormalMaterial: 'normal',
				MeshBasicMaterial: 'basic',
				MeshLambertMaterial: 'lambert',
				MeshPhongMaterial: 'phong',
				MeshStandardMaterial: 'physical',
				MeshPhysicalMaterial: 'physical',
				LineBasicMaterial: 'basic',
				LineDashedMaterial: 'dashed',
				PointsMaterial: 'points'
			};

			var parameterNames = [
				"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
				"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
				"roughnessMap", "metalnessMap",
				"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
				"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
				"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
				"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
				"numDirLights", "numPointLights", "numSpotLights", "numHemiLights",
				"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
				"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "depthPacking"
			];


			function allocateBones ( object ) {

				if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

					return 1024;

				} else {

					// default for when object is not specified
					// ( for example when prebuilding shader to be used with multiple objects )
					//
					//  - leave some extra space for other uniforms
					//  - limit here is ANGLE's 254 max uniform vectors
					//    (up to 54 should be safe)

					var nVertexUniforms = capabilities.maxVertexUniforms;
					var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

					var maxBones = nVertexMatrices;

					if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {

						maxBones = Math.min( object.skeleton.bones.length, maxBones );

						if ( maxBones < object.skeleton.bones.length ) {

							console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

						}

					}

					return maxBones;

				}

			}

			function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

				var encoding;

				if ( ! map ) {

					encoding = THREE.LinearEncoding;

				} else if ( map instanceof THREE.Texture ) {

					encoding = map.encoding;

				} else if ( map instanceof THREE.WebGLRenderTarget ) {

					console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
					encoding = map.texture.encoding;

				}

				// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
				if ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {

					encoding = THREE.GammaEncoding;

				}

				return encoding;

			}

			this.getParameters = function ( material, lights, fog, nClipPlanes, object ) {

				var shaderID = shaderIDs[ material.type ];

				// heuristics to create shader parameters according to lights in the scene
				// (not to blow over maxLights budget)

				var maxBones = allocateBones( object );
				var precision = renderer.getPrecision();

				if ( material.precision !== null ) {

					precision = capabilities.getMaxPrecision( material.precision );

					if ( precision !== material.precision ) {

						console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

					}

				}

				var currentRenderTarget = renderer.getCurrentRenderTarget();

				var parameters = {

					shaderID: shaderID,

					precision: precision,
					supportsVertexTextures: capabilities.vertexTextures,
					outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
					map: !! material.map,
					mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
					envMap: !! material.envMap,
					envMapMode: material.envMap && material.envMap.mapping,
					envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
					envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),
					lightMap: !! material.lightMap,
					aoMap: !! material.aoMap,
					emissiveMap: !! material.emissiveMap,
					emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
					bumpMap: !! material.bumpMap,
					normalMap: !! material.normalMap,
					displacementMap: !! material.displacementMap,
					roughnessMap: !! material.roughnessMap,
					metalnessMap: !! material.metalnessMap,
					specularMap: !! material.specularMap,
					alphaMap: !! material.alphaMap,

					combine: material.combine,

					vertexColors: material.vertexColors,

					fog: !! fog,
					useFog: material.fog,
					fogExp: fog instanceof THREE.FogExp2,

					flatShading: material.shading === THREE.FlatShading,

					sizeAttenuation: material.sizeAttenuation,
					logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

					skinning: material.skinning,
					maxBones: maxBones,
					useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,

					morphTargets: material.morphTargets,
					morphNormals: material.morphNormals,
					maxMorphTargets: renderer.maxMorphTargets,
					maxMorphNormals: renderer.maxMorphNormals,

					numDirLights: lights.directional.length,
					numPointLights: lights.point.length,
					numSpotLights: lights.spot.length,
					numHemiLights: lights.hemi.length,

					numClippingPlanes: nClipPlanes,

					shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,
					shadowMapType: renderer.shadowMap.type,

					toneMapping: renderer.toneMapping,
					physicallyCorrectLights: renderer.physicallyCorrectLights,

					premultipliedAlpha: material.premultipliedAlpha,

					alphaTest: material.alphaTest,
					doubleSided: material.side === THREE.DoubleSide,
					flipSided: material.side === THREE.BackSide,

					depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

				};

				return parameters;

			};

			this.getProgramCode = function ( material, parameters ) {

				var array = [];

				if ( parameters.shaderID ) {

					array.push( parameters.shaderID );

				} else {

					array.push( material.fragmentShader );
					array.push( material.vertexShader );

				}

				if ( material.defines !== undefined ) {

					for ( var name in material.defines ) {

						array.push( name );
						array.push( material.defines[ name ] );

					}

				}

				for ( var i = 0; i < parameterNames.length; i ++ ) {

					array.push( parameters[ parameterNames[ i ] ] );

				}

				return array.join();

			};

			this.acquireProgram = function ( material, parameters, code ) {

				var program;

				// Check if code has been already compiled
				for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

					var programInfo = programs[ p ];

					if ( programInfo.code === code ) {

						program = programInfo;
						++ program.usedTimes;

						break;

					}

				}

				if ( program === undefined ) {

					program = new THREE.WebGLProgram( renderer, code, material, parameters );
					programs.push( program );

				}

				return program;

			};

			this.releaseProgram = function( program ) {

				if ( -- program.usedTimes === 0 ) {

					// Remove from unordered set
					var i = programs.indexOf( program );
					programs[ i ] = programs[ programs.length - 1 ];
					programs.pop();

					// Free WebGL resources
					program.destroy();

				}

			};

			// Exposed for resource monitoring & error feedback via renderer.info:
			this.programs = programs;

		};

		// File:src/renderers/webgl/WebGLProperties.js

		/**
		* @author fordacious / fordacious.github.io
		*/

		THREE.WebGLProperties = function () {

			var properties = {};

			this.get = function ( object ) {

				var uuid = object.uuid;
				var map = properties[ uuid ];

				if ( map === undefined ) {

					map = {};
					properties[ uuid ] = map;

				}

				return map;

			};

			this.delete = function ( object ) {

				delete properties[ object.uuid ];

			};

			this.clear = function () {

				properties = {};

			};

		};

		// File:src/renderers/webgl/WebGLShader.js

		THREE.WebGLShader = ( function () {

			function addLineNumbers( string ) {

				var lines = string.split( '\n' );

				for ( var i = 0; i < lines.length; i ++ ) {

					lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

				}

				return lines.join( '\n' );

			}

			return function WebGLShader( gl, type, string ) {

				var shader = gl.createShader( type );

				gl.shaderSource( shader, string );
				gl.compileShader( shader );

				if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

					console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

				}

				if ( gl.getShaderInfoLog( shader ) !== '' ) {

					console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

				}

				// --enable-privileged-webgl-extension
				// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

				return shader;

			};

		} )();

		// File:src/renderers/webgl/WebGLShadowMap.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.WebGLShadowMap = function ( _renderer, _lights, _objects, capabilities ) {

			var _gl = _renderer.context,
			_state = _renderer.state,
			_frustum = new THREE.Frustum(),
			_projScreenMatrix = new THREE.Matrix4(),

			_lightShadows = _lights.shadows,

			_shadowMapSize = new THREE.Vector2(),
			_maxShadowMapSize = new THREE.Vector2( capabilities.maxTextureSize, capabilities.maxTextureSize ),

			_lookTarget = new THREE.Vector3(),
			_lightPositionWorld = new THREE.Vector3(),

			_renderList = [],

			_MorphingFlag = 1,
			_SkinningFlag = 2,

			_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

			_depthMaterials = new Array( _NumberOfMaterialVariants ),
			_distanceMaterials = new Array( _NumberOfMaterialVariants ),

			_materialCache = {};

			var cubeDirections = [
				new THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),
				new THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )
			];

			var cubeUps = [
				new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),
				new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),	new THREE.Vector3( 0, 0, - 1 )
			];

			var cube2DViewPorts = [
				new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),
				new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()
			];

			// init

			var depthMaterialTemplate = new THREE.MeshDepthMaterial();
			depthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;
			depthMaterialTemplate.clipping = true;

			var distanceShader = THREE.ShaderLib[ "distanceRGBA" ];
			var distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );

			for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

				var useMorphing = ( i & _MorphingFlag ) !== 0;
				var useSkinning = ( i & _SkinningFlag ) !== 0;

				var depthMaterial = depthMaterialTemplate.clone();
				depthMaterial.morphTargets = useMorphing;
				depthMaterial.skinning = useSkinning;

				_depthMaterials[ i ] = depthMaterial;

				var distanceMaterial = new THREE.ShaderMaterial( {
					defines: {
						'USE_SHADOWMAP': ''
					},
					uniforms: distanceUniforms,
					vertexShader: distanceShader.vertexShader,
					fragmentShader: distanceShader.fragmentShader,
					morphTargets: useMorphing,
					skinning: useSkinning,
					clipping: true
				} );

				_distanceMaterials[ i ] = distanceMaterial;

			}

			//

			var scope = this;

			this.enabled = false;

			this.autoUpdate = true;
			this.needsUpdate = false;

			this.type = THREE.PCFShadowMap;

			this.renderReverseSided = true;
			this.renderSingleSided = true;

			this.render = function ( scene, camera ) {

				if ( scope.enabled === false ) return;
				if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

				if ( _lightShadows.length === 0 ) return;

				// Set GL state for depth map.
				_state.clearColor( 1, 1, 1, 1 );
				_state.disable( _gl.BLEND );
				_state.setDepthTest( true );
				_state.setScissorTest( false );

				// render depth map

				var faceCount, isPointLight;

				for ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {

					var light = _lightShadows[ i ];
					var shadow = light.shadow;

					if ( shadow === undefined ) {

						console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
						continue;

					}

					var shadowCamera = shadow.camera;

					_shadowMapSize.copy( shadow.mapSize );
					_shadowMapSize.min( _maxShadowMapSize );

					if ( light instanceof THREE.PointLight ) {

						faceCount = 6;
						isPointLight = true;

						var vpWidth = _shadowMapSize.x;
						var vpHeight = _shadowMapSize.y;

						// These viewports map a cube-map onto a 2D texture with the
						// following orientation:
						//
						//  xzXZ
						//   y Y
						//
						// X - Positive x direction
						// x - Negative x direction
						// Y - Positive y direction
						// y - Negative y direction
						// Z - Positive z direction
						// z - Negative z direction

						// positive X
						cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
						// negative X
						cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
						// positive Z
						cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
						// negative Z
						cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
						// positive Y
						cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
						// negative Y
						cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

						_shadowMapSize.x *= 4.0;
						_shadowMapSize.y *= 2.0;

					} else {

						faceCount = 1;
						isPointLight = false;

					}

					if ( shadow.map === null ) {

						var pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };

						shadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

						shadowCamera.updateProjectionMatrix();

					}

					if ( shadow instanceof THREE.SpotLightShadow ) {

						shadow.update( light );

					}

					var shadowMap = shadow.map;
					var shadowMatrix = shadow.matrix;

					_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
					shadowCamera.position.copy( _lightPositionWorld );

					_renderer.setRenderTarget( shadowMap );
					_renderer.clear();

					// render shadow map for each cube face (if omni-directional) or
					// run a single pass if not

					for ( var face = 0; face < faceCount; face ++ ) {

						if ( isPointLight ) {

							_lookTarget.copy( shadowCamera.position );
							_lookTarget.add( cubeDirections[ face ] );
							shadowCamera.up.copy( cubeUps[ face ] );
							shadowCamera.lookAt( _lookTarget );

							var vpDimensions = cube2DViewPorts[ face ];
							_state.viewport( vpDimensions );

						} else {

							_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
							shadowCamera.lookAt( _lookTarget );

						}

						shadowCamera.updateMatrixWorld();
						shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

						// compute shadow matrix

						shadowMatrix.set(
							0.5, 0.0, 0.0, 0.5,
							0.0, 0.5, 0.0, 0.5,
							0.0, 0.0, 0.5, 0.5,
							0.0, 0.0, 0.0, 1.0
						);

						shadowMatrix.multiply( shadowCamera.projectionMatrix );
						shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

						// update camera matrices and frustum

						_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
						_frustum.setFromMatrix( _projScreenMatrix );

						// set object matrices & frustum culling

						_renderList.length = 0;

						projectObject( scene, camera, shadowCamera );

						// render shadow map
						// render regular objects

						for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {

							var object = _renderList[ j ];
							var geometry = _objects.update( object );
							var material = object.material;

							if ( material instanceof THREE.MultiMaterial ) {

								var groups = geometry.groups;
								var materials = material.materials;

								for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

									var group = groups[ k ];
									var groupMaterial = materials[ group.materialIndex ];

									if ( groupMaterial.visible === true ) {

										var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
										_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

									}

								}

							} else {

								var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

							}

						}

					}

				}

				// Restore GL state.
				var clearColor = _renderer.getClearColor(),
				clearAlpha = _renderer.getClearAlpha();
				_renderer.setClearColor( clearColor, clearAlpha );

				scope.needsUpdate = false;

			};

			function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {

				var geometry = object.geometry;

				var result = null;

				var materialVariants = _depthMaterials;
				var customMaterial = object.customDepthMaterial;

				if ( isPointLight ) {

					materialVariants = _distanceMaterials;
					customMaterial = object.customDistanceMaterial;

				}

				if ( ! customMaterial ) {

					var useMorphing = false;

					if ( material.morphTargets ) {

						if ( geometry instanceof THREE.BufferGeometry ) {

							useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

						} else if ( geometry instanceof THREE.Geometry ) {

							useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

						}

					}

					var useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;

					var variantIndex = 0;

					if ( useMorphing ) variantIndex |= _MorphingFlag;
					if ( useSkinning ) variantIndex |= _SkinningFlag;

					result = materialVariants[ variantIndex ];

				} else {

					result = customMaterial;

				}

				if ( _renderer.localClippingEnabled &&
					 material.clipShadows === true &&
						material.clippingPlanes.length !== 0 ) {

					// in this case we need a unique material instance reflecting the
					// appropriate state

					var keyA = result.uuid, keyB = material.uuid;

					var materialsForVariant = _materialCache[ keyA ];

					if ( materialsForVariant === undefined ) {

						materialsForVariant = {};
						_materialCache[ keyA ] = materialsForVariant;

					}

					var cachedMaterial = materialsForVariant[ keyB ];

					if ( cachedMaterial === undefined ) {

						cachedMaterial = result.clone();
						materialsForVariant[ keyB ] = cachedMaterial;

					}

					result = cachedMaterial;

				}

				result.visible = material.visible;
				result.wireframe = material.wireframe;

				var side = material.side;

				if ( scope.renderSingleSided && side == THREE.DoubleSide ) {

					side = THREE.FrontSide;

				}

				if ( scope.renderReverseSided ) {

					if ( side === THREE.FrontSide ) side = THREE.BackSide;
					else if ( side === THREE.BackSide ) side = THREE.FrontSide;

				}

				result.side = side;

				result.clipShadows = material.clipShadows;
				result.clippingPlanes = material.clippingPlanes;

				result.wireframeLinewidth = material.wireframeLinewidth;
				result.linewidth = material.linewidth;

				if ( isPointLight && result.uniforms.lightPos !== undefined ) {

					result.uniforms.lightPos.value.copy( lightPositionWorld );

				}

				return result;

			}

			function projectObject( object, camera, shadowCamera ) {

				if ( object.visible === false ) return;

				if ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {

					if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

						var material = object.material;

						if ( material.visible === true ) {

							object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
							_renderList.push( object );

						}

					}

				}

				var children = object.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					projectObject( children[ i ], camera, shadowCamera );

				}

			}

		};

		// File:src/renderers/webgl/WebGLState.js

		/**
		* @author mrdoob / http://mrdoob.com/
		*/

		THREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {

			var _this = this;

			this.buffers = {
				color: new THREE.WebGLColorBuffer( gl, this ),
				depth: new THREE.WebGLDepthBuffer( gl, this ),
				stencil: new THREE.WebGLStencilBuffer( gl, this )
			};

			var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
			var newAttributes = new Uint8Array( maxVertexAttributes );
			var enabledAttributes = new Uint8Array( maxVertexAttributes );
			var attributeDivisors = new Uint8Array( maxVertexAttributes );

			var capabilities = {};

			var compressedTextureFormats = null;

			var currentBlending = null;
			var currentBlendEquation = null;
			var currentBlendSrc = null;
			var currentBlendDst = null;
			var currentBlendEquationAlpha = null;
			var currentBlendSrcAlpha = null;
			var currentBlendDstAlpha = null;
			var currentPremultipledAlpha = false;

			var currentFlipSided = null;
			var currentCullFace = null;

			var currentLineWidth = null;

			var currentPolygonOffsetFactor = null;
			var currentPolygonOffsetUnits = null;

			var currentScissorTest = null;

			var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );

			var currentTextureSlot = null;
			var currentBoundTextures = {};

			var currentScissor = new THREE.Vector4();
			var currentViewport = new THREE.Vector4();

			function createTexture( type, target, count ) {

				var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
				var texture = gl.createTexture();

				gl.bindTexture( type, texture );
				gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
				gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

				for ( var i = 0; i < count; i ++ ) {

					gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

				}

				return texture;

			}

			var emptyTextures = {};
			emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
			emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

			//

			this.init = function () {

				this.clearColor( 0, 0, 0, 1 );
				this.clearDepth( 1 );
				this.clearStencil( 0 );

				this.enable( gl.DEPTH_TEST );
				this.setDepthFunc( THREE.LessEqualDepth );

				this.setFlipSided( false );
				this.setCullFace( THREE.CullFaceBack );
				this.enable( gl.CULL_FACE );

				this.enable( gl.BLEND );
				this.setBlending( THREE.NormalBlending );

			};

			this.initAttributes = function () {

				for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

					newAttributes[ i ] = 0;

				}

			};

			this.enableAttribute = function ( attribute ) {

				newAttributes[ attribute ] = 1;

				if ( enabledAttributes[ attribute ] === 0 ) {

					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;

				}

				if ( attributeDivisors[ attribute ] !== 0 ) {

					var extension = extensions.get( 'ANGLE_instanced_arrays' );

					extension.vertexAttribDivisorANGLE( attribute, 0 );
					attributeDivisors[ attribute ] = 0;

				}

			};

			this.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {

				newAttributes[ attribute ] = 1;

				if ( enabledAttributes[ attribute ] === 0 ) {

					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;

				}

				if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

					extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
					attributeDivisors[ attribute ] = meshPerAttribute;

				}

			};

			this.disableUnusedAttributes = function () {

				for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

					if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;

					}

				}

			};

			this.enable = function ( id ) {

				if ( capabilities[ id ] !== true ) {

					gl.enable( id );
					capabilities[ id ] = true;

				}

			};

			this.disable = function ( id ) {

				if ( capabilities[ id ] !== false ) {

					gl.disable( id );
					capabilities[ id ] = false;

				}

			};

			this.getCompressedTextureFormats = function () {

				if ( compressedTextureFormats === null ) {

					compressedTextureFormats = [];

					if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
					     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
					     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

						var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

						for ( var i = 0; i < formats.length; i ++ ) {

							compressedTextureFormats.push( formats[ i ] );

						}

					}

				}

				return compressedTextureFormats;

			};

			this.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

				if ( blending !== THREE.NoBlending ) {

					this.enable( gl.BLEND );

				} else {

					this.disable( gl.BLEND );
					currentBlending = blending; // no blending, that is
					return;

				}

				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

					if ( blending === THREE.AdditiveBlending ) {

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

						}

					} else if ( blending === THREE.SubtractiveBlending ) {

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

						}

					} else if ( blending === THREE.MultiplyBlending ) {

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

						}

					} else {

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						}

					}

					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;

				}

				if ( blending === THREE.CustomBlending ) {

					blendEquationAlpha = blendEquationAlpha || blendEquation;
					blendSrcAlpha = blendSrcAlpha || blendSrc;
					blendDstAlpha = blendDstAlpha || blendDst;

					if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

						gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );

						currentBlendEquation = blendEquation;
						currentBlendEquationAlpha = blendEquationAlpha;

					}

					if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

						gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );

						currentBlendSrc = blendSrc;
						currentBlendDst = blendDst;
						currentBlendSrcAlpha = blendSrcAlpha;
						currentBlendDstAlpha = blendDstAlpha;

					}

				} else {

					currentBlendEquation = null;
					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendEquationAlpha = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;

				}

			};

			// TODO Deprecate

			this.setColorWrite = function ( colorWrite ) {

				this.buffers.color.setMask( colorWrite );

			};

			this.setDepthTest = function ( depthTest ) {

				this.buffers.depth.setTest( depthTest );

			};

			this.setDepthWrite = function ( depthWrite ) {

				this.buffers.depth.setMask( depthWrite );

			};

			this.setDepthFunc = function ( depthFunc ) {

				this.buffers.depth.setFunc( depthFunc );

			};

			this.setStencilTest = function ( stencilTest ) {

				this.buffers.stencil.setTest( stencilTest );

			};

			this.setStencilWrite = function ( stencilWrite ) {

				this.buffers.stencil.setMask( stencilWrite );

			};

			this.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {

				this.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );

			};

			this.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {

				this.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );

			};

			//

			this.setFlipSided = function ( flipSided ) {

				if ( currentFlipSided !== flipSided ) {

					if ( flipSided ) {

						gl.frontFace( gl.CW );

					} else {

						gl.frontFace( gl.CCW );

					}

					currentFlipSided = flipSided;

				}

			};

			this.setCullFace = function ( cullFace ) {

				if ( cullFace !== THREE.CullFaceNone ) {

					this.enable( gl.CULL_FACE );

					if ( cullFace !== currentCullFace ) {

						if ( cullFace === THREE.CullFaceBack ) {

							gl.cullFace( gl.BACK );

						} else if ( cullFace === THREE.CullFaceFront ) {

							gl.cullFace( gl.FRONT );

						} else {

							gl.cullFace( gl.FRONT_AND_BACK );

						}

					}

				} else {

					this.disable( gl.CULL_FACE );

				}

				currentCullFace = cullFace;

			};

			this.setLineWidth = function ( width ) {

				if ( width !== currentLineWidth ) {

					gl.lineWidth( width );

					currentLineWidth = width;

				}

			};

			this.setPolygonOffset = function ( polygonOffset, factor, units ) {

				if ( polygonOffset ) {

					this.enable( gl.POLYGON_OFFSET_FILL );

					if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

						gl.polygonOffset( factor, units );

						currentPolygonOffsetFactor = factor;
						currentPolygonOffsetUnits = units;

					}

				} else {

					this.disable( gl.POLYGON_OFFSET_FILL );

				}

			};

			this.getScissorTest = function () {

				return currentScissorTest;

			};

			this.setScissorTest = function ( scissorTest ) {

				currentScissorTest = scissorTest;

				if ( scissorTest ) {

					this.enable( gl.SCISSOR_TEST );

				} else {

					this.disable( gl.SCISSOR_TEST );

				}

			};

			// texture

			this.activeTexture = function ( webglSlot ) {

				if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

				if ( currentTextureSlot !== webglSlot ) {

					gl.activeTexture( webglSlot );
					currentTextureSlot = webglSlot;

				}

			};

			this.bindTexture = function ( webglType, webglTexture ) {

				if ( currentTextureSlot === null ) {

					_this.activeTexture();

				}

				var boundTexture = currentBoundTextures[ currentTextureSlot ];

				if ( boundTexture === undefined ) {

					boundTexture = { type: undefined, texture: undefined };
					currentBoundTextures[ currentTextureSlot ] = boundTexture;

				}

				if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

					gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

					boundTexture.type = webglType;
					boundTexture.texture = webglTexture;

				}

			};

			this.compressedTexImage2D = function () {

				try {

					gl.compressedTexImage2D.apply( gl, arguments );

				} catch ( error ) {

					console.error( error );

				}

			};

			this.texImage2D = function () {

				try {

					gl.texImage2D.apply( gl, arguments );

				} catch ( error ) {

					console.error( error );

				}

			};

			// TODO Deprecate

			this.clearColor = function ( r, g, b, a ) {

				this.buffers.color.setClear( r, g, b, a );

			};

			this.clearDepth = function ( depth ) {

				this.buffers.depth.setClear( depth );

			};

			this.clearStencil = function ( stencil ) {

				this.buffers.stencil.setClear( stencil );

			};

			//

			this.scissor = function ( scissor ) {

				if ( currentScissor.equals( scissor ) === false ) {

					gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
					currentScissor.copy( scissor );

				}

			};

			this.viewport = function ( viewport ) {

				if ( currentViewport.equals( viewport ) === false ) {

					gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
					currentViewport.copy( viewport );

				}

			};

			//

			this.reset = function () {

				for ( var i = 0; i < enabledAttributes.length; i ++ ) {

					if ( enabledAttributes[ i ] === 1 ) {

						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;

					}

				}

				capabilities = {};

				compressedTextureFormats = null;

				currentTextureSlot = null;
				currentBoundTextures = {};

				currentBlending = null;

				currentFlipSided = null;
				currentCullFace = null;

				this.buffers.color.reset();
				this.buffers.depth.reset();
				this.buffers.stencil.reset();

			};

		};

		THREE.WebGLColorBuffer = function ( gl, state ) {

			var locked = false;

			var color = new THREE.Vector4();
			var currentColorMask = null;
			var currentColorClear = new THREE.Vector4();

			this.setMask = function ( colorMask ) {

				if ( currentColorMask !== colorMask && ! locked ) {

					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
					currentColorMask = colorMask;

				}

			};

			this.setLocked = function ( lock ) {

				locked = lock;

			};

			this.setClear = function ( r, g, b, a ) {

				color.set( r, g, b, a );

				if ( currentColorClear.equals( color ) === false ) {

					gl.clearColor( r, g, b, a );
					currentColorClear.copy( color );

				}

			};

			this.reset = function () {

				locked = false;

				currentColorMask = null;
				currentColorClear = new THREE.Vector4();

			};

		};

		THREE.WebGLDepthBuffer = function( gl, state ) {

			var locked = false;

			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;

			this.setTest = function ( depthTest ) {

				if ( depthTest ) {

					state.enable( gl.DEPTH_TEST );

				} else {

					state.disable( gl.DEPTH_TEST );

				}

			};

			this.setMask = function( depthMask ){

				if ( currentDepthMask !== depthMask && ! locked ) {

					gl.depthMask( depthMask );
					currentDepthMask = depthMask;

				}

			};

			this.setFunc = function ( depthFunc ) {

				if ( currentDepthFunc !== depthFunc ) {

					if ( depthFunc ) {

						switch ( depthFunc ) {

							case THREE.NeverDepth:

								gl.depthFunc( gl.NEVER );
								break;

							case THREE.AlwaysDepth:

								gl.depthFunc( gl.ALWAYS );
								break;

							case THREE.LessDepth:

								gl.depthFunc( gl.LESS );
								break;

							case THREE.LessEqualDepth:

								gl.depthFunc( gl.LEQUAL );
								break;

							case THREE.EqualDepth:

								gl.depthFunc( gl.EQUAL );
								break;

							case THREE.GreaterEqualDepth:

								gl.depthFunc( gl.GEQUAL );
								break;

							case THREE.GreaterDepth:

								gl.depthFunc( gl.GREATER );
								break;

							case THREE.NotEqualDepth:

								gl.depthFunc( gl.NOTEQUAL );
								break;

							default:

								gl.depthFunc( gl.LEQUAL );

						}

					} else {

						gl.depthFunc( gl.LEQUAL );

					}

					currentDepthFunc = depthFunc;

				}

			};

			this.setLocked = function ( lock ) {

				locked = lock;

			};

			this.setClear = function ( depth ) {

				if ( currentDepthClear !== depth ) {

					gl.clearDepth( depth );
					currentDepthClear = depth;

				}

			};

			this.reset = function () {

				locked = false;

				currentDepthMask = null;
				currentDepthFunc = null;
				currentDepthClear = null;

			};

		};

		THREE.WebGLStencilBuffer = function ( gl, state ) {

			var locked = false;

			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail  = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;

			this.setTest = function ( stencilTest ) {

				if ( stencilTest ) {

					state.enable( gl.STENCIL_TEST );

				} else {

					state.disable( gl.STENCIL_TEST );

				}

			};

			this.setMask = function ( stencilMask ) {

				if ( currentStencilMask !== stencilMask && ! locked ) {

					gl.stencilMask( stencilMask );
					currentStencilMask = stencilMask;

				}

			};

			this.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {

				if ( currentStencilFunc !== stencilFunc ||
				     currentStencilRef 	!== stencilRef 	||
				     currentStencilFuncMask !== stencilMask ) {

					gl.stencilFunc( stencilFunc,  stencilRef, stencilMask );

					currentStencilFunc = stencilFunc;
					currentStencilRef  = stencilRef;
					currentStencilFuncMask = stencilMask;

				}

			};

			this.setOp	 = function ( stencilFail, stencilZFail, stencilZPass ) {

				if ( currentStencilFail	 !== stencilFail 	||
				     currentStencilZFail !== stencilZFail ||
				     currentStencilZPass !== stencilZPass ) {

					gl.stencilOp( stencilFail,  stencilZFail, stencilZPass );

					currentStencilFail  = stencilFail;
					currentStencilZFail = stencilZFail;
					currentStencilZPass = stencilZPass;

				}

			};

			this.setLocked = function ( lock ) {

				locked = lock;

			};

			this.setClear = function ( stencil ) {

				if ( currentStencilClear !== stencil ) {

					gl.clearStencil( stencil );
					currentStencilClear = stencil;

				}

			};

			this.reset = function () {

				locked = false;

				currentStencilMask = null;
				currentStencilFunc = null;
				currentStencilRef = null;
				currentStencilFuncMask = null;
				currentStencilFail = null;
				currentStencilZFail = null;
				currentStencilZPass = null;
				currentStencilClear = null;

			};

		};

		// File:src/renderers/webgl/WebGLTextures.js

		/**
		* @author mrdoob / http://mrdoob.com/
		*/

		THREE.WebGLTextures = function ( _gl, extensions, state, properties, capabilities, paramThreeToGL, info ) {

			var _infoMemory = info.memory;
			var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext );

			//

			function clampToMaxSize ( image, maxSize ) {

				if ( image.width > maxSize || image.height > maxSize ) {

					// Warning: Scaling through the canvas will only work with images that use
					// premultiplied alpha.

					var scale = maxSize / Math.max( image.width, image.height );

					var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = Math.floor( image.width * scale );
					canvas.height = Math.floor( image.height * scale );

					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

					console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

					return canvas;

				}

				return image;

			}

			function isPowerOfTwo( image ) {

				return THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );

			}

			function makePowerOfTwo( image ) {

				if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {

					var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = THREE.Math.nearestPowerOfTwo( image.width );
					canvas.height = THREE.Math.nearestPowerOfTwo( image.height );

					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, canvas.width, canvas.height );

					console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

					return canvas;

				}

				return image;

			}

			function textureNeedsPowerOfTwo( texture ) {

				if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;
				if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;

				return false;

			}

			// Fallback filters for non-power-of-2 textures

			function filterFallback ( f ) {

				if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {

					return _gl.NEAREST;

				}

				return _gl.LINEAR;

			}

			//

			function onTextureDispose( event ) {

				var texture = event.target;

				texture.removeEventListener( 'dispose', onTextureDispose );

				deallocateTexture( texture );

				_infoMemory.textures --;


			}

			function onRenderTargetDispose( event ) {

				var renderTarget = event.target;

				renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

				deallocateRenderTarget( renderTarget );

				_infoMemory.textures --;

			}

			//

			function deallocateTexture( texture ) {

				var textureProperties = properties.get( texture );

				if ( texture.image && textureProperties.__image__webglTextureCube ) {

					// cube texture

					_gl.deleteTexture( textureProperties.__image__webglTextureCube );

				} else {

					// 2D texture

					if ( textureProperties.__webglInit === undefined ) return;

					_gl.deleteTexture( textureProperties.__webglTexture );

				}

				// remove all webgl properties
				properties.delete( texture );

			}

			function deallocateRenderTarget( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );

				if ( ! renderTarget ) return;

				if ( textureProperties.__webglTexture !== undefined ) {

					_gl.deleteTexture( textureProperties.__webglTexture );

				}

				if ( renderTarget.depthTexture ) {

					renderTarget.depthTexture.dispose();

				}

				if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

					for ( var i = 0; i < 6; i ++ ) {

						_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
						if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

					}

				} else {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

				}

				properties.delete( renderTarget.texture );
				properties.delete( renderTarget );

			}

			//



			function setTexture2D( texture, slot ) {

				var textureProperties = properties.get( texture );

				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

					var image = texture.image;

					if ( image === undefined ) {

						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

					} else if ( image.complete === false ) {

						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

					} else {

						uploadTexture( textureProperties, texture, slot );
						return;

					}

				}

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

			}

			function setTextureCube ( texture, slot ) {

				var textureProperties = properties.get( texture );

				if ( texture.image.length === 6 ) {

					if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

						if ( ! textureProperties.__image__webglTextureCube ) {

							texture.addEventListener( 'dispose', onTextureDispose );

							textureProperties.__image__webglTextureCube = _gl.createTexture();

							_infoMemory.textures ++;

						}

						state.activeTexture( _gl.TEXTURE0 + slot );
						state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

						_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

						var isCompressed = texture instanceof THREE.CompressedTexture;
						var isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;

						var cubeImage = [];

						for ( var i = 0; i < 6; i ++ ) {

							if ( ! isCompressed && ! isDataTexture ) {

								cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

							} else {

								cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

							}

						}

						var image = cubeImage[ 0 ],
						isPowerOfTwoImage = isPowerOfTwo( image ),
						glFormat = paramThreeToGL( texture.format ),
						glType = paramThreeToGL( texture.type );

						setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

						for ( var i = 0; i < 6; i ++ ) {

							if ( ! isCompressed ) {

								if ( isDataTexture ) {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

								}

							} else {

								var mipmap, mipmaps = cubeImage[ i ].mipmaps;

								for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

									mipmap = mipmaps[ j ];

									if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

										if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

											state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

										} else {

											console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()" );

										}

									} else {

										state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

									}

								}

							}

						}

						if ( texture.generateMipmaps && isPowerOfTwoImage ) {

							_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

						}

						textureProperties.__version = texture.version;

						if ( texture.onUpdate ) texture.onUpdate( texture );

					} else {

						state.activeTexture( _gl.TEXTURE0 + slot );
						state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

					}

				}

			}

			function setTextureCubeDynamic ( texture, slot ) {

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

			}

			function setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {

				var extension;

				if ( isPowerOfTwoImage ) {

					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

					_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

				} else {

					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

					if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {

						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

					}

					_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

					if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {

						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

					}

				}

				extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				if ( extension ) {

					if ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
					if ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

					if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

						_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
						properties.get( texture ).__currentAnisotropy = texture.anisotropy;

					}

				}

			}

			function uploadTexture( textureProperties, texture, slot ) {

				if ( textureProperties.__webglInit === undefined ) {

					textureProperties.__webglInit = true;

					texture.addEventListener( 'dispose', onTextureDispose );

					textureProperties.__webglTexture = _gl.createTexture();

					_infoMemory.textures ++;

				}

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

				var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

				if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

					image = makePowerOfTwo( image );

				}

				var isPowerOfTwoImage = isPowerOfTwo( image ),
				glFormat = paramThreeToGL( texture.format ),
				glType = paramThreeToGL( texture.type );

				setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

				var mipmap, mipmaps = texture.mipmaps;

				if ( texture instanceof THREE.DepthTexture ) {

					// populate depth texture with dummy data

					var internalFormat = _gl.DEPTH_COMPONENT;

					if ( texture.type === THREE.FloatType ) {

						if ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');
						internalFormat = _gl.DEPTH_COMPONENT32F;

					} else if ( _isWebGL2 ) {

						// WebGL 2.0 requires signed internalformat for glTexImage2D
						internalFormat = _gl.DEPTH_COMPONENT16;

					}

					state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

				} else if ( texture instanceof THREE.DataTexture ) {

					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels

					if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

						}

						texture.generateMipmaps = false;

					} else {

						state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

					}

				} else if ( texture instanceof THREE.CompressedTexture ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];

						if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

							if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

								state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

							} else {

								console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );

							}

						} else {

							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

						}

					}

				} else {

					// regular Texture (image, video, canvas)

					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels

					if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

						}

						texture.generateMipmaps = false;

					} else {

						state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

					}

				}

				if ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );

				textureProperties.__version = texture.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			}

			// Render targets

			// Setup storage for target texture and bind it to correct framebuffer
			function setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {

				var glFormat = paramThreeToGL( renderTarget.texture.format );
				var glType = paramThreeToGL( renderTarget.texture.type );
				state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

			}

			// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
			function setupRenderBufferStorage ( renderbuffer, renderTarget ) {

				_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

				if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

				} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

				} else {

					// FIXME: We don't support !depth !stencil
					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

				}

				_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

			}

			// Setup resources for a Depth Texture for a FBO (needs an extension)
			function setupDepthTexture ( framebuffer, renderTarget ) {

				var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
				if ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				if ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {

					throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');

				}

				// upload an empty depth texture with framebuffer size
				if ( !properties.get( renderTarget.depthTexture ).__webglTexture ||
						renderTarget.depthTexture.image.width !== renderTarget.width ||
						renderTarget.depthTexture.image.height !== renderTarget.height ) {
					renderTarget.depthTexture.image.width = renderTarget.width;
					renderTarget.depthTexture.image.height = renderTarget.height;
					renderTarget.depthTexture.needsUpdate = true;
				}

				setTexture2D( renderTarget.depthTexture, 0 );

				var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			}

			// Setup GL resources for a non-texture depth buffer
			function setupDepthRenderbuffer( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );

				var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );

				if ( renderTarget.depthTexture ) {

					if ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');

					setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

				} else {

					if ( isCube ) {

						renderTargetProperties.__webglDepthbuffer = [];

						for ( var i = 0; i < 6; i ++ ) {

							_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
							renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
							setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

						}

					} else {

						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
						renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

					}

				}

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

			}

			// Set up GL resources for the render target
			function setupRenderTarget( renderTarget ) {

				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );

				renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				_infoMemory.textures ++;

				var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
				var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

				// Setup framebuffer

				if ( isCube ) {

					renderTargetProperties.__webglFramebuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

					}

				} else {

					renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

				}

				// Setup color buffer

				if ( isCube ) {

					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

					for ( var i = 0; i < 6; i ++ ) {

						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

					}

					if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

				} else {

					state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

					if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
					state.bindTexture( _gl.TEXTURE_2D, null );

				}

				// Setup depth and stencil buffers

				if ( renderTarget.depthBuffer ) {

					setupDepthRenderbuffer( renderTarget );

				}

			}

			function updateRenderTargetMipmap( renderTarget ) {

				var texture = renderTarget.texture;

				if ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&
						texture.minFilter !== THREE.NearestFilter &&
						texture.minFilter !== THREE.LinearFilter ) {

					var target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
					var webglTexture = properties.get( texture ).__webglTexture;

					state.bindTexture( target, webglTexture );
					_gl.generateMipmap( target );
					state.bindTexture( target, null );

				}

			}

			this.setTexture2D = setTexture2D;
			this.setTextureCube = setTextureCube;
			this.setTextureCubeDynamic = setTextureCubeDynamic;
			this.setupRenderTarget = setupRenderTarget;
			this.updateRenderTargetMipmap = updateRenderTargetMipmap;

		};

		// File:src/renderers/webgl/WebGLUniforms.js

		/**
		 *
		 * Uniforms of a program.
		 * Those form a tree structure with a special top-level container for the root,
		 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
		 *
		 *
		 * Properties of inner nodes including the top-level container:
		 *
		 * .seq - array of nested uniforms
		 * .map - nested uniforms by name
		 *
		 *
		 * Methods of all nodes except the top-level container:
		 *
		 * .setValue( gl, value, [renderer] )
		 *
		 * 		uploads a uniform value(s)
		 *  	the 'renderer' parameter is needed for sampler uniforms
		 *
		 *
		 * Static methods of the top-level container (renderer factorizations):
		 *
		 * .upload( gl, seq, values, renderer )
		 *
		 * 		sets uniforms in 'seq' to 'values[id].value'
		 *
		 * .seqWithValue( seq, values ) : filteredSeq
		 *
		 * 		filters 'seq' entries with corresponding entry in values
		 *
		 * .splitDynamic( seq, values ) : filteredSeq
		 *
		 * 		filters 'seq' entries with dynamic entry and removes them from 'seq'
		 *
		 *
		 * Methods of the top-level container (renderer factorizations):
		 *
		 * .setValue( gl, name, value )
		 *
		 * 		sets uniform with  name 'name' to 'value'
		 *
		 * .set( gl, obj, prop )
		 *
		 * 		sets uniform from object and property with same name than uniform
		 *
		 * .setOptional( gl, obj, prop )
		 *
		 * 		like .set for an optional property of the object
		 *
		 *
		 * @author tschw
		 *
		 */

		THREE.WebGLUniforms = ( function() { // scope

			var emptyTexture = new THREE.Texture();
			var emptyCubeTexture = new THREE.CubeTexture();

			// --- Base for inner nodes (including the root) ---

			var UniformContainer = function() {

					this.seq = [];
					this.map = {};

				},

			// --- Utilities ---

			// Array Caches (provide typed arrays for temporary by size)

				arrayCacheF32 = [],
				arrayCacheI32 = [],

				uncacheTemporaryArrays = function() {

					arrayCacheF32.length = 0;
					arrayCacheI32.length = 0;

				},

			// Flattening for arrays of vectors and matrices

				flatten = function( array, nBlocks, blockSize ) {

					var firstElem = array[ 0 ];

					if ( firstElem <= 0 || firstElem > 0 ) return array;
					// unoptimized: ! isNaN( firstElem )
					// see http://jacksondunstan.com/articles/983

					var n = nBlocks * blockSize,
						r = arrayCacheF32[ n ];

					if ( r === undefined ) {

						r = new Float32Array( n );
						arrayCacheF32[ n ] = r;

					}

					if ( nBlocks !== 0 ) {

						firstElem.toArray( r, 0 );

						for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

							offset += blockSize;
							array[ i ].toArray( r, offset );

						}

					}

					return r;

				},

			// Texture unit allocation

				allocTexUnits = function( renderer, n ) {

					var r = arrayCacheI32[ n ];

					if ( r === undefined ) {

						r = new Int32Array( n );
						arrayCacheI32[ n ] = r;

					}

					for ( var i = 0; i !== n; ++ i )
						r[ i ] = renderer.allocTextureUnit();

					return r;

				},

			// --- Setters ---

			// Note: Defining these methods externally, because they come in a bunch
			// and this way their names minify.

				// Single scalar

				setValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },
				setValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },

				// Single float vector (from flat array or THREE.VectorN)

				setValue2fv = function( gl, v ) {

					if ( v.x === undefined ) gl.uniform2fv( this.addr, v );
					else gl.uniform2f( this.addr, v.x, v.y );

				},

				setValue3fv = function( gl, v ) {

					if ( v.x !== undefined )
						gl.uniform3f( this.addr, v.x, v.y, v.z );
					else if ( v.r !== undefined )
						gl.uniform3f( this.addr, v.r, v.g, v.b );
					else
						gl.uniform3fv( this.addr, v );

				},

				setValue4fv = function( gl, v ) {

					if ( v.x === undefined ) gl.uniform4fv( this.addr, v );
					else gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

				},

				// Single matrix (from flat array or MatrixN)

				setValue2fm = function( gl, v ) {

					gl.uniformMatrix2fv( this.addr, false, v.elements || v );

				},

				setValue3fm = function( gl, v ) {

					gl.uniformMatrix3fv( this.addr, false, v.elements || v );

				},

				setValue4fm = function( gl, v ) {

					gl.uniformMatrix4fv( this.addr, false, v.elements || v );

				},

				// Single texture (2D / Cube)

				setValueT1 = function( gl, v, renderer ) {

					var unit = renderer.allocTextureUnit();
					gl.uniform1i( this.addr, unit );
					renderer.setTexture2D( v || emptyTexture, unit );

				},

				setValueT6 = function( gl, v, renderer ) {

					var unit = renderer.allocTextureUnit();
					gl.uniform1i( this.addr, unit );
					renderer.setTextureCube( v || emptyCubeTexture, unit );

				},

				// Integer / Boolean vectors or arrays thereof (always flat arrays)

				setValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },
				setValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },
				setValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },

				// Helper to pick the right setter for the singular case

				getSingularSetter = function( type ) {

					switch ( type ) {

						case 0x1406: return setValue1f; // FLOAT
						case 0x8b50: return setValue2fv; // _VEC2
						case 0x8b51: return setValue3fv; // _VEC3
						case 0x8b52: return setValue4fv; // _VEC4

						case 0x8b5a: return setValue2fm; // _MAT2
						case 0x8b5b: return setValue3fm; // _MAT3
						case 0x8b5c: return setValue4fm; // _MAT4

						case 0x8b5e: return setValueT1; // SAMPLER_2D
						case 0x8b60: return setValueT6; // SAMPLER_CUBE

						case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
						case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
						case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
						case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

					}

				},

				// Array of scalars

				setValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },
				setValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },

				// Array of vectors (flat or from THREE classes)

				setValueV2a = function( gl, v ) {

					gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

				},

				setValueV3a = function( gl, v ) {

					gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

				},

				setValueV4a = function( gl, v ) {

					gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

				},

				// Array of matrices (flat or from THREE clases)

				setValueM2a = function( gl, v ) {

					gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

				},

				setValueM3a = function( gl, v ) {

					gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

				},

				setValueM4a = function( gl, v ) {

					gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

				},

				// Array of textures (2D / Cube)

				setValueT1a = function( gl, v, renderer ) {

					var n = v.length,
						units = allocTexUnits( renderer, n );

					gl.uniform1iv( this.addr, units );

					for ( var i = 0; i !== n; ++ i ) {

						renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

					}

				},

				setValueT6a = function( gl, v, renderer ) {

					var n = v.length,
						units = allocTexUnits( renderer, n );

					gl.uniform1iv( this.addr, units );

					for ( var i = 0; i !== n; ++ i ) {

						renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

					}

				},


				// Helper to pick the right setter for a pure (bottom-level) array

				getPureArraySetter = function( type ) {

					switch ( type ) {

						case 0x1406: return setValue1fv; // FLOAT
						case 0x8b50: return setValueV2a; // _VEC2
						case 0x8b51: return setValueV3a; // _VEC3
						case 0x8b52: return setValueV4a; // _VEC4

						case 0x8b5a: return setValueM2a; // _MAT2
						case 0x8b5b: return setValueM3a; // _MAT3
						case 0x8b5c: return setValueM4a; // _MAT4

						case 0x8b5e: return setValueT1a; // SAMPLER_2D
						case 0x8b60: return setValueT6a; // SAMPLER_CUBE

						case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
						case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
						case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
						case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

					}

				},

			// --- Uniform Classes ---

				SingleUniform = function SingleUniform( id, activeInfo, addr ) {

					this.id = id;
					this.addr = addr;
					this.setValue = getSingularSetter( activeInfo.type );

					// this.path = activeInfo.name; // DEBUG

				},

				PureArrayUniform = function( id, activeInfo, addr ) {

					this.id = id;
					this.addr = addr;
					this.size = activeInfo.size;
					this.setValue = getPureArraySetter( activeInfo.type );

					// this.path = activeInfo.name; // DEBUG

				},

				StructuredUniform = function( id ) {

					this.id = id;

					UniformContainer.call( this ); // mix-in

				};

			StructuredUniform.prototype.setValue = function( gl, value ) {

				// Note: Don't need an extra 'renderer' parameter, since samplers
				// are not allowed in structured uniforms.

				var seq = this.seq;

				for ( var i = 0, n = seq.length; i !== n; ++ i ) {

					var u = seq[ i ];
					u.setValue( gl, value[ u.id ] );

				}

			};

			// --- Top-level ---

			// Parser - builds up the property tree from the path strings

			var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g,
				// extracts
				// 	- the identifier (member name or array index)
				//  - followed by an optional right bracket (found when array index)
				//  - followed by an optional left bracket or dot (type of subscript)
				//
				// Note: These portions can be read in a non-overlapping fashion and
				// allow straightforward parsing of the hierarchy that WebGL encodes
				// in the uniform names.

				addUniform = function( container, uniformObject ) {

					container.seq.push( uniformObject );
					container.map[ uniformObject.id ] = uniformObject;

				},

				parseUniform = function( activeInfo, addr, container ) {

					var path = activeInfo.name,
						pathLength = path.length;

					// reset RegExp object, because of the early exit of a previous run
					RePathPart.lastIndex = 0;

					for (; ;) {

						var match = RePathPart.exec( path ),
							matchEnd = RePathPart.lastIndex,

							id = match[ 1 ],
							idIsIndex = match[ 2 ] === ']',
							subscript = match[ 3 ];

						if ( idIsIndex ) id = id | 0; // convert to integer

						if ( subscript === undefined ||
								subscript === '[' && matchEnd + 2 === pathLength ) {
							// bare name or "pure" bottom-level array "[0]" suffix

							addUniform( container, subscript === undefined ?
									new SingleUniform( id, activeInfo, addr ) :
									new PureArrayUniform( id, activeInfo, addr ) );

							break;

						} else {
							// step into inner node / create it in case it doesn't exist

							var map = container.map,
								next = map[ id ];

							if ( next === undefined ) {

								next = new StructuredUniform( id );
								addUniform( container, next );

							}

							container = next;

						}

					}

				},

			// Root Container

				WebGLUniforms = function WebGLUniforms( gl, program, renderer ) {

					UniformContainer.call( this );

					this.renderer = renderer;

					var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

					for ( var i = 0; i !== n; ++ i ) {

						var info = gl.getActiveUniform( program, i ),
							path = info.name,
							addr = gl.getUniformLocation( program, path );

						parseUniform( info, addr, this );

					}

				};


			WebGLUniforms.prototype.setValue = function( gl, name, value ) {

				var u = this.map[ name ];

				if ( u !== undefined ) u.setValue( gl, value, this.renderer );

			};

			WebGLUniforms.prototype.set = function( gl, object, name ) {

				var u = this.map[ name ];

				if ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );

			};

			WebGLUniforms.prototype.setOptional = function( gl, object, name ) {

				var v = object[ name ];

				if ( v !== undefined ) this.setValue( gl, name, v );

			};


			// Static interface

			WebGLUniforms.upload = function( gl, seq, values, renderer ) {

				for ( var i = 0, n = seq.length; i !== n; ++ i ) {

					var u = seq[ i ],
						v = values[ u.id ];

					if ( v.needsUpdate !== false ) {
						// note: always updating when .needsUpdate is undefined

						u.setValue( gl, v.value, renderer );

					}

				}

			};

			WebGLUniforms.seqWithValue = function( seq, values ) {

				var r = [];

				for ( var i = 0, n = seq.length; i !== n; ++ i ) {

					var u = seq[ i ];
					if ( u.id in values ) r.push( u );

				}

				return r;

			};

			WebGLUniforms.splitDynamic = function( seq, values ) {

				var r = null,
					n = seq.length,
					w = 0;

				for ( var i = 0; i !== n; ++ i ) {

					var u = seq[ i ],
						v = values[ u.id ];

					if ( v && v.dynamic === true ) {

						if ( r === null ) r = [];
						r.push( u );

					} else {

						// in-place compact 'seq', removing the matches
						if ( w < i ) seq[ w ] = u;
						++ w;

					}

				}

				if ( w < n ) seq.length = w;

				return r;

			};

			WebGLUniforms.evalDynamic = function( seq, values, object, camera ) {

				for ( var i = 0, n = seq.length; i !== n; ++ i ) {

					var v = values[ seq[ i ].id ],
						f = v.onUpdateCallback;

					if ( f !== undefined ) f.call( v, object, camera );

				}

			};

			return WebGLUniforms;

		} )();

		// File:src/renderers/webgl/plugins/LensFlarePlugin.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.LensFlarePlugin = function ( renderer, flares ) {

			var gl = renderer.context;
			var state = renderer.state;

			var vertexBuffer, elementBuffer;
			var shader, program, attributes, uniforms;

			var tempTexture, occlusionTexture;

			function init() {

				var vertices = new Float32Array( [
					- 1, - 1,  0, 0,
					 1, - 1,  1, 0,
					 1,  1,  1, 1,
					- 1,  1,  0, 1
				] );

				var faces = new Uint16Array( [
					0, 1, 2,
					0, 2, 3
				] );

				// buffers

				vertexBuffer     = gl.createBuffer();
				elementBuffer    = gl.createBuffer();

				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
				gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

				// textures

				tempTexture      = gl.createTexture();
				occlusionTexture = gl.createTexture();

				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

				shader = {

					vertexShader: [

						"uniform lowp int renderType;",

						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",

						"uniform sampler2D occlusionMap;",

						"attribute vec2 position;",
						"attribute vec2 uv;",

						"varying vec2 vUV;",
						"varying float vVisibility;",

						"void main() {",

							"vUV = uv;",

							"vec2 pos = position;",

							"if ( renderType == 2 ) {",

								"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

								"vVisibility =        visibility.r / 9.0;",
								"vVisibility *= 1.0 - visibility.g / 9.0;",
								"vVisibility *=       visibility.b / 9.0;",
								"vVisibility *= 1.0 - visibility.a / 9.0;",

								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

							"}",

							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

						"}"

					].join( "\n" ),

					fragmentShader: [

						"uniform lowp int renderType;",

						"uniform sampler2D map;",
						"uniform float opacity;",
						"uniform vec3 color;",

						"varying vec2 vUV;",
						"varying float vVisibility;",

						"void main() {",

							// pink square

							"if ( renderType == 0 ) {",

								"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

							// restore

							"} else if ( renderType == 1 ) {",

								"gl_FragColor = texture2D( map, vUV );",

							// flare

							"} else {",

								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * vVisibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",

							"}",

						"}"

					].join( "\n" )

				};

				program = createProgram( shader );

				attributes = {
					vertex: gl.getAttribLocation ( program, "position" ),
					uv:     gl.getAttribLocation ( program, "uv" )
				};

				uniforms = {
					renderType:     gl.getUniformLocation( program, "renderType" ),
					map:            gl.getUniformLocation( program, "map" ),
					occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
					opacity:        gl.getUniformLocation( program, "opacity" ),
					color:          gl.getUniformLocation( program, "color" ),
					scale:          gl.getUniformLocation( program, "scale" ),
					rotation:       gl.getUniformLocation( program, "rotation" ),
					screenPosition: gl.getUniformLocation( program, "screenPosition" )
				};

			}

			/*
			 * Render lens flares
			 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
			 *         reads these back and calculates occlusion.
			 */

			this.render = function ( scene, camera, viewport ) {

				if ( flares.length === 0 ) return;

				var tempPosition = new THREE.Vector3();

				var invAspect = viewport.w / viewport.z,
					halfViewportWidth = viewport.z * 0.5,
					halfViewportHeight = viewport.w * 0.5;

				var size = 16 / viewport.w,
					scale = new THREE.Vector2( size * invAspect, size );

				var screenPosition = new THREE.Vector3( 1, 1, 0 ),
					screenPositionPixels = new THREE.Vector2( 1, 1 );

				var validArea = new THREE.Box2();

				validArea.min.set( 0, 0 );
				validArea.max.set( viewport.z - 16, viewport.w - 16 );

				if ( program === undefined ) {

					init();

				}

				gl.useProgram( program );

				state.initAttributes();
				state.enableAttribute( attributes.vertex );
				state.enableAttribute( attributes.uv );
				state.disableUnusedAttributes();

				// loop through all lens flares to update their occlusion and positions
				// setup gl and common used attribs/uniforms

				gl.uniform1i( uniforms.occlusionMap, 0 );
				gl.uniform1i( uniforms.map, 1 );

				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
				gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

				state.disable( gl.CULL_FACE );
				state.setDepthWrite( false );

				for ( var i = 0, l = flares.length; i < l; i ++ ) {

					size = 16 / viewport.w;
					scale.set( size * invAspect, size );

					// calc object screen position

					var flare = flares[ i ];

					tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

					tempPosition.applyMatrix4( camera.matrixWorldInverse );
					tempPosition.applyProjection( camera.projectionMatrix );

					// setup arrays for gl programs

					screenPosition.copy( tempPosition );

					// horizontal and vertical coordinate of the lower left corner of the pixels to copy

					screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
					screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

					// screen cull

					if ( validArea.containsPoint( screenPositionPixels ) === true ) {

						// save current RGB to temp texture

						state.activeTexture( gl.TEXTURE0 );
						state.bindTexture( gl.TEXTURE_2D, null );
						state.activeTexture( gl.TEXTURE1 );
						state.bindTexture( gl.TEXTURE_2D, tempTexture );
						gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


						// render pink quad

						gl.uniform1i( uniforms.renderType, 0 );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

						state.disable( gl.BLEND );
						state.enable( gl.DEPTH_TEST );

						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


						// copy result to occlusionMap

						state.activeTexture( gl.TEXTURE0 );
						state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
						gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


						// restore graphics

						gl.uniform1i( uniforms.renderType, 1 );
						state.disable( gl.DEPTH_TEST );

						state.activeTexture( gl.TEXTURE1 );
						state.bindTexture( gl.TEXTURE_2D, tempTexture );
						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


						// update object positions

						flare.positionScreen.copy( screenPosition );

						if ( flare.customUpdateCallback ) {

							flare.customUpdateCallback( flare );

						} else {

							flare.updateLensFlares();

						}

						// render flares

						gl.uniform1i( uniforms.renderType, 2 );
						state.enable( gl.BLEND );

						for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

							var sprite = flare.lensFlares[ j ];

							if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

								screenPosition.x = sprite.x;
								screenPosition.y = sprite.y;
								screenPosition.z = sprite.z;

								size = sprite.size * sprite.scale / viewport.w;

								scale.x = size * invAspect;
								scale.y = size;

								gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
								gl.uniform2f( uniforms.scale, scale.x, scale.y );
								gl.uniform1f( uniforms.rotation, sprite.rotation );

								gl.uniform1f( uniforms.opacity, sprite.opacity );
								gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

								state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
								renderer.setTexture2D( sprite.texture, 1 );

								gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

							}

						}

					}

				}

				// restore gl

				state.enable( gl.CULL_FACE );
				state.enable( gl.DEPTH_TEST );
				state.setDepthWrite( true );

				renderer.resetGLState();

			};

			function createProgram ( shader ) {

				var program = gl.createProgram();

				var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
				var vertexShader = gl.createShader( gl.VERTEX_SHADER );

				var prefix = "precision " + renderer.getPrecision() + " float;\n";

				gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
				gl.shaderSource( vertexShader, prefix + shader.vertexShader );

				gl.compileShader( fragmentShader );
				gl.compileShader( vertexShader );

				gl.attachShader( program, fragmentShader );
				gl.attachShader( program, vertexShader );

				gl.linkProgram( program );

				return program;

			}

		};

		// File:src/renderers/webgl/plugins/SpritePlugin.js

		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.SpritePlugin = function ( renderer, sprites ) {

			var gl = renderer.context;
			var state = renderer.state;

			var vertexBuffer, elementBuffer;
			var program, attributes, uniforms;

			var texture;

			// decompose matrixWorld

			var spritePosition = new THREE.Vector3();
			var spriteRotation = new THREE.Quaternion();
			var spriteScale = new THREE.Vector3();

			function init() {

				var vertices = new Float32Array( [
					- 0.5, - 0.5,  0, 0,
					  0.5, - 0.5,  1, 0,
					  0.5,   0.5,  1, 1,
					- 0.5,   0.5,  0, 1
				] );

				var faces = new Uint16Array( [
					0, 1, 2,
					0, 2, 3
				] );

				vertexBuffer  = gl.createBuffer();
				elementBuffer = gl.createBuffer();

				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
				gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

				program = createProgram();

				attributes = {
					position:			gl.getAttribLocation ( program, 'position' ),
					uv:					gl.getAttribLocation ( program, 'uv' )
				};

				uniforms = {
					uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
					uvScale:			gl.getUniformLocation( program, 'uvScale' ),

					rotation:			gl.getUniformLocation( program, 'rotation' ),
					scale:				gl.getUniformLocation( program, 'scale' ),

					color:				gl.getUniformLocation( program, 'color' ),
					map:				gl.getUniformLocation( program, 'map' ),
					opacity:			gl.getUniformLocation( program, 'opacity' ),

					modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
					projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

					fogType:			gl.getUniformLocation( program, 'fogType' ),
					fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
					fogNear:			gl.getUniformLocation( program, 'fogNear' ),
					fogFar:				gl.getUniformLocation( program, 'fogFar' ),
					fogColor:			gl.getUniformLocation( program, 'fogColor' ),

					alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
				};

				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = 8;
				canvas.height = 8;

				var context = canvas.getContext( '2d' );
				context.fillStyle = 'white';
				context.fillRect( 0, 0, 8, 8 );

				texture = new THREE.Texture( canvas );
				texture.needsUpdate = true;

			}

			this.render = function ( scene, camera ) {

				if ( sprites.length === 0 ) return;

				// setup gl

				if ( program === undefined ) {

					init();

				}

				gl.useProgram( program );

				state.initAttributes();
				state.enableAttribute( attributes.position );
				state.enableAttribute( attributes.uv );
				state.disableUnusedAttributes();

				state.disable( gl.CULL_FACE );
				state.enable( gl.BLEND );

				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
				gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

				gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

				state.activeTexture( gl.TEXTURE0 );
				gl.uniform1i( uniforms.map, 0 );

				var oldFogType = 0;
				var sceneFogType = 0;
				var fog = scene.fog;

				if ( fog ) {

					gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

					if ( fog instanceof THREE.Fog ) {

						gl.uniform1f( uniforms.fogNear, fog.near );
						gl.uniform1f( uniforms.fogFar, fog.far );

						gl.uniform1i( uniforms.fogType, 1 );
						oldFogType = 1;
						sceneFogType = 1;

					} else if ( fog instanceof THREE.FogExp2 ) {

						gl.uniform1f( uniforms.fogDensity, fog.density );

						gl.uniform1i( uniforms.fogType, 2 );
						oldFogType = 2;
						sceneFogType = 2;

					}

				} else {

					gl.uniform1i( uniforms.fogType, 0 );
					oldFogType = 0;
					sceneFogType = 0;

				}


				// update positions and sort

				for ( var i = 0, l = sprites.length; i < l; i ++ ) {

					var sprite = sprites[ i ];

					sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
					sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

				}

				sprites.sort( painterSortStable );

				// render all sprites

				var scale = [];

				for ( var i = 0, l = sprites.length; i < l; i ++ ) {

					var sprite = sprites[ i ];
					var material = sprite.material;

					if ( material.visible === false ) continue;

					gl.uniform1f( uniforms.alphaTest, material.alphaTest );
					gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

					sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

					scale[ 0 ] = spriteScale.x;
					scale[ 1 ] = spriteScale.y;

					var fogType = 0;

					if ( scene.fog && material.fog ) {

						fogType = sceneFogType;

					}

					if ( oldFogType !== fogType ) {

						gl.uniform1i( uniforms.fogType, fogType );
						oldFogType = fogType;

					}

					if ( material.map !== null ) {

						gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
						gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

					} else {

						gl.uniform2f( uniforms.uvOffset, 0, 0 );
						gl.uniform2f( uniforms.uvScale, 1, 1 );

					}

					gl.uniform1f( uniforms.opacity, material.opacity );
					gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

					gl.uniform1f( uniforms.rotation, material.rotation );
					gl.uniform2fv( uniforms.scale, scale );

					state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
					state.setDepthTest( material.depthTest );
					state.setDepthWrite( material.depthWrite );

					if ( material.map ) {

						renderer.setTexture2D( material.map, 0 );

					} else {

						renderer.setTexture2D( texture, 0 );

					}

					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

				}

				// restore gl

				state.enable( gl.CULL_FACE );

				renderer.resetGLState();

			};

			function createProgram () {

				var program = gl.createProgram();

				var vertexShader = gl.createShader( gl.VERTEX_SHADER );
				var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

				gl.shaderSource( vertexShader, [

					'precision ' + renderer.getPrecision() + ' float;',

					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform float rotation;',
					'uniform vec2 scale;',
					'uniform vec2 uvOffset;',
					'uniform vec2 uvScale;',

					'attribute vec2 position;',
					'attribute vec2 uv;',

					'varying vec2 vUV;',

					'void main() {',

						'vUV = uvOffset + uv * uvScale;',

						'vec2 alignedPosition = position * scale;',

						'vec2 rotatedPosition;',
						'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
						'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

						'vec4 finalPosition;',

						'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
						'finalPosition.xy += rotatedPosition;',
						'finalPosition = projectionMatrix * finalPosition;',

						'gl_Position = finalPosition;',

					'}'

				].join( '\n' ) );

				gl.shaderSource( fragmentShader, [

					'precision ' + renderer.getPrecision() + ' float;',

					'uniform vec3 color;',
					'uniform sampler2D map;',
					'uniform float opacity;',

					'uniform int fogType;',
					'uniform vec3 fogColor;',
					'uniform float fogDensity;',
					'uniform float fogNear;',
					'uniform float fogFar;',
					'uniform float alphaTest;',

					'varying vec2 vUV;',

					'void main() {',

						'vec4 texture = texture2D( map, vUV );',

						'if ( texture.a < alphaTest ) discard;',

						'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

						'if ( fogType > 0 ) {',

							'float depth = gl_FragCoord.z / gl_FragCoord.w;',
							'float fogFactor = 0.0;',

							'if ( fogType == 1 ) {',

								'fogFactor = smoothstep( fogNear, fogFar, depth );',

							'} else {',

								'const float LOG2 = 1.442695;',
								'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
								'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

							'}',

							'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

						'}',

					'}'

				].join( '\n' ) );

				gl.compileShader( vertexShader );
				gl.compileShader( fragmentShader );

				gl.attachShader( program, vertexShader );
				gl.attachShader( program, fragmentShader );

				gl.linkProgram( program );

				return program;

			}

			function painterSortStable ( a, b ) {

				if ( a.renderOrder !== b.renderOrder ) {

					return a.renderOrder - b.renderOrder;

				} else if ( a.z !== b.z ) {

					return b.z - a.z;

				} else {

					return b.id - a.id;

				}

			}

		};

		// File:src/Three.Legacy.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		Object.assign( THREE, {
			Face4: function ( a, b, c, d, normal, color, materialIndex ) {
				console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
				return new THREE.Face3( a, b, c, normal, color, materialIndex );
			},
			LineStrip: 0,
			LinePieces: 1,
			MeshFaceMaterial: THREE.MultiMaterial,
			PointCloud: function ( geometry, material ) {
				console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
				return new THREE.Points( geometry, material );
			},
			Particle: THREE.Sprite,
			ParticleSystem: function ( geometry, material ) {
				console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
				return new THREE.Points( geometry, material );
			},
			PointCloudMaterial: function ( parameters ) {
				console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			},
			ParticleBasicMaterial: function ( parameters ) {
				console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			},
			ParticleSystemMaterial: function ( parameters ) {
				console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
				return new THREE.PointsMaterial( parameters );
			},
			Vertex: function ( x, y, z ) {
				console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
				return new THREE.Vector3( x, y, z );
			}
		} );

		//

		Object.assign( THREE.Box2.prototype, {
			empty: function () {
				console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
			},
			isIntersectionBox: function ( box ) {
				console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			}
		} );

		Object.assign( THREE.Box3.prototype, {
			empty: function () {
				console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
			},
			isIntersectionBox: function ( box ) {
				console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			},
			isIntersectionSphere: function ( sphere ) {
				console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
			}
		} );

		Object.assign( THREE.Matrix3.prototype, {
			multiplyVector3: function ( vector ) {
				console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
				return vector.applyMatrix3( this );
			},
			multiplyVector3Array: function ( a ) {
				console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
				return this.applyToVector3Array( a );
			}
		} );

		Object.assign( THREE.Matrix4.prototype, {
			extractPosition: function ( m ) {
				console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
				return this.copyPosition( m );
			},
			setRotationFromQuaternion: function ( q ) {
				console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
				return this.makeRotationFromQuaternion( q );
			},
			multiplyVector3: function ( vector ) {
				console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
				return vector.applyProjection( this );
			},
			multiplyVector4: function ( vector ) {
				console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
			},
			multiplyVector3Array: function ( a ) {
				console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
				return this.applyToVector3Array( a );
			},
			rotateAxis: function ( v ) {
				console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
				v.transformDirection( this );
			},
			crossVector: function ( vector ) {
				console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
			},
			translate: function ( v ) {
				console.error( 'THREE.Matrix4: .translate() has been removed.' );
			},
			rotateX: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
			},
			rotateY: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
			},
			rotateZ: function ( angle ) {
				console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
			},
			rotateByAxis: function ( axis, angle ) {
				console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
			}
		} );

		Object.assign( THREE.Plane.prototype, {
			isIntersectionLine: function ( line ) {
				console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
				return this.intersectsLine( line );
			}
		} );

		Object.assign( THREE.Quaternion.prototype, {
			multiplyVector3: function ( vector ) {
				console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
				return vector.applyQuaternion( this );
			}
		} );

		Object.assign( THREE.Ray.prototype, {
			isIntersectionBox: function ( box ) {
				console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
			},
			isIntersectionPlane: function ( plane ) {
				console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
				return this.intersectsPlane( plane );
			},
			isIntersectionSphere: function ( sphere ) {
				console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
			}
		} );

		Object.assign( THREE.Vector3.prototype, {
			setEulerFromRotationMatrix: function () {
				console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
			},
			setEulerFromQuaternion: function () {
				console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
			},
			getPositionFromMatrix: function ( m ) {
				console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
				return this.setFromMatrixPosition( m );
			},
			getScaleFromMatrix: function ( m ) {
				console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
				return this.setFromMatrixScale( m );
			},
			getColumnFromMatrix: function ( index, matrix ) {
				console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
				return this.setFromMatrixColumn( matrix, index );
			}
		} );

		//

		Object.assign( THREE.Object3D.prototype, {
			getChildByName: function ( name ) {
				console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
				return this.getObjectByName( name );
			},
			renderDepth: function ( value ) {
				console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
			},
			translate: function ( distance, axis ) {
				console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
				return this.translateOnAxis( axis, distance );
			}
		} );

		Object.defineProperties( THREE.Object3D.prototype, {
			eulerOrder: {
				get: function () {
					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					return this.rotation.order;
				},
				set: function ( value ) {
					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					this.rotation.order = value;
				}
			},
			useQuaternion: {
				get: function () {
					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
				},
				set: function ( value ) {
					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
				}
			}
		} );

		Object.defineProperties( THREE.LOD.prototype, {
			objects: {
				get: function () {
					console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
					return this.levels;
				}
			}
		} );

		//

		THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

			console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
					"Use .setFocalLength and .filmGauge for a photographic setup." );

			if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
			this.setFocalLength( focalLength );

		};

		//

		Object.defineProperties( THREE.Light.prototype, {
			onlyShadow: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .onlyShadow has been removed.' );
				}
			},
			shadowCameraFov: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
					this.shadow.camera.fov = value;
				}
			},
			shadowCameraLeft: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
					this.shadow.camera.left = value;
				}
			},
			shadowCameraRight: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
					this.shadow.camera.right = value;
				}
			},
			shadowCameraTop: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
					this.shadow.camera.top = value;
				}
			},
			shadowCameraBottom: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
					this.shadow.camera.bottom = value;
				}
			},
			shadowCameraNear: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
					this.shadow.camera.near = value;
				}
			},
			shadowCameraFar: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
					this.shadow.camera.far = value;
				}
			},
			shadowCameraVisible: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
				}
			},
			shadowBias: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
					this.shadow.bias = value;
				}
			},
			shadowDarkness: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
				}
			},
			shadowMapWidth: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
					this.shadow.mapSize.width = value;
				}
			},
			shadowMapHeight: {
				set: function ( value ) {
					console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
					this.shadow.mapSize.height = value;
				}
			}
		} );

		//

		Object.defineProperties( THREE.BufferAttribute.prototype, {
			length: {
				get: function () {
					console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
					return this.array.length;
				}
			}
		} );

		Object.assign( THREE.BufferGeometry.prototype, {
			addIndex: function ( index ) {
				console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
				this.setIndex( index );
			},
			addDrawCall: function ( start, count, indexOffset ) {
				if ( indexOffset !== undefined ) {
					console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
				}
				console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
				this.addGroup( start, count );
			},
			clearDrawCalls: function () {
				console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
				this.clearGroups();
			},
			computeTangents: function () {
				console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
			},
			computeOffsets: function () {
				console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
			}
		} );

		Object.defineProperties( THREE.BufferGeometry.prototype, {
			drawcalls: {
				get: function () {
					console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
					return this.groups;
				}
			},
			offsets: {
				get: function () {
					console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
					return this.groups;
				}
			}
		} );

		//

		Object.defineProperties( THREE.Material.prototype, {
			wrapAround: {
				get: function () {
					console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
				},
				set: function ( value ) {
					console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
				}
			},
			wrapRGB: {
				get: function () {
					console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
					return new THREE.Color();
				}
			}
		} );

		Object.defineProperties( THREE.MeshPhongMaterial.prototype, {
			metal: {
				get: function () {
					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
					return false;
				},
				set: function ( value ) {
					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
				}
			}
		} );

		Object.defineProperties( THREE.ShaderMaterial.prototype, {
			derivatives: {
				get: function () {
					console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					return this.extensions.derivatives;
				},
				set: function ( value ) {
					console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					this.extensions.derivatives = value;
				}
			}
		} );

		//

		THREE.EventDispatcher.prototype = Object.assign( Object.create( {

			// Note: Extra base ensures these properties are not 'assign'ed.

			constructor: THREE.EventDispatcher,

			apply: function ( target ) {

				console.warn( "THREE.EventDispatcher: .apply is deprecated, " +
						"just inherit or Object.assign the prototype to mix-in." );

				Object.assign( target, this );

			}

		} ), THREE.EventDispatcher.prototype );

		//

		Object.assign( THREE.WebGLRenderer.prototype, {
			supportsFloatTextures: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
				return this.extensions.get( 'OES_texture_float' );
			},
			supportsHalfFloatTextures: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
				return this.extensions.get( 'OES_texture_half_float' );
			},
			supportsStandardDerivatives: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
				return this.extensions.get( 'OES_standard_derivatives' );
			},
			supportsCompressedTextureS3TC: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
			},
			supportsCompressedTexturePVRTC: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
			},
			supportsBlendMinMax: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
				return this.extensions.get( 'EXT_blend_minmax' );
			},
			supportsVertexTextures: function () {
				return this.capabilities.vertexTextures;
			},
			supportsInstancedArrays: function () {
				console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
				return this.extensions.get( 'ANGLE_instanced_arrays' );
			},
			enableScissorTest: function ( boolean ) {
				console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
				this.setScissorTest( boolean );
			},
			initMaterial: function () {
				console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
			},
			addPrePlugin: function () {
				console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
			},
			addPostPlugin: function () {
				console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
			},
			updateShadowMap: function () {
				console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
			}
		} );

		Object.defineProperties( THREE.WebGLRenderer.prototype, {
			shadowMapEnabled: {
				get: function () {
					return this.shadowMap.enabled;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
					this.shadowMap.enabled = value;
				}
			},
			shadowMapType: {
				get: function () {
					return this.shadowMap.type;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
					this.shadowMap.type = value;
				}
			},
			shadowMapCullFace: {
				get: function () {
					return this.shadowMap.cullFace;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
					this.shadowMap.cullFace = value;
				}
			}
		} );

		Object.defineProperties( THREE.WebGLShadowMap.prototype, {
			cullFace: {
				get: function () {
					return this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;
				},
				set: function ( cullFace ) {
					var value = ( cullFace !== THREE.CullFaceBack );
					console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
					this.renderReverseSided = value;
				}
			}
		} );

		//

		Object.defineProperties( THREE.WebGLRenderTarget.prototype, {
			wrapS: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					return this.texture.wrapS;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					this.texture.wrapS = value;
				}
			},
			wrapT: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					return this.texture.wrapT;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					this.texture.wrapT = value;
				}
			},
			magFilter: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					return this.texture.magFilter;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					this.texture.magFilter = value;
				}
			},
			minFilter: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					return this.texture.minFilter;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					this.texture.minFilter = value;
				}
			},
			anisotropy: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					return this.texture.anisotropy;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					this.texture.anisotropy = value;
				}
			},
			offset: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					return this.texture.offset;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					this.texture.offset = value;
				}
			},
			repeat: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					return this.texture.repeat;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					this.texture.repeat = value;
				}
			},
			format: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					return this.texture.format;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					this.texture.format = value;
				}
			},
			type: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					return this.texture.type;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					this.texture.type = value;
				}
			},
			generateMipmaps: {
				get: function () {
					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					return this.texture.generateMipmaps;
				},
				set: function ( value ) {
					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					this.texture.generateMipmaps = value;
				}
			}
		} );

		//

		Object.assign( THREE.Audio.prototype, {
			load: function ( file ) {
				console.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );
				var scope = this;
				var audioLoader = new THREE.AudioLoader();
				audioLoader.load( file, function ( buffer ) {
					scope.setBuffer( buffer );
				} );
				return this;
			}
		} );

		Object.assign( THREE.AudioAnalyser.prototype, {
			getData: function ( file ) {
				console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
				return this.getFrequencyData();
			}
		} );

		//

		THREE.GeometryUtils = {

			merge: function ( geometry1, geometry2, materialIndexOffset ) {

				console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

				var matrix;

				if ( geometry2 instanceof THREE.Mesh ) {

					geometry2.matrixAutoUpdate && geometry2.updateMatrix();

					matrix = geometry2.matrix;
					geometry2 = geometry2.geometry;

				}

				geometry1.merge( geometry2, matrix, materialIndexOffset );

			},

			center: function ( geometry ) {

				console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
				return geometry.center();

			}

		};

		THREE.ImageUtils = {

			crossOrigin: undefined,

			loadTexture: function ( url, mapping, onLoad, onError ) {

				console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

				var loader = new THREE.TextureLoader();
				loader.setCrossOrigin( this.crossOrigin );

				var texture = loader.load( url, onLoad, undefined, onError );

				if ( mapping ) texture.mapping = mapping;

				return texture;

			},

			loadTextureCube: function ( urls, mapping, onLoad, onError ) {

				console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

				var loader = new THREE.CubeTextureLoader();
				loader.setCrossOrigin( this.crossOrigin );

				var texture = loader.load( urls, onLoad, undefined, onError );

				if ( mapping ) texture.mapping = mapping;

				return texture;

			},

			loadCompressedTexture: function () {

				console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

			},

			loadCompressedTextureCube: function () {

				console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

			}

		};

		//

		THREE.Projector = function () {

			console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );

			this.projectVector = function ( vector, camera ) {

				console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
				vector.project( camera );

			};

			this.unprojectVector = function ( vector, camera ) {

				console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
				vector.unproject( camera );

			};

			this.pickingRay = function ( vector, camera ) {

				console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

			};

		};

		//

		THREE.CanvasRenderer = function () {

			console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );

			this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			this.clear = function () {};
			this.render = function () {};
			this.setClearColor = function () {};
			this.setSize = function () {};

		};

		// File:src/extras/CurveUtils.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */

		THREE.CurveUtils = {

			tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

				return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

			},

			// Puay Bing, thanks for helping with this derivative!

			tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {

				return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
					3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
					6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
					3 * t * t * p3;

			},

			tangentSpline: function ( t, p0, p1, p2, p3 ) {

				// To check if my formulas are correct

				var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 â 3t^2 + 1
				var h10 = 3 * t * t - 4 * t + 1; // t^3 â 2t^2 + t
				var h01 = - 6 * t * t + 6 * t; 	// â 2t3 + 3t2
				var h11 = 3 * t * t - 2 * t;	// t3 â t2

				return h00 + h10 + h01 + h11;

			},

			// Catmull-Rom

			interpolate: function( p0, p1, p2, p3, t ) {

				var v0 = ( p2 - p0 ) * 0.5;
				var v1 = ( p3 - p1 ) * 0.5;
				var t2 = t * t;
				var t3 = t * t2;
				return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

			}

		};

		// File:src/extras/SceneUtils.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.SceneUtils = {

			createMultiMaterialObject: function ( geometry, materials ) {

				var group = new THREE.Group();

				for ( var i = 0, l = materials.length; i < l; i ++ ) {

					group.add( new THREE.Mesh( geometry, materials[ i ] ) );

				}

				return group;

			},

			detach: function ( child, parent, scene ) {

				child.applyMatrix( parent.matrixWorld );
				parent.remove( child );
				scene.add( child );

			},

			attach: function ( child, scene, parent ) {

				var matrixWorldInverse = new THREE.Matrix4();
				matrixWorldInverse.getInverse( parent.matrixWorld );
				child.applyMatrix( matrixWorldInverse );

				scene.remove( child );
				parent.add( child );

			}

		};

		// File:src/extras/ShapeUtils.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */

		THREE.ShapeUtils = {

			// calculate area of the contour polygon

			area: function ( contour ) {

				var n = contour.length;
				var a = 0.0;

				for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

					a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

				}

				return a * 0.5;

			},

			triangulate: ( function () {

				/**
				 * This code is a quick port of code written in C++ which was submitted to
				 * flipcode.com by John W. Ratcliff  // July 22, 2000
				 * See original code and more information here:
				 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
				 *
				 * ported to actionscript by Zevan Rosser
				 * www.actionsnippet.com
				 *
				 * ported to javascript by Joshua Koo
				 * http://www.lab4games.net/zz85/blog
				 *
				 */

				function snip( contour, u, v, w, n, verts ) {

					var p;
					var ax, ay, bx, by;
					var cx, cy, px, py;

					ax = contour[ verts[ u ] ].x;
					ay = contour[ verts[ u ] ].y;

					bx = contour[ verts[ v ] ].x;
					by = contour[ verts[ v ] ].y;

					cx = contour[ verts[ w ] ].x;
					cy = contour[ verts[ w ] ].y;

					if ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;

					var aX, aY, bX, bY, cX, cY;
					var apx, apy, bpx, bpy, cpx, cpy;
					var cCROSSap, bCROSScp, aCROSSbp;

					aX = cx - bx;  aY = cy - by;
					bX = ax - cx;  bY = ay - cy;
					cX = bx - ax;  cY = by - ay;

					for ( p = 0; p < n; p ++ ) {

						px = contour[ verts[ p ] ].x;
						py = contour[ verts[ p ] ].y;

						if ( ( ( px === ax ) && ( py === ay ) ) ||
							 ( ( px === bx ) && ( py === by ) ) ||
							 ( ( px === cx ) && ( py === cy ) ) )	continue;

						apx = px - ax;  apy = py - ay;
						bpx = px - bx;  bpy = py - by;
						cpx = px - cx;  cpy = py - cy;

						// see if p is inside triangle abc

						aCROSSbp = aX * bpy - aY * bpx;
						cCROSSap = cX * apy - cY * apx;
						bCROSScp = bX * cpy - bY * cpx;

						if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

					}

					return true;

				}

				// takes in an contour array and returns

				return function triangulate( contour, indices ) {

					var n = contour.length;

					if ( n < 3 ) return null;

					var result = [],
						verts = [],
						vertIndices = [];

					/* we want a counter-clockwise polygon in verts */

					var u, v, w;

					if ( THREE.ShapeUtils.area( contour ) > 0.0 ) {

						for ( v = 0; v < n; v ++ ) verts[ v ] = v;

					} else {

						for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

					}

					var nv = n;

					/*  remove nv - 2 vertices, creating 1 triangle every time */

					var count = 2 * nv;   /* error detection */

					for ( v = nv - 1; nv > 2; ) {

						/* if we loop, it is probably a non-simple polygon */

						if ( ( count -- ) <= 0 ) {

							//** Triangulate: ERROR - probable bad polygon!

							//throw ( "Warning, unable to triangulate polygon!" );
							//return null;
							// Sometimes warning is fine, especially polygons are triangulated in reverse.
							console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

							if ( indices ) return vertIndices;
							return result;

						}

						/* three consecutive vertices in current polygon, <u,v,w> */

						u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
						v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
						w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

						if ( snip( contour, u, v, w, nv, verts ) ) {

							var a, b, c, s, t;

							/* true names of the vertices */

							a = verts[ u ];
							b = verts[ v ];
							c = verts[ w ];

							/* output Triangle */

							result.push( [ contour[ a ],
								contour[ b ],
								contour[ c ] ] );


							vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

							/* remove v from the remaining polygon */

							for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

								verts[ s ] = verts[ t ];

							}

							nv --;

							/* reset error detection counter */

							count = 2 * nv;

						}

					}

					if ( indices ) return vertIndices;
					return result;

				}

			} )(),

			triangulateShape: function ( contour, holes ) {

				function removeDupEndPts(points) {

					var l = points.length;

					if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

						points.pop();

					}

				}

				removeDupEndPts( contour );
				holes.forEach( removeDupEndPts );

				function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

					// inOtherPt needs to be collinear to the inSegment
					if ( inSegPt1.x !== inSegPt2.x ) {

						if ( inSegPt1.x < inSegPt2.x ) {

							return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

						} else {

							return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

						}

					} else {

						if ( inSegPt1.y < inSegPt2.y ) {

							return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

						} else {

							return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

						}

					}

				}

				function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

					var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
					var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

					var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
					var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

					var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
					var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

					if ( Math.abs( limit ) > Number.EPSILON ) {

						// not parallel

						var perpSeg2;
						if ( limit > 0 ) {

							if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
							perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
							if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

						} else {

							if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
							perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
							if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

						}

						// i.e. to reduce rounding errors
						// intersection at endpoint of segment#1?
						if ( perpSeg2 === 0 ) {

							if ( ( inExcludeAdjacentSegs ) &&
								 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
							return [ inSeg1Pt1 ];

						}
						if ( perpSeg2 === limit ) {

							if ( ( inExcludeAdjacentSegs ) &&
								 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
							return [ inSeg1Pt2 ];

						}
						// intersection at endpoint of segment#2?
						if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
						if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

						// return real intersection point
						var factorSeg1 = perpSeg2 / limit;
						return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
									y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

					} else {

						// parallel or collinear
						if ( ( perpSeg1 !== 0 ) ||
							 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

						// they are collinear or degenerate
						var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
						var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
						// both segments are points
						if ( seg1Pt && seg2Pt ) {

							if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
								 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
							return [ inSeg1Pt1 ];                 						// they are the same point

						}
						// segment#1  is a single point
						if ( seg1Pt ) {

							if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
							return [ inSeg1Pt1 ];

						}
						// segment#2  is a single point
						if ( seg2Pt ) {

							if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
							return [ inSeg2Pt1 ];

						}

						// they are collinear segments, which might overlap
						var seg1min, seg1max, seg1minVal, seg1maxVal;
						var seg2min, seg2max, seg2minVal, seg2maxVal;
						if ( seg1dx !== 0 ) {

							// the segments are NOT on a vertical line
							if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

								seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
								seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

							} else {

								seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
								seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

							}
							if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

								seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
								seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

							} else {

								seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
								seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

							}

						} else {

							// the segments are on a vertical line
							if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

								seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
								seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

							} else {

								seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
								seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

							}
							if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

								seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
								seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

							} else {

								seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
								seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

							}

						}
						if ( seg1minVal <= seg2minVal ) {

							if ( seg1maxVal <  seg2minVal )	return [];
							if ( seg1maxVal === seg2minVal )	{

								if ( inExcludeAdjacentSegs )		return [];
								return [ seg2min ];

							}
							if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
							return	[ seg2min, seg2max ];

						} else {

							if ( seg1minVal >  seg2maxVal )	return [];
							if ( seg1minVal === seg2maxVal )	{

								if ( inExcludeAdjacentSegs )		return [];
								return [ seg1min ];

							}
							if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
							return	[ seg1min, seg2max ];

						}

					}

				}

				function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

					// The order of legs is important

					// translation of all points, so that Vertex is at (0,0)
					var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
					var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
					var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

					// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
					var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
					var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

					if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

						// angle != 180 deg.

						var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
						// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

						if ( from2toAngle > 0 ) {

							// main angle < 180 deg.
							return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

						} else {

							// main angle > 180 deg.
							return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

						}

					} else {

						// angle == 180 deg.
						// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
						return	( from2otherAngle > 0 );

					}

				}


				function removeHoles( contour, holes ) {

					var shape = contour.concat(); // work on this shape
					var hole;

					function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

						// Check if hole point lies within angle around shape point
						var lastShapeIdx = shape.length - 1;

						var prevShapeIdx = inShapeIdx - 1;
						if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

						var nextShapeIdx = inShapeIdx + 1;
						if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

						var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
						if ( ! insideAngle ) {

							// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
							return	false;

						}

						// Check if shape point lies within angle around hole point
						var lastHoleIdx = hole.length - 1;

						var prevHoleIdx = inHoleIdx - 1;
						if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

						var nextHoleIdx = inHoleIdx + 1;
						if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

						insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
						if ( ! insideAngle ) {

							// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
							return	false;

						}

						return	true;

					}

					function intersectsShapeEdge( inShapePt, inHolePt ) {

						// checks for intersections with shape edges
						var sIdx, nextIdx, intersection;
						for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

							nextIdx = sIdx + 1; nextIdx %= shape.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;

						}

						return	false;

					}

					var indepHoles = [];

					function intersectsHoleEdge( inShapePt, inHolePt ) {

						// checks for intersections with hole edges
						var ihIdx, chkHole,
							hIdx, nextIdx, intersection;
						for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

							chkHole = holes[ indepHoles[ ihIdx ]];
							for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

								nextIdx = hIdx + 1; nextIdx %= chkHole.length;
								intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
								if ( intersection.length > 0 )		return	true;

							}

						}
						return	false;

					}

					var holeIndex, shapeIndex,
						shapePt, holePt,
						holeIdx, cutKey, failedCuts = [],
						tmpShape1, tmpShape2,
						tmpHole1, tmpHole2;

					for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

						indepHoles.push( h );

					}

					var minShapeIndex = 0;
					var counter = indepHoles.length * 2;
					while ( indepHoles.length > 0 ) {

						counter --;
						if ( counter < 0 ) {

							console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
							break;

						}

						// search for shape-vertex and hole-vertex,
						// which can be connected without intersections
						for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

							shapePt = shape[ shapeIndex ];
							holeIndex	= - 1;

							// search for hole which can be reached without intersections
							for ( var h = 0; h < indepHoles.length; h ++ ) {

								holeIdx = indepHoles[ h ];

								// prevent multiple checks
								cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
								if ( failedCuts[ cutKey ] !== undefined )			continue;

								hole = holes[ holeIdx ];
								for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

									holePt = hole[ h2 ];
									if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
									if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
									if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

									holeIndex = h2;
									indepHoles.splice( h, 1 );

									tmpShape1 = shape.slice( 0, shapeIndex + 1 );
									tmpShape2 = shape.slice( shapeIndex );
									tmpHole1 = hole.slice( holeIndex );
									tmpHole2 = hole.slice( 0, holeIndex + 1 );

									shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

									minShapeIndex = shapeIndex;

									// Debug only, to show the selected cuts
									// glob_CutLines.push( [ shapePt, holePt ] );

									break;

								}
								if ( holeIndex >= 0 )	break;		// hole-vertex found

								failedCuts[ cutKey ] = true;			// remember failure

							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found

						}

					}

					return shape; 			/* shape with no holes */

				}


				var i, il, f, face,
					key, index,
					allPointsMap = {};

				// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

				var allpoints = contour.concat();

				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

					Array.prototype.push.apply( allpoints, holes[ h ] );

				}

				//console.log( "allpoints",allpoints, allpoints.length );

				// prepare all points map

				for ( i = 0, il = allpoints.length; i < il; i ++ ) {

					key = allpoints[ i ].x + ":" + allpoints[ i ].y;

					if ( allPointsMap[ key ] !== undefined ) {

						console.warn( "THREE.ShapeUtils: Duplicate point", key, i );

					}

					allPointsMap[ key ] = i;

				}

				// remove holes by cutting paths to holes and adding them to the shape
				var shapeWithoutHoles = removeHoles( contour, holes );

				var triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
				//console.log( "triangles",triangles, triangles.length );

				// check all face vertices against all points map

				for ( i = 0, il = triangles.length; i < il; i ++ ) {

					face = triangles[ i ];

					for ( f = 0; f < 3; f ++ ) {

						key = face[ f ].x + ":" + face[ f ].y;

						index = allPointsMap[ key ];

						if ( index !== undefined ) {

							face[ f ] = index;

						}

					}

				}

				return triangles.concat();

			},

			isClockWise: function ( pts ) {

				return THREE.ShapeUtils.area( pts ) < 0;

			},

			// Bezier Curves formulas obtained from
			// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

			// Quad Bezier Functions

			b2: ( function () {

				function b2p0( t, p ) {

					var k = 1 - t;
					return k * k * p;

				}

				function b2p1( t, p ) {

					return 2 * ( 1 - t ) * t * p;

				}

				function b2p2( t, p ) {

					return t * t * p;

				}

				return function b2( t, p0, p1, p2 ) {

					return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );

				};

			} )(),

			// Cubic Bezier Functions

			b3: ( function () {

				function b3p0( t, p ) {

					var k = 1 - t;
					return k * k * k * p;

				}

				function b3p1( t, p ) {

					var k = 1 - t;
					return 3 * k * k * t * p;

				}

				function b3p2( t, p ) {

					var k = 1 - t;
					return 3 * k * t * t * p;

				}

				function b3p3( t, p ) {

					return t * t * t * p;

				}

				return function b3( t, p0, p1, p2, p3 ) {

					return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );

				};

			} )()

		};

		// File:src/extras/core/Curve.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Extensible curve object
		 *
		 * Some common of Curve methods
		 * .getPoint(t), getTangent(t)
		 * .getPointAt(u), getTagentAt(u)
		 * .getPoints(), .getSpacedPoints()
		 * .getLength()
		 * .updateArcLengths()
		 *
		 * This following classes subclasses THREE.Curve:
		 *
		 * -- 2d classes --
		 * THREE.LineCurve
		 * THREE.QuadraticBezierCurve
		 * THREE.CubicBezierCurve
		 * THREE.SplineCurve
		 * THREE.ArcCurve
		 * THREE.EllipseCurve
		 *
		 * -- 3d classes --
		 * THREE.LineCurve3
		 * THREE.QuadraticBezierCurve3
		 * THREE.CubicBezierCurve3
		 * THREE.SplineCurve3
		 *
		 * A series of curves can be represented as a THREE.CurvePath
		 *
		 **/

		/**************************************************************
		 *	Abstract Curve base class
		 **************************************************************/

		THREE.Curve = function () {

		};

		THREE.Curve.prototype = {

			constructor: THREE.Curve,

			// Virtual base class method to overwrite and implement in subclasses
			//	- t [0 .. 1]

			getPoint: function ( t ) {

				console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
				return null;

			},

			// Get point at relative position in curve according to arc length
			// - u [0 .. 1]

			getPointAt: function ( u ) {

				var t = this.getUtoTmapping( u );
				return this.getPoint( t );

			},

			// Get sequence of points using getPoint( t )

			getPoints: function ( divisions ) {

				if ( ! divisions ) divisions = 5;

				var points = [];

				for ( var d = 0; d <= divisions; d ++ ) {

					points.push( this.getPoint( d / divisions ) );

				}

				return points;

			},

			// Get sequence of points using getPointAt( u )

			getSpacedPoints: function ( divisions ) {

				if ( ! divisions ) divisions = 5;

				var points = [];

				for ( var d = 0; d <= divisions; d ++ ) {

					points.push( this.getPointAt( d / divisions ) );

				}

				return points;

			},

			// Get total curve arc length

			getLength: function () {

				var lengths = this.getLengths();
				return lengths[ lengths.length - 1 ];

			},

			// Get list of cumulative segment lengths

			getLengths: function ( divisions ) {

				if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;

				if ( this.cacheArcLengths
					&& ( this.cacheArcLengths.length === divisions + 1 )
					&& ! this.needsUpdate ) {

					//console.log( "cached", this.cacheArcLengths );
					return this.cacheArcLengths;

				}

				this.needsUpdate = false;

				var cache = [];
				var current, last = this.getPoint( 0 );
				var p, sum = 0;

				cache.push( 0 );

				for ( p = 1; p <= divisions; p ++ ) {

					current = this.getPoint ( p / divisions );
					sum += current.distanceTo( last );
					cache.push( sum );
					last = current;

				}

				this.cacheArcLengths = cache;

				return cache; // { sums: cache, sum:sum }; Sum is in the last element.

			},

			updateArcLengths: function() {

				this.needsUpdate = true;
				this.getLengths();

			},

			// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

			getUtoTmapping: function ( u, distance ) {

				var arcLengths = this.getLengths();

				var i = 0, il = arcLengths.length;

				var targetArcLength; // The targeted u distance value to get

				if ( distance ) {

					targetArcLength = distance;

				} else {

					targetArcLength = u * arcLengths[ il - 1 ];

				}

				//var time = Date.now();

				// binary search for the index with largest value smaller than target u distance

				var low = 0, high = il - 1, comparison;

				while ( low <= high ) {

					i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

					comparison = arcLengths[ i ] - targetArcLength;

					if ( comparison < 0 ) {

						low = i + 1;

					} else if ( comparison > 0 ) {

						high = i - 1;

					} else {

						high = i;
						break;

						// DONE

					}

				}

				i = high;

				//console.log('b' , i, low, high, Date.now()- time);

				if ( arcLengths[ i ] === targetArcLength ) {

					var t = i / ( il - 1 );
					return t;

				}

				// we could get finer grain at lengths, or use simple interpolation between two points

				var lengthBefore = arcLengths[ i ];
				var lengthAfter = arcLengths[ i + 1 ];

				var segmentLength = lengthAfter - lengthBefore;

				// determine where we are between the 'before' and 'after' points

				var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

				// add that fractional amount to t

				var t = ( i + segmentFraction ) / ( il - 1 );

				return t;

			},

			// Returns a unit vector tangent at t
			// In case any sub curve does not implement its tangent derivation,
			// 2 points a small delta apart will be used to find its gradient
			// which seems to give a reasonable approximation

			getTangent: function( t ) {

				var delta = 0.0001;
				var t1 = t - delta;
				var t2 = t + delta;

				// Capping in case of danger

				if ( t1 < 0 ) t1 = 0;
				if ( t2 > 1 ) t2 = 1;

				var pt1 = this.getPoint( t1 );
				var pt2 = this.getPoint( t2 );

				var vec = pt2.clone().sub( pt1 );
				return vec.normalize();

			},

			getTangentAt: function ( u ) {

				var t = this.getUtoTmapping( u );
				return this.getTangent( t );

			}

		};

		// TODO: Transformation for Curves?

		/**************************************************************
		 *	3D Curves
		 **************************************************************/

		// A Factory method for creating new curve subclasses

		THREE.Curve.create = function ( constructor, getPointFunc ) {

			constructor.prototype = Object.create( THREE.Curve.prototype );
			constructor.prototype.constructor = constructor;
			constructor.prototype.getPoint = getPointFunc;

			return constructor;

		};

		// File:src/extras/core/CurvePath.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 **/

		/**************************************************************
		 *	Curved Path - a curve path is simply a array of connected
		 *  curves, but retains the api of a curve
		 **************************************************************/

		THREE.CurvePath = function () {

			this.curves = [];

			this.autoClose = false; // Automatically closes the path

		};

		THREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {

			constructor: THREE.CurvePath,

			add: function ( curve ) {

				this.curves.push( curve );

			},

			closePath: function () {

				// Add a line curve if start and end of lines are not connected
				var startPoint = this.curves[ 0 ].getPoint( 0 );
				var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

				if ( ! startPoint.equals( endPoint ) ) {

					this.curves.push( new THREE.LineCurve( endPoint, startPoint ) );

				}

			},

			// To get accurate point with reference to
			// entire path distance at time t,
			// following has to be done:

			// 1. Length of each sub path have to be known
			// 2. Locate and identify type of curve
			// 3. Get t for the curve
			// 4. Return curve.getPointAt(t')

			getPoint: function ( t ) {

				var d = t * this.getLength();
				var curveLengths = this.getCurveLengths();
				var i = 0;

				// To think about boundaries points.

				while ( i < curveLengths.length ) {

					if ( curveLengths[ i ] >= d ) {

						var diff = curveLengths[ i ] - d;
						var curve = this.curves[ i ];

						var segmentLength = curve.getLength();
						var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

						return curve.getPointAt( u );

					}

					i ++;

				}

				return null;

				// loop where sum != 0, sum > d , sum+1 <d

			},

			// We cannot use the default THREE.Curve getPoint() with getLength() because in
			// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
			// getPoint() depends on getLength

			getLength: function () {

				var lens = this.getCurveLengths();
				return lens[ lens.length - 1 ];

			},

			// cacheLengths must be recalculated.
			updateArcLengths: function () {

				this.needsUpdate = true;
				this.cacheLengths = null;
				this.getLengths();

			},

			// Compute lengths and cache them
			// We cannot overwrite getLengths() because UtoT mapping uses it.

			getCurveLengths: function () {

				// We use cache values if curves and cache array are same length

				if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

					return this.cacheLengths;

				}

				// Get length of sub-curve
				// Push sums into cached array

				var lengths = [], sums = 0;

				for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

					sums += this.curves[ i ].getLength();
					lengths.push( sums );

				}

				this.cacheLengths = lengths;

				return lengths;

			},

			getSpacedPoints: function ( divisions ) {

				if ( ! divisions ) divisions = 40;

				var points = [];

				for ( var i = 0; i <= divisions; i ++ ) {

					points.push( this.getPoint( i / divisions ) );

				}

				if ( this.autoClose ) {

					points.push( points[ 0 ] );

				}

				return points;

			},

			getPoints: function ( divisions ) {

				divisions = divisions || 12;

				var points = [], last;

				for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

					var curve = curves[ i ];
					var resolution = curve instanceof THREE.EllipseCurve ? divisions * 2
						: curve instanceof THREE.LineCurve ? 1
						: curve instanceof THREE.SplineCurve ? divisions * curve.points.length
						: divisions;

					var pts = curve.getPoints( resolution );

					for ( var j = 0; j < pts.length; j++ ) {

						var point = pts[ j ];

						if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

						points.push( point );
						last = point;

					}

				}

				if ( this.autoClose && points.length > 1 && !points[ points.length - 1 ].equals( points[ 0 ] ) ) {

					points.push( points[ 0 ] );

				}

				return points;

			},

			/**************************************************************
			 *	Create Geometries Helpers
			 **************************************************************/

			/// Generate geometry from path points (for Line or Points objects)

			createPointsGeometry: function ( divisions ) {

				var pts = this.getPoints( divisions );
				return this.createGeometry( pts );

			},

			// Generate geometry from equidistant sampling along the path

			createSpacedPointsGeometry: function ( divisions ) {

				var pts = this.getSpacedPoints( divisions );
				return this.createGeometry( pts );

			},

			createGeometry: function ( points ) {

				var geometry = new THREE.Geometry();

				for ( var i = 0, l = points.length; i < l; i ++ ) {

					var point = points[ i ];
					geometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );

				}

				return geometry;

			}

		} );

		// File:src/extras/core/Font.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.Font = function ( data ) {

			this.data = data;

		};

		Object.assign( THREE.Font.prototype, {

			generateShapes: function ( text, size, divisions ) {

				function createPaths( text ) {

					var chars = String( text ).split( '' );
					var scale = size / data.resolution;
					var offset = 0;

					var paths = [];

					for ( var i = 0; i < chars.length; i ++ ) {

						var ret = createPath( chars[ i ], scale, offset );
						offset += ret.offset;

						paths.push( ret.path );

					}

					return paths;

				}

				function createPath( c, scale, offset ) {

					var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

					if ( ! glyph ) return;

					var path = new THREE.ShapePath();

					var pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;
					var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

					if ( glyph.o ) {

						var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

						for ( var i = 0, l = outline.length; i < l; ) {

							var action = outline[ i ++ ];

							switch ( action ) {

								case 'm': // moveTo

									x = outline[ i ++ ] * scale + offset;
									y = outline[ i ++ ] * scale;

									path.moveTo( x, y );

									break;

								case 'l': // lineTo

									x = outline[ i ++ ] * scale + offset;
									y = outline[ i ++ ] * scale;

									path.lineTo( x, y );

									break;

								case 'q': // quadraticCurveTo

									cpx  = outline[ i ++ ] * scale + offset;
									cpy  = outline[ i ++ ] * scale;
									cpx1 = outline[ i ++ ] * scale + offset;
									cpy1 = outline[ i ++ ] * scale;

									path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

									laste = pts[ pts.length - 1 ];

									if ( laste ) {

										cpx0 = laste.x;
										cpy0 = laste.y;

										for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

											var t = i2 / divisions;
											b2( t, cpx0, cpx1, cpx );
											b2( t, cpy0, cpy1, cpy );

										}

									}

									break;

								case 'b': // bezierCurveTo

									cpx  = outline[ i ++ ] * scale + offset;
									cpy  = outline[ i ++ ] * scale;
									cpx1 = outline[ i ++ ] * scale + offset;
									cpy1 = outline[ i ++ ] * scale;
									cpx2 = outline[ i ++ ] * scale + offset;
									cpy2 = outline[ i ++ ] * scale;

									path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

									laste = pts[ pts.length - 1 ];

									if ( laste ) {

										cpx0 = laste.x;
										cpy0 = laste.y;

										for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

											var t = i2 / divisions;
											b3( t, cpx0, cpx1, cpx2, cpx );
											b3( t, cpy0, cpy1, cpy2, cpy );

										}

									}

									break;

							}

						}

					}

					return { offset: glyph.ha * scale, path: path };

				}

				//

				if ( size === undefined ) size = 100;
				if ( divisions === undefined ) divisions = 4;

				var data = this.data;

				var paths = createPaths( text );
				var shapes = [];

				for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

					Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

				}

				return shapes;

			}

		} );

		// File:src/extras/core/Path.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Creates free form 2d path using series of points, lines or curves.
		 *
		 **/

		THREE.Path = function ( points ) {

			THREE.CurvePath.call( this );
			this.currentPoint = new THREE.Vector2();

			if ( points ) {

				this.fromPoints( points );

			}

		};

		THREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {

			constructor: THREE.Path,

			// Create path using straight lines to connect all points
			// - vectors: array of Vector2
			fromPoints: function ( vectors ) {

				this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

				for ( var i = 1, l = vectors.length; i < l; i ++ ) {

					this.lineTo( vectors[ i ].x, vectors[ i ].y );

				}

			},

			moveTo: function ( x, y ) {

				this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

			},

			lineTo: function ( x, y ) {

				var curve = new THREE.LineCurve( this.currentPoint.clone(), new THREE.Vector2( x, y ) );
				this.curves.push( curve );

				this.currentPoint.set( x, y );

			},

			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

				var curve = new THREE.QuadraticBezierCurve(
					this.currentPoint.clone(),
					new THREE.Vector2( aCPx, aCPy ),
					new THREE.Vector2( aX, aY )
				);

				this.curves.push( curve );

				this.currentPoint.set( aX, aY );

			},

			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

				var curve = new THREE.CubicBezierCurve(
					this.currentPoint.clone(),
					new THREE.Vector2( aCP1x, aCP1y ),
					new THREE.Vector2( aCP2x, aCP2y ),
					new THREE.Vector2( aX, aY )
				);

				this.curves.push( curve );

				this.currentPoint.set( aX, aY );

			},

			splineThru: function ( pts /*Array of Vector*/ ) {

				var npts = [ this.currentPoint.clone() ].concat( pts );

				var curve = new THREE.SplineCurve( npts );
				this.curves.push( curve );

				this.currentPoint.copy( pts[ pts.length - 1 ] );

			},

			arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;

				this.absarc( aX + x0, aY + y0, aRadius,
					aStartAngle, aEndAngle, aClockwise );

			},

			absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

				this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

			},

			ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;

				this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			},

			absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

				var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

				if ( this.curves.length > 0 ) {

					// if a previous curve is present, attempt to join
					var firstPoint = curve.getPoint( 0 );

					if ( ! firstPoint.equals( this.currentPoint ) ) {

						this.lineTo( firstPoint.x, firstPoint.y );

					}

				}

				this.curves.push( curve );

				var lastPoint = curve.getPoint( 1 );
				this.currentPoint.copy( lastPoint );

			}

		} );


		// minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
		THREE.ShapePath = function() {
			this.subPaths = [];
			this.currentPath = null;
		}

		THREE.ShapePath.prototype = {
			moveTo: function ( x, y ) {
				this.currentPath = new THREE.Path();
				this.subPaths.push(this.currentPath);
				this.currentPath.moveTo( x, y );
			},
			lineTo: function ( x, y ) {
				this.currentPath.lineTo( x, y );
			},
			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
				this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
			},
			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
				this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
			},
			splineThru: function ( pts ) {
				this.currentPath.splineThru( pts );
			},

			toShapes: function ( isCCW, noHoles ) {

				function toShapesNoHoles( inSubpaths ) {

					var shapes = [];

					for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

						var tmpPath = inSubpaths[ i ];

						var tmpShape = new THREE.Shape();
						tmpShape.curves = tmpPath.curves;

						shapes.push( tmpShape );

					}

					return shapes;

				}

				function isPointInsidePolygon( inPt, inPolygon ) {

					var polyLen = inPolygon.length;

					// inPt on polygon contour => immediate success    or
					// toggling of inside/outside at every single! intersection point of an edge
					//  with the horizontal line through inPt, left of inPt
					//  not counting lowerY endpoints of edges and whole edges on that line
					var inside = false;
					for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

						var edgeLowPt  = inPolygon[ p ];
						var edgeHighPt = inPolygon[ q ];

						var edgeDx = edgeHighPt.x - edgeLowPt.x;
						var edgeDy = edgeHighPt.y - edgeLowPt.y;

						if ( Math.abs( edgeDy ) > Number.EPSILON ) {

							// not parallel
							if ( edgeDy < 0 ) {

								edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
								edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

							}
							if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

							if ( inPt.y === edgeLowPt.y ) {

								if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
								// continue;				// no intersection or edgeLowPt => doesn't count !!!

							} else {

								var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
								if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
								if ( perpEdge < 0 ) 				continue;
								inside = ! inside;		// true intersection left of inPt

							}

						} else {

							// parallel or collinear
							if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
							// edge lies on the same horizontal line as inPt
							if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
								 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
							// continue;

						}

					}

					return	inside;

				}

				var isClockWise = THREE.ShapeUtils.isClockWise;

				var subPaths = this.subPaths;
				if ( subPaths.length === 0 ) return [];

				if ( noHoles === true )	return	toShapesNoHoles( subPaths );


				var solid, tmpPath, tmpShape, shapes = [];

				if ( subPaths.length === 1 ) {

					tmpPath = subPaths[ 0 ];
					tmpShape = new THREE.Shape();
					tmpShape.curves = tmpPath.curves;
					shapes.push( tmpShape );
					return shapes;

				}

				var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
				holesFirst = isCCW ? ! holesFirst : holesFirst;

				// console.log("Holes first", holesFirst);

				var betterShapeHoles = [];
				var newShapes = [];
				var newShapeHoles = [];
				var mainIdx = 0;
				var tmpPoints;

				newShapes[ mainIdx ] = undefined;
				newShapeHoles[ mainIdx ] = [];

				for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

					tmpPath = subPaths[ i ];
					tmpPoints = tmpPath.getPoints();
					solid = isClockWise( tmpPoints );
					solid = isCCW ? ! solid : solid;

					if ( solid ) {

						if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

						newShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };
						newShapes[ mainIdx ].s.curves = tmpPath.curves;

						if ( holesFirst )	mainIdx ++;
						newShapeHoles[ mainIdx ] = [];

						//console.log('cw', i);

					} else {

						newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

						//console.log('ccw', i);

					}

				}

				// only Holes? -> probably all Shapes with wrong orientation
				if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


				if ( newShapes.length > 1 ) {

					var ambiguous = false;
					var toChange = [];

					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

						betterShapeHoles[ sIdx ] = [];

					}

					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

						var sho = newShapeHoles[ sIdx ];

						for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

							var ho = sho[ hIdx ];
							var hole_unassigned = true;

							for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

								if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

									if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
									if ( hole_unassigned ) {

										hole_unassigned = false;
										betterShapeHoles[ s2Idx ].push( ho );

									} else {

										ambiguous = true;

									}

								}

							}
							if ( hole_unassigned ) {

								betterShapeHoles[ sIdx ].push( ho );

							}

						}

					}
					// console.log("ambiguous: ", ambiguous);
					if ( toChange.length > 0 ) {

						// console.log("to change: ", toChange);
						if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

					}

				}

				var tmpHoles;

				for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

					tmpShape = newShapes[ i ].s;
					shapes.push( tmpShape );
					tmpHoles = newShapeHoles[ i ];

					for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

						tmpShape.holes.push( tmpHoles[ j ].h );

					}

				}

				//console.log("shape", shapes);

				return shapes;

			}
		}

		// File:src/extras/core/Shape.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Defines a 2d shape plane using paths.
		 **/

		// STEP 1 Create a path.
		// STEP 2 Turn path into shape.
		// STEP 3 ExtrudeGeometry takes in Shape/Shapes
		// STEP 3a - Extract points from each shape, turn to vertices
		// STEP 3b - Triangulate each shape, add faces.

		THREE.Shape = function () {

			THREE.Path.apply( this, arguments );

			this.holes = [];

		};

		THREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {

			constructor: THREE.Shape,

			// Convenience method to return ExtrudeGeometry

			extrude: function ( options ) {

				return new THREE.ExtrudeGeometry( this, options );

			},

			// Convenience method to return ShapeGeometry

			makeGeometry: function ( options ) {

				return new THREE.ShapeGeometry( this, options );

			},

			getPointsHoles: function ( divisions ) {

				var holesPts = [];

				for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

					holesPts[ i ] = this.holes[ i ].getPoints( divisions );

				}

				return holesPts;

			},

			// Get points of shape and holes (keypoints based on segments parameter)

			extractAllPoints: function ( divisions ) {

				return {

					shape: this.getPoints( divisions ),
					holes: this.getPointsHoles( divisions )

				};

			},

			extractPoints: function ( divisions ) {

				return this.extractAllPoints( divisions );

			}

		} );

		// File:src/extras/curves/LineCurve.js

		/**************************************************************
		 *	Line
		 **************************************************************/

		THREE.LineCurve = function ( v1, v2 ) {

			this.v1 = v1;
			this.v2 = v2;

		};

		THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );
		THREE.LineCurve.prototype.constructor = THREE.LineCurve;

		THREE.LineCurve.prototype.getPoint = function ( t ) {

			if ( t === 1 ) {

				return this.v2.clone();

			}

			var point = this.v2.clone().sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

			return point;

		};

		// Line curve is linear, so we can overwrite default getPointAt

		THREE.LineCurve.prototype.getPointAt = function ( u ) {

			return this.getPoint( u );

		};

		THREE.LineCurve.prototype.getTangent = function( t ) {

			var tangent = this.v2.clone().sub( this.v1 );

			return tangent.normalize();

		};

		// File:src/extras/curves/QuadraticBezierCurve.js

		/**************************************************************
		 *	Quadratic Bezier curve
		 **************************************************************/


		THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;

		};

		THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );
		THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;


		THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {

			var b2 = THREE.ShapeUtils.b2;

			return new THREE.Vector2(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y )
			);

		};


		THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {

			var tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;

			return new THREE.Vector2(
				tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
				tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
			).normalize();

		};

		// File:src/extras/curves/CubicBezierCurve.js

		/**************************************************************
		 *	Cubic Bezier curve
		 **************************************************************/

		THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {

			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;

		};

		THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );
		THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;

		THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {

			var b3 = THREE.ShapeUtils.b3;

			return new THREE.Vector2( 
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
			);

		};

		THREE.CubicBezierCurve.prototype.getTangent = function( t ) {

			var tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;

			return new THREE.Vector2( 
				tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
			).normalize();

		};

		// File:src/extras/curves/SplineCurve.js

		/**************************************************************
		 *	Spline curve
		 **************************************************************/

		THREE.SplineCurve = function ( points /* array of Vector2 */ ) {

			this.points = ( points == undefined ) ? [] : points;

		};

		THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );
		THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;

		THREE.SplineCurve.prototype.getPoint = function ( t ) {

			var points = this.points;
			var point = ( points.length - 1 ) * t;

			var intPoint = Math.floor( point );
			var weight = point - intPoint;

			var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

			var interpolate = THREE.CurveUtils.interpolate;

			return new THREE.Vector2(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight )
			);

		};

		// File:src/extras/curves/EllipseCurve.js

		/**************************************************************
		 *	Ellipse curve
		 **************************************************************/

		THREE.EllipseCurve = function( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			this.aX = aX;
			this.aY = aY;

			this.xRadius = xRadius;
			this.yRadius = yRadius;

			this.aStartAngle = aStartAngle;
			this.aEndAngle = aEndAngle;

			this.aClockwise = aClockwise;

			this.aRotation = aRotation || 0;

		};

		THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );
		THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;

		THREE.EllipseCurve.prototype.getPoint = function( t ) {

			var twoPi = Math.PI * 2;
			var deltaAngle = this.aEndAngle - this.aStartAngle;
			var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

			// ensures that deltaAngle is 0 .. 2 PI
			while ( deltaAngle < 0 ) deltaAngle += twoPi;
			while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

			if ( deltaAngle < Number.EPSILON ) {

				if ( samePoints ) {

					deltaAngle = 0;

				} else {

					deltaAngle = twoPi;

				}

			}

			if ( this.aClockwise === true && ! samePoints ) {

				if ( deltaAngle === twoPi ) {

					deltaAngle = - twoPi;

				} else {

					deltaAngle = deltaAngle - twoPi;

				}

			}

			var angle = this.aStartAngle + t * deltaAngle;
			var x = this.aX + this.xRadius * Math.cos( angle );
			var y = this.aY + this.yRadius * Math.sin( angle );

			if ( this.aRotation !== 0 ) {

				var cos = Math.cos( this.aRotation );
				var sin = Math.sin( this.aRotation );

				var tx = x - this.aX;
				var ty = y - this.aY;

				// Rotate the point about the center of the ellipse.
				x = tx * cos - ty * sin + this.aX;
				y = tx * sin + ty * cos + this.aY;

			}

			return new THREE.Vector2( x, y );

		};

		// File:src/extras/curves/ArcCurve.js

		/**************************************************************
		 *	Arc curve
		 **************************************************************/

		THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		};

		THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );
		THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;

		// File:src/extras/curves/LineCurve3.js

		/**************************************************************
		 *	Line3D
		 **************************************************************/

		THREE.LineCurve3 = THREE.Curve.create(

			function ( v1, v2 ) {

				this.v1 = v1;
				this.v2 = v2;

			},

			function ( t ) {

				if ( t === 1 ) {

					return this.v2.clone();

				}

				var vector = new THREE.Vector3();

				vector.subVectors( this.v2, this.v1 ); // diff
				vector.multiplyScalar( t );
				vector.add( this.v1 );

				return vector;

			}

		);

		// File:src/extras/curves/QuadraticBezierCurve3.js

		/**************************************************************
		 *	Quadratic Bezier 3D curve
		 **************************************************************/

		THREE.QuadraticBezierCurve3 = THREE.Curve.create(

			function ( v0, v1, v2 ) {

				this.v0 = v0;
				this.v1 = v1;
				this.v2 = v2;

			},

			function ( t ) {

				var b2 = THREE.ShapeUtils.b2;		

				return new THREE.Vector3(
					b2( t, this.v0.x, this.v1.x, this.v2.x ),
					b2( t, this.v0.y, this.v1.y, this.v2.y ),
					b2( t, this.v0.z, this.v1.z, this.v2.z )
				);

			}

		);

		// File:src/extras/curves/CubicBezierCurve3.js

		/**************************************************************
		 *	Cubic Bezier 3D curve
		 **************************************************************/

		THREE.CubicBezierCurve3 = THREE.Curve.create(

			function ( v0, v1, v2, v3 ) {

				this.v0 = v0;
				this.v1 = v1;
				this.v2 = v2;
				this.v3 = v3;

			},

			function ( t ) {

				var b3 = THREE.ShapeUtils.b3;

				return new THREE.Vector3(
					b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
					b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
					b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
				);

			}

		);

		// File:src/extras/curves/SplineCurve3.js

		/**************************************************************
		 *	Spline 3D curve
		 **************************************************************/


		THREE.SplineCurve3 = THREE.Curve.create(

			function ( points /* array of Vector3 */ ) {

				console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
				this.points = ( points == undefined ) ? [] : points;

			},

			function ( t ) {

				var points = this.points;
				var point = ( points.length - 1 ) * t;

				var intPoint = Math.floor( point );
				var weight = point - intPoint;

				var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
				var point1 = points[ intPoint ];
				var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
				var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

				var interpolate = THREE.CurveUtils.interpolate;

				return new THREE.Vector3(
					interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
					interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
					interpolate( point0.z, point1.z, point2.z, point3.z, weight )
				);

			}

		);

		// File:src/extras/curves/CatmullRomCurve3.js

		/**
		 * @author zz85 https://github.com/zz85
		 *
		 * Centripetal CatmullRom Curve - which is useful for avoiding
		 * cusps and self-intersections in non-uniform catmull rom curves.
		 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
		 *
		 * curve.type accepts centripetal(default), chordal and catmullrom
		 * curve.tension is used for catmullrom which defaults to 0.5
		 */

		THREE.CatmullRomCurve3 = ( function() {

			var
				tmp = new THREE.Vector3(),
				px = new CubicPoly(),
				py = new CubicPoly(),
				pz = new CubicPoly();

			/*
			Based on an optimized c++ solution in
			 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
			 - http://ideone.com/NoEbVM

			This CubicPoly class could be used for reusing some variables and calculations,
			but for three.js curve use, it could be possible inlined and flatten into a single function call
			which can be placed in CurveUtils.
			*/

			function CubicPoly() {

			}

			/*
			 * Compute coefficients for a cubic polynomial
			 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
			 * such that
			 *   p(0) = x0, p(1) = x1
			 *  and
			 *   p'(0) = t0, p'(1) = t1.
			 */
			CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {

				this.c0 = x0;
				this.c1 = t0;
				this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
				this.c3 = 2 * x0 - 2 * x1 + t0 + t1;

			};

			CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {

				// compute tangents when parameterized in [t1,t2]
				var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
				var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

				// rescale tangents for parametrization in [0,1]
				t1 *= dt1;
				t2 *= dt1;

				// initCubicPoly
				this.init( x1, x2, t1, t2 );

			};

			// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
			CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {

				this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

			};

			CubicPoly.prototype.calc = function( t ) {

				var t2 = t * t;
				var t3 = t2 * t;
				return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;

			};

			// Subclass Three.js curve
			return THREE.Curve.create(

				function ( p /* array of Vector3 */ ) {

					this.points = p || [];
					this.closed = false;

				},

				function ( t ) {

					var points = this.points,
						point, intPoint, weight, l;

					l = points.length;

					if ( l < 2 ) console.log( 'duh, you need at least 2 points' );

					point = ( l - ( this.closed ? 0 : 1 ) ) * t;
					intPoint = Math.floor( point );
					weight = point - intPoint;

					if ( this.closed ) {

						intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

					} else if ( weight === 0 && intPoint === l - 1 ) {

						intPoint = l - 2;
						weight = 1;

					}

					var p0, p1, p2, p3; // 4 points

					if ( this.closed || intPoint > 0 ) {

						p0 = points[ ( intPoint - 1 ) % l ];

					} else {

						// extrapolate first point
						tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
						p0 = tmp;

					}

					p1 = points[ intPoint % l ];
					p2 = points[ ( intPoint + 1 ) % l ];

					if ( this.closed || intPoint + 2 < l ) {

						p3 = points[ ( intPoint + 2 ) % l ];

					} else {

						// extrapolate last point
						tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
						p3 = tmp;

					}

					if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {

						// init Centripetal / Chordal Catmull-Rom
						var pow = this.type === 'chordal' ? 0.5 : 0.25;
						var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
						var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
						var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

						// safety check for repeated points
						if ( dt1 < 1e-4 ) dt1 = 1.0;
						if ( dt0 < 1e-4 ) dt0 = dt1;
						if ( dt2 < 1e-4 ) dt2 = dt1;

						px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
						py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
						pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

					} else if ( this.type === 'catmullrom' ) {

						var tension = this.tension !== undefined ? this.tension : 0.5;
						px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
						py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
						pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );

					}

					var v = new THREE.Vector3(
						px.calc( weight ),
						py.calc( weight ),
						pz.calc( weight )
					);

					return v;

				}

			);

		} )();

		// File:src/extras/curves/ClosedSplineCurve3.js

		/**************************************************************
		 *	Closed Spline 3D curve
		 **************************************************************/


		THREE.ClosedSplineCurve3 = function ( points ) {

			console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );

			THREE.CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
			this.closed = true;

		};

		THREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );

		// File:src/extras/geometries/BoxGeometry.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
		 */

		THREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

			THREE.Geometry.call( this );

			this.type = 'BoxGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			this.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
			this.mergeVertices();

		};

		THREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;

		THREE.CubeGeometry = THREE.BoxGeometry;

		// File:src/extras/geometries/BoxBufferGeometry.js

		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		THREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

			THREE.BufferGeometry.call( this );

			this.type = 'BoxBufferGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			var scope = this;

			// segments
			widthSegments = Math.floor( widthSegments ) || 1;
			heightSegments = Math.floor( heightSegments ) || 1;
			depthSegments = Math.floor( depthSegments ) || 1;

			// these are used to calculate buffer length
			var vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );
			var indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );

			// buffers
			var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
			var vertices = new Float32Array( vertexCount * 3 );
			var normals = new Float32Array( vertexCount * 3 );
			var uvs = new Float32Array( vertexCount * 2 );

			// offset variables
			var vertexBufferOffset = 0;
			var uvBufferOffset = 0;
			var indexBufferOffset = 0;
			var numberOfVertices = 0;

			// group variables
			var groupStart = 0;

			// build each side of the box geometry
			buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px
			buildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx
			buildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py
			buildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny
			buildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz
			buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz

			// build geometry
			this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
			this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

			// helper functions

			function calculateVertexCount ( w, h, d ) {

				var vertices = 0;

				// calculate the amount of vertices for each side (plane)
				vertices += (w + 1) * (h + 1) * 2; // xy
				vertices += (w + 1) * (d + 1) * 2; // xz
				vertices += (d + 1) * (h + 1) * 2; // zy

				return vertices;

			}

			function calculateIndexCount ( w, h, d ) {

				var index = 0;

				// calculate the amount of squares for each side
				index += w * h * 2; // xy
				index += w * d * 2; // xz
				index += d * h * 2; // zy

				return index * 6; // two triangles per square => six vertices per square

			}

			function buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

				var segmentWidth	= width / gridX;
				var segmentHeight = height / gridY;

				var widthHalf = width / 2;
				var heightHalf = height / 2;
				var depthHalf = depth / 2;

				var gridX1 = gridX + 1;
				var gridY1 = gridY + 1;

				var vertexCounter = 0;
				var groupCount = 0;

				var vector = new THREE.Vector3();

				// generate vertices, normals and uvs

				for ( var iy = 0; iy < gridY1; iy ++ ) {

					var y = iy * segmentHeight - heightHalf;

					for ( var ix = 0; ix < gridX1; ix ++ ) {

						var x = ix * segmentWidth - widthHalf;

						// set values to correct vector component
						vector[ u ] = x * udir;
						vector[ v ] = y * vdir;
						vector[ w ] = depthHalf;

						// now apply vector to vertex buffer
						vertices[ vertexBufferOffset ] = vector.x;
						vertices[ vertexBufferOffset + 1 ] = vector.y;
						vertices[ vertexBufferOffset + 2 ] = vector.z;

						// set values to correct vector component
						vector[ u ] = 0;
						vector[ v ] = 0;
						vector[ w ] = depth > 0 ? 1 : - 1;

						// now apply vector to normal buffer
						normals[ vertexBufferOffset ] = vector.x;
						normals[ vertexBufferOffset + 1 ] = vector.y;
						normals[ vertexBufferOffset + 2 ] = vector.z;

						// uvs
						uvs[ uvBufferOffset ] = ix / gridX;
						uvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );

						// update offsets and counters
						vertexBufferOffset += 3;
						uvBufferOffset += 2;
						vertexCounter += 1;

					}

				}

				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment

				for ( iy = 0; iy < gridY; iy ++ ) {

					for ( ix = 0; ix < gridX; ix ++ ) {

						// indices
						var a = numberOfVertices + ix + gridX1 * iy;
						var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
						var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
						var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

						// face one
						indices[ indexBufferOffset ] = a;
						indices[ indexBufferOffset + 1 ] = b;
						indices[ indexBufferOffset + 2 ] = d;

						// face two
						indices[ indexBufferOffset + 3 ] = b;
						indices[ indexBufferOffset + 4 ] = c;
						indices[ indexBufferOffset + 5 ] = d;

						// update offsets and counters
						indexBufferOffset += 6;
						groupCount += 6;

					}

				}

				// add a group to the geometry. this will ensure multi material support
				scope.addGroup( groupStart, groupCount, materialIndex );

				// calculate new start value for groups
				groupStart += groupCount;

				// update total number of vertices
				numberOfVertices += vertexCounter;

			}

		};

		THREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;

		// File:src/extras/geometries/CircleGeometry.js

		/**
		 * @author hughes
		 */

		THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {

			THREE.Geometry.call( this );

			this.type = 'CircleGeometry';

			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			this.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );

		};

		THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;

		// File:src/extras/geometries/CircleBufferGeometry.js

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */

		THREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {

			THREE.BufferGeometry.call( this );

			this.type = 'CircleBufferGeometry';

			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			radius = radius || 50;
			segments = segments !== undefined ? Math.max( 3, segments ) : 8;

			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

			var vertices = segments + 2;

			var positions = new Float32Array( vertices * 3 );
			var normals = new Float32Array( vertices * 3 );
			var uvs = new Float32Array( vertices * 2 );

			// center data is already zero, but need to set a few extras
			normals[ 2 ] = 1.0;
			uvs[ 0 ] = 0.5;
			uvs[ 1 ] = 0.5;

			for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {

				var segment = thetaStart + s / segments * thetaLength;

				positions[ i ] = radius * Math.cos( segment );
				positions[ i + 1 ] = radius * Math.sin( segment );

				normals[ i + 2 ] = 1; // normal z

				uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
				uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;

			}

			var indices = [];

			for ( var i = 1; i <= segments; i ++ ) {

				indices.push( i, i + 1, 0 );

			}

			this.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );
			this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
			this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

			this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

		};

		THREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;

		// File:src/extras/geometries/CylinderBufferGeometry.js

		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		THREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

			THREE.BufferGeometry.call( this );

			this.type = 'CylinderBufferGeometry';

			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			var scope = this;

			radiusTop = radiusTop !== undefined ? radiusTop : 20;
			radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
			height = height !== undefined ? height : 100;

			radialSegments = Math.floor( radialSegments ) || 8;
			heightSegments = Math.floor( heightSegments ) || 1;

			openEnded = openEnded !== undefined ? openEnded : false;
			thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
			thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;

			// used to calculate buffer length

			var nbCap = 0;

			if ( openEnded === false ) {

				if ( radiusTop > 0 ) nbCap ++;
				if ( radiusBottom > 0 ) nbCap ++;

			}

			var vertexCount = calculateVertexCount();
			var indexCount = calculateIndexCount();

			// buffers

			var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );
			var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

			// helper variables

			var index = 0,
			    indexOffset = 0,
			    indexArray = [],
			    halfHeight = height / 2;

			// group variables
			var groupStart = 0;

			// generate geometry

			generateTorso();

			if ( openEnded === false ) {

				if ( radiusTop > 0 ) generateCap( true );
				if ( radiusBottom > 0 ) generateCap( false );

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', vertices );
			this.addAttribute( 'normal', normals );
			this.addAttribute( 'uv', uvs );

			// helper functions

			function calculateVertexCount() {

				var count = ( radialSegments + 1 ) * ( heightSegments + 1 );

				if ( openEnded === false ) {

					count += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );

				}

				return count;

			}

			function calculateIndexCount() {

				var count = radialSegments * heightSegments * 2 * 3;

				if ( openEnded === false ) {

					count += radialSegments * nbCap * 3;

				}

				return count;

			}

			function generateTorso() {

				var x, y;
				var normal = new THREE.Vector3();
				var vertex = new THREE.Vector3();

				var groupCount = 0;

				// this will be used to calculate the normal
				var tanTheta = ( radiusBottom - radiusTop ) / height;

				// generate vertices, normals and uvs

				for ( y = 0; y <= heightSegments; y ++ ) {

					var indexRow = [];

					var v = y / heightSegments;

					// calculate the radius of the current row
					var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

					for ( x = 0; x <= radialSegments; x ++ ) {

						var u = x / radialSegments;

						// vertex
						vertex.x = radius * Math.sin( u * thetaLength + thetaStart );
						vertex.y = - v * height + halfHeight;
						vertex.z = radius * Math.cos( u * thetaLength + thetaStart );
						vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

						// normal
						normal.copy( vertex );

						// handle special case if radiusTop/radiusBottom is zero

						if ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {

							normal.x = Math.sin( u * thetaLength + thetaStart );
							normal.z = Math.cos( u * thetaLength + thetaStart );

						}

						normal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();
						normals.setXYZ( index, normal.x, normal.y, normal.z );

						// uv
						uvs.setXY( index, u, 1 - v );

						// save index of vertex in respective row
						indexRow.push( index );

						// increase index
						index ++;

					}

					// now save vertices of the row in our index array
					indexArray.push( indexRow );

				}

				// generate indices

				for ( x = 0; x < radialSegments; x ++ ) {

					for ( y = 0; y < heightSegments; y ++ ) {

						// we use the index array to access the correct indices
						var i1 = indexArray[ y ][ x ];
						var i2 = indexArray[ y + 1 ][ x ];
						var i3 = indexArray[ y + 1 ][ x + 1 ];
						var i4 = indexArray[ y ][ x + 1 ];

						// face one
						indices.setX( indexOffset, i1 ); indexOffset ++;
						indices.setX( indexOffset, i2 ); indexOffset ++;
						indices.setX( indexOffset, i4 ); indexOffset ++;

						// face two
						indices.setX( indexOffset, i2 ); indexOffset ++;
						indices.setX( indexOffset, i3 ); indexOffset ++;
						indices.setX( indexOffset, i4 ); indexOffset ++;

						// update counters
						groupCount += 6;

					}

				}

				// add a group to the geometry. this will ensure multi material support
				scope.addGroup( groupStart, groupCount, 0 );

				// calculate new start value for groups
				groupStart += groupCount;

			}

			function generateCap( top ) {

				var x, centerIndexStart, centerIndexEnd;

				var uv = new THREE.Vector2();
				var vertex = new THREE.Vector3();

				var groupCount = 0;

				var radius = ( top === true ) ? radiusTop : radiusBottom;
				var sign = ( top === true ) ? 1 : - 1;

				// save the index of the first center vertex
				centerIndexStart = index;

				// first we generate the center vertex data of the cap.
				// because the geometry needs one set of uvs per face,
				// we must generate a center vertex per face/segment

				for ( x = 1; x <= radialSegments; x ++ ) {

					// vertex
					vertices.setXYZ( index, 0, halfHeight * sign, 0 );

					// normal
					normals.setXYZ( index, 0, sign, 0 );

					// uv
					uv.x = 0.5;
					uv.y = 0.5;

					uvs.setXY( index, uv.x, uv.y );

					// increase index
					index ++;

				}

				// save the index of the last center vertex
				centerIndexEnd = index;

				// now we generate the surrounding vertices, normals and uvs

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;
					var theta = u * thetaLength + thetaStart;

					var cosTheta = Math.cos( theta );
					var sinTheta = Math.sin( theta );

					// vertex
					vertex.x = radius * sinTheta;
					vertex.y = halfHeight * sign;
					vertex.z = radius * cosTheta;
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

					// normal
					normals.setXYZ( index, 0, sign, 0 );

					// uv
					uv.x = ( cosTheta * 0.5 ) + 0.5;
					uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
					uvs.setXY( index, uv.x, uv.y );

					// increase index
					index ++;

				}

				// generate indices

				for ( x = 0; x < radialSegments; x ++ ) {

					var c = centerIndexStart + x;
					var i = centerIndexEnd + x;

					if ( top === true ) {

						// face top
						indices.setX( indexOffset, i ); indexOffset ++;
						indices.setX( indexOffset, i + 1 ); indexOffset ++;
						indices.setX( indexOffset, c ); indexOffset ++;

					} else {

						// face bottom
						indices.setX( indexOffset, i + 1 ); indexOffset ++;
						indices.setX( indexOffset, i ); indexOffset ++;
						indices.setX( indexOffset, c ); indexOffset ++;

					}

					// update counters
					groupCount += 3;

				}

				// add a group to the geometry. this will ensure multi material support
				scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

				// calculate new start value for groups
				groupStart += groupCount;

			}

		};

		THREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;

		// File:src/extras/geometries/CylinderGeometry.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

			THREE.Geometry.call( this );

			this.type = 'CylinderGeometry';

			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			this.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
			this.mergeVertices();

		};

		THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;

		// File:src/extras/geometries/ConeBufferGeometry.js

		/*
		 * @author: abelnation / http://github.com/abelnation
		 */

		THREE.ConeBufferGeometry = function (
			radius, height,
			radialSegments, heightSegments,
			openEnded, thetaStart, thetaLength ) {

			THREE.CylinderBufferGeometry.call( this,
				0, radius, height,
				radialSegments, heightSegments,
				openEnded, thetaStart, thetaLength );

			this.type = 'ConeBufferGeometry';

			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

		};

		THREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;

		// File:src/extras/geometries/ConeGeometry.js

		/**
		 * @author abelnation / http://github.com/abelnation
		 */

		THREE.ConeGeometry = function (
			radius, height,
			radialSegments, heightSegments,
			openEnded, thetaStart, thetaLength ) {

			THREE.CylinderGeometry.call( this,
				0, radius, height,
				radialSegments, heightSegments,
				openEnded, thetaStart, thetaLength );

			this.type = 'ConeGeometry';

			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

		};

		THREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );
		THREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;

		// File:src/extras/geometries/EdgesGeometry.js

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */

		THREE.EdgesGeometry = function ( geometry, thresholdAngle ) {

			THREE.BufferGeometry.call( this );

			thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

			var thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );

			var edge = [ 0, 0 ], hash = {};

			function sortFunction( a, b ) {

				return a - b;

			}

			var keys = [ 'a', 'b', 'c' ];

			var geometry2;

			if ( geometry instanceof THREE.BufferGeometry ) {

				geometry2 = new THREE.Geometry();
				geometry2.fromBufferGeometry( geometry );

			} else {

				geometry2 = geometry.clone();

			}

			geometry2.mergeVertices();
			geometry2.computeFaceNormals();

			var vertices = geometry2.vertices;
			var faces = geometry2.faces;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0; j < 3; j ++ ) {

					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );

					var key = edge.toString();

					if ( hash[ key ] === undefined ) {

						hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };

					} else {

						hash[ key ].face2 = i;

					}

				}

			}

			var coords = [];

			for ( var key in hash ) {

				var h = hash[ key ];

				if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {

					var vertex = vertices[ h.vert1 ];
					coords.push( vertex.x );
					coords.push( vertex.y );
					coords.push( vertex.z );

					vertex = vertices[ h.vert2 ];
					coords.push( vertex.x );
					coords.push( vertex.y );
					coords.push( vertex.z );

				}

			}

			this.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );

		};

		THREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;

		// File:src/extras/geometries/ExtrudeGeometry.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Creates extruded geometry from a path shape.
		 *
		 * parameters = {
		 *
		 *  curveSegments: <int>, // number of points on the curves
		 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
		 *  amount: <int>, // Depth to extrude the shape
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into the original shape bevel goes
		 *  bevelSize: <float>, // how far from shape outline is bevel
		 *  bevelSegments: <int>, // number of bevel layers
		 *
		 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
		 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
		 *
		 *  uvGenerator: <Object> // object that provides UV generator functions
		 *
		 * }
		 **/

		THREE.ExtrudeGeometry = function ( shapes, options ) {

			if ( typeof( shapes ) === "undefined" ) {

				shapes = [];
				return;

			}

			THREE.Geometry.call( this );

			this.type = 'ExtrudeGeometry';

			shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

			this.addShapeList( shapes, options );

			this.computeFaceNormals();

			// can't really use automatic vertex normals
			// as then front and back sides get smoothed too
			// should do separate smoothing just for sides

			//this.computeVertexNormals();

			//console.log( "took", ( Date.now() - startTime ) );

		};

		THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;

		THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {

			var sl = shapes.length;

			for ( var s = 0; s < sl; s ++ ) {

				var shape = shapes[ s ];
				this.addShape( shape, options );

			}

		};

		THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

			var amount = options.amount !== undefined ? options.amount : 100;

			var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
			var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
			var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

			var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

			var steps = options.steps !== undefined ? options.steps : 1;

			var extrudePath = options.extrudePath;
			var extrudePts, extrudeByPath = false;

			// Use default WorldUVGenerator if no UV generators are specified.
			var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;

			var splineTube, binormal, normal, position2;
			if ( extrudePath ) {

				extrudePts = extrudePath.getSpacedPoints( steps );

				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion

				// SETUP TNB variables

				// Reuse TNB from TubeGeomtry for now.
				// TODO1 - have a .isClosed in spline?

				splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );

				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

				binormal = new THREE.Vector3();
				normal = new THREE.Vector3();
				position2 = new THREE.Vector3();

			}

			// Safeguards if bevels are not enabled

			if ( ! bevelEnabled ) {

				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;

			}

			// Variables initialization

			var ahole, h, hl; // looping of holes
			var scope = this;

			var shapesOffset = this.vertices.length;

			var shapePoints = shape.extractPoints( curveSegments );

			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;

			var reverse = ! THREE.ShapeUtils.isClockWise( vertices );

			if ( reverse ) {

				vertices = vertices.reverse();

				// Maybe we should also check if holes are in the opposite direction, just to be safe ...

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];

					if ( THREE.ShapeUtils.isClockWise( ahole ) ) {

						holes[ h ] = ahole.reverse();

					}

				}

				reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

			}


			var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );

			/* Vertices */

			var contour = vertices; // vertices has all points but contour has only points of circumference

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				vertices = vertices.concat( ahole );

			}


			function scalePt2 ( pt, vec, size ) {

				if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

				return vec.clone().multiplyScalar( size ).add( pt );

			}

			var b, bs, t, z,
				vert, vlen = vertices.length,
				face, flen = faces.length;


			// Find directions for point movement


			function getBevelVec( inPt, inPrev, inNext ) {

				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.

				var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html

				var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
				var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;

				var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

				// check for collinear edges
				var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				if ( Math.abs( collinear0 ) > Number.EPSILON ) {

					// not collinear

					// length of vectors for normalizing

					var v_prev_len = Math.sqrt( v_prev_lensq );
					var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

					// shift adjacent points by unit vectors to the left

					var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

					var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

					// scaling factor for v_prev to intersection point

					var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
								( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
							  ( v_prev_x * v_next_y - v_prev_y * v_next_x );

					// vector from inPt to intersection point

					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {

						return	new THREE.Vector2( v_trans_x, v_trans_y );

					} else {

						shrink_by = Math.sqrt( v_trans_lensq / 2 );

					}

				} else {

					// handle special case of collinear edges

					var direction_eq = false;		// assumes: opposite
					if ( v_prev_x > Number.EPSILON ) {

						if ( v_next_x > Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( v_prev_x < - Number.EPSILON ) {

							if ( v_next_x < - Number.EPSILON ) {

								direction_eq = true;

							}

						} else {

							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

								direction_eq = true;

							}

						}

					}

					if ( direction_eq ) {

						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y =  v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );

					} else {

						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );

					}

				}

				return	new THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

			}


			var contourMovements = [];

			for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)

				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

			}

			var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				oneHoleMovements = [];

				for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

					if ( j === il ) j = 0;
					if ( k === il ) k = 0;

					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

				}

				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );

			}


			// Loop bevelSegments, 1 for the front, 1 for the back

			for ( b = 0; b < bevelSegments; b ++ ) {

				//for ( b = bevelSegments; b > 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * ( 1 - t );

				//z = bevelThickness * t;
				bs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved
				//bs = bevelSize * t; // linear

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

					v( vert.x, vert.y,  - z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						v( vert.x, vert.y,  - z );

					}

				}

			}

			bs = bevelSize;

			// Back facing vertices

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, 0 );

				} else {

					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

			// Add stepped vertices...
			// Including front facing vertices

			var s;

			for ( s = 1; s <= steps; s ++ ) {

				for ( i = 0; i < vlen; i ++ ) {

					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y, amount / steps * s );

					} else {

						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

						v( position2.x, position2.y, position2.z );

					}

				}

			}


			// Add bevel segments planes

			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( b = bevelSegments - 1; b >= 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * ( 1 - t );
				//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
				bs = bevelSize * Math.sin ( t * Math.PI / 2 );

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y,  amount + z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						if ( ! extrudeByPath ) {

							v( vert.x, vert.y,  amount + z );

						} else {

							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

						}

					}

				}

			}

			/* Faces */

			// Top and bottom faces

			buildLidFaces();

			// Sides faces

			buildSideFaces();


			/////  Internal functions

			function buildLidFaces() {

				if ( bevelEnabled ) {

					var layer = 0; // steps + 1
					var offset = vlen * layer;

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

					}

					layer = steps + bevelSegments * 2;
					offset = vlen * layer;

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

					}

				} else {

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );

					}

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

					}

				}

			}

			// Create faces for the z-sides of the shape

			function buildSideFaces() {

				var layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					sidewalls( ahole, layeroffset );

					//, true
					layeroffset += ahole.length;

				}

			}

			function sidewalls( contour, layeroffset ) {

				var j, k;
				i = contour.length;

				while ( -- i >= 0 ) {

					j = i;
					k = i - 1;
					if ( k < 0 ) k = contour.length - 1;

					//console.log('b', i,j, i-1, k,vertices.length);

					var s = 0, sl = steps  + bevelSegments * 2;

					for ( s = 0; s < sl; s ++ ) {

						var slen1 = vlen * s;
						var slen2 = vlen * ( s + 1 );

						var a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;

						f4( a, b, c, d, contour, s, sl, j, k );

					}

				}

			}


			function v( x, y, z ) {

				scope.vertices.push( new THREE.Vector3( x, y, z ) );

			}

			function f3( a, b, c ) {

				a += shapesOffset;
				b += shapesOffset;
				c += shapesOffset;

				scope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );

				var uvs = uvgen.generateTopUV( scope, a, b, c );

				scope.faceVertexUvs[ 0 ].push( uvs );

			}

			function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

				a += shapesOffset;
				b += shapesOffset;
				c += shapesOffset;
				d += shapesOffset;

				scope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );
				scope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );

				var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

				scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
				scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

			}

		};

		THREE.ExtrudeGeometry.WorldUVGenerator = {

			generateTopUV: function ( geometry, indexA, indexB, indexC ) {

				var vertices = geometry.vertices;

				var a = vertices[ indexA ];
				var b = vertices[ indexB ];
				var c = vertices[ indexC ];

				return [
					new THREE.Vector2( a.x, a.y ),
					new THREE.Vector2( b.x, b.y ),
					new THREE.Vector2( c.x, c.y )
				];

			},

			generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

				var vertices = geometry.vertices;

				var a = vertices[ indexA ];
				var b = vertices[ indexB ];
				var c = vertices[ indexC ];
				var d = vertices[ indexD ];

				if ( Math.abs( a.y - b.y ) < 0.01 ) {

					return [
						new THREE.Vector2( a.x, 1 - a.z ),
						new THREE.Vector2( b.x, 1 - b.z ),
						new THREE.Vector2( c.x, 1 - c.z ),
						new THREE.Vector2( d.x, 1 - d.z )
					];

				} else {

					return [
						new THREE.Vector2( a.y, 1 - a.z ),
						new THREE.Vector2( b.y, 1 - b.z ),
						new THREE.Vector2( c.y, 1 - c.z ),
						new THREE.Vector2( d.y, 1 - d.z )
					];

				}

			}
		};

		// File:src/extras/geometries/ShapeGeometry.js

		/**
		 * @author jonobr1 / http://jonobr1.com
		 *
		 * Creates a one-sided polygonal geometry from a path shape. Similar to
		 * ExtrudeGeometry.
		 *
		 * parameters = {
		 *
		 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
		 *
		 *	material: <int> // material index for front and back faces
		 *	uvGenerator: <Object> // object that provides UV generator functions
		 *
		 * }
		 **/

		THREE.ShapeGeometry = function ( shapes, options ) {

			THREE.Geometry.call( this );

			this.type = 'ShapeGeometry';

			if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];

			this.addShapeList( shapes, options );

			this.computeFaceNormals();

		};

		THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;

		/**
		 * Add an array of shapes to THREE.ShapeGeometry.
		 */
		THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

			for ( var i = 0, l = shapes.length; i < l; i ++ ) {

				this.addShape( shapes[ i ], options );

			}

			return this;

		};

		/**
		 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
		 */
		THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {

			if ( options === undefined ) options = {};
			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

			var material = options.material;
			var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

			//

			var i, l, hole;

			var shapesOffset = this.vertices.length;
			var shapePoints = shape.extractPoints( curveSegments );

			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;

			var reverse = ! THREE.ShapeUtils.isClockWise( vertices );

			if ( reverse ) {

				vertices = vertices.reverse();

				// Maybe we should also check if holes are in the opposite direction, just to be safe...

				for ( i = 0, l = holes.length; i < l; i ++ ) {

					hole = holes[ i ];

					if ( THREE.ShapeUtils.isClockWise( hole ) ) {

						holes[ i ] = hole.reverse();

					}

				}

				reverse = false;

			}

			var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );

			// Vertices

			for ( i = 0, l = holes.length; i < l; i ++ ) {

				hole = holes[ i ];
				vertices = vertices.concat( hole );

			}

			//

			var vert, vlen = vertices.length;
			var face, flen = faces.length;

			for ( i = 0; i < vlen; i ++ ) {

				vert = vertices[ i ];

				this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );

			}

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];

				var a = face[ 0 ] + shapesOffset;
				var b = face[ 1 ] + shapesOffset;
				var c = face[ 2 ] + shapesOffset;

				this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
				this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

			}

		};

		// File:src/extras/geometries/LatheBufferGeometry.js

		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		 // points - to create a closed torus, one must use a set of points
		 //    like so: [ a, b, c, d, a ], see first is the same as last.
		 // segments - the number of circumference segments to create
		 // phiStart - the starting radian
		 // phiLength - the radian (0 to 2PI) range of the lathed section
		 //    2PI is a closed lathe, less than 2PI is a portion.

		THREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {

			THREE.BufferGeometry.call( this );

			this.type = 'LatheBufferGeometry';

			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};

			segments = Math.floor( segments ) || 12;
			phiStart = phiStart || 0;
			phiLength = phiLength || Math.PI * 2;

			// clamp phiLength so it's in range of [ 0, 2PI ]
			phiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );

			// these are used to calculate buffer length
			var vertexCount = ( segments + 1 ) * points.length;
			var indexCount = segments * points.length * 2 * 3;

			// buffers
			var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
			var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

			// helper variables
			var index = 0, indexOffset = 0, base;
			var inversePointLength = 1.0 / ( points.length - 1 );
			var inverseSegments = 1.0 / segments;
			var vertex = new THREE.Vector3();
			var uv = new THREE.Vector2();
			var i, j;

			// generate vertices and uvs

			for ( i = 0; i <= segments; i ++ ) {

				var phi = phiStart + i * inverseSegments * phiLength;

				var sin = Math.sin( phi );
				var cos = Math.cos( phi );

				for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

					// vertex
					vertex.x = points[ j ].x * sin;
					vertex.y = points[ j ].y;
					vertex.z = points[ j ].x * cos;
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

					// uv
					uv.x = i / segments;
					uv.y = j / ( points.length - 1 );
					uvs.setXY( index, uv.x, uv.y );

					// increase index
					index ++;

				}

			}

			// generate indices

			for ( i = 0; i < segments; i ++ ) {

				for ( j = 0; j < ( points.length - 1 ); j ++ ) {

					base = j + i * points.length;

					// indices
					var a = base;
					var b = base + points.length;
					var c = base + points.length + 1;
					var d = base + 1;

					// face one
					indices.setX( indexOffset, a ); indexOffset++;
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;

					// face two
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, c ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', vertices );
			this.addAttribute( 'uv', uvs );

			// generate normals

			this.computeVertexNormals();

			// if the geometry is closed, we need to average the normals along the seam.
			// because the corresponding vertices are identical (but still have different UVs).

			if( phiLength === Math.PI * 2 ) {

				var normals = this.attributes.normal.array;
				var n1 = new THREE.Vector3();
				var n2 = new THREE.Vector3();
				var n = new THREE.Vector3();

				// this is the buffer offset for the last line of vertices
				base = segments * points.length * 3;

				for( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

					// select the normal of the vertex in the first line
					n1.x = normals[ j + 0 ];
					n1.y = normals[ j + 1 ];
					n1.z = normals[ j + 2 ];

					// select the normal of the vertex in the last line
					n2.x = normals[ base + j + 0 ];
					n2.y = normals[ base + j + 1 ];
					n2.z = normals[ base + j + 2 ];

					// average normals
					n.addVectors( n1, n2 ).normalize();

					// assign the new values to both normals
					normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
					normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
					normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

				} // next row

			}

		};

		THREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;

		// File:src/extras/geometries/LatheGeometry.js

		/**
		 * @author astrodud / http://astrodud.isgreat.org/
		 * @author zz85 / https://github.com/zz85
		 * @author bhouston / http://clara.io
		 */

		// points - to create a closed torus, one must use a set of points
		//    like so: [ a, b, c, d, a ], see first is the same as last.
		// segments - the number of circumference segments to create
		// phiStart - the starting radian
		// phiLength - the radian (0 to 2PI) range of the lathed section
		//    2PI is a closed lathe, less than 2PI is a portion.

		THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {

			THREE.Geometry.call( this );

			this.type = 'LatheGeometry';

			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};

			this.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );
			this.mergeVertices();

		};

		THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;

		// File:src/extras/geometries/PlaneGeometry.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
		 */

		THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {

			THREE.Geometry.call( this );

			this.type = 'PlaneGeometry';

			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};

			this.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

		};

		THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;

		// File:src/extras/geometries/PlaneBufferGeometry.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
		 */

		THREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {

			THREE.BufferGeometry.call( this );

			this.type = 'PlaneBufferGeometry';

			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};

			var width_half = width / 2;
			var height_half = height / 2;

			var gridX = Math.floor( widthSegments ) || 1;
			var gridY = Math.floor( heightSegments ) || 1;

			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;

			var segment_width = width / gridX;
			var segment_height = height / gridY;

			var vertices = new Float32Array( gridX1 * gridY1 * 3 );
			var normals = new Float32Array( gridX1 * gridY1 * 3 );
			var uvs = new Float32Array( gridX1 * gridY1 * 2 );

			var offset = 0;
			var offset2 = 0;

			for ( var iy = 0; iy < gridY1; iy ++ ) {

				var y = iy * segment_height - height_half;

				for ( var ix = 0; ix < gridX1; ix ++ ) {

					var x = ix * segment_width - width_half;

					vertices[ offset ] = x;
					vertices[ offset + 1 ] = - y;

					normals[ offset + 2 ] = 1;

					uvs[ offset2 ] = ix / gridX;
					uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

					offset += 3;
					offset2 += 2;

				}

			}

			offset = 0;

			var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

			for ( var iy = 0; iy < gridY; iy ++ ) {

				for ( var ix = 0; ix < gridX; ix ++ ) {

					var a = ix + gridX1 * iy;
					var b = ix + gridX1 * ( iy + 1 );
					var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = ( ix + 1 ) + gridX1 * iy;

					indices[ offset ] = a;
					indices[ offset + 1 ] = b;
					indices[ offset + 2 ] = d;

					indices[ offset + 3 ] = b;
					indices[ offset + 4 ] = c;
					indices[ offset + 5 ] = d;

					offset += 6;

				}

			}

			this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
			this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		};

		THREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;

		// File:src/extras/geometries/RingBufferGeometry.js

		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		THREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

			THREE.BufferGeometry.call( this );

			this.type = 'RingBufferGeometry';

			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			innerRadius = innerRadius || 20;
			outerRadius = outerRadius || 50;

			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

			thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
			phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

			// these are used to calculate buffer length
			var vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );
			var indexCount = thetaSegments * phiSegments * 2 * 3;

			// buffers
			var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
			var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

			// some helper variables
			var index = 0, indexOffset = 0, segment;
			var radius = innerRadius;
			var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
			var vertex = new THREE.Vector3();
			var uv = new THREE.Vector2();
			var j, i;

			// generate vertices, normals and uvs

			// values are generate from the inside of the ring to the outside

			for ( j = 0; j <= phiSegments; j ++ ) {

				for ( i = 0; i <= thetaSegments; i ++ ) {

					segment = thetaStart + i / thetaSegments * thetaLength;

					// vertex
					vertex.x = radius * Math.cos( segment );
					vertex.y = radius * Math.sin( segment );
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

					// normal
					normals.setXYZ( index, 0, 0, 1 );

					// uv
					uv.x = ( vertex.x / outerRadius + 1 ) / 2;
					uv.y = ( vertex.y / outerRadius + 1 ) / 2;
					uvs.setXY( index, uv.x, uv.y );

					// increase index
					index++;

				}

				// increase the radius for next row of vertices
				radius += radiusStep;

			}

			// generate indices

			for ( j = 0; j < phiSegments; j ++ ) {

				var thetaSegmentLevel = j * ( thetaSegments + 1 );

				for ( i = 0; i < thetaSegments; i ++ ) {

					segment = i + thetaSegmentLevel;

					// indices
					var a = segment;
					var b = segment + thetaSegments + 1;
					var c = segment + thetaSegments + 2;
					var d = segment + 1;

					// face one
					indices.setX( indexOffset, a ); indexOffset++;
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, c ); indexOffset++;

					// face two
					indices.setX( indexOffset, a ); indexOffset++;
					indices.setX( indexOffset, c ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', vertices );
			this.addAttribute( 'normal', normals );
			this.addAttribute( 'uv', uvs );

		};

		THREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;

		// File:src/extras/geometries/RingGeometry.js

		/**
		 * @author Kaleb Murphy
		 */

		THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

			THREE.Geometry.call( this );

			this.type = 'RingGeometry';

			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			this.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );

		};

		THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;

		// File:src/extras/geometries/SphereGeometry.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

			THREE.Geometry.call( this );

			this.type = 'SphereGeometry';

			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			this.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );

		};

		THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;

		// File:src/extras/geometries/SphereBufferGeometry.js

		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 * based on THREE.SphereGeometry
		 */

		THREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

			THREE.BufferGeometry.call( this );

			this.type = 'SphereBufferGeometry';

			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};

			radius = radius || 50;

			widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
			heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

			phiStart = phiStart !== undefined ? phiStart : 0;
			phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

			var thetaEnd = thetaStart + thetaLength;

			var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );

			var positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

			var index = 0, vertices = [], normal = new THREE.Vector3();

			for ( var y = 0; y <= heightSegments; y ++ ) {

				var verticesRow = [];

				var v = y / heightSegments;

				for ( var x = 0; x <= widthSegments; x ++ ) {

					var u = x / widthSegments;

					var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
					var py = radius * Math.cos( thetaStart + v * thetaLength );
					var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

					normal.set( px, py, pz ).normalize();

					positions.setXYZ( index, px, py, pz );
					normals.setXYZ( index, normal.x, normal.y, normal.z );
					uvs.setXY( index, u, 1 - v );

					verticesRow.push( index );

					index ++;

				}

				vertices.push( verticesRow );

			}

			var indices = [];

			for ( var y = 0; y < heightSegments; y ++ ) {

				for ( var x = 0; x < widthSegments; x ++ ) {

					var v1 = vertices[ y ][ x + 1 ];
					var v2 = vertices[ y ][ x ];
					var v3 = vertices[ y + 1 ][ x ];
					var v4 = vertices[ y + 1 ][ x + 1 ];

					if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
					if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );

				}

			}

			this.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );
			this.addAttribute( 'position', positions );
			this.addAttribute( 'normal', normals );
			this.addAttribute( 'uv', uvs );

			this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

		};

		THREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;

		// File:src/extras/geometries/TextGeometry.js

		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Text = 3D Text
		 *
		 * parameters = {
		 *  font: <THREE.Font>, // font
		 *
		 *  size: <float>, // size of the text
		 *  height: <float>, // thickness to extrude text
		 *  curveSegments: <int>, // number of points on the curves
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into text bevel goes
		 *  bevelSize: <float> // how far from text outline is bevel
		 * }
		 */

		THREE.TextGeometry = function ( text, parameters ) {

			parameters = parameters || {};

			var font = parameters.font;

			if ( font instanceof THREE.Font === false ) {

				console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
				return new THREE.Geometry();

			}

			var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

			// translate parameters to ExtrudeGeometry API

			parameters.amount = parameters.height !== undefined ? parameters.height : 50;

			// defaults

			if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
			if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
			if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

			THREE.ExtrudeGeometry.call( this, shapes, parameters );

			this.type = 'TextGeometry';

		};

		THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );
		THREE.TextGeometry.prototype.constructor = THREE.TextGeometry;

		// File:src/extras/geometries/TorusBufferGeometry.js

		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */

		THREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

			THREE.BufferGeometry.call( this );

			this.type = 'TorusBufferGeometry';

			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};

			radius = radius || 100;
			tube = tube || 40;
			radialSegments = Math.floor( radialSegments ) || 8;
			tubularSegments = Math.floor( tubularSegments ) || 6;
			arc = arc || Math.PI * 2;

			// used to calculate buffer length
			var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
			var indexCount = radialSegments * tubularSegments * 2 * 3;

			// buffers
			var indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );
			var vertices = new Float32Array( vertexCount * 3 );
			var normals = new Float32Array( vertexCount * 3 );
			var uvs = new Float32Array( vertexCount * 2 );

			// offset variables
			var vertexBufferOffset = 0;
			var uvBufferOffset = 0;
			var indexBufferOffset = 0;

			// helper variables
			var center = new THREE.Vector3();
			var vertex = new THREE.Vector3();
			var normal = new THREE.Vector3();

			var j, i;

			// generate vertices, normals and uvs

			for ( j = 0; j <= radialSegments; j ++ ) {

				for ( i = 0; i <= tubularSegments; i ++ ) {

					var u = i / tubularSegments * arc;
					var v = j / radialSegments * Math.PI * 2;

					// vertex
					vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
					vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
					vertex.z = tube * Math.sin( v );

					vertices[ vertexBufferOffset ] = vertex.x;
					vertices[ vertexBufferOffset + 1 ] = vertex.y;
					vertices[ vertexBufferOffset + 2 ] = vertex.z;

					// this vector is used to calculate the normal
					center.x = radius * Math.cos( u );
					center.y = radius * Math.sin( u );

					// normal
					normal.subVectors( vertex, center ).normalize();

					normals[ vertexBufferOffset ] = normal.x;
					normals[ vertexBufferOffset + 1 ] = normal.y;
					normals[ vertexBufferOffset + 2 ] = normal.z;

					// uv
					uvs[ uvBufferOffset ] = i / tubularSegments;
					uvs[ uvBufferOffset + 1 ] = j / radialSegments;

					// update offsets
					vertexBufferOffset += 3;
					uvBufferOffset += 2;

				}

			}

			// generate indices

			for ( j = 1; j <= radialSegments; j ++ ) {

				for ( i = 1; i <= tubularSegments; i ++ ) {

					// indices
					var a = ( tubularSegments + 1 ) * j + i - 1;
					var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
					var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
					var d = ( tubularSegments + 1 ) * j + i;

					// face one
					indices[ indexBufferOffset ] = a;
					indices[ indexBufferOffset + 1 ] = b;
					indices[ indexBufferOffset + 2 ] = d;

					// face two
					indices[ indexBufferOffset + 3 ] = b;
					indices[ indexBufferOffset + 4 ] = c;
					indices[ indexBufferOffset + 5 ] = d;

					// update offset
					indexBufferOffset += 6;

				}

			}

			// build geometry
			this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
			this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		};

		THREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;

		// File:src/extras/geometries/TorusGeometry.js

		/**
		 * @author oosmoxiecode
		 * @author mrdoob / http://mrdoob.com/
		 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
		 */

		THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

			THREE.Geometry.call( this );

			this.type = 'TorusGeometry';

			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};

			this.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );

		};

		THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;

		// File:src/extras/geometries/TorusKnotBufferGeometry.js

		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * see: http://www.blackpawn.com/texts/pqtorus/
		 */
		THREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {

			THREE.BufferGeometry.call( this );

			this.type = 'TorusKnotBufferGeometry';

			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};

			radius = radius || 100;
			tube = tube || 40;
			tubularSegments = Math.floor( tubularSegments ) || 64;
			radialSegments = Math.floor( radialSegments ) || 8;
			p = p || 2;
			q = q || 3;

			// used to calculate buffer length
			var vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );
			var indexCount = radialSegments * tubularSegments * 2 * 3;

			// buffers
			var indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );
			var vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
			var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );

			// helper variables
			var i, j, index = 0, indexOffset = 0;

			var vertex = new THREE.Vector3();
			var normal = new THREE.Vector3();
			var uv = new THREE.Vector2();

			var P1 = new THREE.Vector3();
			var P2 = new THREE.Vector3();

			var B = new THREE.Vector3();
			var T = new THREE.Vector3();
			var N = new THREE.Vector3();

			// generate vertices, normals and uvs

			for ( i = 0; i <= tubularSegments; ++ i ) {

				// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

				var u = i / tubularSegments * p * Math.PI * 2;

				// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
				// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

				calculatePositionOnCurve( u, p, q, radius, P1 );
				calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

				// calculate orthonormal basis

				T.subVectors( P2, P1 );
				N.addVectors( P2, P1 );
				B.crossVectors( T, N );
				N.crossVectors( B, T );

				// normalize B, N. T can be ignored, we don't use it

				B.normalize();
				N.normalize();

				for ( j = 0; j <= radialSegments; ++ j ) {

					// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
					// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

					var v = j / radialSegments * Math.PI * 2;
					var cx = - tube * Math.cos( v );
					var cy = tube * Math.sin( v );

					// now calculate the final vertex position.
					// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

					vertex.x = P1.x + ( cx * N.x + cy * B.x );
					vertex.y = P1.y + ( cx * N.y + cy * B.y );
					vertex.z = P1.z + ( cx * N.z + cy * B.z );

					// vertex
					vertices.setXYZ( index, vertex.x, vertex.y, vertex.z );

					// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
					normal.subVectors( vertex, P1 ).normalize();
					normals.setXYZ( index, normal.x, normal.y, normal.z );

					// uv
					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;
					uvs.setXY( index, uv.x, uv.y );

					// increase index
					index ++;

				}

			}

			// generate indices

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					// indices
					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// face one
					indices.setX( indexOffset, a ); indexOffset++;
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;

					// face two
					indices.setX( indexOffset, b ); indexOffset++;
					indices.setX( indexOffset, c ); indexOffset++;
					indices.setX( indexOffset, d ); indexOffset++;

				}

			}

			// build geometry

			this.setIndex( indices );
			this.addAttribute( 'position', vertices );
			this.addAttribute( 'normal', normals );
			this.addAttribute( 'uv', uvs );

			// this function calculates the current position on the torus curve

			function calculatePositionOnCurve( u, p, q, radius, position ) {

				var cu = Math.cos( u );
				var su = Math.sin( u );
				var quOverP = q / p * u;
				var cs = Math.cos( quOverP );

				position.x = radius * ( 2 + cs ) * 0.5 * cu;
				position.y = radius * ( 2 + cs ) * su * 0.5;
				position.z = radius * Math.sin( quOverP ) * 0.5;

			}

		};

		THREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;

		// File:src/extras/geometries/TorusKnotGeometry.js

		/**
		 * @author oosmoxiecode
		 */

		THREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

			THREE.Geometry.call( this );

			this.type = 'TorusKnotGeometry';

			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};

			if( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

			this.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
			this.mergeVertices();

		};

		THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;

		// File:src/extras/geometries/TubeGeometry.js

		/**
		 * @author WestLangley / https://github.com/WestLangley
		 * @author zz85 / https://github.com/zz85
		 * @author miningold / https://github.com/miningold
		 * @author jonobr1 / https://github.com/jonobr1
		 *
		 * Modified from the TorusKnotGeometry by @oosmoxiecode
		 *
		 * Creates a tube which extrudes along a 3d spline
		 *
		 * Uses parallel transport frames as described in
		 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
		 */

		THREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {

			THREE.Geometry.call( this );

			this.type = 'TubeGeometry';

			this.parameters = {
				path: path,
				segments: segments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed,
				taper: taper
			};

			segments = segments || 64;
			radius = radius || 1;
			radialSegments = radialSegments || 8;
			closed = closed || false;
			taper = taper || THREE.TubeGeometry.NoTaper;

			var grid = [];

			var scope = this,

				tangent,
				normal,
				binormal,

				numpoints = segments + 1,

				u, v, r,

				cx, cy,
				pos, pos2 = new THREE.Vector3(),
				i, j,
				ip, jp,
				a, b, c, d,
				uva, uvb, uvc, uvd;

			var frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),
				tangents = frames.tangents,
				normals = frames.normals,
				binormals = frames.binormals;

			// proxy internals
			this.tangents = tangents;
			this.normals = normals;
			this.binormals = binormals;

			function vert( x, y, z ) {

				return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

			}

			// construct the grid

			for ( i = 0; i < numpoints; i ++ ) {

				grid[ i ] = [];

				u = i / ( numpoints - 1 );

				pos = path.getPointAt( u );

				tangent = tangents[ i ];
				normal = normals[ i ];
				binormal = binormals[ i ];

				r = radius * taper( u );

				for ( j = 0; j < radialSegments; j ++ ) {

					v = j / radialSegments * 2 * Math.PI;

					cx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
					cy = r * Math.sin( v );

					pos2.copy( pos );
					pos2.x += cx * normal.x + cy * binormal.x;
					pos2.y += cx * normal.y + cy * binormal.y;
					pos2.z += cx * normal.z + cy * binormal.z;

					grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

				}

			}


			// construct the mesh

			for ( i = 0; i < segments; i ++ ) {

				for ( j = 0; j < radialSegments; j ++ ) {

					ip = ( closed ) ? ( i + 1 ) % segments : i + 1;
					jp = ( j + 1 ) % radialSegments;

					a = grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
					b = grid[ ip ][ j ];
					c = grid[ ip ][ jp ];
					d = grid[ i ][ jp ];

					uva = new THREE.Vector2( i / segments, j / radialSegments );
					uvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );
					uvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
					uvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );

					this.faces.push( new THREE.Face3( a, b, d ) );
					this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

					this.faces.push( new THREE.Face3( b, c, d ) );
					this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

				}

			}

			this.computeFaceNormals();
			this.computeVertexNormals();

		};

		THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;

		THREE.TubeGeometry.NoTaper = function ( u ) {

			return 1;

		};

		THREE.TubeGeometry.SinusoidalTaper = function ( u ) {

			return Math.sin( Math.PI * u );

		};

		// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
		THREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {

			var	normal = new THREE.Vector3(),

				tangents = [],
				normals = [],
				binormals = [],

				vec = new THREE.Vector3(),
				mat = new THREE.Matrix4(),

				numpoints = segments + 1,
				theta,
				smallest,

				tx, ty, tz,
				i, u;


			// expose internals
			this.tangents = tangents;
			this.normals = normals;
			this.binormals = binormals;

			// compute the tangent vectors for each segment on the path

			for ( i = 0; i < numpoints; i ++ ) {

				u = i / ( numpoints - 1 );

				tangents[ i ] = path.getTangentAt( u );
				tangents[ i ].normalize();

			}

			initialNormal3();

			/*
			function initialNormal1(lastBinormal) {
				// fixed start binormal. Has dangers of 0 vectors
				normals[ 0 ] = new THREE.Vector3();
				binormals[ 0 ] = new THREE.Vector3();
				if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
				normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
				binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
			}

			function initialNormal2() {

				// This uses the Frenet-Serret formula for deriving binormal
				var t2 = path.getTangentAt( epsilon );

				normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
				binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );

				normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
				binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();

			}
			*/

			function initialNormal3() {

				// select an initial normal vector perpendicular to the first tangent vector,
				// and in the direction of the smallest tangent xyz component

				normals[ 0 ] = new THREE.Vector3();
				binormals[ 0 ] = new THREE.Vector3();
				smallest = Number.MAX_VALUE;
				tx = Math.abs( tangents[ 0 ].x );
				ty = Math.abs( tangents[ 0 ].y );
				tz = Math.abs( tangents[ 0 ].z );

				if ( tx <= smallest ) {

					smallest = tx;
					normal.set( 1, 0, 0 );

				}

				if ( ty <= smallest ) {

					smallest = ty;
					normal.set( 0, 1, 0 );

				}

				if ( tz <= smallest ) {

					normal.set( 0, 0, 1 );

				}

				vec.crossVectors( tangents[ 0 ], normal ).normalize();

				normals[ 0 ].crossVectors( tangents[ 0 ], vec );
				binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );

			}


			// compute the slowly-varying normal and binormal vectors for each segment on the path

			for ( i = 1; i < numpoints; i ++ ) {

				normals[ i ] = normals[ i - 1 ].clone();

				binormals[ i ] = binormals[ i - 1 ].clone();

				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

				if ( vec.length() > Number.EPSILON ) {

					vec.normalize();

					theta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

				}

				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}


			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

			if ( closed ) {

				theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );
				theta /= ( numpoints - 1 );

				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {

					theta = - theta;

				}

				for ( i = 1; i < numpoints; i ++ ) {

					// twist a little...
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

			}

		};

		// File:src/extras/geometries/PolyhedronGeometry.js

		/**
		 * @author clockworkgeek / https://github.com/clockworkgeek
		 * @author timothypratley / https://github.com/timothypratley
		 * @author WestLangley / http://github.com/WestLangley
		*/

		THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {

			THREE.Geometry.call( this );

			this.type = 'PolyhedronGeometry';

			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};

			radius = radius || 1;
			detail = detail || 0;

			var that = this;

			for ( var i = 0, l = vertices.length; i < l; i += 3 ) {

				prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

			}

			var p = this.vertices;

			var faces = [];

			for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {

				var v1 = p[ indices[ i ] ];
				var v2 = p[ indices[ i + 1 ] ];
				var v3 = p[ indices[ i + 2 ] ];

				faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );

			}

			var centroid = new THREE.Vector3();

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				subdivide( faces[ i ], detail );

			}


			// Handle case when face straddles the seam

			for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {

				var uvs = this.faceVertexUvs[ 0 ][ i ];

				var x0 = uvs[ 0 ].x;
				var x1 = uvs[ 1 ].x;
				var x2 = uvs[ 2 ].x;

				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );

				if ( max > 0.9 && min < 0.1 ) {

					// 0.9 is somewhat arbitrary

					if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
					if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
					if ( x2 < 0.2 ) uvs[ 2 ].x += 1;

				}

			}


			// Apply radius

			for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

				this.vertices[ i ].multiplyScalar( radius );

			}


			// Merge vertices

			this.mergeVertices();

			this.computeFaceNormals();

			this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );


			// Project vector onto sphere's surface

			function prepare( vector ) {

				var vertex = vector.normalize().clone();
				vertex.index = that.vertices.push( vertex ) - 1;

				// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

				var u = azimuth( vector ) / 2 / Math.PI + 0.5;
				var v = inclination( vector ) / Math.PI + 0.5;
				vertex.uv = new THREE.Vector2( u, 1 - v );

				return vertex;

			}


			// Approximate a curved face with recursively sub-divided triangles.

			function make( v1, v2, v3 ) {

				var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
				that.faces.push( face );

				centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );

				var azi = azimuth( centroid );

				that.faceVertexUvs[ 0 ].push( [
					correctUV( v1.uv, v1, azi ),
					correctUV( v2.uv, v2, azi ),
					correctUV( v3.uv, v3, azi )
				] );

			}


			// Analytically subdivide a face to the required detail level.

			function subdivide( face, detail ) {

				var cols = Math.pow( 2, detail );
				var a = prepare( that.vertices[ face.a ] );
				var b = prepare( that.vertices[ face.b ] );
				var c = prepare( that.vertices[ face.c ] );
				var v = [];

				// Construct all of the vertices for this subdivision.

				for ( var i = 0 ; i <= cols; i ++ ) {

					v[ i ] = [];

					var aj = prepare( a.clone().lerp( c, i / cols ) );
					var bj = prepare( b.clone().lerp( c, i / cols ) );
					var rows = cols - i;

					for ( var j = 0; j <= rows; j ++ ) {

						if ( j === 0 && i === cols ) {

							v[ i ][ j ] = aj;

						} else {

							v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );

						}

					}

				}

				// Construct all of the faces.

				for ( var i = 0; i < cols ; i ++ ) {

					for ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

						var k = Math.floor( j / 2 );

						if ( j % 2 === 0 ) {

							make(
								v[ i ][ k + 1 ],
								v[ i + 1 ][ k ],
								v[ i ][ k ]
							);

						} else {

							make(
								v[ i ][ k + 1 ],
								v[ i + 1 ][ k + 1 ],
								v[ i + 1 ][ k ]
							);

						}

					}

				}

			}


			// Angle around the Y axis, counter-clockwise when looking from above.

			function azimuth( vector ) {

				return Math.atan2( vector.z, - vector.x );

			}


			// Angle above the XZ plane.

			function inclination( vector ) {

				return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

			}


			// Texture fixing helper. Spheres have some odd behaviours.

			function correctUV( uv, vector, azimuth ) {

				if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
				if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
				return uv.clone();

			}


		};

		THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;

		// File:src/extras/geometries/DodecahedronGeometry.js

		/**
		 * @author Abe Pazos / https://hamoid.com
		 */

		THREE.DodecahedronGeometry = function ( radius, detail ) {

			var t = ( 1 + Math.sqrt( 5 ) ) / 2;
			var r = 1 / t;

			var vertices = [

				// (Â±1, Â±1, Â±1)
				- 1, - 1, - 1,    - 1, - 1,  1,
				- 1,  1, - 1,    - 1,  1,  1,
				 1, - 1, - 1,     1, - 1,  1,
				 1,  1, - 1,     1,  1,  1,

				// (0, Â±1/Ï, Â±Ï)
				 0, - r, - t,     0, - r,  t,
				 0,  r, - t,     0,  r,  t,

				// (Â±1/Ï, Â±Ï, 0)
				- r, - t,  0,    - r,  t,  0,
				 r, - t,  0,     r,  t,  0,

				// (Â±Ï, 0, Â±1/Ï)
				- t,  0, - r,     t,  0, - r,
				- t,  0,  r,     t,  0,  r
			];

			var indices = [
				 3, 11,  7,      3,  7, 15,      3, 15, 13,
				 7, 19, 17,      7, 17,  6,      7,  6, 15,
				17,  4,  8,     17,  8, 10,     17, 10,  6,
				 8,  0, 16,      8, 16,  2,      8,  2, 10,
				 0, 12,  1,      0,  1, 18,      0, 18, 16,
				 6, 10,  2,      6,  2, 13,      6, 13, 15,
				 2, 16, 18,      2, 18,  3,      2,  3, 13,
				18,  1,  9,     18,  9, 11,     18, 11,  3,
				 4, 14, 12,      4, 12,  0,      4,  0,  8,
				11,  9,  5,     11,  5, 19,     11, 19,  7,
				19,  5, 14,     19, 14,  4,     19,  4, 17,
				 1, 12, 14,      1, 14,  5,      1,  5,  9
			];

			THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

			this.type = 'DodecahedronGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

		};

		THREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
		THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;

		// File:src/extras/geometries/IcosahedronGeometry.js

		/**
		 * @author timothypratley / https://github.com/timothypratley
		 */

		THREE.IcosahedronGeometry = function ( radius, detail ) {

			var t = ( 1 + Math.sqrt( 5 ) ) / 2;

			var vertices = [
				- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
				 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
				 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
			];

			var indices = [
				 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
				 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
				 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
				 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
			];

			THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

			this.type = 'IcosahedronGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

		};

		THREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
		THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;

		// File:src/extras/geometries/OctahedronGeometry.js

		/**
		 * @author timothypratley / https://github.com/timothypratley
		 */

		THREE.OctahedronGeometry = function ( radius, detail ) {

			var vertices = [
				1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
			];

			var indices = [
				0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
			];

			THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

			this.type = 'OctahedronGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

		};

		THREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
		THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;

		// File:src/extras/geometries/TetrahedronGeometry.js

		/**
		 * @author timothypratley / https://github.com/timothypratley
		 */

		THREE.TetrahedronGeometry = function ( radius, detail ) {

			var vertices = [
				 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
			];

			var indices = [
				 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
			];

			THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

			this.type = 'TetrahedronGeometry';

			this.parameters = {
				radius: radius,
				detail: detail
			};

		};

		THREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
		THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;

		// File:src/extras/geometries/ParametricGeometry.js

		/**
		 * @author zz85 / https://github.com/zz85
		 * Parametric Surfaces Geometry
		 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
		 *
		 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
		 *
		 */

		THREE.ParametricGeometry = function ( func, slices, stacks ) {

			THREE.Geometry.call( this );

			this.type = 'ParametricGeometry';

			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};

			var verts = this.vertices;
			var faces = this.faces;
			var uvs = this.faceVertexUvs[ 0 ];

			var i, j, p;
			var u, v;

			var sliceCount = slices + 1;

			for ( i = 0; i <= stacks; i ++ ) {

				v = i / stacks;

				for ( j = 0; j <= slices; j ++ ) {

					u = j / slices;

					p = func( u, v );
					verts.push( p );

				}

			}

			var a, b, c, d;
			var uva, uvb, uvc, uvd;

			for ( i = 0; i < stacks; i ++ ) {

				for ( j = 0; j < slices; j ++ ) {

					a = i * sliceCount + j;
					b = i * sliceCount + j + 1;
					c = ( i + 1 ) * sliceCount + j + 1;
					d = ( i + 1 ) * sliceCount + j;

					uva = new THREE.Vector2( j / slices, i / stacks );
					uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
					uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
					uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );

					faces.push( new THREE.Face3( a, b, d ) );
					uvs.push( [ uva, uvb, uvd ] );

					faces.push( new THREE.Face3( b, c, d ) );
					uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );

				}

			}

			// console.log(this);

			// magic bullet
			// var diff = this.mergeVertices();
			// console.log('removed ', diff, ' vertices by merging');

			this.computeFaceNormals();
			this.computeVertexNormals();

		};

		THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );
		THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;

		// File:src/extras/geometries/WireframeGeometry.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.WireframeGeometry = function ( geometry ) {

			THREE.BufferGeometry.call( this );

			var edge = [ 0, 0 ], hash = {};

			function sortFunction( a, b ) {

				return a - b;

			}

			var keys = [ 'a', 'b', 'c' ];

			if ( geometry instanceof THREE.Geometry ) {

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var numEdges = 0;

				// allocate maximal size
				var edges = new Uint32Array( 6 * faces.length );

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					for ( var j = 0; j < 3; j ++ ) {

						edge[ 0 ] = face[ keys[ j ] ];
						edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
						edge.sort( sortFunction );

						var key = edge.toString();

						if ( hash[ key ] === undefined ) {

							edges[ 2 * numEdges ] = edge[ 0 ];
							edges[ 2 * numEdges + 1 ] = edge[ 1 ];
							hash[ key ] = true;
							numEdges ++;

						}

					}

				}

				var coords = new Float32Array( numEdges * 2 * 3 );

				for ( var i = 0, l = numEdges; i < l; i ++ ) {

					for ( var j = 0; j < 2; j ++ ) {

						var vertex = vertices[ edges [ 2 * i + j ] ];

						var index = 6 * i + 3 * j;
						coords[ index + 0 ] = vertex.x;
						coords[ index + 1 ] = vertex.y;
						coords[ index + 2 ] = vertex.z;

					}

				}

				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

			} else if ( geometry instanceof THREE.BufferGeometry ) {

				if ( geometry.index !== null ) {

					// Indexed BufferGeometry

					var indices = geometry.index.array;
					var vertices = geometry.attributes.position;
					var groups = geometry.groups;
					var numEdges = 0;

					if ( groups.length === 0 ) {

						geometry.addGroup( 0, indices.length );

					}

					// allocate maximal size
					var edges = new Uint32Array( 2 * indices.length );

					for ( var o = 0, ol = groups.length; o < ol; ++ o ) {

						var group = groups[ o ];

						var start = group.start;
						var count = group.count;

						for ( var i = start, il = start + count; i < il; i += 3 ) {

							for ( var j = 0; j < 3; j ++ ) {

								edge[ 0 ] = indices[ i + j ];
								edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
								edge.sort( sortFunction );

								var key = edge.toString();

								if ( hash[ key ] === undefined ) {

									edges[ 2 * numEdges ] = edge[ 0 ];
									edges[ 2 * numEdges + 1 ] = edge[ 1 ];
									hash[ key ] = true;
									numEdges ++;

								}

							}

						}

					}

					var coords = new Float32Array( numEdges * 2 * 3 );

					for ( var i = 0, l = numEdges; i < l; i ++ ) {

						for ( var j = 0; j < 2; j ++ ) {

							var index = 6 * i + 3 * j;
							var index2 = edges[ 2 * i + j ];

							coords[ index + 0 ] = vertices.getX( index2 );
							coords[ index + 1 ] = vertices.getY( index2 );
							coords[ index + 2 ] = vertices.getZ( index2 );

						}

					}

					this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

				} else {

					// non-indexed BufferGeometry

					var vertices = geometry.attributes.position.array;
					var numEdges = vertices.length / 3;
					var numTris = numEdges / 3;

					var coords = new Float32Array( numEdges * 2 * 3 );

					for ( var i = 0, l = numTris; i < l; i ++ ) {

						for ( var j = 0; j < 3; j ++ ) {

							var index = 18 * i + 6 * j;

							var index1 = 9 * i + 3 * j;
							coords[ index + 0 ] = vertices[ index1 ];
							coords[ index + 1 ] = vertices[ index1 + 1 ];
							coords[ index + 2 ] = vertices[ index1 + 2 ];

							var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
							coords[ index + 3 ] = vertices[ index2 ];
							coords[ index + 4 ] = vertices[ index2 + 1 ];
							coords[ index + 5 ] = vertices[ index2 + 2 ];

						}

					}

					this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

				}

			}

		};

		THREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
		THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;

		// File:src/extras/helpers/AxisHelper.js

		/**
		 * @author sroucheray / http://sroucheray.org/
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.AxisHelper = function ( size ) {

			size = size || 1;

			var vertices = new Float32Array( [
				0, 0, 0,  size, 0, 0,
				0, 0, 0,  0, size, 0,
				0, 0, 0,  0, 0, size
			] );

			var colors = new Float32Array( [
				1, 0, 0,  1, 0.6, 0,
				0, 1, 0,  0.6, 1, 0,
				0, 0, 1,  0, 0.6, 1
			] );

			var geometry = new THREE.BufferGeometry();
			geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );

			var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

			THREE.LineSegments.call( this, geometry, material );

		};

		THREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;

		// File:src/extras/helpers/ArrowHelper.js

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @author zz85 / http://github.com/zz85
		 * @author bhouston / http://clara.io
		 *
		 * Creates an arrow for visualizing directions
		 *
		 * Parameters:
		 *  dir - Vector3
		 *  origin - Vector3
		 *  length - Number
		 *  color - color in hex value
		 *  headLength - Number
		 *  headWidth - Number
		 */

		THREE.ArrowHelper = ( function () {

			var lineGeometry = new THREE.BufferGeometry();
			lineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

			var coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
			coneGeometry.translate( 0, - 0.5, 0 );

			return function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

				// dir is assumed to be normalized

				THREE.Object3D.call( this );

				if ( color === undefined ) color = 0xffff00;
				if ( length === undefined ) length = 1;
				if ( headLength === undefined ) headLength = 0.2 * length;
				if ( headWidth === undefined ) headWidth = 0.2 * headLength;

				this.position.copy( origin );

				this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );
				this.line.matrixAutoUpdate = false;
				this.add( this.line );

				this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );
				this.cone.matrixAutoUpdate = false;
				this.add( this.cone );

				this.setDirection( dir );
				this.setLength( length, headLength, headWidth );

			};

		}() );

		THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );
		THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;

		THREE.ArrowHelper.prototype.setDirection = ( function () {

			var axis = new THREE.Vector3();
			var radians;

			return function setDirection( dir ) {

				// dir is assumed to be normalized

				if ( dir.y > 0.99999 ) {

					this.quaternion.set( 0, 0, 0, 1 );

				} else if ( dir.y < - 0.99999 ) {

					this.quaternion.set( 1, 0, 0, 0 );

				} else {

					axis.set( dir.z, 0, - dir.x ).normalize();

					radians = Math.acos( dir.y );

					this.quaternion.setFromAxisAngle( axis, radians );

				}

			};

		}() );

		THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;

			this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
			this.line.updateMatrix();

			this.cone.scale.set( headWidth, headLength, headWidth );
			this.cone.position.y = length;
			this.cone.updateMatrix();

		};

		THREE.ArrowHelper.prototype.setColor = function ( color ) {

			this.line.material.color.copy( color );
			this.cone.material.color.copy( color );

		};

		// File:src/extras/helpers/BoxHelper.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.BoxHelper = function ( object, color ) {

			if ( color === undefined ) color = 0xffff00;

			var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
			var positions = new Float32Array( 8 * 3 );

			var geometry = new THREE.BufferGeometry();
			geometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );
			geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );

			THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ) );

			if ( object !== undefined ) {

				this.update( object );

			}

		};

		THREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;

		THREE.BoxHelper.prototype.update = ( function () {

			var box = new THREE.Box3();

			return function update( object ) {

				if ( object instanceof THREE.Box3 ) {

					box.copy( object );

				} else {

					box.setFromObject( object );

				}

				if ( box.isEmpty() ) return;

				var min = box.min;
				var max = box.max;

				/*
				  5____4
				1/___0/|
				| 6__|_7
				2/___3/

				0: max.x, max.y, max.z
				1: min.x, max.y, max.z
				2: min.x, min.y, max.z
				3: max.x, min.y, max.z
				4: max.x, max.y, min.z
				5: min.x, max.y, min.z
				6: min.x, min.y, min.z
				7: max.x, min.y, min.z
				*/

				var position = this.geometry.attributes.position;
				var array = position.array;

				array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
				array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
				array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
				array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
				array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
				array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
				array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
				array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

				position.needsUpdate = true;

				this.geometry.computeBoundingSphere();

			};

		} )();

		// File:src/extras/helpers/BoundingBoxHelper.js

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */

		// a helper to show the world-axis-aligned bounding box for an object

		THREE.BoundingBoxHelper = function ( object, hex ) {

			var color = ( hex !== undefined ) ? hex : 0x888888;

			this.object = object;

			this.box = new THREE.Box3();

			THREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );

		};

		THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );
		THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;

		THREE.BoundingBoxHelper.prototype.update = function () {

			this.box.setFromObject( this.object );

			this.box.size( this.scale );

			this.box.center( this.position );

		};

		// File:src/extras/helpers/CameraHelper.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 *	- shows frustum, line of sight and up of the camera
		 *	- suitable for fast updates
		 * 	- based on frustum visualization in lightgl.js shadowmap example
		 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
		 */

		THREE.CameraHelper = function ( camera ) {

			var geometry = new THREE.Geometry();
			var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );

			var pointMap = {};

			// colors

			var hexFrustum = 0xffaa00;
			var hexCone = 0xff0000;
			var hexUp = 0x00aaff;
			var hexTarget = 0xffffff;
			var hexCross = 0x333333;

			// near

			addLine( "n1", "n2", hexFrustum );
			addLine( "n2", "n4", hexFrustum );
			addLine( "n4", "n3", hexFrustum );
			addLine( "n3", "n1", hexFrustum );

			// far

			addLine( "f1", "f2", hexFrustum );
			addLine( "f2", "f4", hexFrustum );
			addLine( "f4", "f3", hexFrustum );
			addLine( "f3", "f1", hexFrustum );

			// sides

			addLine( "n1", "f1", hexFrustum );
			addLine( "n2", "f2", hexFrustum );
			addLine( "n3", "f3", hexFrustum );
			addLine( "n4", "f4", hexFrustum );

			// cone

			addLine( "p", "n1", hexCone );
			addLine( "p", "n2", hexCone );
			addLine( "p", "n3", hexCone );
			addLine( "p", "n4", hexCone );

			// up

			addLine( "u1", "u2", hexUp );
			addLine( "u2", "u3", hexUp );
			addLine( "u3", "u1", hexUp );

			// target

			addLine( "c", "t", hexTarget );
			addLine( "p", "c", hexCross );

			// cross

			addLine( "cn1", "cn2", hexCross );
			addLine( "cn3", "cn4", hexCross );

			addLine( "cf1", "cf2", hexCross );
			addLine( "cf3", "cf4", hexCross );

			function addLine( a, b, hex ) {

				addPoint( a, hex );
				addPoint( b, hex );

			}

			function addPoint( id, hex ) {

				geometry.vertices.push( new THREE.Vector3() );
				geometry.colors.push( new THREE.Color( hex ) );

				if ( pointMap[ id ] === undefined ) {

					pointMap[ id ] = [];

				}

				pointMap[ id ].push( geometry.vertices.length - 1 );

			}

			THREE.LineSegments.call( this, geometry, material );

			this.camera = camera;
			if( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

			this.matrix = camera.matrixWorld;
			this.matrixAutoUpdate = false;

			this.pointMap = pointMap;

			this.update();

		};

		THREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;

		THREE.CameraHelper.prototype.update = function () {

			var geometry, pointMap;

			var vector = new THREE.Vector3();
			var camera = new THREE.Camera();

			function setPoint( point, x, y, z ) {

				vector.set( x, y, z ).unproject( camera );

				var points = pointMap[ point ];

				if ( points !== undefined ) {

					for ( var i = 0, il = points.length; i < il; i ++ ) {

						geometry.vertices[ points[ i ] ].copy( vector );

					}

				}

			}

			return function update() {

				geometry = this.geometry;
				pointMap = this.pointMap;

				var w = 1, h = 1;

				// we need just camera projection matrix
				// world matrix must be identity

				camera.projectionMatrix.copy( this.camera.projectionMatrix );

				// center / target

				setPoint( "c", 0, 0, - 1 );
				setPoint( "t", 0, 0,  1 );

				// near

				setPoint( "n1", - w, - h, - 1 );
				setPoint( "n2",   w, - h, - 1 );
				setPoint( "n3", - w,   h, - 1 );
				setPoint( "n4",   w,   h, - 1 );

				// far

				setPoint( "f1", - w, - h, 1 );
				setPoint( "f2",   w, - h, 1 );
				setPoint( "f3", - w,   h, 1 );
				setPoint( "f4",   w,   h, 1 );

				// up

				setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
				setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
				setPoint( "u3",         0, h * 2,   - 1 );

				// cross

				setPoint( "cf1", - w,   0, 1 );
				setPoint( "cf2",   w,   0, 1 );
				setPoint( "cf3",   0, - h, 1 );
				setPoint( "cf4",   0,   h, 1 );

				setPoint( "cn1", - w,   0, - 1 );
				setPoint( "cn2",   w,   0, - 1 );
				setPoint( "cn3",   0, - h, - 1 );
				setPoint( "cn4",   0,   h, - 1 );

				geometry.verticesNeedUpdate = true;

			};

		}();

		// File:src/extras/helpers/DirectionalLightHelper.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */

		THREE.DirectionalLightHelper = function ( light, size ) {

			THREE.Object3D.call( this );

			this.light = light;
			this.light.updateMatrixWorld();

			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;

			if ( size === undefined ) size = 1;

			var geometry = new THREE.BufferGeometry();
			geometry.addAttribute( 'position', new THREE.Float32Attribute( [
				- size,   size, 0,
				  size,   size, 0,
				  size, - size, 0,
				- size, - size, 0,
				- size,   size, 0
			], 3 ) );

			var material = new THREE.LineBasicMaterial( { fog: false } );

			this.add( new THREE.Line( geometry, material ) );

			geometry = new THREE.BufferGeometry();
			geometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

			this.add( new THREE.Line( geometry, material ));

			this.update();

		};

		THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );
		THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;

		THREE.DirectionalLightHelper.prototype.dispose = function () {

			var lightPlane = this.children[ 0 ];
			var targetLine = this.children[ 1 ];

			lightPlane.geometry.dispose();
			lightPlane.material.dispose();
			targetLine.geometry.dispose();
			targetLine.material.dispose();

		};

		THREE.DirectionalLightHelper.prototype.update = function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();
			var v3 = new THREE.Vector3();

			return function update() {

				v1.setFromMatrixPosition( this.light.matrixWorld );
				v2.setFromMatrixPosition( this.light.target.matrixWorld );
				v3.subVectors( v2, v1 );

				var lightPlane = this.children[ 0 ];
				var targetLine = this.children[ 1 ];

				lightPlane.lookAt( v3 );
				lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

				targetLine.lookAt( v3 );
				targetLine.scale.z = v3.length();

			};

		}();

		// File:src/extras/helpers/EdgesHelper.js

		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @param object THREE.Mesh whose geometry will be used
		 * @param hex line color
		 * @param thresholdAngle the minimum angle (in degrees),
		 * between the face normals of adjacent faces,
		 * that is required to render an edge. A value of 10 means
		 * an edge is only rendered if the angle is at least 10 degrees.
		 */

		THREE.EdgesHelper = function ( object, hex, thresholdAngle ) {

			var color = ( hex !== undefined ) ? hex : 0xffffff;

			THREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );

			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;

		};

		THREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;

		// File:src/extras/helpers/FaceNormalsHelper.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/

		THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {

			// FaceNormalsHelper only supports THREE.Geometry

			this.object = object;

			this.size = ( size !== undefined ) ? size : 1;

			var color = ( hex !== undefined ) ? hex : 0xffff00;

			var width = ( linewidth !== undefined ) ? linewidth : 1;

			//

			var nNormals = 0;

			var objGeometry = this.object.geometry;

			if ( objGeometry instanceof THREE.Geometry ) {

				nNormals = objGeometry.faces.length;

			} else {

				console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

			}

			//

			var geometry = new THREE.BufferGeometry();

			var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );

			geometry.addAttribute( 'position', positions );

			THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );

			//

			this.matrixAutoUpdate = false;
			this.update();

		};

		THREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;

		THREE.FaceNormalsHelper.prototype.update = ( function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();
			var normalMatrix = new THREE.Matrix3();

			return function update() {

				this.object.updateMatrixWorld( true );

				normalMatrix.getNormalMatrix( this.object.matrixWorld );

				var matrixWorld = this.object.matrixWorld;

				var position = this.geometry.attributes.position;

				//

				var objGeometry = this.object.geometry;

				var vertices = objGeometry.vertices;

				var faces = objGeometry.faces;

				var idx = 0;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					var face = faces[ i ];

					var normal = face.normal;

					v1.copy( vertices[ face.a ] )
						.add( vertices[ face.b ] )
						.add( vertices[ face.c ] )
						.divideScalar( 3 )
						.applyMatrix4( matrixWorld );

					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

				position.needsUpdate = true;

				return this;

			};

		}() );

		// File:src/extras/helpers/GridHelper.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.GridHelper = function ( size, divisions, color1, color2 ) {

			divisions = divisions || 1;
			color1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );
			color2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );

			var center = divisions / 2;
			var step = ( size * 2 ) / divisions;
			var vertices = [], colors = [];

			for ( var i = 0, j = 0, k = - size; i <= divisions; i ++, k += step ) {

				vertices.push( - size, 0, k, size, 0, k );
				vertices.push( k, 0, - size, k, 0, size );

				var color = i === center ? color1 : color2;

				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;

			}

			var geometry = new THREE.BufferGeometry();
			geometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );

			var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

			THREE.LineSegments.call( this, geometry, material );

		};

		THREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.GridHelper.prototype.constructor = THREE.GridHelper;

		THREE.GridHelper.prototype.setColors = function () {

			console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

		};

		// File:src/extras/helpers/HemisphereLightHelper.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.HemisphereLightHelper = function ( light, sphereSize ) {

			THREE.Object3D.call( this );

			this.light = light;
			this.light.updateMatrixWorld();

			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;

			this.colors = [ new THREE.Color(), new THREE.Color() ];

			var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
			geometry.rotateX( - Math.PI / 2 );

			for ( var i = 0, il = 8; i < il; i ++ ) {

				geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

			}

			var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );

			this.lightSphere = new THREE.Mesh( geometry, material );
			this.add( this.lightSphere );

			this.update();

		};

		THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );
		THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;

		THREE.HemisphereLightHelper.prototype.dispose = function () {

			this.lightSphere.geometry.dispose();
			this.lightSphere.material.dispose();

		};

		THREE.HemisphereLightHelper.prototype.update = function () {

			var vector = new THREE.Vector3();

			return function update() {

				this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
				this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

				this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
				this.lightSphere.geometry.colorsNeedUpdate = true;

			};

		}();

		// File:src/extras/helpers/PointLightHelper.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.PointLightHelper = function ( light, sphereSize ) {

			this.light = light;
			this.light.updateMatrixWorld();

			var geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );
			var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
			material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			THREE.Mesh.call( this, geometry, material );

			this.matrix = this.light.matrixWorld;
			this.matrixAutoUpdate = false;

			/*
			var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
			var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

			this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
			this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

			var d = light.distance;

			if ( d === 0.0 ) {

				this.lightDistance.visible = false;

			} else {

				this.lightDistance.scale.set( d, d, d );

			}

			this.add( this.lightDistance );
			*/

		};

		THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );
		THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;

		THREE.PointLightHelper.prototype.dispose = function () {

			this.geometry.dispose();
			this.material.dispose();

		};

		THREE.PointLightHelper.prototype.update = function () {

			this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			/*
			var d = this.light.distance;

			if ( d === 0.0 ) {

				this.lightDistance.visible = false;

			} else {

				this.lightDistance.visible = true;
				this.lightDistance.scale.set( d, d, d );

			}
			*/

		};

		// File:src/extras/helpers/SkeletonHelper.js

		/**
		 * @author Sean Griffin / http://twitter.com/sgrif
		 * @author Michael Guerrero / http://realitymeltdown.com
		 * @author mrdoob / http://mrdoob.com/
		 * @author ikerr / http://verold.com
		 */

		THREE.SkeletonHelper = function ( object ) {

			this.bones = this.getBoneList( object );

			var geometry = new THREE.Geometry();

			for ( var i = 0; i < this.bones.length; i ++ ) {

				var bone = this.bones[ i ];

				if ( bone.parent instanceof THREE.Bone ) {

					geometry.vertices.push( new THREE.Vector3() );
					geometry.vertices.push( new THREE.Vector3() );
					geometry.colors.push( new THREE.Color( 0, 0, 1 ) );
					geometry.colors.push( new THREE.Color( 0, 1, 0 ) );

				}

			}

			geometry.dynamic = true;

			var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );

			THREE.LineSegments.call( this, geometry, material );

			this.root = object;

			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;

			this.update();

		};


		THREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;

		THREE.SkeletonHelper.prototype.getBoneList = function( object ) {

			var boneList = [];

			if ( object instanceof THREE.Bone ) {

				boneList.push( object );

			}

			for ( var i = 0; i < object.children.length; i ++ ) {

				boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

			}

			return boneList;

		};

		THREE.SkeletonHelper.prototype.update = function () {

			var geometry = this.geometry;

			var matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );

			var boneMatrix = new THREE.Matrix4();

			var j = 0;

			for ( var i = 0; i < this.bones.length; i ++ ) {

				var bone = this.bones[ i ];

				if ( bone.parent instanceof THREE.Bone ) {

					boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
					geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

					boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
					geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

					j += 2;

				}

			}

			geometry.verticesNeedUpdate = true;

			geometry.computeBoundingSphere();

		};

		// File:src/extras/helpers/SpotLightHelper.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/

		THREE.SpotLightHelper = function ( light ) {

			THREE.Object3D.call( this );

			this.light = light;
			this.light.updateMatrixWorld();

			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;

			var geometry = new THREE.BufferGeometry();

			var positions = [
				0, 0, 0,   0,   0,   1,
				0, 0, 0,   1,   0,   1,
				0, 0, 0, - 1,   0,   1,
				0, 0, 0,   0,   1,   1,
				0, 0, 0,   0, - 1,   1
			];

			for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

				var p1 = ( i / l ) * Math.PI * 2;
				var p2 = ( j / l ) * Math.PI * 2;

				positions.push(
					Math.cos( p1 ), Math.sin( p1 ), 1,
					Math.cos( p2 ), Math.sin( p2 ), 1
				);

			}

			geometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );

			var material = new THREE.LineBasicMaterial( { fog: false } );

			this.cone = new THREE.LineSegments( geometry, material );
			this.add( this.cone );

			this.update();

		};

		THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );
		THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;

		THREE.SpotLightHelper.prototype.dispose = function () {

			this.cone.geometry.dispose();
			this.cone.material.dispose();

		};

		THREE.SpotLightHelper.prototype.update = function () {

			var vector = new THREE.Vector3();
			var vector2 = new THREE.Vector3();

			return function update() {

				var coneLength = this.light.distance ? this.light.distance : 1000;
				var coneWidth = coneLength * Math.tan( this.light.angle );

				this.cone.scale.set( coneWidth, coneWidth, coneLength );

				vector.setFromMatrixPosition( this.light.matrixWorld );
				vector2.setFromMatrixPosition( this.light.target.matrixWorld );

				this.cone.lookAt( vector2.sub( vector ) );

				this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			};

		}();

		// File:src/extras/helpers/VertexNormalsHelper.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		*/

		THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {

			this.object = object;

			this.size = ( size !== undefined ) ? size : 1;

			var color = ( hex !== undefined ) ? hex : 0xff0000;

			var width = ( linewidth !== undefined ) ? linewidth : 1;

			//

			var nNormals = 0;

			var objGeometry = this.object.geometry;

			if ( objGeometry instanceof THREE.Geometry ) {

				nNormals = objGeometry.faces.length * 3;

			} else if ( objGeometry instanceof THREE.BufferGeometry ) {

				nNormals = objGeometry.attributes.normal.count;

			}

			//

			var geometry = new THREE.BufferGeometry();

			var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );

			geometry.addAttribute( 'position', positions );

			THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );

			//

			this.matrixAutoUpdate = false;

			this.update();

		};

		THREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;

		THREE.VertexNormalsHelper.prototype.update = ( function () {

			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();
			var normalMatrix = new THREE.Matrix3();

			return function update() {

				var keys = [ 'a', 'b', 'c' ];

				this.object.updateMatrixWorld( true );

				normalMatrix.getNormalMatrix( this.object.matrixWorld );

				var matrixWorld = this.object.matrixWorld;

				var position = this.geometry.attributes.position;

				//

				var objGeometry = this.object.geometry;

				if ( objGeometry instanceof THREE.Geometry ) {

					var vertices = objGeometry.vertices;

					var faces = objGeometry.faces;

					var idx = 0;

					for ( var i = 0, l = faces.length; i < l; i ++ ) {

						var face = faces[ i ];

						for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

							var vertex = vertices[ face[ keys[ j ] ] ];

							var normal = face.vertexNormals[ j ];

							v1.copy( vertex ).applyMatrix4( matrixWorld );

							v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

							position.setXYZ( idx, v1.x, v1.y, v1.z );

							idx = idx + 1;

							position.setXYZ( idx, v2.x, v2.y, v2.z );

							idx = idx + 1;

						}

					}

				} else if ( objGeometry instanceof THREE.BufferGeometry ) {

					var objPos = objGeometry.attributes.position;

					var objNorm = objGeometry.attributes.normal;

					var idx = 0;

					// for simplicity, ignore index and drawcalls, and render every normal

					for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

						v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

						v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

						v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

						position.setXYZ( idx, v1.x, v1.y, v1.z );

						idx = idx + 1;

						position.setXYZ( idx, v2.x, v2.y, v2.z );

						idx = idx + 1;

					}

				}

				position.needsUpdate = true;

				return this;

			};

		}() );

		// File:src/extras/helpers/WireframeHelper.js

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.WireframeHelper = function ( object, hex ) {

			var color = ( hex !== undefined ) ? hex : 0xffffff;

			THREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );

			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;

		};

		THREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );
		THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;

		// File:src/extras/objects/ImmediateRenderObject.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.ImmediateRenderObject = function ( material ) {

			THREE.Object3D.call( this );

			this.material = material;
			this.render = function ( renderCallback ) {};

		};

		THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );
		THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;

		// File:src/extras/objects/MorphBlendMesh.js

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.MorphBlendMesh = function( geometry, material ) {

			THREE.Mesh.call( this, geometry, material );

			this.animationsMap = {};
			this.animationsList = [];

			// prepare default animation
			// (all frames played together in 1 second)

			var numFrames = this.geometry.morphTargets.length;

			var name = "__default";

			var startFrame = 0;
			var endFrame = numFrames - 1;

			var fps = numFrames / 1;

			this.createAnimation( name, startFrame, endFrame, fps );
			this.setAnimationWeight( name, 1 );

		};

		THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );
		THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;

		THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

			var animation = {

				start: start,
				end: end,

				length: end - start + 1,

				fps: fps,
				duration: ( end - start ) / fps,

				lastFrame: 0,
				currentFrame: 0,

				active: false,

				time: 0,
				direction: 1,
				weight: 1,

				directionBackwards: false,
				mirroredLoop: false

			};

			this.animationsMap[ name ] = animation;
			this.animationsList.push( animation );

		};

		THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

			var pattern = /([a-z]+)_?(\d+)/i;

			var firstAnimation, frameRanges = {};

			var geometry = this.geometry;

			for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

				var morph = geometry.morphTargets[ i ];
				var chunks = morph.name.match( pattern );

				if ( chunks && chunks.length > 1 ) {

					var name = chunks[ 1 ];

					if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

					var range = frameRanges[ name ];

					if ( i < range.start ) range.start = i;
					if ( i > range.end ) range.end = i;

					if ( ! firstAnimation ) firstAnimation = name;

				}

			}

			for ( var name in frameRanges ) {

				var range = frameRanges[ name ];
				this.createAnimation( name, range.start, range.end, fps );

			}

			this.firstAnimation = firstAnimation;

		};

		THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.direction = 1;
				animation.directionBackwards = false;

			}

		};

		THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.direction = - 1;
				animation.directionBackwards = true;

			}

		};

		THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.fps = fps;
				animation.duration = ( animation.end - animation.start ) / animation.fps;

			}

		};

		THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.duration = duration;
				animation.fps = ( animation.end - animation.start ) / animation.duration;

			}

		};

		THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.weight = weight;

			}

		};

		THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.time = time;

			}

		};

		THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

			var time = 0;

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				time = animation.time;

			}

			return time;

		};

		THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

			var duration = - 1;

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				duration = animation.duration;

			}

			return duration;

		};

		THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.time = 0;
				animation.active = true;

			} else {

				console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );

			}

		};

		THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {

			var animation = this.animationsMap[ name ];

			if ( animation ) {

				animation.active = false;

			}

		};

		THREE.MorphBlendMesh.prototype.update = function ( delta ) {

			for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

				var animation = this.animationsList[ i ];

				if ( ! animation.active ) continue;

				var frameTime = animation.duration / animation.length;

				animation.time += animation.direction * delta;

				if ( animation.mirroredLoop ) {

					if ( animation.time > animation.duration || animation.time < 0 ) {

						animation.direction *= - 1;

						if ( animation.time > animation.duration ) {

							animation.time = animation.duration;
							animation.directionBackwards = true;

						}

						if ( animation.time < 0 ) {

							animation.time = 0;
							animation.directionBackwards = false;

						}

					}

				} else {

					animation.time = animation.time % animation.duration;

					if ( animation.time < 0 ) animation.time += animation.duration;

				}

				var keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
				var weight = animation.weight;

				if ( keyframe !== animation.currentFrame ) {

					this.morphTargetInfluences[ animation.lastFrame ] = 0;
					this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

					this.morphTargetInfluences[ keyframe ] = 0;

					animation.lastFrame = animation.currentFrame;
					animation.currentFrame = keyframe;

				}

				var mix = ( animation.time % frameTime ) / frameTime;

				if ( animation.directionBackwards ) mix = 1 - mix;

				if ( animation.currentFrame !== animation.lastFrame ) {

					this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
					this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

				} else {

					this.morphTargetInfluences[ animation.currentFrame ] = weight;

				}

			}

		};

		if( "function" !== "undefined" && __webpack_require__(4) instanceof Function && __webpack_require__(5) != undefined ){

			!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){

				return THREE;

			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

		}
		else if( typeof module !== "undefined" && module.exports ){

			module.exports = THREE;

		}
		else if( this != undefined ){

			this.THREE = THREE;

		};

	})(this || {});

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 5 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./AdaptiveToneMappingPass.js": 7,
		"./BasicShader.js": 8,
		"./BleachBypassShader.js": 9,
		"./BlendShader.js": 10,
		"./BloomPass.js": 11,
		"./BokehPass.js": 12,
		"./BokehShader.js": 13,
		"./BokehShader2.js": 14,
		"./BrightnessContrastShader.js": 15,
		"./CanvasRenderer.js": 16,
		"./ColorCorrectionShader.js": 17,
		"./ColorifyShader.js": 18,
		"./ConvolutionShader.js": 19,
		"./CopyShader.js": 20,
		"./DDSLoader.js": 21,
		"./DOFMipMapShader.js": 22,
		"./DigitalGlitch.js": 23,
		"./DotScreenPass.js": 24,
		"./DotScreenShader.js": 25,
		"./EdgeShader.js": 26,
		"./EdgeShader2.js": 27,
		"./EffectComposer.js": 28,
		"./FXAAShader.js": 29,
		"./FilmPass.js": 30,
		"./FilmShader.js": 31,
		"./FocusShader.js": 32,
		"./FresnelShader.js": 33,
		"./GammaCorrectionShader.js": 34,
		"./GlitchPass.js": 35,
		"./HorizontalBlurShader.js": 36,
		"./HorizontalTiltShiftShader.js": 37,
		"./HueSaturationShader.js": 38,
		"./JSONLoader.js": 39,
		"./KaleidoShader.js": 40,
		"./LuminosityShader.js": 41,
		"./MTLLoader.js": 42,
		"./MarchingCubes.js": 43,
		"./MaskPass.js": 44,
		"./MirrorShader.js": 45,
		"./NormalMapShader.js": 46,
		"./OBJLoader.js": 47,
		"./OceanShaders.js": 48,
		"./OrbitControls.js": 49,
		"./ParallaxShader.js": 50,
		"./Projector.js": 51,
		"./RGBShiftShader.js": 52,
		"./RenderPass.js": 53,
		"./SSAOShader.js": 54,
		"./SVGLoader.js": 55,
		"./SavePass.js": 56,
		"./SepiaShader.js": 57,
		"./ShaderPass.js": 58,
		"./TechnicolorShader.js": 59,
		"./TexturePass.js": 60,
		"./ToneMapShader.js": 61,
		"./TriangleBlurShader.js": 62,
		"./UnpackDepthRGBAShader.js": 63,
		"./VerticalBlurShader.js": 64,
		"./VerticalTiltShiftShader.js": 65,
		"./VignetteShader.js": 66
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 6;


/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author miibond
		 * Generate a texture that represents the luminosity of the current scene, adapted over time
		 * to simulate the optic nerve responding to the amount of light it is receiving.
		 * Based on a GDC2007 presentation by Wolfgang Engel titled "Post-Processing Pipeline"
		 *
		 * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf
		 */

		THREE.AdaptiveToneMappingPass = function ( adaptive, resolution ) {

			this.resolution = ( resolution !== undefined ) ? resolution : 256;
			this.needsInit = true;
			this.adaptive = adaptive !== undefined ? !! adaptive : true;

			this.luminanceRT = null;
			this.previousLuminanceRT = null;
			this.currentLuminanceRT = null;

			if ( THREE.CopyShader === undefined )
				console.error( "THREE.AdaptiveToneMappingPass relies on THREE.CopyShader" );

			var copyShader = THREE.CopyShader;

			this.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );

			this.materialCopy = new THREE.ShaderMaterial( {

				uniforms: this.copyUniforms,
				vertexShader: copyShader.vertexShader,
				fragmentShader: copyShader.fragmentShader,
				blending: THREE.NoBlending,
				depthTest: false

			} );

			if ( THREE.LuminosityShader === undefined )
				console.error( "THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader" );

			this.materialLuminance = new THREE.ShaderMaterial( {

				uniforms: THREE.UniformsUtils.clone( THREE.LuminosityShader.uniforms ),
				vertexShader: THREE.LuminosityShader.vertexShader,
				fragmentShader: THREE.LuminosityShader.fragmentShader,
				blending: THREE.NoBlending,
			} );

			this.adaptLuminanceShader = {
				defines: {
					"MIP_LEVEL_1X1" : ( Math.log( this.resolution ) / Math.log( 2.0 ) ).toFixed( 1 ),
				},
				uniforms: {
					"lastLum": { type: "t", value: null },
					"currentLum": { type: "t", value: null },
					"delta": { type: 'f', value: 0.016 },
					"tau": { type: 'f', value: 1.0 }
				},
				vertexShader: [
					"varying vec2 vUv;",

					"void main() {",

						"vUv = uv;",
						"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

					"}"
				].join( '\n' ),
				fragmentShader: [
					"varying vec2 vUv;",

					"uniform sampler2D lastLum;",
					"uniform sampler2D currentLum;",
					"uniform float delta;",
					"uniform float tau;",

					"void main() {",

						"vec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );",
						"vec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );",

						"float fLastLum = lastLum.r;",
						"float fCurrentLum = currentLum.r;",

						//The adaption seems to work better in extreme lighting differences
						//if the input luminance is squared.
						"fCurrentLum *= fCurrentLum;",

						// Adapt the luminance using Pattanaik's technique
						"float fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));",
						// "fAdaptedLum = sqrt(fAdaptedLum);",
						"gl_FragColor = vec4( vec3( fAdaptedLum ), 1.0 );",
					"}",
				].join( '\n' )
			};

			this.materialAdaptiveLum = new THREE.ShaderMaterial( {

				uniforms: THREE.UniformsUtils.clone( this.adaptLuminanceShader.uniforms ),
				vertexShader: this.adaptLuminanceShader.vertexShader,
				fragmentShader: this.adaptLuminanceShader.fragmentShader,
				defines: this.adaptLuminanceShader.defines,
				blending: THREE.NoBlending
			} );

			if ( THREE.ToneMapShader === undefined )
				console.error( "THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader" );

			this.materialToneMap = new THREE.ShaderMaterial( {

				uniforms: THREE.UniformsUtils.clone( THREE.ToneMapShader.uniforms ),
				vertexShader: THREE.ToneMapShader.vertexShader,
				fragmentShader: THREE.ToneMapShader.fragmentShader,
				blending: THREE.NoBlending
			} );

			this.enabled = true;
			this.needsSwap = true;
			this.clear = false;

			this.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.AdaptiveToneMappingPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {

				if ( this.needsInit ) {

					this.reset( renderer );
					this.luminanceRT.type = readBuffer.type;
					this.previousLuminanceRT.type = readBuffer.type;
					this.currentLuminanceRT.type = readBuffer.type;
					this.needsInit = false;

				}

				if ( this.adaptive ) {

					//Render the luminance of the current scene into a render target with mipmapping enabled
					this.quad.material = this.materialLuminance;
					this.materialLuminance.uniforms.tDiffuse.value = readBuffer;
					renderer.render( this.scene, this.camera, this.currentLuminanceRT );

					//Use the new luminance values, the previous luminance and the frame delta to
					//adapt the luminance over time.
					this.quad.material = this.materialAdaptiveLum;
					this.materialAdaptiveLum.uniforms.delta.value = delta;
					this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT;
					this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT;
					renderer.render( this.scene, this.camera, this.luminanceRT );

					//Copy the new adapted luminance value so that it can be used by the next frame.
					this.quad.material = this.materialCopy;
					this.copyUniforms.tDiffuse.value = this.luminanceRT;
					renderer.render( this.scene, this.camera, this.previousLuminanceRT );

				}

				this.quad.material = this.materialToneMap;
				this.materialToneMap.uniforms.tDiffuse.value = readBuffer;
				renderer.render( this.scene, this.camera, writeBuffer, this.clear );

			},

			reset: function( renderer ) {

				// render targets
				if ( this.luminanceRT ) {

					this.luminanceRT.dispose();

				}
				if ( this.currentLuminanceRT ) {

					this.currentLuminanceRT.dispose();

				}
				if ( this.previousLuminanceRT ) {

					this.previousLuminanceRT.dispose();

				}
				var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };

				this.luminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );
				this.luminanceRT.generateMipmaps = false;
				this.previousLuminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );
				this.previousLuminanceRT.generateMipmaps = false;

				//We only need mipmapping for the current luminosity because we want a down-sampled version to sample in our adaptive shader
				pars.minFilter = THREE.LinearMipMapLinearFilter;
				this.currentLuminanceRT = new THREE.WebGLRenderTarget( this.resolution, this.resolution, pars );

				if ( this.adaptive ) {

					this.materialToneMap.defines[ "ADAPTED_LUMINANCE" ] = "";
					this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT;

				}
				//Put something in the adaptive luminance texture so that the scene can render initially
				this.quad.material = new THREE.MeshBasicMaterial( { color: 0x777777 } );
				this.materialLuminance.needsUpdate = true;
				this.materialAdaptiveLum.needsUpdate = true;
				this.materialToneMap.needsUpdate = true;
				// renderer.render( this.scene, this.camera, this.luminanceRT );
				// renderer.render( this.scene, this.camera, this.previousLuminanceRT );
				// renderer.render( this.scene, this.camera, this.currentLuminanceRT );

			},

			setAdaptive: function( adaptive ) {

				if ( adaptive ) {

					this.adaptive = true;
					this.materialToneMap.defines[ "ADAPTED_LUMINANCE" ] = "";
					this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT;

				} else {

					this.adaptive = false;
					delete this.materialToneMap.defines[ "ADAPTED_LUMINANCE" ];
					this.materialToneMap.uniforms.luminanceMap.value = undefined;

				}
				this.materialToneMap.needsUpdate = true;

			},

			setAdaptionRate: function( rate ) {

				if ( rate ) {

					this.materialAdaptiveLum.uniforms.tau.value = Math.abs( rate );

				}

			},

			setMaxLuminance: function( maxLum ) {

				if ( maxLum ) {

					this.materialToneMap.uniforms.maxLuminance.value = maxLum;

				}

			},

			setAverageLuminance: function( avgLum ) {

				if ( avgLum ) {

					this.materialToneMap.uniforms.averageLuminance.value = avgLum;

				}

			},

			setMiddleGrey: function( middleGrey ) {

				if ( middleGrey ) {

					this.materialToneMap.uniforms.middleGrey.value = middleGrey;

				}

			},

			dispose: function() {

				if ( this.luminanceRT ) {

					this.luminanceRT.dispose();

				}
				if ( this.previousLuminanceRT ) {

					this.previousLuminanceRT.dispose();

				}
				if ( this.currentLuminanceRT ) {

					this.currentLuminanceRT.dispose();

				}
				if ( this.materialLuminance ) {

					this.materialLuminance.dispose();

				}
				if ( this.materialAdaptiveLum ) {

					this.materialAdaptiveLum.dispose();

				}
				if ( this.materialCopy ) {

					this.materialCopy.dispose();

				}
				if ( this.materialToneMap ) {

					this.materialToneMap.dispose();

				}

			}

		};

	}


/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author mrdoob / http://www.mrdoob.com
		 *
		 * Simple test shader
		 */

		THREE.BasicShader = {

			uniforms: {},

			vertexShader: [

				"void main() {",

					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"void main() {",

					"gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]
		 * - based on Nvidia example
		 * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass
		 */

		THREE.BleachBypassShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"opacity":  { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float opacity;",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 base = texture2D( tDiffuse, vUv );",

					"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );",
					"float lum = dot( lumCoeff, base.rgb );",
					"vec3 blend = vec3( lum );",

					"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );",

					"vec3 result1 = 2.0 * base.rgb * blend;",
					"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );",

					"vec3 newColor = mix( result1, result2, L );",

					"float A2 = opacity * base.a;",
					"vec3 mixRGB = A2 * newColor.rgb;",
					"mixRGB += ( ( 1.0 - A2 ) * base.rgb );",

					"gl_FragColor = vec4( mixRGB, base.a );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Blend two textures
		 */

		THREE.BlendShader = {

			uniforms: {

				"tDiffuse1": { type: "t", value: null },
				"tDiffuse2": { type: "t", value: null },
				"mixRatio":  { type: "f", value: 0.5 },
				"opacity":   { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float opacity;",
				"uniform float mixRatio;",

				"uniform sampler2D tDiffuse1;",
				"uniform sampler2D tDiffuse2;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 texel1 = texture2D( tDiffuse1, vUv );",
					"vec4 texel2 = texture2D( tDiffuse2, vUv );",
					"gl_FragColor = opacity * mix( texel1, texel2, mixRatio );",

				"}"

			].join( "\n" )

		};

	}

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.BloomPass = function ( strength, kernelSize, sigma, resolution ) {

			strength = ( strength !== undefined ) ? strength : 1;
			kernelSize = ( kernelSize !== undefined ) ? kernelSize : 25;
			sigma = ( sigma !== undefined ) ? sigma : 4.0;
			resolution = ( resolution !== undefined ) ? resolution : 256;

			// render targets

			var pars = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat };

			this.renderTargetX = new THREE.WebGLRenderTarget( resolution, resolution, pars );
			this.renderTargetY = new THREE.WebGLRenderTarget( resolution, resolution, pars );

			// copy material

			if ( THREE.CopyShader === undefined )
				console.error( "THREE.BloomPass relies on THREE.CopyShader" );

			var copyShader = THREE.CopyShader;

			this.copyUniforms = THREE.UniformsUtils.clone( copyShader.uniforms );

			this.copyUniforms[ "opacity" ].value = strength;

			this.materialCopy = new THREE.ShaderMaterial( {

				uniforms: this.copyUniforms,
				vertexShader: copyShader.vertexShader,
				fragmentShader: copyShader.fragmentShader,
				blending: THREE.AdditiveBlending,
				transparent: true

			} );

			// convolution material

			if ( THREE.ConvolutionShader === undefined )
				console.error( "THREE.BloomPass relies on THREE.ConvolutionShader" );

			var convolutionShader = THREE.ConvolutionShader;

			this.convolutionUniforms = THREE.UniformsUtils.clone( convolutionShader.uniforms );

			this.convolutionUniforms[ "uImageIncrement" ].value = THREE.BloomPass.blurX;
			this.convolutionUniforms[ "cKernel" ].value = THREE.ConvolutionShader.buildKernel( sigma );

			this.materialConvolution = new THREE.ShaderMaterial( {

				uniforms: this.convolutionUniforms,
				vertexShader:  convolutionShader.vertexShader,
				fragmentShader: convolutionShader.fragmentShader,
				defines: {
					"KERNEL_SIZE_FLOAT": kernelSize.toFixed( 1 ),
					"KERNEL_SIZE_INT": kernelSize.toFixed( 0 )
				}

			} );

			this.enabled = true;
			this.needsSwap = false;
			this.clear = false;


			this.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.BloomPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {

				if ( maskActive ) renderer.context.disable( renderer.context.STENCIL_TEST );

				// Render quad with blured scene into texture (convolution pass 1)

				this.quad.material = this.materialConvolution;

				this.convolutionUniforms[ "tDiffuse" ].value = readBuffer;
				this.convolutionUniforms[ "uImageIncrement" ].value = THREE.BloomPass.blurX;

				renderer.render( this.scene, this.camera, this.renderTargetX, true );


				// Render quad with blured scene into texture (convolution pass 2)

				this.convolutionUniforms[ "tDiffuse" ].value = this.renderTargetX;
				this.convolutionUniforms[ "uImageIncrement" ].value = THREE.BloomPass.blurY;

				renderer.render( this.scene, this.camera, this.renderTargetY, true );

				// Render original scene with superimposed blur to texture

				this.quad.material = this.materialCopy;

				this.copyUniforms[ "tDiffuse" ].value = this.renderTargetY;

				if ( maskActive ) renderer.context.enable( renderer.context.STENCIL_TEST );

				renderer.render( this.scene, this.camera, readBuffer, this.clear );

			}

		};

		THREE.BloomPass.blurX = new THREE.Vector2( 0.001953125, 0.0 );
		THREE.BloomPass.blurY = new THREE.Vector2( 0.0, 0.001953125 );

	};


/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * Depth-of-field post-process with bokeh shader
		 */


		THREE.BokehPass = function ( scene, camera, params ) {

			this.scene = scene;
			this.camera = camera;

			var focus = ( params.focus !== undefined ) ? params.focus : 1.0;
			var aspect = ( params.aspect !== undefined ) ? params.aspect : camera.aspect;
			var aperture = ( params.aperture !== undefined ) ? params.aperture : 0.025;
			var maxblur = ( params.maxblur !== undefined ) ? params.maxblur : 1.0;

			// render targets

			var width = params.width || window.innerWidth || 1;
			var height = params.height || window.innerHeight || 1;

			this.renderTargetColor = new THREE.WebGLRenderTarget( width, height, {
				minFilter: THREE.LinearFilter,
				magFilter: THREE.LinearFilter,
				format: THREE.RGBFormat
			} );

			this.renderTargetDepth = this.renderTargetColor.clone();

			// depth material

			this.materialDepth = new THREE.MeshDepthMaterial();

			// bokeh material

			if ( THREE.BokehShader === undefined ) {

				console.error( "THREE.BokehPass relies on THREE.BokehShader" );

			}
			
			var bokehShader = THREE.BokehShader;
			var bokehUniforms = THREE.UniformsUtils.clone( bokehShader.uniforms );

			bokehUniforms[ "tDepth" ].value = this.renderTargetDepth;

			bokehUniforms[ "focus" ].value = focus;
			bokehUniforms[ "aspect" ].value = aspect;
			bokehUniforms[ "aperture" ].value = aperture;
			bokehUniforms[ "maxblur" ].value = maxblur;

			this.materialBokeh = new THREE.ShaderMaterial( {
				uniforms: bokehUniforms,
				vertexShader: bokehShader.vertexShader,
				fragmentShader: bokehShader.fragmentShader
			} );

			this.uniforms = bokehUniforms;
			this.enabled = true;
			this.needsSwap = false;
			this.renderToScreen = false;
			this.clear = false;

			this.camera2 = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene2  = new THREE.Scene();

			this.quad2 = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene2.add( this.quad2 );

		};

		THREE.BokehPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta, maskActive ) {

				this.quad2.material = this.materialBokeh;

				// Render depth into texture

				this.scene.overrideMaterial = this.materialDepth;

				renderer.render( this.scene, this.camera, this.renderTargetDepth, true );

				// Render bokeh composite

				this.uniforms[ "tColor" ].value = readBuffer;

				if ( this.renderToScreen ) {

					renderer.render( this.scene2, this.camera2 );

				} else {

					renderer.render( this.scene2, this.camera2, writeBuffer, this.clear );

				}

				this.scene.overrideMaterial = null;

			}

		};

	};



/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Depth-of-field shader with bokeh
		 * ported from GLSL shader by Martins Upitis
		 * http://artmartinsh.blogspot.com/2010/02/glsl-lens-blur-filter-with-bokeh.html
		 */

		THREE.BokehShader = {

			uniforms: {

				"tColor":   { type: "t", value: null },
				"tDepth":   { type: "t", value: null },
				"focus":    { type: "f", value: 1.0 },
				"aspect":   { type: "f", value: 1.0 },
				"aperture": { type: "f", value: 0.025 },
				"maxblur":  { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"varying vec2 vUv;",

				"uniform sampler2D tColor;",
				"uniform sampler2D tDepth;",

				"uniform float maxblur;",  // max blur amount
				"uniform float aperture;", // aperture - bigger values for shallower depth of field

				"uniform float focus;",
				"uniform float aspect;",

				"void main() {",

					"vec2 aspectcorrect = vec2( 1.0, aspect );",

					"vec4 depth1 = texture2D( tDepth, vUv );",

					"float factor = depth1.x - focus;",

					"vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );",

					"vec2 dofblur9 = dofblur * 0.9;",
					"vec2 dofblur7 = dofblur * 0.7;",
					"vec2 dofblur4 = dofblur * 0.4;",

					"vec4 col = vec4( 0.0 );",

					"col += texture2D( tColor, vUv.xy );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );",

					"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );",

					"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );",

					"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );",
					"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );",
					"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );",

					"gl_FragColor = col / 41.0;",
					"gl_FragColor.a = 1.0;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author zz85 / https://github.com/zz85 | twitter.com/blurspline
		 *
		 * Depth-of-field shader with bokeh
		 * ported from GLSL shader by Martins Upitis
		 * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)
		 *
		 * Requires #define RINGS and SAMPLES integers
		 */



		THREE.BokehShader = {

			uniforms: {

				"textureWidth":  { type: "f", value: 1.0 },
				"textureHeight":  { type: "f", value: 1.0 },

				"focalDepth":   { type: "f", value: 1.0 },
				"focalLength":   { type: "f", value: 24.0 },
				"fstop": { type: "f", value: 0.9 },

				"tColor":   { type: "t", value: null },
				"tDepth":   { type: "t", value: null },

				"maxblur":  { type: "f", value: 1.0 },

				"showFocus":   { type: "i", value: 0 },
				"manualdof":   { type: "i", value: 0 },
				"vignetting":   { type: "i", value: 0 },
				"depthblur":   { type: "i", value: 0 },

				"threshold":  { type: "f", value: 0.5 },
				"gain":  { type: "f", value: 2.0 },
				"bias":  { type: "f", value: 0.5 },
				"fringe":  { type: "f", value: 0.7 },

				"znear":  { type: "f", value: 0.1 },
				"zfar":  { type: "f", value: 100 },

				"noise":  { type: "i", value: 1 },
				"dithering":  { type: "f", value: 0.0001 },
				"pentagon": { type: "i", value: 0 },

				"shaderFocus":  { type: "i", value: 1 },
				"focusCoords":  { type: "v2", value: new THREE.Vector2() },


			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"varying vec2 vUv;",

				"uniform sampler2D tColor;",
				"uniform sampler2D tDepth;",
				"uniform float textureWidth;",
				"uniform float textureHeight;",

				"const float PI = 3.14159265;",

				"uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below",
				"uniform float focalLength; //focal length in mm",
				"uniform float fstop; //f-stop value",
				"uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)",

				"/*",
				"make sure that these two values are the same for your camera, otherwise distances will be wrong.",
				"*/",

				"uniform float znear; // camera clipping start",
				"uniform float zfar; // camera clipping end",

				"//------------------------------------------",
				"//user variables",

				"const int samples = SAMPLES; //samples on the first ring",
				"const int rings = RINGS; //ring count",

				"const int maxringsamples = rings * samples;",

				"uniform bool manualdof; // manual dof calculation",
				"float ndofstart = 1.0; // near dof blur start",
				"float ndofdist = 2.0; // near dof blur falloff distance",
				"float fdofstart = 1.0; // far dof blur start",
				"float fdofdist = 3.0; // far dof blur falloff distance",

				"float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)",

				"uniform bool vignetting; // use optical lens vignetting",

				"float vignout = 1.3; // vignetting outer border",
				"float vignin = 0.0; // vignetting inner border",
				"float vignfade = 22.0; // f-stops till vignete fades",

				"uniform bool shaderFocus;",
				"// disable if you use external focalDepth value",

				"uniform vec2 focusCoords;",
				"// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)",
				"// if center of screen use vec2(0.5, 0.5);",

				"uniform float maxblur;",
				"//clamp value of max blur (0.0 = no blur, 1.0 default)",

				"uniform float threshold; // highlight threshold;",
				"uniform float gain; // highlight gain;",

				"uniform float bias; // bokeh edge bias",
				"uniform float fringe; // bokeh chromatic aberration / fringing",

				"uniform bool noise; //use noise instead of pattern for sample dithering",

				"uniform float dithering;",

				"uniform bool depthblur; // blur the depth buffer",
				"float dbsize = 1.25; // depth blur size",

				"/*",
				"next part is experimental",
				"not looking good with small sample and ring count",
				"looks okay starting from samples = 4, rings = 4",
				"*/",

				"uniform bool pentagon; //use pentagon as bokeh shape?",
				"float feather = 0.4; //pentagon shape feather",

				"//------------------------------------------",

				"float penta(vec2 coords) {",
					"//pentagonal shape",
					"float scale = float(rings) - 1.3;",
					"vec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);",
					"vec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);",
					"vec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);",
					"vec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);",
					"vec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);",
					"vec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);",

					"vec4  one = vec4( 1.0 );",

					"vec4 P = vec4((coords),vec2(scale, scale));",

					"vec4 dist = vec4(0.0);",
					"float inorout = -4.0;",

					"dist.x = dot( P, HS0 );",
					"dist.y = dot( P, HS1 );",
					"dist.z = dot( P, HS2 );",
					"dist.w = dot( P, HS3 );",

					"dist = smoothstep( -feather, feather, dist );",

					"inorout += dot( dist, one );",

					"dist.x = dot( P, HS4 );",
					"dist.y = HS5.w - abs( P.z );",

					"dist = smoothstep( -feather, feather, dist );",
					"inorout += dist.x;",

					"return clamp( inorout, 0.0, 1.0 );",
				"}",

				"float bdepth(vec2 coords) {",
					"// Depth buffer blur",
					"float d = 0.0;",
					"float kernel[9];",
					"vec2 offset[9];",

					"vec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;",

					"offset[0] = vec2(-wh.x,-wh.y);",
					"offset[1] = vec2( 0.0, -wh.y);",
					"offset[2] = vec2( wh.x -wh.y);",

					"offset[3] = vec2(-wh.x,  0.0);",
					"offset[4] = vec2( 0.0,   0.0);",
					"offset[5] = vec2( wh.x,  0.0);",

					"offset[6] = vec2(-wh.x, wh.y);",
					"offset[7] = vec2( 0.0,  wh.y);",
					"offset[8] = vec2( wh.x, wh.y);",

					"kernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;",
					"kernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;",
					"kernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;",


					"for( int i=0; i<9; i++ ) {",
						"float tmp = texture2D(tDepth, coords + offset[i]).r;",
						"d += tmp * kernel[i];",
					"}",

					"return d;",
				"}",


				"vec3 color(vec2 coords,float blur) {",
					"//processing the sample",

					"vec3 col = vec3(0.0);",
					"vec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);",

					"col.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;",
					"col.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;",
					"col.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;",

					"vec3 lumcoeff = vec3(0.299,0.587,0.114);",
					"float lum = dot(col.rgb, lumcoeff);",
					"float thresh = max((lum-threshold)*gain, 0.0);",
					"return col+mix(vec3(0.0),col,thresh*blur);",
				"}",

				"vec2 rand(vec2 coord) {",
					"// generating noise / pattern texture for dithering",

					"float noiseX = ((fract(1.0-coord.s*(textureWidth/2.0))*0.25)+(fract(coord.t*(textureHeight/2.0))*0.75))*2.0-1.0;",
					"float noiseY = ((fract(1.0-coord.s*(textureWidth/2.0))*0.75)+(fract(coord.t*(textureHeight/2.0))*0.25))*2.0-1.0;",

					"if (noise) {",
						"noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;",
						"noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;",
					"}",

					"return vec2(noiseX,noiseY);",
				"}",

				"vec3 debugFocus(vec3 col, float blur, float depth) {",
					"float edge = 0.002*depth; //distance based edge smoothing",
					"float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);",
					"float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);",

					"col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);",
					"col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);",

					"return col;",
				"}",

				"float linearize(float depth) {",
					"return -zfar * znear / (depth * (zfar - znear) - zfar);",
				"}",


				"float vignette() {",
					"float dist = distance(vUv.xy, vec2(0.5,0.5));",
					"dist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);",
					"return clamp(dist,0.0,1.0);",
				"}",

				"float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {",
					"float rings2 = float(rings);",
					"float step = PI*2.0 / float(ringsamples);",
					"float pw = cos(j*step)*i;",
					"float ph = sin(j*step)*i;",
					"float p = 1.0;",
					"if (pentagon) {",
						"p = penta(vec2(pw,ph));",
					"}",
					"col += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;",
					"return 1.0 * mix(1.0, i /rings2, bias) * p;",
				"}",

				"void main() {",
					"//scene depth calculation",

					"float depth = linearize(texture2D(tDepth,vUv.xy).x);",

					"// Blur depth?",
					"if (depthblur) {",
						"depth = linearize(bdepth(vUv.xy));",
					"}",

					"//focal plane calculation",

					"float fDepth = focalDepth;",

					"if (shaderFocus) {",

						"fDepth = linearize(texture2D(tDepth,focusCoords).x);",

					"}",

					"// dof blur factor calculation",

					"float blur = 0.0;",

					"if (manualdof) {",
						"float a = depth-fDepth; // Focal plane",
						"float b = (a-fdofstart)/fdofdist; // Far DoF",
						"float c = (-a-ndofstart)/ndofdist; // Near Dof",
						"blur = (a>0.0) ? b : c;",
					"} else {",
						"float f = focalLength; // focal length in mm",
						"float d = fDepth*1000.0; // focal plane in mm",
						"float o = depth*1000.0; // depth in mm",

						"float a = (o*f)/(o-f);",
						"float b = (d*f)/(d-f);",
						"float c = (d-f)/(d*fstop*CoC);",

						"blur = abs(a-b)*c;",
					"}",

					"blur = clamp(blur,0.0,1.0);",

					"// calculation of pattern for dithering",

					"vec2 noise = rand(vUv.xy)*dithering*blur;",

					"// getting blur x and y step factor",

					"float w = (1.0/textureWidth)*blur*maxblur+noise.x;",
					"float h = (1.0/textureHeight)*blur*maxblur+noise.y;",

					"// calculation of final color",

					"vec3 col = vec3(0.0);",

					"if(blur < 0.05) {",
						"//some optimization thingy",
						"col = texture2D(tColor, vUv.xy).rgb;",
					"} else {",
						"col = texture2D(tColor, vUv.xy).rgb;",
						"float s = 1.0;",
						"int ringsamples;",

						"for (int i = 1; i <= rings; i++) {",
							"/*unboxstart*/",
							"ringsamples = i * samples;",

							"for (int j = 0 ; j < maxringsamples ; j++) {",
								"if (j >= ringsamples) break;",
								"s += gather(float(i), float(j), ringsamples, col, w, h, blur);",
							"}",
							"/*unboxend*/",
						"}",

						"col /= s; //divide by sample count",
					"}",

					"if (showFocus) {",
						"col = debugFocus(col, blur, depth);",
					"}",

					"if (vignetting) {",
						"col *= vignette();",
					"}",

					"gl_FragColor.rgb = col;",
					"gl_FragColor.a = 1.0;",
				"} "

			].join( "\n" )

		};

	}


/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author tapio / http://tapio.github.com/
		 *
		 * Brightness and contrast adjustment
		 * https://github.com/evanw/glfx.js
		 * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)
		 * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)
		 */

		THREE.BrightnessContrastShader = {

			uniforms: {

				"tDiffuse":   { type: "t", value: null },
				"brightness": { type: "f", value: 0 },
				"contrast":   { type: "f", value: 0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",

					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform float brightness;",
				"uniform float contrast;",

				"varying vec2 vUv;",

				"void main() {",

					"gl_FragColor = texture2D( tDiffuse, vUv );",

					"gl_FragColor.rgb += brightness;",

					"if (contrast > 0.0) {",
						"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;",
					"} else {",
						"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;",
					"}",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.SpriteCanvasMaterial = function ( parameters ) {

			THREE.Material.call( this );

			this.type = 'SpriteCanvasMaterial';

			this.color = new THREE.Color( 0xffffff );
			this.program = function ( context, color ) {};

			this.setValues( parameters );

		};

		THREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );
		THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;

		THREE.SpriteCanvasMaterial.prototype.clone = function () {

			var material = new THREE.SpriteCanvasMaterial();

			material.copy( this );
			material.color.copy( this.color );
			material.program = this.program;

			return material;

		};

		//

		THREE.CanvasRenderer = function ( parameters ) {

			console.log( 'THREE.CanvasRenderer', THREE.REVISION );

			parameters = parameters || {};

			var _this = this,
			_renderData, _elements, _lights,
			_projector = new THREE.Projector(),

			_canvas = parameters.canvas !== undefined
					 ? parameters.canvas
					 : document.createElement( 'canvas' ),

			_canvasWidth = _canvas.width,
			_canvasHeight = _canvas.height,
			_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),
			_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),

			_viewportX = 0,
			_viewportY = 0,
			_viewportWidth = _canvasWidth,
			_viewportHeight = _canvasHeight,

			_pixelRatio = 1,

			_context = _canvas.getContext( '2d', {
				alpha: parameters.alpha === true
			} ),

			_clearColor = new THREE.Color( 0x000000 ),
			_clearAlpha = parameters.alpha === true ? 0 : 1,

			_contextGlobalAlpha = 1,
			_contextGlobalCompositeOperation = 0,
			_contextStrokeStyle = null,
			_contextFillStyle = null,
			_contextLineWidth = null,
			_contextLineCap = null,
			_contextLineJoin = null,
			_contextLineDash = [],

			_camera,

			_v1, _v2, _v3, _v4,
			_v5 = new THREE.RenderableVertex(),
			_v6 = new THREE.RenderableVertex(),

			_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,
			_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,

			_color = new THREE.Color(),
			_color1 = new THREE.Color(),
			_color2 = new THREE.Color(),
			_color3 = new THREE.Color(),
			_color4 = new THREE.Color(),

			_diffuseColor = new THREE.Color(),
			_emissiveColor = new THREE.Color(),

			_lightColor = new THREE.Color(),

			_patterns = {},

			_image, _uvs,
			_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,

			_clipBox = new THREE.Box2(),
			_clearBox = new THREE.Box2(),
			_elemBox = new THREE.Box2(),

			_ambientLight = new THREE.Color(),
			_directionalLights = new THREE.Color(),
			_pointLights = new THREE.Color(),

			_vector3 = new THREE.Vector3(), // Needed for PointLight
			_centroid = new THREE.Vector3(),
			_normal = new THREE.Vector3(),
			_normalViewMatrix = new THREE.Matrix3();

			/* TODO
			_canvas.mozImageSmoothingEnabled = false;
			_canvas.webkitImageSmoothingEnabled = false;
			_canvas.msImageSmoothingEnabled = false;
			_canvas.imageSmoothingEnabled = false;
			*/

			// dash+gap fallbacks for Firefox and everything else

			if ( _context.setLineDash === undefined ) {

				_context.setLineDash = function () {};

			}

			this.domElement = _canvas;

			this.autoClear = true;
			this.sortObjects = true;
			this.sortElements = true;

			this.info = {

				render: {

					vertices: 0,
					faces: 0

				}

			};

			// WebGLRenderer compatibility

			this.supportsVertexTextures = function () {};
			this.setFaceCulling = function () {};

			// API

			this.getContext = function () {

				return _context;

			};

			this.getContextAttributes = function () {

				return _context.getContextAttributes();

			};

			this.getPixelRatio = function () {

				return _pixelRatio;

			};

			this.setPixelRatio = function ( value ) {

				if ( value !== undefined ) _pixelRatio = value;

			};

			this.setSize = function ( width, height, updateStyle ) {

				_canvasWidth = width * _pixelRatio;
				_canvasHeight = height * _pixelRatio;

				_canvas.width = _canvasWidth;
				_canvas.height = _canvasHeight;

				_canvasWidthHalf = Math.floor( _canvasWidth / 2 );
				_canvasHeightHalf = Math.floor( _canvasHeight / 2 );

				if ( updateStyle !== false ) {

					_canvas.style.width = width + 'px';
					_canvas.style.height = height + 'px';

				}

				_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
				_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );

				_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
				_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );

				_contextGlobalAlpha = 1;
				_contextGlobalCompositeOperation = 0;
				_contextStrokeStyle = null;
				_contextFillStyle = null;
				_contextLineWidth = null;
				_contextLineCap = null;
				_contextLineJoin = null;

				this.setViewport( 0, 0, width, height );

			};

			this.setViewport = function ( x, y, width, height ) {

				_viewportX = x * _pixelRatio;
				_viewportY = y * _pixelRatio;

				_viewportWidth = width * _pixelRatio;
				_viewportHeight = height * _pixelRatio;

			};

			this.setScissor = function () {};
			this.setScissorTest = function () {};

			this.setClearColor = function ( color, alpha ) {

				_clearColor.set( color );
				_clearAlpha = alpha !== undefined ? alpha : 1;

				_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
				_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );

			};

			this.setClearColorHex = function ( hex, alpha ) {

				console.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );
				this.setClearColor( hex, alpha );

			};

			this.getClearColor = function () {

				return _clearColor;

			};

			this.getClearAlpha = function () {

				return _clearAlpha;

			};

			this.getMaxAnisotropy = function () {

				return 0;

			};

			this.clear = function () {

				if ( _clearBox.isEmpty() === false ) {

					_clearBox.intersect( _clipBox );
					_clearBox.expandByScalar( 2 );

					_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;
					_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;		// higher y value !
					_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;
					_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;		// lower y value !

					if ( _clearAlpha < 1 ) {

						_context.clearRect(
							_clearBox.min.x | 0,
							_clearBox.max.y | 0,
							( _clearBox.max.x - _clearBox.min.x ) | 0,
							( _clearBox.min.y - _clearBox.max.y ) | 0
						);

					}

					if ( _clearAlpha > 0 ) {

						setBlending( THREE.NormalBlending );
						setOpacity( 1 );

						setFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );

						_context.fillRect(
							_clearBox.min.x | 0,
							_clearBox.max.y | 0,
							( _clearBox.max.x - _clearBox.min.x ) | 0,
							( _clearBox.min.y - _clearBox.max.y ) | 0
						);

					}

					_clearBox.makeEmpty();

				}

			};

			// compatibility

			this.clearColor = function () {};
			this.clearDepth = function () {};
			this.clearStencil = function () {};

			this.render = function ( scene, camera ) {

				if ( camera instanceof THREE.Camera === false ) {

					console.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );
					return;

				}

				if ( this.autoClear === true ) this.clear();

				_this.info.render.vertices = 0;
				_this.info.render.faces = 0;

				_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );
				_context.translate( _canvasWidthHalf, _canvasHeightHalf );

				_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );
				_elements = _renderData.elements;
				_lights = _renderData.lights;
				_camera = camera;

				_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );

				/* DEBUG
				setFillStyle( 'rgba( 0, 255, 255, 0.5 )' );
				_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );
				*/

				calculateLights();

				for ( var e = 0, el = _elements.length; e < el; e ++ ) {

					var element = _elements[ e ];

					var material = element.material;

					if ( material === undefined || material.opacity === 0 ) continue;

					_elemBox.makeEmpty();

					if ( element instanceof THREE.RenderableSprite ) {

						_v1 = element;
						_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;

						renderSprite( _v1, element, material );

					} else if ( element instanceof THREE.RenderableLine ) {

						_v1 = element.v1; _v2 = element.v2;

						_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
						_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;

						_elemBox.setFromPoints( [
							_v1.positionScreen,
							_v2.positionScreen
						] );

						if ( _clipBox.intersectsBox( _elemBox ) === true ) {

							renderLine( _v1, _v2, element, material );

						}

					} else if ( element instanceof THREE.RenderableFace ) {

						_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;

						if ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;
						if ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;
						if ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;

						_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
						_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;
						_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;

						if ( material.overdraw > 0 ) {

							expand( _v1.positionScreen, _v2.positionScreen, material.overdraw );
							expand( _v2.positionScreen, _v3.positionScreen, material.overdraw );
							expand( _v3.positionScreen, _v1.positionScreen, material.overdraw );

						}

						_elemBox.setFromPoints( [
							_v1.positionScreen,
							_v2.positionScreen,
							_v3.positionScreen
						] );

						if ( _clipBox.intersectsBox( _elemBox ) === true ) {

							renderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );

						}

					}

					/* DEBUG
					setLineWidth( 1 );
					setStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );
					_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );
					*/

					_clearBox.union( _elemBox );

				}

				/* DEBUG
				setLineWidth( 1 );
				setStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );
				_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );
				*/

				_context.setTransform( 1, 0, 0, 1, 0, 0 );

			};

			//

			function calculateLights() {

				_ambientLight.setRGB( 0, 0, 0 );
				_directionalLights.setRGB( 0, 0, 0 );
				_pointLights.setRGB( 0, 0, 0 );

				for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {

					var light = _lights[ l ];
					var lightColor = light.color;

					if ( light instanceof THREE.AmbientLight ) {

						_ambientLight.add( lightColor );

					} else if ( light instanceof THREE.DirectionalLight ) {

						// for sprites

						_directionalLights.add( lightColor );

					} else if ( light instanceof THREE.PointLight ) {

						// for sprites

						_pointLights.add( lightColor );

					}

				}

			}

			function calculateLight( position, normal, color ) {

				for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {

					var light = _lights[ l ];

					_lightColor.copy( light.color );

					if ( light instanceof THREE.DirectionalLight ) {

						var lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();

						var amount = normal.dot( lightPosition );

						if ( amount <= 0 ) continue;

						amount *= light.intensity;

						color.add( _lightColor.multiplyScalar( amount ) );

					} else if ( light instanceof THREE.PointLight ) {

						var lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );

						var amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );

						if ( amount <= 0 ) continue;

						amount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );

						if ( amount == 0 ) continue;

						amount *= light.intensity;

						color.add( _lightColor.multiplyScalar( amount ) );

					}

				}

			}

			function renderSprite( v1, element, material ) {

				setOpacity( material.opacity );
				setBlending( material.blending );

				var scaleX = element.scale.x * _canvasWidthHalf;
				var scaleY = element.scale.y * _canvasHeightHalf;

				var dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite
				_elemBox.min.set( v1.x - dist, v1.y - dist );
				_elemBox.max.set( v1.x + dist, v1.y + dist );

				if ( material instanceof THREE.SpriteMaterial ) {

					var texture = material.map;

					if ( texture !== null ) {

						var pattern = _patterns[ texture.id ];

						if ( pattern === undefined || pattern.version !== texture.version ) {

							pattern = textureToPattern( texture );
							_patterns[ texture.id ] = pattern;

						}

						if ( pattern.canvas !== undefined ) {

							setFillStyle( pattern.canvas );

							var bitmap = texture.image;

							var ox = bitmap.width * texture.offset.x;
							var oy = bitmap.height * texture.offset.y;

							var sx = bitmap.width * texture.repeat.x;
							var sy = bitmap.height * texture.repeat.y;

							var cx = scaleX / sx;
							var cy = scaleY / sy;

							_context.save();
							_context.translate( v1.x, v1.y );
							if ( material.rotation !== 0 ) _context.rotate( material.rotation );
							_context.translate( - scaleX / 2, - scaleY / 2 );
							_context.scale( cx, cy );
							_context.translate( - ox, - oy );
							_context.fillRect( ox, oy, sx, sy );
							_context.restore();

						}

					} else {

						// no texture

						setFillStyle( material.color.getStyle() );

						_context.save();
						_context.translate( v1.x, v1.y );
						if ( material.rotation !== 0 ) _context.rotate( material.rotation );
						_context.scale( scaleX, - scaleY );
						_context.fillRect( - 0.5, - 0.5, 1, 1 );
						_context.restore();

					}

				} else if ( material instanceof THREE.SpriteCanvasMaterial ) {

					setStrokeStyle( material.color.getStyle() );
					setFillStyle( material.color.getStyle() );

					_context.save();
					_context.translate( v1.x, v1.y );
					if ( material.rotation !== 0 ) _context.rotate( material.rotation );
					_context.scale( scaleX, scaleY );

					material.program( _context );

					_context.restore();

				}

				/* DEBUG
				setStrokeStyle( 'rgb(255,255,0)' );
				_context.beginPath();
				_context.moveTo( v1.x - 10, v1.y );
				_context.lineTo( v1.x + 10, v1.y );
				_context.moveTo( v1.x, v1.y - 10 );
				_context.lineTo( v1.x, v1.y + 10 );
				_context.stroke();
				*/

			}

			function renderLine( v1, v2, element, material ) {

				setOpacity( material.opacity );
				setBlending( material.blending );

				_context.beginPath();
				_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );
				_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );

				if ( material instanceof THREE.LineBasicMaterial ) {

					setLineWidth( material.linewidth );
					setLineCap( material.linecap );
					setLineJoin( material.linejoin );

					if ( material.vertexColors !== THREE.VertexColors ) {

						setStrokeStyle( material.color.getStyle() );

					} else {

						var colorStyle1 = element.vertexColors[ 0 ].getStyle();
						var colorStyle2 = element.vertexColors[ 1 ].getStyle();

						if ( colorStyle1 === colorStyle2 ) {

							setStrokeStyle( colorStyle1 );

						} else {

							try {

								var grad = _context.createLinearGradient(
									v1.positionScreen.x,
									v1.positionScreen.y,
									v2.positionScreen.x,
									v2.positionScreen.y
								);
								grad.addColorStop( 0, colorStyle1 );
								grad.addColorStop( 1, colorStyle2 );

							} catch ( exception ) {

								grad = colorStyle1;

							}

							setStrokeStyle( grad );

						}

					}

					_context.stroke();
					_elemBox.expandByScalar( material.linewidth * 2 );

				} else if ( material instanceof THREE.LineDashedMaterial ) {

					setLineWidth( material.linewidth );
					setLineCap( material.linecap );
					setLineJoin( material.linejoin );
					setStrokeStyle( material.color.getStyle() );
					setLineDash( [ material.dashSize, material.gapSize ] );

					_context.stroke();

					_elemBox.expandByScalar( material.linewidth * 2 );

					setLineDash( [] );

				}

			}

			function renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {

				_this.info.render.vertices += 3;
				_this.info.render.faces ++;

				setOpacity( material.opacity );
				setBlending( material.blending );

				_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;
				_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;
				_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;

				drawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );

				if ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {

					_diffuseColor.copy( material.color );
					_emissiveColor.copy( material.emissive );

					if ( material.vertexColors === THREE.FaceColors ) {

						_diffuseColor.multiply( element.color );

					}

					_color.copy( _ambientLight );

					_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );

					calculateLight( _centroid, element.normalModel, _color );

					_color.multiply( _diffuseColor ).add( _emissiveColor );

					material.wireframe === true
						 ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
						 : fillPath( _color );

				} else if ( material instanceof THREE.MeshBasicMaterial ||
						    material instanceof THREE.MeshLambertMaterial ||
						    material instanceof THREE.MeshPhongMaterial ) {

					if ( material.map !== null ) {

						var mapping = material.map.mapping;

						if ( mapping === THREE.UVMapping ) {

							_uvs = element.uvs;
							patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );

						}

					} else if ( material.envMap !== null ) {

						if ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {

							_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );
							_uv1x = 0.5 * _normal.x + 0.5;
							_uv1y = 0.5 * _normal.y + 0.5;

							_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );
							_uv2x = 0.5 * _normal.x + 0.5;
							_uv2y = 0.5 * _normal.y + 0.5;

							_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );
							_uv3x = 0.5 * _normal.x + 0.5;
							_uv3y = 0.5 * _normal.y + 0.5;

							patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );

						}

					} else {

						_color.copy( material.color );

						if ( material.vertexColors === THREE.FaceColors ) {

							_color.multiply( element.color );

						}

						material.wireframe === true
							 ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
							 : fillPath( _color );

					}

				} else if ( material instanceof THREE.MeshNormalMaterial ) {

					_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );

					_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );

					material.wireframe === true
						 ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
						 : fillPath( _color );

				} else {

					_color.setRGB( 1, 1, 1 );

					material.wireframe === true
						 ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
						 : fillPath( _color );

				}

			}

			//

			function drawTriangle( x0, y0, x1, y1, x2, y2 ) {

				_context.beginPath();
				_context.moveTo( x0, y0 );
				_context.lineTo( x1, y1 );
				_context.lineTo( x2, y2 );
				_context.closePath();

			}

			function strokePath( color, linewidth, linecap, linejoin ) {

				setLineWidth( linewidth );
				setLineCap( linecap );
				setLineJoin( linejoin );
				setStrokeStyle( color.getStyle() );

				_context.stroke();

				_elemBox.expandByScalar( linewidth * 2 );

			}

			function fillPath( color ) {

				setFillStyle( color.getStyle() );
				_context.fill();

			}

			function textureToPattern( texture ) {

				if ( texture.version === 0 ||
					texture instanceof THREE.CompressedTexture ||
					texture instanceof THREE.DataTexture ) {

					return {
						canvas: undefined,
						version: texture.version
					};

				}

				var image = texture.image;

				if ( image.complete === false ) {

					return {
						canvas: undefined,
						version: 0
					};

				}

				var canvas = document.createElement( 'canvas' );
				canvas.width = image.width;
				canvas.height = image.height;

				var context = canvas.getContext( '2d' );
				context.setTransform( 1, 0, 0, - 1, 0, image.height );
				context.drawImage( image, 0, 0 );

				var repeatX = texture.wrapS === THREE.RepeatWrapping;
				var repeatY = texture.wrapT === THREE.RepeatWrapping;

				var repeat = 'no-repeat';

				if ( repeatX === true && repeatY === true ) {

					repeat = 'repeat';

				} else if ( repeatX === true ) {

					repeat = 'repeat-x';

				} else if ( repeatY === true ) {

					repeat = 'repeat-y';

				}

				var pattern = _context.createPattern( canvas, repeat );

				if ( texture.onUpdate ) texture.onUpdate( texture );

				return {
					canvas: pattern,
					version: texture.version
				};

			}

			function patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {

				var pattern = _patterns[ texture.id ];

				if ( pattern === undefined || pattern.version !== texture.version ) {

					pattern = textureToPattern( texture );
					_patterns[ texture.id ] = pattern;

				}

				if ( pattern.canvas !== undefined ) {

					setFillStyle( pattern.canvas );

				} else {

					setFillStyle( 'rgba( 0, 0, 0, 1)' );
					_context.fill();
					return;

				}

				// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120

				var a, b, c, d, e, f, det, idet,
				offsetX = texture.offset.x / texture.repeat.x,
				offsetY = texture.offset.y / texture.repeat.y,
				width = texture.image.width * texture.repeat.x,
				height = texture.image.height * texture.repeat.y;

				u0 = ( u0 + offsetX ) * width;
				v0 = ( v0 + offsetY ) * height;

				u1 = ( u1 + offsetX ) * width;
				v1 = ( v1 + offsetY ) * height;

				u2 = ( u2 + offsetX ) * width;
				v2 = ( v2 + offsetY ) * height;

				x1 -= x0; y1 -= y0;
				x2 -= x0; y2 -= y0;

				u1 -= u0; v1 -= v0;
				u2 -= u0; v2 -= v0;

				det = u1 * v2 - u2 * v1;

				if ( det === 0 ) return;

				idet = 1 / det;

				a = ( v2 * x1 - v1 * x2 ) * idet;
				b = ( v2 * y1 - v1 * y2 ) * idet;
				c = ( u1 * x2 - u2 * x1 ) * idet;
				d = ( u1 * y2 - u2 * y1 ) * idet;

				e = x0 - a * u0 - c * v0;
				f = y0 - b * u0 - d * v0;

				_context.save();
				_context.transform( a, b, c, d, e, f );
				_context.fill();
				_context.restore();

			}

			function clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {

				// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120

				var a, b, c, d, e, f, det, idet,
				width = image.width - 1,
				height = image.height - 1;

				u0 *= width; v0 *= height;
				u1 *= width; v1 *= height;
				u2 *= width; v2 *= height;

				x1 -= x0; y1 -= y0;
				x2 -= x0; y2 -= y0;

				u1 -= u0; v1 -= v0;
				u2 -= u0; v2 -= v0;

				det = u1 * v2 - u2 * v1;

				idet = 1 / det;

				a = ( v2 * x1 - v1 * x2 ) * idet;
				b = ( v2 * y1 - v1 * y2 ) * idet;
				c = ( u1 * x2 - u2 * x1 ) * idet;
				d = ( u1 * y2 - u2 * y1 ) * idet;

				e = x0 - a * u0 - c * v0;
				f = y0 - b * u0 - d * v0;

				_context.save();
				_context.transform( a, b, c, d, e, f );
				_context.clip();
				_context.drawImage( image, 0, 0 );
				_context.restore();

			}

			// Hide anti-alias gaps

			function expand( v1, v2, pixels ) {

				var x = v2.x - v1.x, y = v2.y - v1.y,
				det = x * x + y * y, idet;

				if ( det === 0 ) return;

				idet = pixels / Math.sqrt( det );

				x *= idet; y *= idet;

				v2.x += x; v2.y += y;
				v1.x -= x; v1.y -= y;

			}

			// Context cached methods.

			function setOpacity( value ) {

				if ( _contextGlobalAlpha !== value ) {

					_context.globalAlpha = value;
					_contextGlobalAlpha = value;

				}

			}

			function setBlending( value ) {

				if ( _contextGlobalCompositeOperation !== value ) {

					if ( value === THREE.NormalBlending ) {

						_context.globalCompositeOperation = 'source-over';

					} else if ( value === THREE.AdditiveBlending ) {

						_context.globalCompositeOperation = 'lighter';

					} else if ( value === THREE.SubtractiveBlending ) {

						_context.globalCompositeOperation = 'darker';

					}

					_contextGlobalCompositeOperation = value;

				}

			}

			function setLineWidth( value ) {

				if ( _contextLineWidth !== value ) {

					_context.lineWidth = value;
					_contextLineWidth = value;

				}

			}

			function setLineCap( value ) {

				// "butt", "round", "square"

				if ( _contextLineCap !== value ) {

					_context.lineCap = value;
					_contextLineCap = value;

				}

			}

			function setLineJoin( value ) {

				// "round", "bevel", "miter"

				if ( _contextLineJoin !== value ) {

					_context.lineJoin = value;
					_contextLineJoin = value;

				}

			}

			function setStrokeStyle( value ) {

				if ( _contextStrokeStyle !== value ) {

					_context.strokeStyle = value;
					_contextStrokeStyle = value;

				}

			}

			function setFillStyle( value ) {

				if ( _contextFillStyle !== value ) {

					_context.fillStyle = value;
					_contextFillStyle = value;

				}

			}

			function setLineDash( value ) {

				if ( _contextLineDash.length !== value.length ) {

					_context.setLineDash( value );
					_contextLineDash = value;

				}

			}

		};

	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Color correction
		 */

		THREE.ColorCorrectionShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"powRGB":   { type: "v3", value: new THREE.Vector3( 2, 2, 2 ) },
				"mulRGB":   { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) },
				"addRGB":   { type: "v3", value: new THREE.Vector3( 0, 0, 0 ) }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",

					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform vec3 powRGB;",
				"uniform vec3 mulRGB;",
				"uniform vec3 addRGB;",

				"varying vec2 vUv;",

				"void main() {",

					"gl_FragColor = texture2D( tDiffuse, vUv );",
					"gl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Colorify shader
		 */

		THREE.ColorifyShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"color":    { type: "c", value: new THREE.Color( 0xffffff ) }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec3 color;",
				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 texel = texture2D( tDiffuse, vUv );",

					"vec3 luma = vec3( 0.299, 0.587, 0.114 );",
					"float v = dot( texel.xyz, luma );",

					"gl_FragColor = vec4( v * color, texel.w );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 19 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Convolution shader
		 * ported from o3d sample to WebGL / GLSL
		 * http://o3d.googlecode.com/svn/trunk/samples/convolution.html
		 */

		THREE.ConvolutionShader = {

			defines: {

				"KERNEL_SIZE_FLOAT": "25.0",
				"KERNEL_SIZE_INT": "25",

			},

			uniforms: {

				"tDiffuse":        { type: "t", value: null },
				"uImageIncrement": { type: "v2", value: new THREE.Vector2( 0.001953125, 0.0 ) },
				"cKernel":         { type: "fv1", value: [] }

			},

			vertexShader: [

				"uniform vec2 uImageIncrement;",

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float cKernel[ KERNEL_SIZE_INT ];",

				"uniform sampler2D tDiffuse;",
				"uniform vec2 uImageIncrement;",

				"varying vec2 vUv;",

				"void main() {",

					"vec2 imageCoord = vUv;",
					"vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );",

					"for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {",

						"sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];",
						"imageCoord += uImageIncrement;",

					"}",

					"gl_FragColor = sum;",

				"}"


			].join( "\n" ),

			buildKernel: function ( sigma ) {

				// We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.

				function gauss( x, sigma ) {

					return Math.exp( - ( x * x ) / ( 2.0 * sigma * sigma ) );

				}

				var i, values, sum, halfWidth, kMaxKernelSize = 25, kernelSize = 2 * Math.ceil( sigma * 3.0 ) + 1;

				if ( kernelSize > kMaxKernelSize ) kernelSize = kMaxKernelSize;
				halfWidth = ( kernelSize - 1 ) * 0.5;

				values = new Array( kernelSize );
				sum = 0.0;
				for ( i = 0; i < kernelSize; ++ i ) {

					values[ i ] = gauss( i - halfWidth, sigma );
					sum += values[ i ];

				}

				// normalize the kernel

				for ( i = 0; i < kernelSize; ++ i ) values[ i ] /= sum;

				return values;

			}

		};

	}


/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Full-screen textured quad shader
		 */

		THREE.CopyShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"opacity":  { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float opacity;",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 texel = texture2D( tDiffuse, vUv );",
					"gl_FragColor = opacity * texel;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/*
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.DDSLoader = function () {

			this._parser = THREE.DDSLoader.parse;

		};

		THREE.DDSLoader.prototype = Object.create( THREE.CompressedTextureLoader.prototype );
		THREE.DDSLoader.prototype.constructor = THREE.DDSLoader;

		THREE.DDSLoader.parse = function ( buffer, loadMipmaps ) {

			var dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };

			// Adapted from @toji's DDS utils
			// https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js

			// All values and structures referenced from:
			// http://msdn.microsoft.com/en-us/library/bb943991.aspx/

			var DDS_MAGIC = 0x20534444;

			var DDSD_CAPS = 0x1,
				DDSD_HEIGHT = 0x2,
				DDSD_WIDTH = 0x4,
				DDSD_PITCH = 0x8,
				DDSD_PIXELFORMAT = 0x1000,
				DDSD_MIPMAPCOUNT = 0x20000,
				DDSD_LINEARSIZE = 0x80000,
				DDSD_DEPTH = 0x800000;

			var DDSCAPS_COMPLEX = 0x8,
				DDSCAPS_MIPMAP = 0x400000,
				DDSCAPS_TEXTURE = 0x1000;

			var DDSCAPS2_CUBEMAP = 0x200,
				DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,
				DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,
				DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,
				DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,
				DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,
				DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,
				DDSCAPS2_VOLUME = 0x200000;

			var DDPF_ALPHAPIXELS = 0x1,
				DDPF_ALPHA = 0x2,
				DDPF_FOURCC = 0x4,
				DDPF_RGB = 0x40,
				DDPF_YUV = 0x200,
				DDPF_LUMINANCE = 0x20000;

			function fourCCToInt32( value ) {

				return value.charCodeAt( 0 ) +
					( value.charCodeAt( 1 ) << 8 ) +
					( value.charCodeAt( 2 ) << 16 ) +
					( value.charCodeAt( 3 ) << 24 );

			}

			function int32ToFourCC( value ) {

				return String.fromCharCode(
					value & 0xff,
					( value >> 8 ) & 0xff,
					( value >> 16 ) & 0xff,
					( value >> 24 ) & 0xff
				);

			}

			function loadARGBMip( buffer, dataOffset, width, height ) {

				var dataLength = width * height * 4;
				var srcBuffer = new Uint8Array( buffer, dataOffset, dataLength );
				var byteArray = new Uint8Array( dataLength );
				var dst = 0;
				var src = 0;
				for ( var y = 0; y < height; y ++ ) {

					for ( var x = 0; x < width; x ++ ) {

						var b = srcBuffer[ src ]; src ++;
						var g = srcBuffer[ src ]; src ++;
						var r = srcBuffer[ src ]; src ++;
						var a = srcBuffer[ src ]; src ++;
						byteArray[ dst ] = r; dst ++;	//r
						byteArray[ dst ] = g; dst ++;	//g
						byteArray[ dst ] = b; dst ++;	//b
						byteArray[ dst ] = a; dst ++;	//a

					}

				}
				return byteArray;

			}

			var FOURCC_DXT1 = fourCCToInt32( "DXT1" );
			var FOURCC_DXT3 = fourCCToInt32( "DXT3" );
			var FOURCC_DXT5 = fourCCToInt32( "DXT5" );
			var FOURCC_ETC1 = fourCCToInt32( "ETC1" );

			var headerLengthInt = 31; // The header length in 32 bit ints

			// Offsets into the header array

			var off_magic = 0;

			var off_size = 1;
			var off_flags = 2;
			var off_height = 3;
			var off_width = 4;

			var off_mipmapCount = 7;

			var off_pfFlags = 20;
			var off_pfFourCC = 21;
			var off_RGBBitCount = 22;
			var off_RBitMask = 23;
			var off_GBitMask = 24;
			var off_BBitMask = 25;
			var off_ABitMask = 26;

			var off_caps = 27;
			var off_caps2 = 28;
			var off_caps3 = 29;
			var off_caps4 = 30;

			// Parse header

			var header = new Int32Array( buffer, 0, headerLengthInt );

			if ( header[ off_magic ] !== DDS_MAGIC ) {

				console.error( 'THREE.DDSLoader.parse: Invalid magic number in DDS header.' );
				return dds;

			}

			if ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {

				console.error( 'THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.' );
				return dds;

			}

			var blockBytes;

			var fourCC = header[ off_pfFourCC ];

			var isRGBAUncompressed = false;

			switch ( fourCC ) {

				case FOURCC_DXT1:

					blockBytes = 8;
					dds.format = THREE.RGB_S3TC_DXT1_Format;
					break;

				case FOURCC_DXT3:

					blockBytes = 16;
					dds.format = THREE.RGBA_S3TC_DXT3_Format;
					break;

				case FOURCC_DXT5:

					blockBytes = 16;
					dds.format = THREE.RGBA_S3TC_DXT5_Format;
					break;

				case FOURCC_ETC1:

					blockBytes = 8;
					dds.format = THREE.RGB_ETC1_Format;
					break;

				default:

					if ( header[ off_RGBBitCount ] === 32
						&& header[ off_RBitMask ] & 0xff0000
						&& header[ off_GBitMask ] & 0xff00
						&& header[ off_BBitMask ] & 0xff
						&& header[ off_ABitMask ] & 0xff000000  ) {

						isRGBAUncompressed = true;
						blockBytes = 64;
						dds.format = THREE.RGBAFormat;

					} else {

						console.error( 'THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC( fourCC ) );
						return dds;

					}
			}

			dds.mipmapCount = 1;

			if ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {

				dds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );

			}

			var caps2 = header[ off_caps2 ];
			dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;
			if ( dds.isCubemap && (
				! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEX ) ||
				! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX ) ||
				! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEY ) ||
				! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY ) ||
				! ( caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ ) ||
				! ( caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ )
				) ) {

				console.error( 'THREE.DDSLoader.parse: Incomplete cubemap faces' );
				return dds;

			}

			dds.width = header[ off_width ];
			dds.height = header[ off_height ];

			var dataOffset = header[ off_size ] + 4;

			// Extract mipmaps buffers

			var faces = dds.isCubemap ? 6 : 1;

			for ( var face = 0; face < faces; face ++ ) {

				var width = dds.width;
				var height = dds.height;

				for ( var i = 0; i < dds.mipmapCount; i ++ ) {

					if ( isRGBAUncompressed ) {

						var byteArray = loadARGBMip( buffer, dataOffset, width, height );
						var dataLength = byteArray.length;

					} else {

						var dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;
						var byteArray = new Uint8Array( buffer, dataOffset, dataLength );

					}

					var mipmap = { "data": byteArray, "width": width, "height": height };
					dds.mipmaps.push( mipmap );

					dataOffset += dataLength;

					width = Math.max( width >> 1, 1 );
					height = Math.max( height >> 1, 1 );

				}

			}

			return dds;

		};

	};

/***/ },
/* 22 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Depth-of-field shader using mipmaps
		 * - from Matt Handley @applmak
		 * - requires power-of-2 sized render target with enabled mipmaps
		 */

		THREE.DOFMipMapShader = {

			uniforms: {

				"tColor":   { type: "t", value: null },
				"tDepth":   { type: "t", value: null },
				"focus":    { type: "f", value: 1.0 },
				"maxblur":  { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float focus;",
				"uniform float maxblur;",

				"uniform sampler2D tColor;",
				"uniform sampler2D tDepth;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 depth = texture2D( tDepth, vUv );",

					"float factor = depth.x - focus;",

					"vec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );",

					"gl_FragColor = col;",
					"gl_FragColor.a = 1.0;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author felixturner / http://airtight.cc/
		 *
		 * RGB Shift Shader
		 * Shifts red and blue channels from center in opposite directions
		 * Ported from http://kriss.cx/tom/2009/05/rgb-shift/
		 * by Tom Butterworth / http://kriss.cx/tom/
		 *
		 * amount: shift distance (1 is width of input)
		 * angle: shift angle in radians
		 */

		THREE.DigitalGlitch = {

			uniforms: {

				"tDiffuse":		{ type: "t", value: null },//diffuse texture
				"tDisp":		{ type: "t", value: null },//displacement texture for digital glitch squares
				"byp":			{ type: "i", value: 0 },//apply the glitch ?
				"amount":		{ type: "f", value: 0.08 },
				"angle":		{ type: "f", value: 0.02 },
				"seed":			{ type: "f", value: 0.02 },
				"seed_x":		{ type: "f", value: 0.02 },//-1,1
				"seed_y":		{ type: "f", value: 0.02 },//-1,1
				"distortion_x":	{ type: "f", value: 0.5 },
				"distortion_y":	{ type: "f", value: 0.6 },
				"col_s":		{ type: "f", value: 0.05 }
			},

			vertexShader: [

				"varying vec2 vUv;",
				"void main() {",
					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
				"}"
			].join( "\n" ),

			fragmentShader: [
				"uniform int byp;",//should we apply the glitch ?
				
				"uniform sampler2D tDiffuse;",
				"uniform sampler2D tDisp;",
				
				"uniform float amount;",
				"uniform float angle;",
				"uniform float seed;",
				"uniform float seed_x;",
				"uniform float seed_y;",
				"uniform float distortion_x;",
				"uniform float distortion_y;",
				"uniform float col_s;",
					
				"varying vec2 vUv;",
				
				
				"float rand(vec2 co){",
					"return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);",
				"}",
						
				"void main() {",
					"if(byp<1) {",
						"vec2 p = vUv;",
						"float xs = floor(gl_FragCoord.x / 0.5);",
						"float ys = floor(gl_FragCoord.y / 0.5);",
						//based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch
						"vec4 normal = texture2D (tDisp, p*seed*seed);",
						"if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {",
							"if(seed_x>0.){",
								"p.y = 1. - (p.y + distortion_y);",
							"}",
							"else {",
								"p.y = distortion_y;",
							"}",
						"}",
						"if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {",
							"if(seed_y>0.){",
								"p.x=distortion_x;",
							"}",
							"else {",
								"p.x = 1. - (p.x + distortion_x);",
							"}",
						"}",
						"p.x+=normal.x*seed_x*(seed/5.);",
						"p.y+=normal.y*seed_y*(seed/5.);",
						//base from RGB shift shader
						"vec2 offset = amount * vec2( cos(angle), sin(angle));",
						"vec4 cr = texture2D(tDiffuse, p + offset);",
						"vec4 cga = texture2D(tDiffuse, p);",
						"vec4 cb = texture2D(tDiffuse, p - offset);",
						"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);",
						//add noise
						"vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);",
						"gl_FragColor = gl_FragColor+ snow;",
					"}",
					"else {",
						"gl_FragColor=texture2D (tDiffuse, vUv);",
					"}",
				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 24 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.DotScreenPass = function ( center, angle, scale ) {

			if ( THREE.DotScreenShader === undefined )
				console.error( "THREE.DotScreenPass relies on THREE.DotScreenShader" );

			var shader = THREE.DotScreenShader;

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			if ( center !== undefined ) this.uniforms[ "center" ].value.copy( center );
			if ( angle !== undefined ) this.uniforms[ "angle" ].value = angle;
			if ( scale !== undefined ) this.uniforms[ "scale" ].value = scale;

			this.material = new THREE.ShaderMaterial( {

				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			this.enabled = true;
			this.renderToScreen = false;
			this.needsSwap = true;


			this.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.DotScreenPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				this.uniforms[ "tDiffuse" ].value = readBuffer;
				this.uniforms[ "tSize" ].value.set( readBuffer.width, readBuffer.height );

				this.quad.material = this.material;

				if ( this.renderToScreen ) {

					renderer.render( this.scene, this.camera );

				} else {

					renderer.render( this.scene, this.camera, writeBuffer, false );

				}

			}

		};

	};


/***/ },
/* 25 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Dot screen shader
		 * based on glfx.js sepia shader
		 * https://github.com/evanw/glfx.js
		 */

		THREE.DotScreenShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"tSize":    { type: "v2", value: new THREE.Vector2( 256, 256 ) },
				"center":   { type: "v2", value: new THREE.Vector2( 0.5, 0.5 ) },
				"angle":    { type: "f", value: 1.57 },
				"scale":    { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform vec2 center;",
				"uniform float angle;",
				"uniform float scale;",
				"uniform vec2 tSize;",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"float pattern() {",

					"float s = sin( angle ), c = cos( angle );",

					"vec2 tex = vUv * tSize - center;",
					"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;",

					"return ( sin( point.x ) * sin( point.y ) ) * 4.0;",

				"}",

				"void main() {",

					"vec4 color = texture2D( tDiffuse, vUv );",

					"float average = ( color.r + color.g + color.b ) / 3.0;",

					"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog
		 *
		 * Edge Detection Shader using Frei-Chen filter
		 * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector
		 *
		 * aspect: vec2 of (1/width, 1/height)
		 */

		THREE.EdgeShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"aspect":    { type: "v2", value: new THREE.Vector2( 512, 512 ) },
			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"varying vec2 vUv;",

				"uniform vec2 aspect;",

				"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);",


				"mat3 G[9];",

				// hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45

				"const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );",
				"const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );",
				"const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );",
				"const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );",
				"const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );",
				"const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );",
				"const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );",
				"const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );",
				"const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );",

				"void main(void)",
				"{",

					"G[0] = g0,",
					"G[1] = g1,",
					"G[2] = g2,",
					"G[3] = g3,",
					"G[4] = g4,",
					"G[5] = g5,",
					"G[6] = g6,",
					"G[7] = g7,",
					"G[8] = g8;",

					"mat3 I;",
					"float cnv[9];",
					"vec3 sample;",

					/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */
					"for (float i=0.0; i<3.0; i++) {",
						"for (float j=0.0; j<3.0; j++) {",
							"sample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;",
							"I[int(i)][int(j)] = length(sample);",
						"}",
					"}",

					/* calculate the convolution values for all the masks */
					"for (int i=0; i<9; i++) {",
						"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);",
						"cnv[i] = dp3 * dp3;",
					"}",

					"float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);",
					"float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);",

					"gl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);",
				"}",

			].join( "\n" )
		};

	}


/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog
		 *
		 * Edge Detection Shader using Sobel filter
		 * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector
		 *
		 * aspect: vec2 of (1/width, 1/height)
		 */

		THREE.EdgeShader2 = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"aspect":    { type: "v2", value: new THREE.Vector2( 512, 512 ) },
			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"varying vec2 vUv;",
				"uniform vec2 aspect;",


				"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);",

				"mat3 G[2];",

				"const mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );",
				"const mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );",


				"void main(void)",
				"{",
					"mat3 I;",
					"float cnv[2];",
					"vec3 sample;",

					"G[0] = g0;",
					"G[1] = g1;",

					/* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */
					"for (float i=0.0; i<3.0; i++)",
					"for (float j=0.0; j<3.0; j++) {",
						"sample = texture2D( tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;",
						"I[int(i)][int(j)] = length(sample);",
					"}",

					/* calculate the convolution values for all the masks */
					"for (int i=0; i<2; i++) {",
						"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);",
						"cnv[i] = dp3 * dp3; ",
					"}",

					"gl_FragColor = vec4(0.5 * sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));",
				"} ",

			].join( "\n" )

		};

	}


/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.EffectComposer = function ( renderer, renderTarget ) {

			this.renderer = renderer;

			if ( renderTarget === undefined ) {

				var pixelRatio = renderer.getPixelRatio();

				var width  = Math.floor( renderer.context.canvas.width  / pixelRatio ) || 1;
				var height = Math.floor( renderer.context.canvas.height / pixelRatio ) || 1;
				var parameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };

				renderTarget = new THREE.WebGLRenderTarget( width, height, parameters );

			}

			this.renderTarget1 = renderTarget;
			this.renderTarget2 = renderTarget.clone();

			this.writeBuffer = this.renderTarget1;
			this.readBuffer = this.renderTarget2;

			this.passes = [];

			if ( THREE.CopyShader === undefined )
				console.error( "THREE.EffectComposer relies on THREE.CopyShader" );

			this.copyPass = new THREE.ShaderPass( THREE.CopyShader );

		};

		THREE.EffectComposer.prototype = {

			swapBuffers: function() {

				var tmp = this.readBuffer;
				this.readBuffer = this.writeBuffer;
				this.writeBuffer = tmp;

			},

			addPass: function ( pass ) {

				this.passes.push( pass );

			},

			insertPass: function ( pass, index ) {

				this.passes.splice( index, 0, pass );

			},

			render: function ( delta ) {

				this.writeBuffer = this.renderTarget1;
				this.readBuffer = this.renderTarget2;

				var maskActive = false;

				var pass, i, il = this.passes.length;

				for ( i = 0; i < il; i ++ ) {

					pass = this.passes[ i ];

					if ( ! pass.enabled ) continue;

					pass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );

					if ( pass.needsSwap ) {

						if ( maskActive ) {

							var context = this.renderer.context;

							context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );

							this.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );

							context.stencilFunc( context.EQUAL, 1, 0xffffffff );

						}

						this.swapBuffers();

					}

					if ( pass instanceof THREE.MaskPass ) {

						maskActive = true;

					} else if ( pass instanceof THREE.ClearMaskPass ) {

						maskActive = false;

					}

				}

			},

			reset: function ( renderTarget ) {

				if ( renderTarget === undefined ) {

					renderTarget = this.renderTarget1.clone();

					var pixelRatio = this.renderer.getPixelRatio();

					renderTarget.width  = Math.floor( this.renderer.context.canvas.width  / pixelRatio );
					renderTarget.height = Math.floor( this.renderer.context.canvas.height / pixelRatio );

				}

				this.renderTarget1.dispose();
				this.renderTarget1 = renderTarget;
				this.renderTarget2.dispose();
				this.renderTarget2 = renderTarget.clone();

				this.writeBuffer = this.renderTarget1;
				this.readBuffer = this.renderTarget2;

			},

			setSize: function ( width, height ) {

				this.renderTarget1.setSize( width, height );
				this.renderTarget2.setSize( width, height );

			}

		};

	};


/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author mattdsl / https://github.com/mattdesl/three-shader-fxaa
		 */
		
		THREE.FXAAShader = {
			uniforms: {
				tDiffuse: {
					type: "t",
					value: new THREE.Texture()
				},
				resolution: {
					type: "v2",
					value: new THREE.Vector2()
				}
			},
			vertexShader: "#define GLSLIFY 1\nvarying vec2 vUv;\n\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nuniform vec2 resolution;\n\nvoid main() {\n  vUv = uv;\n  vec2 fragCoord = uv * resolution;\n  vec2 inverseVP = 1.0 / resolution.xy;\n  v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n  v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n  v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n  v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n  v_rgbM = vec2(fragCoord * inverseVP);\n\n  gl_Position = projectionMatrix *\n              modelViewMatrix *\n              vec4(position,1.0);\n}\n",
			fragmentShader: "#define GLSLIFY 1\nvarying vec2 vUv;\n\n//texcoords computed in vertex step\n//to avoid dependent texture reads\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\n//make sure to have a resolution uniform set to the screen size\nuniform vec2 resolution;\nuniform sampler2D tDiffuse;\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it's\nunsupported by WebGL.\n\n--\n\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\n\nCopyright (c) 2011 by Armin Ronacher.\n\nSome rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa_1540259130(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid main() {\n  vec2 fragCoord = vUv * resolution;   \n  gl_FragColor = fxaa_1540259130(tDiffuse, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n"
		}

	}


/***/ },
/* 30 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {

			if ( THREE.FilmShader === undefined )
				console.error( "THREE.FilmPass relies on THREE.FilmShader" );

			var shader = THREE.FilmShader;

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			this.material = new THREE.ShaderMaterial( {

				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			if ( grayscale !== undefined )	this.uniforms.grayscale.value = grayscale;
			if ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;
			if ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;
			if ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;

			this.enabled = true;
			this.renderToScreen = false;
			this.needsSwap = true;


			this.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.FilmPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				this.uniforms[ "tDiffuse" ].value = readBuffer;
				this.uniforms[ "time" ].value += delta;

				this.quad.material = this.material;

				if ( this.renderToScreen ) {

					renderer.render( this.scene, this.camera );

				} else {

					renderer.render( this.scene, this.camera, writeBuffer, false );

				}

			}

		};

	};


/***/ },
/* 31 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Film grain & scanlines shader
		 *
		 * - ported from HLSL to WebGL / GLSL
		 * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html
		 *
		 * Screen Space Static Postprocessor
		 *
		 * Produces an analogue noise overlay similar to a film grain / TV static
		 *
		 * Original implementation and noise algorithm
		 * Pat 'Hawthorne' Shearon
		 *
		 * Optimized scanlines + noise version with intensity scaling
		 * Georg 'Leviathan' Steinrohder
		 *
		 * This version is provided under a Creative Commons Attribution 3.0 License
		 * http://creativecommons.org/licenses/by/3.0/
		 */

		THREE.FilmShader = {

			uniforms: {

				"tDiffuse":   { type: "t", value: null },
				"time":       { type: "f", value: 0.0 },
				"nIntensity": { type: "f", value: 0.5 },
				"sIntensity": { type: "f", value: 0.05 },
				"sCount":     { type: "f", value: 4096 },
				"grayscale":  { type: "i", value: 1 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				// control parameter
				"uniform float time;",

				"uniform bool grayscale;",

				// noise effect intensity value (0 = no effect, 1 = full effect)
				"uniform float nIntensity;",

				// scanlines effect intensity value (0 = no effect, 1 = full effect)
				"uniform float sIntensity;",

				// scanlines effect count value (0 = no effect, 4096 = full effect)
				"uniform float sCount;",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"void main() {",

					// sample the source
					"vec4 cTextureScreen = texture2D( tDiffuse, vUv );",

					// make some noise
					"float x = vUv.x * vUv.y * time *  1000.0;",
					"x = mod( x, 13.0 ) * mod( x, 123.0 );",
					"float dx = mod( x, 0.01 );",

					// add noise
					"vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );",

					// get us a sine and cosine
					"vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );",

					// add scanlines
					"cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;",

					// interpolate between source and result by intensity
					"cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );",

					// convert to grayscale if desired
					"if( grayscale ) {",

						"cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );",

					"}",

					"gl_FragColor =  vec4( cResult, cTextureScreen.a );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 32 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Focus shader
		 * based on PaintEffect postprocess from ro.me
		 * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js
		 */

		THREE.FocusShader = {

			uniforms : {

				"tDiffuse":       { type: "t", value: null },
				"screenWidth":    { type: "f", value: 1024 },
				"screenHeight":   { type: "f", value: 1024 },
				"sampleDistance": { type: "f", value: 0.94 },
				"waveFactor":     { type: "f", value: 0.00125 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float screenWidth;",
				"uniform float screenHeight;",
				"uniform float sampleDistance;",
				"uniform float waveFactor;",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 color, org, tmp, add;",
					"float sample_dist, f;",
					"vec2 vin;",
					"vec2 uv = vUv;",

					"add = color = org = texture2D( tDiffuse, uv );",

					"vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );",
					"sample_dist = dot( vin, vin ) * 2.0;",

					"f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;",

					"vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );",

					"add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );",
					"if( tmp.b < color.b ) color = tmp;",

					"add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );",
					"if( tmp.b < color.b ) color = tmp;",

					"add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );",
					"if( tmp.b < color.b ) color = tmp;",

					"add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );",
					"if( tmp.b < color.b ) color = tmp;",

					"add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );",
					"if( tmp.b < color.b ) color = tmp;",

					"add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );",
					"if( tmp.b < color.b ) color = tmp;",

					"add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );",
					"if( tmp.b < color.b ) color = tmp;",

					"color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );",
					"color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );",

					"gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );",

				"}"


			].join( "\n" )
		};

	}


/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Based on Nvidia Cg tutorial
		 */

		THREE.FresnelShader = {

			uniforms: {

				"mRefractionRatio": { type: "f", value: 1.02 },
				"mFresnelBias": { type: "f", value: 0.1 },
				"mFresnelPower": { type: "f", value: 2.0 },
				"mFresnelScale": { type: "f", value: 1.0 },
				"tCube": { type: "t", value: null }

			},

			vertexShader: [

				"uniform float mRefractionRatio;",
				"uniform float mFresnelBias;",
				"uniform float mFresnelScale;",
				"uniform float mFresnelPower;",

				"varying vec3 vReflect;",
				"varying vec3 vRefract[3];",
				"varying float vReflectionFactor;",

				"void main() {",

					"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
					"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",

					"vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );",

					"vec3 I = worldPosition.xyz - cameraPosition;",

					"vReflect = reflect( I, worldNormal );",
					"vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );",
					"vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );",
					"vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );",
					"vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );",

					"gl_Position = projectionMatrix * mvPosition;",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform samplerCube tCube;",

				"varying vec3 vReflect;",
				"varying vec3 vRefract[3];",
				"varying float vReflectionFactor;",

				"void main() {",

					"vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );",
					"vec4 refractedColor = vec4( 1.0 );",

					"refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;",
					"refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;",
					"refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;",

					"gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 34 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * Gamma Correction Shader
		 * http://en.wikipedia.org/wiki/gamma_correction
		 */

		THREE.GammaCorrectionShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"#define GAMMA_OUTPUT",
				"#define GAMMA_FACTOR 2",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				THREE.ShaderChunk[ "common" ],

				"void main() {",

					"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );",

					"gl_FragColor = vec4( linearToOutput( tex.rgb ), tex.a );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 35 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 
		 */

		THREE.GlitchPass = function ( dt_size ) {

			if ( THREE.DigitalGlitch === undefined ) console.error( "THREE.GlitchPass relies on THREE.DigitalGlitch" );
			
			var shader = THREE.DigitalGlitch;
			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			if ( dt_size == undefined ) dt_size = 64;
			
			
			this.uniforms[ "tDisp" ].value = this.generateHeightmap( dt_size );
			

			this.material = new THREE.ShaderMaterial( {
				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader
			} );

			this.enabled = true;
			this.renderToScreen = false;
			this.needsSwap = true;


			this.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene.add( this.quad );
			
			this.goWild = false;
			this.curF = 0;
			this.generateTrigger();
			
		};

		THREE.GlitchPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				this.uniforms[ "tDiffuse" ].value = readBuffer;
				this.uniforms[ 'seed' ].value = Math.random();//default seeding
				this.uniforms[ 'byp' ].value = 0;
				
				if ( this.curF % this.randX == 0 || this.goWild == true ) {

					this.uniforms[ 'amount' ].value = Math.random() / 30;
					this.uniforms[ 'angle' ].value = THREE.Math.randFloat( - Math.PI, Math.PI );
					this.uniforms[ 'seed_x' ].value = THREE.Math.randFloat( - 1, 1 );
					this.uniforms[ 'seed_y' ].value = THREE.Math.randFloat( - 1, 1 );
					this.uniforms[ 'distortion_x' ].value = THREE.Math.randFloat( 0, 1 );
					this.uniforms[ 'distortion_y' ].value = THREE.Math.randFloat( 0, 1 );
					this.curF = 0;
					this.generateTrigger();

				} else if ( this.curF % this.randX < this.randX / 5 ) {

					this.uniforms[ 'amount' ].value = Math.random() / 90;
					this.uniforms[ 'angle' ].value = THREE.Math.randFloat( - Math.PI, Math.PI );
					this.uniforms[ 'distortion_x' ].value = THREE.Math.randFloat( 0, 1 );
					this.uniforms[ 'distortion_y' ].value = THREE.Math.randFloat( 0, 1 );
					this.uniforms[ 'seed_x' ].value = THREE.Math.randFloat( - 0.3, 0.3 );
					this.uniforms[ 'seed_y' ].value = THREE.Math.randFloat( - 0.3, 0.3 );

				} else if ( this.goWild == false ) {

					this.uniforms[ 'byp' ].value = 1;

				}
				this.curF ++;
				
				this.quad.material = this.material;
				if ( this.renderToScreen ) {

					renderer.render( this.scene, this.camera );

				} else {

					renderer.render( this.scene, this.camera, writeBuffer, false );

				}

			},
			generateTrigger: function() {

				this.randX = THREE.Math.randInt( 120, 240 );

			},
			generateHeightmap: function( dt_size ) {

				var data_arr = new Float32Array( dt_size * dt_size * 3 );
				var length = dt_size * dt_size;
				
				for ( var i = 0; i < length; i ++ ) {

					var val = THREE.Math.randFloat( 0, 1 );
					data_arr[ i * 3 + 0 ] = val;
					data_arr[ i * 3 + 1 ] = val;
					data_arr[ i * 3 + 2 ] = val;

				}
				
				var texture = new THREE.DataTexture( data_arr, dt_size, dt_size, THREE.RGBFormat, THREE.FloatType );
				texture.needsUpdate = true;
				return texture;

			}
		};

	};


/***/ },
/* 36 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Two pass Gaussian blur filter (horizontal and vertical blur shaders)
		 * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
		 *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html
		 *
		 * - 9 samples per pass
		 * - standard deviation 2.7
		 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
		 */

		THREE.HorizontalBlurShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"h":        { type: "f", value: 1.0 / 512.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform float h;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 sum = vec4( 0.0 );",

					"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;",
					"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;",
					"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;",
					"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
					"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;",
					"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;",
					"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;",
					"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;",

					"gl_FragColor = sum;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 37 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position
		 *
		 * - 9 samples per pass
		 * - standard deviation 2.7
		 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
		 * - "r" parameter control where "focused" horizontal line lies
		 */

		THREE.HorizontalTiltShiftShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"h":        { type: "f", value: 1.0 / 512.0 },
				"r":        { type: "f", value: 0.35 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform float h;",
				"uniform float r;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 sum = vec4( 0.0 );",

					"float hh = h * abs( r - vUv.y );",

					"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;",
					"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;",
					"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;",
					"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
					"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;",
					"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;",
					"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;",
					"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;",

					"gl_FragColor = sum;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 38 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author tapio / http://tapio.github.com/
		 *
		 * Hue and saturation adjustment
		 * https://github.com/evanw/glfx.js
		 * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.
		 * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)
		 */

		THREE.HueSaturationShader = {

			uniforms: {

				"tDiffuse":   { type: "t", value: null },
				"hue":        { type: "f", value: 0 },
				"saturation": { type: "f", value: 0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",

					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform float hue;",
				"uniform float saturation;",

				"varying vec2 vUv;",

				"void main() {",

					"gl_FragColor = texture2D( tDiffuse, vUv );",

					// hue
					"float angle = hue * 3.14159265;",
					"float s = sin(angle), c = cos(angle);",
					"vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;",
					"float len = length(gl_FragColor.rgb);",
					"gl_FragColor.rgb = vec3(",
						"dot(gl_FragColor.rgb, weights.xyz),",
						"dot(gl_FragColor.rgb, weights.zxy),",
						"dot(gl_FragColor.rgb, weights.yzx)",
					");",

					// saturation
					"float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;",
					"if (saturation > 0.0) {",
						"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));",
					"} else {",
						"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);",
					"}",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 39 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.JSONLoader = function ( manager ) {

			if ( typeof manager === 'boolean' ) {

				console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
				manager = undefined;

			}

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

			this.withCredentials = false;

		};

		THREE.JSONLoader.prototype = {

			constructor: THREE.JSONLoader,

			// Deprecated

			get statusDomElement () {

				if ( this._statusDomElement === undefined ) {

					this._statusDomElement = document.createElement( 'div' );

				}

				console.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );
				return this._statusDomElement;

			},

			load: function( url, onLoad, onProgress, onError ) {

				var scope = this;

				var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );

				var loader = new THREE.XHRLoader( this.manager );
				loader.setWithCredentials( this.withCredentials );
				loader.load( url, function ( text ) {

					var json = JSON.parse( text );
					var metadata = json.metadata;

					if ( metadata !== undefined ) {

						var type = metadata.type;

						if ( type !== undefined ) {

							if ( type.toLowerCase() === 'object' ) {

								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
								return;

							}

							if ( type.toLowerCase() === 'scene' ) {

								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
								return;

							}

						}

					}

					var object = scope.parse( json, texturePath );
					onLoad( object.geometry, object.materials );

				}, onProgress, onError );

			},

			setTexturePath: function ( value ) {

				this.texturePath = value;

			},

			parse: function ( json, texturePath ) {

				var geometry = new THREE.Geometry(),
				scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

				parseModel( scale );

				parseSkin();
				parseMorphing( scale );
				parseAnimations();

				geometry.computeFaceNormals();
				geometry.computeBoundingSphere();

				function parseModel( scale ) {

					function isBitSet( value, position ) {

						return value & ( 1 << position );

					}

					var i, j, fi,

					offset, zLength,

				colorIndex, normalIndex, uvIndex, materialIndex,

					type,
					isQuad,
					hasMaterial,
					hasFaceVertexUv,
					hasFaceNormal, hasFaceVertexNormal,
					hasFaceColor, hasFaceVertexColor,

				vertex, face, faceA, faceB, hex, normal,

					uvLayer, uv, u, v,

					faces = json.faces,
					vertices = json.vertices,
					normals = json.normals,
					colors = json.colors,

					nUvLayers = 0;

					if ( json.uvs !== undefined ) {

						// disregard empty arrays

						for ( i = 0; i < json.uvs.length; i ++ ) {

							if ( json.uvs[ i ].length ) nUvLayers ++;

						}

						for ( i = 0; i < nUvLayers; i ++ ) {

							geometry.faceVertexUvs[ i ] = [];

						}

					}

					offset = 0;
					zLength = vertices.length;

					while ( offset < zLength ) {

						vertex = new THREE.Vector3();

						vertex.x = vertices[ offset ++ ] * scale;
						vertex.y = vertices[ offset ++ ] * scale;
						vertex.z = vertices[ offset ++ ] * scale;

						geometry.vertices.push( vertex );

					}

					offset = 0;
					zLength = faces.length;

					while ( offset < zLength ) {

						type = faces[ offset ++ ];


						isQuad              = isBitSet( type, 0 );
						hasMaterial         = isBitSet( type, 1 );
						hasFaceVertexUv     = isBitSet( type, 3 );
						hasFaceNormal       = isBitSet( type, 4 );
						hasFaceVertexNormal = isBitSet( type, 5 );
						hasFaceColor	     = isBitSet( type, 6 );
						hasFaceVertexColor  = isBitSet( type, 7 );

						// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

						if ( isQuad ) {

							faceA = new THREE.Face3();
							faceA.a = faces[ offset ];
							faceA.b = faces[ offset + 1 ];
							faceA.c = faces[ offset + 3 ];

							faceB = new THREE.Face3();
							faceB.a = faces[ offset + 1 ];
							faceB.b = faces[ offset + 2 ];
							faceB.c = faces[ offset + 3 ];

							offset += 4;

							if ( hasMaterial ) {

								materialIndex = faces[ offset ++ ];
								faceA.materialIndex = materialIndex;
								faceB.materialIndex = materialIndex;

							}

							// to get face <=> uv index correspondence

							fi = geometry.faces.length;

							if ( hasFaceVertexUv ) {

								for ( i = 0; i < nUvLayers; i ++ ) {

									uvLayer = json.uvs[ i ];

									geometry.faceVertexUvs[ i ][ fi ] = [];
									geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

									for ( j = 0; j < 4; j ++ ) {

										uvIndex = faces[ offset ++ ];

										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];

										uv = new THREE.Vector2( u, v );

										if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
										if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

									}

								}

							}

							if ( hasFaceNormal ) {

								normalIndex = faces[ offset ++ ] * 3;

								faceA.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

								faceB.normal.copy( faceA.normal );

							}

							if ( hasFaceVertexNormal ) {

								for ( i = 0; i < 4; i ++ ) {

									normalIndex = faces[ offset ++ ] * 3;

									normal = new THREE.Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);


									if ( i !== 2 ) faceA.vertexNormals.push( normal );
									if ( i !== 0 ) faceB.vertexNormals.push( normal );

								}

							}


							if ( hasFaceColor ) {

								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];

								faceA.color.setHex( hex );
								faceB.color.setHex( hex );

							}


							if ( hasFaceVertexColor ) {

								for ( i = 0; i < 4; i ++ ) {

									colorIndex = faces[ offset ++ ];
									hex = colors[ colorIndex ];

									if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
									if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );

								}

							}

							geometry.faces.push( faceA );
							geometry.faces.push( faceB );

						} else {

							face = new THREE.Face3();
							face.a = faces[ offset ++ ];
							face.b = faces[ offset ++ ];
							face.c = faces[ offset ++ ];

							if ( hasMaterial ) {

								materialIndex = faces[ offset ++ ];
								face.materialIndex = materialIndex;

							}

							// to get face <=> uv index correspondence

							fi = geometry.faces.length;

							if ( hasFaceVertexUv ) {

								for ( i = 0; i < nUvLayers; i ++ ) {

									uvLayer = json.uvs[ i ];

									geometry.faceVertexUvs[ i ][ fi ] = [];

									for ( j = 0; j < 3; j ++ ) {

										uvIndex = faces[ offset ++ ];

										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];

										uv = new THREE.Vector2( u, v );

										geometry.faceVertexUvs[ i ][ fi ].push( uv );

									}

								}

							}

							if ( hasFaceNormal ) {

								normalIndex = faces[ offset ++ ] * 3;

								face.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);

							}

							if ( hasFaceVertexNormal ) {

								for ( i = 0; i < 3; i ++ ) {

									normalIndex = faces[ offset ++ ] * 3;

									normal = new THREE.Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);

									face.vertexNormals.push( normal );

								}

							}


							if ( hasFaceColor ) {

								colorIndex = faces[ offset ++ ];
								face.color.setHex( colors[ colorIndex ] );

							}


							if ( hasFaceVertexColor ) {

								for ( i = 0; i < 3; i ++ ) {

									colorIndex = faces[ offset ++ ];
									face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );

								}

							}

							geometry.faces.push( face );

						}

					}

				};

				function parseSkin() {

					var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

					if ( json.skinWeights ) {

						for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

							var x =                               json.skinWeights[ i ];
							var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
							var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
							var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

							geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

						}

					}

					if ( json.skinIndices ) {

						for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

							var a =                               json.skinIndices[ i ];
							var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
							var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
							var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

							geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

						}

					}

					geometry.bones = json.bones;

					if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

						console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
							geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

					}

				};

				function parseMorphing( scale ) {

					if ( json.morphTargets !== undefined ) {

						for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

							geometry.morphTargets[ i ] = {};
							geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
							geometry.morphTargets[ i ].vertices = [];

							var dstVertices = geometry.morphTargets[ i ].vertices;
							var srcVertices = json.morphTargets[ i ].vertices;

							for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

								var vertex = new THREE.Vector3();
								vertex.x = srcVertices[ v ] * scale;
								vertex.y = srcVertices[ v + 1 ] * scale;
								vertex.z = srcVertices[ v + 2 ] * scale;

								dstVertices.push( vertex );

							}

						}

					}

					if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

						console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

						var faces = geometry.faces;
						var morphColors = json.morphColors[ 0 ].colors;

						for ( var i = 0, l = faces.length; i < l; i ++ ) {

							faces[ i ].color.fromArray( morphColors, i * 3 );

						}

					}

				}

				function parseAnimations() {

					var outputAnimations = [];

					// parse old style Bone/Hierarchy animations
					var animations = [];

					if ( json.animation !== undefined ) {

						animations.push( json.animation );

					}

					if ( json.animations !== undefined ) {

						if ( json.animations.length ) {

							animations = animations.concat( json.animations );

						} else {

							animations.push( json.animations );

						}

					}

					for ( var i = 0; i < animations.length; i ++ ) {

						var clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );
						if ( clip ) outputAnimations.push( clip );

					}

					// parse implicit morph animations
					if ( geometry.morphTargets ) {

						// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
						var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
						outputAnimations = outputAnimations.concat( morphAnimationClips );

					}

					if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

				};

				if ( json.materials === undefined || json.materials.length === 0 ) {

					return { geometry: geometry };

				} else {

					var materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

					return { geometry: geometry, materials: materials };

				}

			}

		};

	};

/***/ },
/* 40 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author felixturner / http://airtight.cc/
		 *
		 * Kaleidoscope Shader
		 * Radial reflection around center point
		 * Ported from: http://pixelshaders.com/editor/
		 * by Toby Schachman / http://tobyschachman.com/
		 *
		 * sides: number of reflections
		 * angle: initial angle in radians
		 */

		THREE.KaleidoShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"sides":    { type: "f", value: 6.0 },
				"angle":    { type: "f", value: 0.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform float sides;",
				"uniform float angle;",
				
				"varying vec2 vUv;",

				"void main() {",

					"vec2 p = vUv - 0.5;",
					"float r = length(p);",
					"float a = atan(p.y, p.x) + angle;",
					"float tau = 2. * 3.1416 ;",
					"a = mod(a, tau/sides);",
					"a = abs(a - tau/sides/2.) ;",
					"p = r * vec2(cos(a), sin(a));",
					"vec4 color = texture2D(tDiffuse, p + 0.5);",
					"gl_FragColor = color;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 41 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Luminosity
		 * http://en.wikipedia.org/wiki/Luminosity
		 */

		THREE.LuminosityShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",

					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 texel = texture2D( tDiffuse, vUv );",

					"vec3 luma = vec3( 0.299, 0.587, 0.114 );",

					"float v = dot( texel.xyz, luma );",

					"gl_FragColor = vec4( v, v, v, texel.w );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 42 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * Loads a Wavefront .mtl file specifying materials
		 *
		 * @author angelxuanchang
		 */

		THREE.MTLLoader = function( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		THREE.MTLLoader.prototype = {

			constructor: THREE.MTLLoader,

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var loader = new THREE.XHRLoader( this.manager );
				loader.setPath( this.path );
				loader.load( url, function ( text ) {

					onLoad( scope.parse( text ) );

				}, onProgress, onError );

			},

			setPath: function ( value ) {

				this.path = value;

			},

			setBaseUrl: function( value ) {

				// TODO: Merge with setPath()? Or rename to setTexturePath?

				this.baseUrl = value;

			},

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;

			},

			setMaterialOptions: function ( value ) {

				this.materialOptions = value;

			},

			/**
			 * Parses loaded MTL file
			 * @param text - Content of MTL file
			 * @return {THREE.MTLLoader.MaterialCreator}
			 */
			parse: function ( text ) {

				var lines = text.split( "\n" );
				var info = {};
				var delimiter_pattern = /\s+/;
				var materialsInfo = {};

				for ( var i = 0; i < lines.length; i ++ ) {

					var line = lines[ i ];
					line = line.trim();

					if ( line.length === 0 || line.charAt( 0 ) === '#' ) {

						// Blank line or comment ignore
						continue;

					}

					var pos = line.indexOf( ' ' );

					var key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;
					key = key.toLowerCase();

					var value = ( pos >= 0 ) ? line.substring( pos + 1 ) : "";
					value = value.trim();

					if ( key === "newmtl" ) {

						// New material

						info = { name: value };
						materialsInfo[ value ] = info;

					} else if ( info ) {

						if ( key === "ka" || key === "kd" || key === "ks" ) {

							var ss = value.split( delimiter_pattern, 3 );
							info[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];

						} else {

							info[ key ] = value;

						}

					}

				}

				var materialCreator = new THREE.MTLLoader.MaterialCreator( this.baseUrl, this.materialOptions );
				materialCreator.setCrossOrigin( this.crossOrigin );
				materialCreator.setManager( this.manager );
				materialCreator.setMaterials( materialsInfo );
				return materialCreator;

			}

		};

		/**
		 * Create a new THREE-MTLLoader.MaterialCreator
		 * @param baseUrl - Url relative to which textures are loaded
		 * @param options - Set of options on how to construct the materials
		 *                  side: Which side to apply the material
		 *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide
		 *                  wrap: What type of wrapping to apply for textures
		 *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping
		 *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255
		 *                                Default: false, assumed to be already normalized
		 *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's
		 *                                  Default: false
		 * @constructor
		 */

		THREE.MTLLoader.MaterialCreator = function( baseUrl, options ) {

			this.baseUrl = baseUrl;
			this.options = options;
			this.materialsInfo = {};
			this.materials = {};
			this.materialsArray = [];
			this.nameLookup = {};

			this.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;
			this.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;

		};

		THREE.MTLLoader.MaterialCreator.prototype = {

			constructor: THREE.MTLLoader.MaterialCreator,

			setCrossOrigin: function ( value ) {

				this.crossOrigin = value;

			},

			setManager: function ( value ) {

				this.manager = value;

			},

			setMaterials: function( materialsInfo ) {

				this.materialsInfo = this.convert( materialsInfo );
				this.materials = {};
				this.materialsArray = [];
				this.nameLookup = {};

			},

			convert: function( materialsInfo ) {

				if ( ! this.options ) return materialsInfo;

				var converted = {};

				for ( var mn in materialsInfo ) {

					// Convert materials info into normalized form based on options

					var mat = materialsInfo[ mn ];

					var covmat = {};

					converted[ mn ] = covmat;

					for ( var prop in mat ) {

						var save = true;
						var value = mat[ prop ];
						var lprop = prop.toLowerCase();

						switch ( lprop ) {

							case 'kd':
							case 'ka':
							case 'ks':

								// Diffuse color (color under white light) using RGB values

								if ( this.options && this.options.normalizeRGB ) {

									value = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];

								}

								if ( this.options && this.options.ignoreZeroRGBs ) {

									if ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 1 ] === 0 ) {

										// ignore

										save = false;

									}

								}

								break;

							default:

								break;
						}

						if ( save ) {

							covmat[ lprop ] = value;

						}

					}

				}

				return converted;

			},

			preload: function () {

				for ( var mn in this.materialsInfo ) {

					this.create( mn );

				}

			},

			getIndex: function( materialName ) {

				return this.nameLookup[ materialName ];

			},

			getAsArray: function() {

				var index = 0;

				for ( var mn in this.materialsInfo ) {

					this.materialsArray[ index ] = this.create( mn );
					this.nameLookup[ mn ] = index;
					index ++;

				}

				return this.materialsArray;

			},

			create: function ( materialName ) {

				if ( this.materials[ materialName ] === undefined ) {

					this.createMaterial_( materialName );

				}

				return this.materials[ materialName ];

			},

			createMaterial_: function ( materialName ) {

				// Create material

				var mat = this.materialsInfo[ materialName ];
				var params = {

					name: materialName,
					side: this.side

				};

				for ( var prop in mat ) {

					var value = mat[ prop ];

					if ( value === '' ) continue;

					switch ( prop.toLowerCase() ) {

						// Ns is material specular exponent

						case 'kd':

							// Diffuse color (color under white light) using RGB values

							params[ 'color' ] = new THREE.Color().fromArray( value );

							break;

						case 'ks':

							// Specular color (color when light is reflected from shiny surface) using RGB values
							params[ 'specular' ] = new THREE.Color().fromArray( value );

							break;

						case 'map_kd':

							// Diffuse texture map

							params[ 'map' ] = this.loadTexture( this.baseUrl + value );
							params[ 'map' ].wrapS = this.wrap;
							params[ 'map' ].wrapT = this.wrap;

							break;

						case 'ns':

							// The specular exponent (defines the focus of the specular highlight)
							// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.

							params[ 'shininess' ] = parseFloat( value );

							break;

						case 'd':

							if ( value < 1 ) {

								params[ 'opacity' ] = value;
								params[ 'transparent' ] = true;

							}

							break;

						case 'Tr':

							if ( value > 0 ) {

								params[ 'opacity' ] = 1 - value;
								params[ 'transparent' ] = true;

							}

							break;

						case 'map_bump':
						case 'bump':

							// Bump texture map

							if ( params[ 'bumpMap' ] ) break; // Avoid loading twice.

							params[ 'bumpMap' ] = this.loadTexture( this.baseUrl + value );
							params[ 'bumpMap' ].wrapS = this.wrap;
							params[ 'bumpMap' ].wrapT = this.wrap;

							break;

						default:
							break;

					}

				}

				this.materials[ materialName ] = new THREE.MeshPhongMaterial( params );
				return this.materials[ materialName ];

			},


			loadTexture: function ( url, mapping, onLoad, onProgress, onError ) {

				var texture;
				var loader = THREE.Loader.Handlers.get( url );
				var manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;

				if ( loader === null ) {

					loader = new THREE.TextureLoader( manager );

				}

				if ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );
				texture = loader.load( url, onLoad, onProgress, onError );

				if ( mapping !== undefined ) texture.mapping = mapping;

				return texture;

			}

		};

		THREE.EventDispatcher.prototype.apply( THREE.MTLLoader.prototype );

	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Port of greggman's ThreeD version of marching cubes to Three.js
		 * http://webglsamples.googlecode.com/hg/blob/blob.html
		 */

		THREE.MarchingCubes = function ( resolution, material, enableUvs, enableColors ) {

			THREE.ImmediateRenderObject.call( this, material );

			this.enableUvs = enableUvs !== undefined ? enableUvs : false;
			this.enableColors = enableColors !== undefined ? enableColors : false;

			// functions have to be object properties
			// prototype functions kill performance
			// (tested and it was 4x slower !!!)

			this.init = function ( resolution ) {

				this.resolution = resolution;

				// parameters

				this.isolation = 80.0;

				// size of field, 32 is pushing it in Javascript :)

				this.size = resolution;
				this.size2 = this.size * this.size;
				this.size3 = this.size2 * this.size;
				this.halfsize = this.size / 2.0;

				// deltas

				this.delta = 2.0 / this.size;
				this.yd = this.size;
				this.zd = this.size2;

				this.field = new Float32Array( this.size3 );
				this.normal_cache = new Float32Array( this.size3 * 3 );

				// temp buffers used in polygonize

				this.vlist = new Float32Array( 12 * 3 );
				this.nlist = new Float32Array( 12 * 3 );

				// immediate render mode simulator

				this.maxCount = 4096; // TODO: find the fastest size for this buffer
				this.count = 0;

				this.hasPositions = false;
				this.hasNormals = false;
				this.hasColors = false;
				this.hasUvs = false;

				this.positionArray = new Float32Array( this.maxCount * 3 );
				this.normalArray   = new Float32Array( this.maxCount * 3 );

				if ( this.enableUvs ) {

					this.uvArray = new Float32Array( this.maxCount * 2 );

				}

				if ( this.enableColors ) {

					this.colorArray   = new Float32Array( this.maxCount * 3 );

				}

			};

			///////////////////////
			// Polygonization
			///////////////////////

			this.lerp = function( a, b, t ) {

				return a + ( b - a ) * t;

			};

			this.VIntX = function( q, pout, nout, offset, isol, x, y, z, valp1, valp2 ) {

				var mu = ( isol - valp1 ) / ( valp2 - valp1 ),
				nc = this.normal_cache;

				pout[ offset ] 	   = x + mu * this.delta;
				pout[ offset + 1 ] = y;
				pout[ offset + 2 ] = z;

				nout[ offset ] 	   = this.lerp( nc[ q ],     nc[ q + 3 ], mu );
				nout[ offset + 1 ] = this.lerp( nc[ q + 1 ], nc[ q + 4 ], mu );
				nout[ offset + 2 ] = this.lerp( nc[ q + 2 ], nc[ q + 5 ], mu );

			};

			this.VIntY = function( q, pout, nout, offset, isol, x, y, z, valp1, valp2 ) {

				var mu = ( isol - valp1 ) / ( valp2 - valp1 ),
				nc = this.normal_cache;

				pout[ offset ] 	   = x;
				pout[ offset + 1 ] = y + mu * this.delta;
				pout[ offset + 2 ] = z;

				var q2 = q + this.yd * 3;

				nout[ offset ] 	   = this.lerp( nc[ q ],     nc[ q2 ],     mu );
				nout[ offset + 1 ] = this.lerp( nc[ q + 1 ], nc[ q2 + 1 ], mu );
				nout[ offset + 2 ] = this.lerp( nc[ q + 2 ], nc[ q2 + 2 ], mu );

			};

			this.VIntZ = function( q, pout, nout, offset, isol, x, y, z, valp1, valp2 ) {

				var mu = ( isol - valp1 ) / ( valp2 - valp1 ),
				nc = this.normal_cache;

				pout[ offset ] 	   = x;
				pout[ offset + 1 ] = y;
				pout[ offset + 2 ] = z + mu * this.delta;

				var q2 = q + this.zd * 3;

				nout[ offset ] 	   = this.lerp( nc[ q ],     nc[ q2 ],     mu );
				nout[ offset + 1 ] = this.lerp( nc[ q + 1 ], nc[ q2 + 1 ], mu );
				nout[ offset + 2 ] = this.lerp( nc[ q + 2 ], nc[ q2 + 2 ], mu );

			};

			this.compNorm = function( q ) {

				var q3 = q * 3;

				if ( this.normal_cache[ q3 ] === 0.0 ) {

					this.normal_cache[ q3 ] = this.field[ q - 1 ] 	    - this.field[ q + 1 ];
					this.normal_cache[ q3 + 1 ] = this.field[ q - this.yd ] - this.field[ q + this.yd ];
					this.normal_cache[ q3 + 2 ] = this.field[ q - this.zd ] - this.field[ q + this.zd ];

				}

			};

			// Returns total number of triangles. Fills triangles.
			// (this is where most of time is spent - it's inner work of O(n3) loop )

			this.polygonize = function( fx, fy, fz, q, isol, renderCallback ) {

				// cache indices
				var q1 = q + 1,
					qy = q + this.yd,
					qz = q + this.zd,
					q1y = q1 + this.yd,
					q1z = q1 + this.zd,
					qyz = q + this.yd + this.zd,
					q1yz = q1 + this.yd + this.zd;

				var cubeindex = 0,
					field0 = this.field[ q ],
					field1 = this.field[ q1 ],
					field2 = this.field[ qy ],
					field3 = this.field[ q1y ],
					field4 = this.field[ qz ],
					field5 = this.field[ q1z ],
					field6 = this.field[ qyz ],
					field7 = this.field[ q1yz ];

				if ( field0 < isol ) cubeindex |= 1;
				if ( field1 < isol ) cubeindex |= 2;
				if ( field2 < isol ) cubeindex |= 8;
				if ( field3 < isol ) cubeindex |= 4;
				if ( field4 < isol ) cubeindex |= 16;
				if ( field5 < isol ) cubeindex |= 32;
				if ( field6 < isol ) cubeindex |= 128;
				if ( field7 < isol ) cubeindex |= 64;

				// if cube is entirely in/out of the surface - bail, nothing to draw

				var bits = THREE.edgeTable[ cubeindex ];
				if ( bits === 0 ) return 0;

				var d = this.delta,
					fx2 = fx + d,
					fy2 = fy + d,
					fz2 = fz + d;

				// top of the cube

				if ( bits & 1 ) {

					this.compNorm( q );
					this.compNorm( q1 );
					this.VIntX( q * 3, this.vlist, this.nlist, 0, isol, fx, fy, fz, field0, field1 );

				}

				if ( bits & 2 ) {

					this.compNorm( q1 );
					this.compNorm( q1y );
					this.VIntY( q1 * 3, this.vlist, this.nlist, 3, isol, fx2, fy, fz, field1, field3 );

				}

				if ( bits & 4 ) {

					this.compNorm( qy );
					this.compNorm( q1y );
					this.VIntX( qy * 3, this.vlist, this.nlist, 6, isol, fx, fy2, fz, field2, field3 );

				}

				if ( bits & 8 ) {

					this.compNorm( q );
					this.compNorm( qy );
					this.VIntY( q * 3, this.vlist, this.nlist, 9, isol, fx, fy, fz, field0, field2 );

				}

				// bottom of the cube

				if ( bits & 16 ) {

					this.compNorm( qz );
					this.compNorm( q1z );
					this.VIntX( qz * 3, this.vlist, this.nlist, 12, isol, fx, fy, fz2, field4, field5 );

				}

				if ( bits & 32 ) {

					this.compNorm( q1z );
					this.compNorm( q1yz );
					this.VIntY( q1z * 3,  this.vlist, this.nlist, 15, isol, fx2, fy, fz2, field5, field7 );

				}

				if ( bits & 64 ) {

					this.compNorm( qyz );
					this.compNorm( q1yz );
					this.VIntX( qyz * 3, this.vlist, this.nlist, 18, isol, fx, fy2, fz2, field6, field7 );

				}

				if ( bits & 128 ) {

					this.compNorm( qz );
					this.compNorm( qyz );
					this.VIntY( qz * 3,  this.vlist, this.nlist, 21, isol, fx, fy, fz2, field4, field6 );

				}

				// vertical lines of the cube

				if ( bits & 256 ) {

					this.compNorm( q );
					this.compNorm( qz );
					this.VIntZ( q * 3, this.vlist, this.nlist, 24, isol, fx, fy, fz, field0, field4 );

				}

				if ( bits & 512 ) {

					this.compNorm( q1 );
					this.compNorm( q1z );
					this.VIntZ( q1 * 3,  this.vlist, this.nlist, 27, isol, fx2, fy,  fz, field1, field5 );

				}

				if ( bits & 1024 ) {

					this.compNorm( q1y );
					this.compNorm( q1yz );
					this.VIntZ( q1y * 3, this.vlist, this.nlist, 30, isol, fx2, fy2, fz, field3, field7 );

				}

				if ( bits & 2048 ) {

					this.compNorm( qy );
					this.compNorm( qyz );
					this.VIntZ( qy * 3, this.vlist, this.nlist, 33, isol, fx,  fy2, fz, field2, field6 );

				}

				cubeindex <<= 4;  // re-purpose cubeindex into an offset into triTable

				var o1, o2, o3, numtris = 0, i = 0;

				// here is where triangles are created

				while ( THREE.triTable[ cubeindex + i ] != - 1 ) {

					o1 = cubeindex + i;
					o2 = o1 + 1;
					o3 = o1 + 2;

					this.posnormtriv( this.vlist, this.nlist,
									  3 * THREE.triTable[ o1 ],
									  3 * THREE.triTable[ o2 ],
									  3 * THREE.triTable[ o3 ],
									  renderCallback );

					i += 3;
					numtris ++;

				}

				return numtris;

			};

			/////////////////////////////////////
			// Immediate render mode simulator
			/////////////////////////////////////

			this.posnormtriv = function( pos, norm, o1, o2, o3, renderCallback ) {

				var c = this.count * 3;

				// positions

				this.positionArray[ c ] 	= pos[ o1 ];
				this.positionArray[ c + 1 ] = pos[ o1 + 1 ];
				this.positionArray[ c + 2 ] = pos[ o1 + 2 ];

				this.positionArray[ c + 3 ] = pos[ o2 ];
				this.positionArray[ c + 4 ] = pos[ o2 + 1 ];
				this.positionArray[ c + 5 ] = pos[ o2 + 2 ];

				this.positionArray[ c + 6 ] = pos[ o3 ];
				this.positionArray[ c + 7 ] = pos[ o3 + 1 ];
				this.positionArray[ c + 8 ] = pos[ o3 + 2 ];

				// normals

				this.normalArray[ c ] 	  = norm[ o1 ];
				this.normalArray[ c + 1 ] = norm[ o1 + 1 ];
				this.normalArray[ c + 2 ] = norm[ o1 + 2 ];

				this.normalArray[ c + 3 ] = norm[ o2 ];
				this.normalArray[ c + 4 ] = norm[ o2 + 1 ];
				this.normalArray[ c + 5 ] = norm[ o2 + 2 ];

				this.normalArray[ c + 6 ] = norm[ o3 ];
				this.normalArray[ c + 7 ] = norm[ o3 + 1 ];
				this.normalArray[ c + 8 ] = norm[ o3 + 2 ];

				// uvs

				if ( this.enableUvs ) {

					var d = this.count * 2;

					this.uvArray[ d ] 	  = pos[ o1 ];
					this.uvArray[ d + 1 ] = pos[ o1 + 2 ];

					this.uvArray[ d + 2 ] = pos[ o2 ];
					this.uvArray[ d + 3 ] = pos[ o2 + 2 ];

					this.uvArray[ d + 4 ] = pos[ o3 ];
					this.uvArray[ d + 5 ] = pos[ o3 + 2 ];

				}

				// colors

				if ( this.enableColors ) {

					this.colorArray[ c ] 	 = pos[ o1 ];
					this.colorArray[ c + 1 ] = pos[ o1 + 1 ];
					this.colorArray[ c + 2 ] = pos[ o1 + 2 ];

					this.colorArray[ c + 3 ] = pos[ o2 ];
					this.colorArray[ c + 4 ] = pos[ o2 + 1 ];
					this.colorArray[ c + 5 ] = pos[ o2 + 2 ];

					this.colorArray[ c + 6 ] = pos[ o3 ];
					this.colorArray[ c + 7 ] = pos[ o3 + 1 ];
					this.colorArray[ c + 8 ] = pos[ o3 + 2 ];

				}

				this.count += 3;

				if ( this.count >= this.maxCount - 3 ) {

					this.hasPositions = true;
					this.hasNormals = true;

					if ( this.enableUvs ) {

						this.hasUvs = true;

					}

					if ( this.enableColors ) {

						this.hasColors = true;

					}

					renderCallback( this );

				}

			};

			this.begin = function( ) {

				this.count = 0;

				this.hasPositions = false;
				this.hasNormals = false;
				this.hasUvs = false;
				this.hasColors = false;

			};

			this.end = function( renderCallback ) {

				if ( this.count === 0 ) return;

				for ( var i = this.count * 3; i < this.positionArray.length; i ++ ) {

					this.positionArray[ i ] = 0.0;

				}

				this.hasPositions = true;
				this.hasNormals = true;

				if ( this.enableUvs ) {

					this.hasUvs = true;

				}

				if ( this.enableColors ) {

					this.hasColors = true;

				}

				renderCallback( this );

			};

			/////////////////////////////////////
			// Metaballs
			/////////////////////////////////////

			// Adds a reciprocal ball (nice and blobby) that, to be fast, fades to zero after
			// a fixed distance, determined by strength and subtract.

			this.addBall = function( ballx, bally, ballz, strength, subtract ) {

				// Let's solve the equation to find the radius:
				// 1.0 / (0.000001 + radius^2) * strength - subtract = 0
				// strength / (radius^2) = subtract
				// strength = subtract * radius^2
				// radius^2 = strength / subtract
				// radius = sqrt(strength / subtract)

				var radius = this.size * Math.sqrt( strength / subtract ),
					zs = ballz * this.size,
					ys = bally * this.size,
					xs = ballx * this.size;

				var min_z = Math.floor( zs - radius ); if ( min_z < 1 ) min_z = 1;
				var max_z = Math.floor( zs + radius ); if ( max_z > this.size - 1 ) max_z = this.size - 1;
				var min_y = Math.floor( ys - radius ); if ( min_y < 1 ) min_y = 1;
				var max_y = Math.floor( ys + radius ); if ( max_y > this.size - 1 ) max_y = this.size - 1;
				var min_x = Math.floor( xs - radius ); if ( min_x < 1  ) min_x = 1;
				var max_x = Math.floor( xs + radius ); if ( max_x > this.size - 1 ) max_x = this.size - 1;


				// Don't polygonize in the outer layer because normals aren't
				// well-defined there.

				var x, y, z, y_offset, z_offset, fx, fy, fz, fz2, fy2, val;

				for ( z = min_z; z < max_z; z ++ ) {

					z_offset = this.size2 * z,
					fz = z / this.size - ballz,
					fz2 = fz * fz;

					for ( y = min_y; y < max_y; y ++ ) {

						y_offset = z_offset + this.size * y;
						fy = y / this.size - bally;
						fy2 = fy * fy;

						for ( x = min_x; x < max_x; x ++ ) {

							fx = x / this.size - ballx;
							val = strength / ( 0.000001 + fx * fx + fy2 + fz2 ) - subtract;
							if ( val > 0.0 ) this.field[ y_offset + x ] += val;

						}

					}

				}

			};

			this.addPlaneX = function( strength, subtract ) {

				var x, y, z, xx, val, xdiv, cxy,

					// cache attribute lookups
					size = this.size,
					yd = this.yd,
					zd = this.zd,
					field = this.field,

					dist = size * Math.sqrt( strength / subtract );

				if ( dist > size ) dist = size;

				for ( x = 0; x < dist; x ++ ) {

					xdiv = x / size;
					xx = xdiv * xdiv;
					val = strength / ( 0.0001 + xx ) - subtract;

					if ( val > 0.0 ) {

						for ( y = 0; y < size; y ++ ) {

							cxy = x + y * yd;

							for ( z = 0; z < size; z ++ ) {

								field[ zd * z + cxy ] += val;

							}

						}

					}

				}

			};

			this.addPlaneY = function( strength, subtract ) {

				var x, y, z, yy, val, ydiv, cy, cxy,

					// cache attribute lookups
					size = this.size,
					yd = this.yd,
					zd = this.zd,
					field = this.field,

					dist = size * Math.sqrt( strength / subtract );

				if ( dist > size ) dist = size;

				for ( y = 0; y < dist; y ++ ) {

					ydiv = y / size;
					yy = ydiv * ydiv;
					val = strength / ( 0.0001 + yy ) - subtract;

					if ( val > 0.0 ) {

						cy = y * yd;

						for ( x = 0; x < size; x ++ ) {

							cxy = cy + x;

							for ( z = 0; z < size; z ++ )
								field[ zd * z + cxy ] += val;

						}

					}

				}

			};

			this.addPlaneZ = function( strength, subtract ) {

				var x, y, z, zz, val, zdiv, cz, cyz,

					// cache attribute lookups
					size = this.size,
					yd = this.yd,
					zd = this.zd,
					field = this.field,

					dist = size * Math.sqrt( strength / subtract );

				if ( dist > size ) dist = size;

				for ( z = 0; z < dist; z ++ ) {

					zdiv = z / size;
					zz = zdiv * zdiv;
					val = strength / ( 0.0001 + zz ) - subtract;
					if ( val > 0.0 ) {

						cz = zd * z;

						for ( y = 0; y < size; y ++ ) {

							cyz = cz + y * yd;

							for ( x = 0; x < size; x ++ )
								field[ cyz + x ] += val;

						}

					}

				}

			};

			/////////////////////////////////////
			// Updates
			/////////////////////////////////////

			this.reset = function () {

				var i;

				// wipe the normal cache

				for ( i = 0; i < this.size3; i ++ ) {

					this.normal_cache[ i * 3 ] = 0.0;
					this.field[ i ] = 0.0;

				}

			};

			this.render = function ( renderCallback ) {

				this.begin();

				// Triangulate. Yeah, this is slow.

				var smin2 = this.size - 2;

				for ( var z = 1; z < smin2; z ++ ) {

					var z_offset = this.size2 * z;
					var fz = ( z - this.halfsize ) / this.halfsize; //+ 1

					for ( var y = 1; y < smin2; y ++ ) {

						var y_offset = z_offset + this.size * y;
						var fy = ( y - this.halfsize ) / this.halfsize; //+ 1

						for ( var x = 1; x < smin2; x ++ ) {

							var fx = ( x - this.halfsize ) / this.halfsize; //+ 1
							var q = y_offset + x;

							this.polygonize( fx, fy, fz, q, this.isolation, renderCallback );

						}

					}

				}

				this.end( renderCallback );

			};

			this.generateGeometry = function() {

				var start = 0, geo = new THREE.Geometry();
				var normals = [];

				var geo_callback = function( object ) {

					var i, x, y, z, vertex, normal,
						face, a, b, c, na, nb, nc, nfaces;


					for ( i = 0; i < object.count; i ++ ) {

						a = i * 3;
						b = a + 1;
						c = a + 2;

						x = object.positionArray[ a ];
						y = object.positionArray[ b ];
						z = object.positionArray[ c ];
						vertex = new THREE.Vector3( x, y, z );

						x = object.normalArray[ a ];
						y = object.normalArray[ b ];
						z = object.normalArray[ c ];
						normal = new THREE.Vector3( x, y, z );
						normal.normalize();

						geo.vertices.push( vertex );
						normals.push( normal );

					}

					nfaces = object.count / 3;

					for ( i = 0; i < nfaces; i ++ ) {

						a = ( start + i ) * 3;
						b = a + 1;
						c = a + 2;

						na = normals[ a ];
						nb = normals[ b ];
						nc = normals[ c ];

						face = new THREE.Face3( a, b, c, [ na, nb, nc ] );

						geo.faces.push( face );

					}

					start += nfaces;
					object.count = 0;

				};

				this.render( geo_callback );

				// console.log( "generated " + geo.faces.length + " triangles" );

				return geo;

			};

			this.init( resolution );

		};

		THREE.MarchingCubes.prototype = Object.create( THREE.ImmediateRenderObject.prototype );
		THREE.MarchingCubes.prototype.constructor = THREE.MarchingCubes;


		/////////////////////////////////////
		// Marching cubes lookup tables
		/////////////////////////////////////

		// These tables are straight from Paul Bourke's page:
		// http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/
		// who in turn got them from Cory Gene Bloyd.

		THREE.edgeTable = new Int32Array( [
		0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
		0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
		0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
		0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
		0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
		0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
		0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
		0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
		0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
		0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
		0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
		0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
		0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
		0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
		0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
		0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
		0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
		0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
		0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
		0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
		0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
		0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
		0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
		0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
		0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
		0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
		0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
		0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
		0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
		0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
		0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
		0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0 ] );

		THREE.triTable = new Int32Array( [
		- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 8, 3, 9, 8, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 3, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 2, 10, 0, 2, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 8, 3, 2, 10, 8, 10, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 11, 2, 8, 11, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 9, 0, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 11, 2, 1, 9, 11, 9, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 10, 1, 11, 10, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 10, 1, 0, 8, 10, 8, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 9, 0, 3, 11, 9, 11, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 3, 0, 7, 3, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 1, 9, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 1, 9, 4, 7, 1, 7, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 10, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 4, 7, 3, 0, 4, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 2, 10, 9, 0, 2, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,
		8, 4, 7, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		11, 4, 7, 11, 2, 4, 2, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 0, 1, 8, 4, 7, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, - 1, - 1, - 1, - 1,
		3, 10, 1, 3, 11, 10, 7, 8, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, - 1, - 1, - 1, - 1,
		4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,
		4, 7, 11, 4, 11, 9, 9, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 5, 4, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 5, 4, 1, 5, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		8, 5, 4, 8, 3, 5, 3, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 10, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 0, 8, 1, 2, 10, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 2, 10, 5, 4, 2, 4, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, - 1, - 1, - 1, - 1,
		9, 5, 4, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 11, 2, 0, 8, 11, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 5, 4, 0, 1, 5, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, - 1, - 1, - 1, - 1,
		10, 3, 11, 10, 1, 3, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, - 1, - 1, - 1, - 1,
		5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,
		5, 4, 8, 5, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 7, 8, 5, 7, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 3, 0, 9, 5, 3, 5, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 7, 8, 0, 1, 7, 1, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 7, 8, 9, 5, 7, 10, 1, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, - 1, - 1, - 1, - 1,
		8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, - 1, - 1, - 1, - 1,
		2, 10, 5, 2, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		7, 9, 5, 7, 8, 9, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,
		2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, - 1, - 1, - 1, - 1,
		11, 2, 1, 11, 1, 7, 7, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, - 1, - 1, - 1, - 1,
		5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, - 1,
		11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, - 1,
		11, 10, 5, 7, 11, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 3, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 0, 1, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 8, 3, 1, 9, 8, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 6, 5, 2, 6, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 6, 5, 1, 2, 6, 3, 0, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 6, 5, 9, 0, 6, 0, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, - 1, - 1, - 1, - 1,
		2, 3, 11, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		11, 0, 8, 11, 2, 0, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 1, 9, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, - 1, - 1, - 1, - 1,
		6, 3, 11, 6, 5, 3, 5, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,
		3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, - 1, - 1, - 1, - 1,
		6, 5, 9, 6, 9, 11, 11, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 10, 6, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 3, 0, 4, 7, 3, 6, 5, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 9, 0, 5, 10, 6, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,
		6, 1, 2, 6, 5, 1, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, - 1, - 1, - 1, - 1,
		8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, - 1, - 1, - 1, - 1,
		7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, - 1,
		3, 11, 2, 7, 8, 4, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,
		0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1,
		9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, - 1,
		8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,
		5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, - 1,
		0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, - 1,
		6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, - 1, - 1, - 1, - 1,
		10, 4, 9, 6, 4, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 10, 6, 4, 9, 10, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 0, 1, 10, 6, 0, 6, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,
		1, 4, 9, 1, 2, 4, 2, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, - 1, - 1, - 1, - 1,
		0, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		8, 3, 2, 8, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 4, 9, 10, 6, 4, 11, 2, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, - 1, - 1, - 1, - 1,
		3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,
		6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, - 1,
		9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, - 1, - 1, - 1, - 1,
		8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, - 1,
		3, 11, 6, 3, 6, 0, 0, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		6, 4, 8, 11, 6, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		7, 10, 6, 7, 8, 10, 8, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, - 1, - 1, - 1, - 1,
		10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, - 1, - 1, - 1, - 1,
		10, 6, 7, 10, 7, 1, 1, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,
		2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, - 1,
		7, 8, 0, 7, 0, 6, 6, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		7, 3, 2, 6, 7, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,
		2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, - 1,
		1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, - 1,
		11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, - 1, - 1, - 1, - 1,
		8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, - 1,
		0, 9, 1, 11, 6, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, - 1, - 1, - 1, - 1,
		7, 11, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 0, 8, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 1, 9, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		8, 1, 9, 8, 3, 1, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 1, 2, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 10, 3, 0, 8, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 9, 0, 2, 10, 9, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, - 1, - 1, - 1, - 1,
		7, 2, 3, 6, 2, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		7, 0, 8, 7, 6, 0, 6, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 7, 6, 2, 3, 7, 0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, - 1, - 1, - 1, - 1,
		10, 7, 6, 10, 1, 7, 1, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, - 1, - 1, - 1, - 1,
		0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, - 1, - 1, - 1, - 1,
		7, 6, 10, 7, 10, 8, 8, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		6, 8, 4, 11, 8, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 6, 11, 3, 0, 6, 0, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		8, 6, 11, 8, 4, 6, 9, 0, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, - 1, - 1, - 1, - 1,
		6, 8, 4, 6, 11, 8, 2, 10, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, - 1, - 1, - 1, - 1,
		4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, - 1, - 1, - 1, - 1,
		10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, - 1,
		8, 2, 3, 8, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, - 1, - 1, - 1, - 1,
		1, 9, 4, 1, 4, 2, 2, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, - 1, - 1, - 1, - 1,
		10, 1, 0, 10, 0, 6, 6, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, - 1,
		10, 9, 4, 6, 10, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 9, 5, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 3, 4, 9, 5, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 0, 1, 5, 4, 0, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, - 1, - 1, - 1, - 1,
		9, 5, 4, 10, 1, 2, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, - 1, - 1, - 1, - 1,
		7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, - 1, - 1, - 1, - 1,
		3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, - 1,
		7, 2, 3, 7, 6, 2, 5, 4, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, - 1, - 1, - 1, - 1,
		3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, - 1, - 1, - 1, - 1,
		6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, - 1,
		9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, - 1, - 1, - 1, - 1,
		1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, - 1,
		4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, - 1,
		7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, - 1, - 1, - 1, - 1,
		6, 9, 5, 6, 11, 9, 11, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, - 1, - 1, - 1, - 1,
		0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, - 1, - 1, - 1, - 1,
		6, 11, 3, 6, 3, 5, 5, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, - 1, - 1, - 1, - 1,
		0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, - 1,
		11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, - 1,
		6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, - 1, - 1, - 1, - 1,
		5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, - 1, - 1, - 1, - 1,
		9, 5, 6, 9, 6, 0, 0, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, - 1,
		1, 5, 6, 2, 1, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, - 1,
		10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, - 1, - 1, - 1, - 1,
		0, 3, 8, 5, 6, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 5, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		11, 5, 10, 7, 5, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		11, 5, 10, 11, 7, 5, 8, 3, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 11, 7, 5, 10, 11, 1, 9, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, - 1, - 1, - 1, - 1,
		11, 1, 2, 11, 7, 1, 7, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, - 1, - 1, - 1, - 1,
		9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, - 1, - 1, - 1, - 1,
		7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, - 1,
		2, 5, 10, 2, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, - 1, - 1, - 1, - 1,
		9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, - 1, - 1, - 1, - 1,
		9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, - 1,
		1, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 7, 0, 7, 1, 1, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 0, 3, 9, 3, 5, 5, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 8, 7, 5, 9, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 8, 4, 5, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, - 1, - 1, - 1, - 1,
		0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, - 1, - 1, - 1, - 1,
		10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, - 1,
		2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, - 1, - 1, - 1, - 1,
		0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, - 1,
		0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, - 1,
		9, 4, 5, 2, 11, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, - 1, - 1, - 1, - 1,
		5, 10, 2, 5, 2, 4, 4, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, - 1,
		5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, - 1, - 1, - 1, - 1,
		8, 4, 5, 8, 5, 3, 3, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 4, 5, 1, 0, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, - 1, - 1, - 1, - 1,
		9, 4, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 11, 7, 4, 9, 11, 9, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, - 1, - 1, - 1, - 1,
		1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, - 1, - 1, - 1, - 1,
		3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, - 1,
		4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, - 1, - 1, - 1, - 1,
		9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, - 1,
		11, 7, 4, 11, 4, 2, 2, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, - 1, - 1, - 1, - 1,
		2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, - 1, - 1, - 1, - 1,
		9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, - 1,
		3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, - 1,
		1, 10, 2, 8, 7, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 9, 1, 4, 1, 7, 7, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, - 1, - 1, - 1, - 1,
		4, 0, 3, 7, 4, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		4, 8, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 0, 9, 3, 9, 11, 11, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 1, 10, 0, 10, 8, 8, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 1, 10, 11, 3, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 2, 11, 1, 11, 9, 9, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, - 1, - 1, - 1, - 1,
		0, 2, 11, 8, 0, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		3, 2, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 3, 8, 2, 8, 10, 10, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		9, 10, 2, 0, 9, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, - 1, - 1, - 1, - 1,
		1, 10, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		1, 3, 8, 9, 1, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 9, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		0, 3, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
		- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1 ] );

	};

/***/ },
/* 44 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.MaskPass = function ( scene, camera ) {

			this.scene = scene;
			this.camera = camera;

			this.enabled = true;
			this.clear = true;
			this.needsSwap = false;

			this.inverse = false;

		};

		THREE.MaskPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				var context = renderer.context;

				// don't update color or depth

				context.colorMask( false, false, false, false );
				context.depthMask( false );

				// set up stencil

				var writeValue, clearValue;

				if ( this.inverse ) {

					writeValue = 0;
					clearValue = 1;

				} else {

					writeValue = 1;
					clearValue = 0;

				}

				context.enable( context.STENCIL_TEST );
				context.stencilOp( context.REPLACE, context.REPLACE, context.REPLACE );
				context.stencilFunc( context.ALWAYS, writeValue, 0xffffffff );
				context.clearStencil( clearValue );

				// draw into the stencil buffer

				renderer.render( this.scene, this.camera, readBuffer, this.clear );
				renderer.render( this.scene, this.camera, writeBuffer, this.clear );

				// re-enable update of color and depth

				context.colorMask( true, true, true, true );
				context.depthMask( true );

				// only render where stencil is set to 1

				context.stencilFunc( context.EQUAL, 1, 0xffffffff );  // draw if == 1
				context.stencilOp( context.KEEP, context.KEEP, context.KEEP );

			}

		};


		THREE.ClearMaskPass = function () {

			this.enabled = true;

		};

		THREE.ClearMaskPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				var context = renderer.context;

				context.disable( context.STENCIL_TEST );

			}

		};

	};


/***/ },
/* 45 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author felixturner / http://airtight.cc/
		 *
		 * Mirror Shader
		 * Copies half the input to the other half
		 *
		 * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)
		 */

		THREE.MirrorShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"side":     { type: "i", value: 1 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform int side;",
				
				"varying vec2 vUv;",

				"void main() {",

					"vec2 p = vUv;",
					"if (side == 0){",
						"if (p.x > 0.5) p.x = 1.0 - p.x;",
					"}else if (side == 1){",
						"if (p.x < 0.5) p.x = 1.0 - p.x;",
					"}else if (side == 2){",
						"if (p.y < 0.5) p.y = 1.0 - p.y;",
					"}else if (side == 3){",
						"if (p.y > 0.5) p.y = 1.0 - p.y;",
					"} ",
					"vec4 color = texture2D(tDiffuse, p);",
					"gl_FragColor = color;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 46 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Normal map shader
		 * - compute normals from heightmap
		 */

		THREE.NormalMapShader = {

			uniforms: {

				"heightMap":  { type: "t", value: null },
				"resolution": { type: "v2", value: new THREE.Vector2( 512, 512 ) },
				"scale":      { type: "v2", value: new THREE.Vector2( 1, 1 ) },
				"height":     { type: "f", value: 0.05 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float height;",
				"uniform vec2 resolution;",
				"uniform sampler2D heightMap;",

				"varying vec2 vUv;",

				"void main() {",

					"float val = texture2D( heightMap, vUv ).x;",

					"float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;",
					"float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;",

					"gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 47 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author mrdoob / http://mrdoob.com/
		 */

		THREE.OBJLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

			this.materials = null;

		};

		THREE.OBJLoader.prototype = {

			constructor: THREE.OBJLoader,

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var loader = new THREE.XHRLoader( scope.manager );
				loader.setPath( this.path );
				loader.load( url, function ( text ) {

					onLoad( scope.parse( text ) );

				}, onProgress, onError );

			},

			setPath: function ( value ) {

				this.path = value;

			},

			setMaterials: function ( materials ) {

				this.materials = materials;

			},

			parse: function ( text ) {

				console.time( 'OBJLoader' );

				var objects = [];
				var object;
				var foundObjects = false;
				var vertices = [];
				var normals = [];
				var uvs = [];

				function addObject( name ) {

					var geometry = {
						vertices: [],
						normals: [],
						uvs: []
					};

					var material = {
						name: '',
						smooth: true
					};

					object = {
						name: name,
						geometry: geometry,
						material: material
					};

					objects.push( object );

				}

				function parseVertexIndex( value ) {

					var index = parseInt( value );

					return ( index >= 0 ? index - 1 : index + vertices.length / 3 ) * 3;

				}

				function parseNormalIndex( value ) {

					var index = parseInt( value );

					return ( index >= 0 ? index - 1 : index + normals.length / 3 ) * 3;

				}

				function parseUVIndex( value ) {

					var index = parseInt( value );

					return ( index >= 0 ? index - 1 : index + uvs.length / 2 ) * 2;

				}

				function addVertex( a, b, c ) {

					object.geometry.vertices.push(
						vertices[ a ], vertices[ a + 1 ], vertices[ a + 2 ],
						vertices[ b ], vertices[ b + 1 ], vertices[ b + 2 ],
						vertices[ c ], vertices[ c + 1 ], vertices[ c + 2 ]
					);

				}

				function addNormal( a, b, c ) {

					object.geometry.normals.push(
						normals[ a ], normals[ a + 1 ], normals[ a + 2 ],
						normals[ b ], normals[ b + 1 ], normals[ b + 2 ],
						normals[ c ], normals[ c + 1 ], normals[ c + 2 ]
					);

				}

				function addUV( a, b, c ) {

					object.geometry.uvs.push(
						uvs[ a ], uvs[ a + 1 ],
						uvs[ b ], uvs[ b + 1 ],
						uvs[ c ], uvs[ c + 1 ]
					);

				}

				function addFace( a, b, c, d,  ua, ub, uc, ud, na, nb, nc, nd ) {

					var ia = parseVertexIndex( a );
					var ib = parseVertexIndex( b );
					var ic = parseVertexIndex( c );
					var id;

					if ( d === undefined ) {

						addVertex( ia, ib, ic );

					} else {

						id = parseVertexIndex( d );

						addVertex( ia, ib, id );
						addVertex( ib, ic, id );

					}

					if ( ua !== undefined ) {

						ia = parseUVIndex( ua );
						ib = parseUVIndex( ub );
						ic = parseUVIndex( uc );

						if ( d === undefined ) {

							addUV( ia, ib, ic );

						} else {

							id = parseUVIndex( ud );

							addUV( ia, ib, id );
							addUV( ib, ic, id );

						}

					}

					if ( na !== undefined ) {

						ia = parseNormalIndex( na );
						ib = parseNormalIndex( nb );
						ic = parseNormalIndex( nc );

						if ( d === undefined ) {

							addNormal( ia, ib, ic );

						} else {

							id = parseNormalIndex( nd );

							addNormal( ia, ib, id );
							addNormal( ib, ic, id );

						}

					}

				}

				addObject( '' );

				// v float float float
				var vertex_pattern = /^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/;

				// vn float float float
				var normal_pattern = /^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/;

				// vt float float
				var uv_pattern = /^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/;

				// f vertex vertex vertex ...
				var face_pattern1 = /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/;

				// f vertex/uv vertex/uv vertex/uv ...
				var face_pattern2 = /^f\s+((-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+))(?:\s+((-?\d+)\/(-?\d+)))?/;

				// f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...
				var face_pattern3 = /^f\s+((-?\d+)\/(-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+)\/(-?\d+))\s+((-?\d+)\/(-?\d+)\/(-?\d+))(?:\s+((-?\d+)\/(-?\d+)\/(-?\d+)))?/;

				// f vertex//normal vertex//normal vertex//normal ...
				var face_pattern4 = /^f\s+((-?\d+)\/\/(-?\d+))\s+((-?\d+)\/\/(-?\d+))\s+((-?\d+)\/\/(-?\d+))(?:\s+((-?\d+)\/\/(-?\d+)))?/;

				var object_pattern = /^[og]\s+(.+)/;

				var smoothing_pattern = /^s\s+(\d+|on|off)/;

				//

				var lines = text.split( '\n' );

				for ( var i = 0; i < lines.length; i ++ ) {

					var line = lines[ i ];
					line = line.trim();

					var result;

					if ( line.length === 0 || line.charAt( 0 ) === '#' ) {

						continue;

					} else if ( ( result = vertex_pattern.exec( line ) ) !== null ) {

						// ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

						vertices.push(
							parseFloat( result[ 1 ] ),
							parseFloat( result[ 2 ] ),
							parseFloat( result[ 3 ] )
						);

					} else if ( ( result = normal_pattern.exec( line ) ) !== null ) {

						// ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]

						normals.push(
							parseFloat( result[ 1 ] ),
							parseFloat( result[ 2 ] ),
							parseFloat( result[ 3 ] )
						);

					} else if ( ( result = uv_pattern.exec( line ) ) !== null ) {

						// ["vt 0.1 0.2", "0.1", "0.2"]

						uvs.push(
							parseFloat( result[ 1 ] ),
							parseFloat( result[ 2 ] )
						);

					} else if ( ( result = face_pattern1.exec( line ) ) !== null ) {

						// ["f 1 2 3", "1", "2", "3", undefined]

						addFace(
							result[ 1 ], result[ 2 ], result[ 3 ], result[ 4 ]
						);

					} else if ( ( result = face_pattern2.exec( line ) ) !== null ) {

						// ["f 1/1 2/2 3/3", " 1/1", "1", "1", " 2/2", "2", "2", " 3/3", "3", "3", undefined, undefined, undefined]

						addFace(
							result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],
							result[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]
						);

					} else if ( ( result = face_pattern3.exec( line ) ) !== null ) {

						// ["f 1/1/1 2/2/2 3/3/3", " 1/1/1", "1", "1", "1", " 2/2/2", "2", "2", "2", " 3/3/3", "3", "3", "3", undefined, undefined, undefined, undefined]

						addFace(
							result[ 2 ], result[ 6 ], result[ 10 ], result[ 14 ],
							result[ 3 ], result[ 7 ], result[ 11 ], result[ 15 ],
							result[ 4 ], result[ 8 ], result[ 12 ], result[ 16 ]
						);

					} else if ( ( result = face_pattern4.exec( line ) ) !== null ) {

						// ["f 1//1 2//2 3//3", " 1//1", "1", "1", " 2//2", "2", "2", " 3//3", "3", "3", undefined, undefined, undefined]

						addFace(
							result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],
							undefined, undefined, undefined, undefined,
							result[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]
						);

					} else if ( ( result = object_pattern.exec( line ) ) !== null ) {

						// o object_name
						// or
						// g group_name

						var name = result[ 1 ].trim();

						if ( foundObjects === false ) {

							foundObjects = true;
							object.name = name;

						} else {

							addObject( name );

						}

					} else if ( /^usemtl /.test( line ) ) {

						// material

						object.material.name = line.substring( 7 ).trim();

					} else if ( /^mtllib /.test( line ) ) {

						// mtl file

					} else if ( ( result = smoothing_pattern.exec( line ) ) !== null ) {

						// smooth shading

						object.material.smooth = result[ 1 ] === "1" || result[ 1 ] === "on";

					} else {

						throw new Error( "Unexpected line: " + line );

					}

				}

				var container = new THREE.Group();

				for ( var i = 0, l = objects.length; i < l; i ++ ) {

					object = objects[ i ];
					var geometry = object.geometry;

					var buffergeometry = new THREE.BufferGeometry();

					buffergeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( geometry.vertices ), 3 ) );

					if ( geometry.normals.length > 0 ) {

						buffergeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( geometry.normals ), 3 ) );

					} else {

						buffergeometry.computeVertexNormals();

					}

					if ( geometry.uvs.length > 0 ) {

						buffergeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( geometry.uvs ), 2 ) );

					}

					var material;

					if ( this.materials !== null ) {

						material = this.materials.create( object.material.name );

					}

					if ( !material ) {

						material = new THREE.MeshPhongMaterial();
						material.name = object.material.name;

					}

					material.shading = object.material.smooth ? THREE.SmoothShading : THREE.FlatShading;

					var mesh = new THREE.Mesh( buffergeometry, material );
					mesh.name = object.name;

					container.add( mesh );

				}

				console.timeEnd( 'OBJLoader' );

				return container;

			}

		};

	};

/***/ },
/* 48 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		// Author: Aleksandr Albert
		// Website: www.routter.co.tt

		// Description: A deep water ocean shader set
		// based on an implementation of a Tessendorf Waves
		// originally presented by David Li ( www.david.li/waves )

		// The general method is to apply shaders to simulation Framebuffers
		// and then sample these framebuffers when rendering the ocean mesh

		// The set uses 7 shaders:

		// -- Simulation shaders
		// [1] ocean_sim_vertex         -> Vertex shader used to set up a 2x2 simulation plane centered at (0,0)
		// [2] ocean_subtransform       -> Fragment shader used to subtransform the mesh (generates the displacement map)
		// [3] ocean_initial_spectrum   -> Fragment shader used to set intitial wave frequency at a texel coordinate
		// [4] ocean_phase              -> Fragment shader used to set wave phase at a texel coordinate
		// [5] ocean_spectrum           -> Fragment shader used to set current wave frequency at a texel coordinate
		// [6] ocean_normal             -> Fragment shader used to set face normals at a texel coordinate

		// -- Rendering Shader
		// [7] ocean_main               -> Vertex and Fragment shader used to create the final render


		THREE.ShaderLib[ 'ocean_sim_vertex' ] = {
			varying: {
				"vUV": { type: "v2" }
			},
			vertexShader: [
				'varying vec2 vUV;',

				'void main (void) {',
					'vUV = position.xy * 0.5 + 0.5;',
					'gl_Position = vec4(position, 1.0 );',
				'}'
			].join( '\n' )
		};
		THREE.ShaderLib[ 'ocean_subtransform' ] = {
			uniforms: {
				"u_input": { type: "t", value: null },
				"u_transformSize": { type: "f", value: 512.0 },
				"u_subtransformSize": { type: "f", value: 250.0 }
			},
			varying: {
				"vUV": { type: "v2" }
			},
			fragmentShader: [
				//GPU FFT using a Stockham formulation
				'precision highp float;',

				'const float PI = 3.14159265359;',

				'uniform sampler2D u_input;',
				'uniform float u_transformSize;',
				'uniform float u_subtransformSize;',

				'varying vec2 vUV;',

				'vec2 multiplyComplex (vec2 a, vec2 b) {',
					'return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);',
				'}',

				'void main (void) {',
					'#ifdef HORIZONTAL',
					'float index = vUV.x * u_transformSize - 0.5;',
					'#else',
					'float index = vUV.y * u_transformSize - 0.5;',
					'#endif',

					'float evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);',

					//transform two complex sequences simultaneously
					'#ifdef HORIZONTAL',
					'vec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;',
					'vec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;',
					'#else',
					'vec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;',
					'vec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;',
					'#endif',

					'float twiddleArgument = -2.0 * PI * (index / u_subtransformSize);',
					'vec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));',

					'vec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);',
					'vec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);',

					'gl_FragColor = vec4(outputA, outputB);',
				'}'
			].join( '\n' )
		};
		THREE.ShaderLib[ 'ocean_initial_spectrum' ] = {
			uniforms: {
				"u_wind": { type: "v2", value: new THREE.Vector2( 10.0, 10.0 ) },
				"u_resolution": { type: "f", value: 512.0 },
				"u_size": { type: "f", value: 250.0 },
			},
			fragmentShader: [
				'precision highp float;',

				'const float PI = 3.14159265359;',
				'const float G = 9.81;',
				'const float KM = 370.0;',
				'const float CM = 0.23;',

				'uniform vec2 u_wind;',
				'uniform float u_resolution;',
				'uniform float u_size;',

				'float square (float x) {',
					'return x * x;',
				'}',

				'float omega (float k) {',
					'return sqrt(G * k * (1.0 + square(k / KM)));',
				'}',

				'float tanh (float x) {',
					'return (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));',
				'}',

				'void main (void) {',
					'vec2 coordinates = gl_FragCoord.xy - 0.5;',

					'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',
					'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',

					'vec2 K = (2.0 * PI * vec2(n, m)) / u_size;',
					'float k = length(K);',

					'float l_wind = length(u_wind);',

					'float Omega = 0.84;',
					'float kp = G * square(Omega / l_wind);',

					'float c = omega(k) / k;',
					'float cp = omega(kp) / kp;',

					'float Lpm = exp(-1.25 * square(kp / k));',
					'float gamma = 1.7;',
					'float sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));',
					'float Gamma = exp(-square(sqrt(k / kp) - 1.0) / 2.0 * square(sigma));',
					'float Jp = pow(gamma, Gamma);',
					'float Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));',
					'float alphap = 0.006 * sqrt(Omega);',
					'float Bl = 0.5 * alphap * cp / c * Fp;',

					'float z0 = 0.000037 * square(l_wind) / G * pow(l_wind / cp, 0.9);',
					'float uStar = 0.41 * l_wind / log(10.0 / z0);',
					'float alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));',
					'float Fm = exp(-0.25 * square(k / KM - 1.0));',
					'float Bh = 0.5 * alpham * CM / c * Fm * Lpm;',

					'float a0 = log(2.0) / 4.0;',
					'float am = 0.13 * uStar / CM;',
					'float Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));',

					'float cosPhi = dot(normalize(u_wind), normalize(K));',

					'float S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));',

					'float dk = 2.0 * PI / u_size;',
					'float h = sqrt(S / 2.0) * dk;',

					'if (K.x == 0.0 && K.y == 0.0) {',
						'h = 0.0;', //no DC term
					'}',
					'gl_FragColor = vec4(h, 0.0, 0.0, 0.0);',
				'}'
			].join( '\n' )
		};
		THREE.ShaderLib[ 'ocean_phase' ] = {
			uniforms: {
				"u_phases": { type: "t", value: null },
				"u_deltaTime": { type: "f", value: null },
				"u_resolution": { type: "f", value: null },
				"u_size": { type: "f", value: null },
			},
			varying: {
				"vUV": { type: "v2" }
			},
			fragmentShader: [
				'precision highp float;',

				'const float PI = 3.14159265359;',
				'const float G = 9.81;',
				'const float KM = 370.0;',

				'varying vec2 vUV;',

				'uniform sampler2D u_phases;',
				'uniform float u_deltaTime;',
				'uniform float u_resolution;',
				'uniform float u_size;',

				'float omega (float k) {',
					'return sqrt(G * k * (1.0 + k * k / KM * KM));',
				'}',

				'void main (void) {',
					'float deltaTime = 1.0 / 60.0;',
					'vec2 coordinates = gl_FragCoord.xy - 0.5;',
					'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',
					'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',
					'vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;',

					'float phase = texture2D(u_phases, vUV).r;',
					'float deltaPhase = omega(length(waveVector)) * u_deltaTime;',
					'phase = mod(phase + deltaPhase, 2.0 * PI);',

					'gl_FragColor = vec4(phase, 0.0, 0.0, 0.0);',
				'}'
			].join( '\n' )
		};
		THREE.ShaderLib[ 'ocean_spectrum' ] = {
			uniforms: {
				"u_size": { type: "f", value: null },
				"u_resolution": { type: "f", value: null },
				"u_choppiness": { type: "f", value: null },
				"u_phases": { type: "t", value: null },
				"u_initialSpectrum": { type: "t", value: null },
			},
			varying: {
				"vUV": { type: "v2" }
			},
			fragmentShader: [
				'precision highp float;',

				'const float PI = 3.14159265359;',
				'const float G = 9.81;',
				'const float KM = 370.0;',

				'varying vec2 vUV;',

				'uniform float u_size;',
				'uniform float u_resolution;',
				'uniform float u_choppiness;',
				'uniform sampler2D u_phases;',
				'uniform sampler2D u_initialSpectrum;',

				'vec2 multiplyComplex (vec2 a, vec2 b) {',
					'return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);',
				'}',

				'vec2 multiplyByI (vec2 z) {',
					'return vec2(-z[1], z[0]);',
				'}',

				'float omega (float k) {',
					'return sqrt(G * k * (1.0 + k * k / KM * KM));',
				'}',

				'void main (void) {',
					'vec2 coordinates = gl_FragCoord.xy - 0.5;',
					'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;',
					'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;',
					'vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;',

					'float phase = texture2D(u_phases, vUV).r;',
					'vec2 phaseVector = vec2(cos(phase), sin(phase));',

					'vec2 h0 = texture2D(u_initialSpectrum, vUV).rg;',
					'vec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;',
					'h0Star.y *= -1.0;',

					'vec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));',

					'vec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;',
					'vec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;',

					//no DC term
					'if (waveVector.x == 0.0 && waveVector.y == 0.0) {',
						'h = vec2(0.0);',
						'hX = vec2(0.0);',
						'hZ = vec2(0.0);',
					'}',

					'gl_FragColor = vec4(hX + multiplyByI(h), hZ);',
				'}'
			].join( '\n' )
		};
		THREE.ShaderLib[ 'ocean_normals' ] = {
			uniforms: {
				"u_displacementMap": { type: "t", value: null },
				"u_resolution": { type: "f", value: null },
				"u_size": { type: "f", value: null },
			},
			varying: {
				"vUV": { type: "v2" }
			},
			fragmentShader: [
				'precision highp float;',

				'varying vec2 vUV;',

				'uniform sampler2D u_displacementMap;',
				'uniform float u_resolution;',
				'uniform float u_size;',

				'void main (void) {',
					'float texel = 1.0 / u_resolution;',
					'float texelSize = u_size / u_resolution;',

					'vec3 center = texture2D(u_displacementMap, vUV).rgb;',
					'vec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;',
					'vec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;',
					'vec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;',
					'vec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;',

					'vec3 topRight = cross(right, top);',
					'vec3 topLeft = cross(top, left);',
					'vec3 bottomLeft = cross(left, bottom);',
					'vec3 bottomRight = cross(bottom, right);',

					'gl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);',
				'}'
			].join( '\n' )
		};
		THREE.ShaderLib[ 'ocean_main' ] = {
			uniforms: {
				"u_displacementMap": { type: "t", value: null },
				"u_normalMap": { type: "t", value: null },
				"u_geometrySize": { type: "f", value: null },
				"u_size": { type: "f", value: null },
				"u_projectionMatrix": { type: "m4", value: null },
				"u_viewMatrix": { type: "m4", value: null },
				"u_cameraPosition": { type: "v3", value: null },
				"u_skyColor": { type: "v3", value: null },
				"u_oceanColor": { type: "v3", value: null },
				"u_sunDirection": { type: "v3", value: null },
				"u_exposure": { type: "f", value: null },
			},
			varying: {
				"vPos": { type: "v3" },
				"vUV": { type: "v2" }
			},
			vertexShader: [
				'precision highp float;',

				'varying vec3 vPos;',
				'varying vec2 vUV;',

				'uniform mat4 u_projectionMatrix;',
				'uniform mat4 u_viewMatrix;',
				'uniform float u_size;',
				'uniform float u_geometrySize;',
				'uniform sampler2D u_displacementMap;',

				'void main (void) {',
					'vec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);',
					'vPos = newPos;',
					'vUV = uv;',
					'gl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);',
				'}'
			].join( '\n' ),
			fragmentShader: [
				'precision highp float;',

				'varying vec3 vPos;',
				'varying vec2 vUV;',

				'uniform sampler2D u_displacementMap;',
				'uniform sampler2D u_normalMap;',
				'uniform vec3 u_cameraPosition;',
				'uniform vec3 u_oceanColor;',
				'uniform vec3 u_skyColor;',
				'uniform vec3 u_sunDirection;',
				'uniform float u_exposure;',

				'vec3 hdr (vec3 color, float exposure) {',
					'return 1.0 - exp(-color * exposure);',
				'}',

				'void main (void) {',
					'vec3 normal = texture2D(u_normalMap, vUV).rgb;',

					'vec3 view = normalize(u_cameraPosition - vPos);',
					'float fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);',
					'vec3 sky = fresnel * u_skyColor;',

					'float diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);',
					'vec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;',

					'vec3 color = sky + water;',

					'gl_FragColor = vec4(hdr(color, u_exposure), 1.0);',
				'}'
			].join( '\n' )
		};

	}


/***/ },
/* 49 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author qiao / https://github.com/qiao
		 * @author mrdoob / http://mrdoob.com
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author erich666 / http://erichaines.com
		 */

		// This set of controls performs orbiting, dollying (zooming), and panning.
		// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
		//
		//    Orbit - left mouse / touch: one finger move
		//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
		//    Pan - right mouse, or arrow keys / touch: three finter swipe

		THREE.OrbitControls = function ( object, domElement ) {

			this.object = object;

			this.domElement = ( domElement !== undefined ) ? domElement : document;

			// Set to false to disable this control
			this.enabled = true;

			// "target" sets the location of focus, where the object orbits around
			this.target = new THREE.Vector3();

			// How far you can dolly in and out ( PerspectiveCamera only )
			this.minDistance = 0;
			this.maxDistance = Infinity;

			// How far you can zoom in and out ( OrthographicCamera only )
			this.minZoom = 0;
			this.maxZoom = Infinity;

			// How far you can orbit vertically, upper and lower limits.
			// Range is 0 to Math.PI radians.
			this.minPolarAngle = 0; // radians
			this.maxPolarAngle = Math.PI; // radians

			// How far you can orbit horizontally, upper and lower limits.
			// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
			this.minAzimuthAngle = - Infinity; // radians
			this.maxAzimuthAngle = Infinity; // radians

			// Set to true to enable damping (inertia)
			// If damping is enabled, you must call controls.update() in your animation loop
			this.enableDamping = false;
			this.dampingFactor = 0.25;

			// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
			// Set to false to disable zooming
			this.enableZoom = true;
			this.zoomSpeed = 1.0;

			// Set to false to disable rotating
			this.enableRotate = true;
			this.rotateSpeed = 1.0;

			// Set to false to disable panning
			this.enablePan = true;
			this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

			// Set to true to automatically rotate around the target
			// If auto-rotate is enabled, you must call controls.update() in your animation loop
			this.autoRotate = false;
			this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

			// Set to false to disable use of the keys
			this.enableKeys = true;

			// The four arrow keys
			this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

			// Mouse buttons
			this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

			// for reset
			this.target0 = this.target.clone();
			this.position0 = this.object.position.clone();
			this.zoom0 = this.object.zoom;

			//
			// public methods
			//

			this.getPolarAngle = function () {

				return spherical.phi;

			};

			this.getAzimuthalAngle = function () {

				return spherical.theta;

			};

			this.reset = function () {

				scope.target.copy( scope.target0 );
				scope.object.position.copy( scope.position0 );
				scope.object.zoom = scope.zoom0;

				scope.object.updateProjectionMatrix();
				scope.dispatchEvent( changeEvent );

				scope.update();

				state = STATE.NONE;

			};

			// this method is exposed, but perhaps it would be better if we can make it private...
			this.update = function() {

				var offset = new THREE.Vector3();

				// so camera.up is the orbit axis
				var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
				var quatInverse = quat.clone().inverse();

				var lastPosition = new THREE.Vector3();
				var lastQuaternion = new THREE.Quaternion();

				return function () {

					var position = scope.object.position;

					offset.copy( position ).sub( scope.target );

					// rotate offset to "y-axis-is-up" space
					offset.applyQuaternion( quat );

					// angle from z-axis around y-axis
					spherical.setFromVector3( offset );

					if ( scope.autoRotate && state === STATE.NONE ) {

						rotateLeft( getAutoRotationAngle() );

					}

					spherical.theta += sphericalDelta.theta;
					spherical.phi += sphericalDelta.phi;

					// restrict theta to be between desired limits
					spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

					// restrict phi to be between desired limits
					spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

					spherical.makeSafe();


					spherical.radius *= scale;

					// restrict radius to be between desired limits
					spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

					// move target to panned location
					scope.target.add( panOffset );

					offset.setFromSpherical( spherical );

					// rotate offset back to "camera-up-vector-is-up" space
					offset.applyQuaternion( quatInverse );

					position.copy( scope.target ).add( offset );

					scope.object.lookAt( scope.target );

					if ( scope.enableDamping === true ) {

						sphericalDelta.theta *= ( 1 - scope.dampingFactor );
						sphericalDelta.phi *= ( 1 - scope.dampingFactor );

					} else {

						sphericalDelta.set( 0, 0, 0 );

					}

					scale = 1;
					panOffset.set( 0, 0, 0 );

					// update condition is:
					// min(camera displacement, camera rotation in radians)^2 > EPS
					// using small-angle approximation cos(x/2) = 1 - x^2 / 8

					if ( zoomChanged ||
						lastPosition.distanceToSquared( scope.object.position ) > EPS ||
						8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

						scope.dispatchEvent( changeEvent );

						lastPosition.copy( scope.object.position );
						lastQuaternion.copy( scope.object.quaternion );
						zoomChanged = false;

						return true;

					}

					return false;

				};

			}();

			this.dispose = function() {

				scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
				scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
				scope.domElement.removeEventListener( 'mousewheel', onMouseWheel, false );
				scope.domElement.removeEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox

				scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
				scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
				scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

				document.removeEventListener( 'mousemove', onMouseMove, false );
				document.removeEventListener( 'mouseup', onMouseUp, false );
				document.removeEventListener( 'mouseout', onMouseUp, false );

				window.removeEventListener( 'keydown', onKeyDown, false );

				//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

			};

			//
			// internals
			//

			var scope = this;

			var changeEvent = { type: 'change' };
			var startEvent = { type: 'start' };
			var endEvent = { type: 'end' };

			var STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };

			var state = STATE.NONE;

			var EPS = 0.000001;

			// current position in spherical coordinates
			var spherical = new THREE.Spherical();
			var sphericalDelta = new THREE.Spherical();

			var scale = 1;
			var panOffset = new THREE.Vector3();
			var zoomChanged = false;

			var rotateStart = new THREE.Vector2();
			var rotateEnd = new THREE.Vector2();
			var rotateDelta = new THREE.Vector2();

			var panStart = new THREE.Vector2();
			var panEnd = new THREE.Vector2();
			var panDelta = new THREE.Vector2();

			var dollyStart = new THREE.Vector2();
			var dollyEnd = new THREE.Vector2();
			var dollyDelta = new THREE.Vector2();

			function getAutoRotationAngle() {

				return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

			}

			function getZoomScale() {

				return Math.pow( 0.95, scope.zoomSpeed );

			}

			function rotateLeft( angle ) {

				sphericalDelta.theta -= angle;

			}

			function rotateUp( angle ) {

				sphericalDelta.phi -= angle;

			}

			var panLeft = function() {

				var v = new THREE.Vector3();

				return function panLeft( distance, objectMatrix ) {

					v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
					v.multiplyScalar( - distance );

					panOffset.add( v );

				};

			}();

			var panUp = function() {

				var v = new THREE.Vector3();

				return function panUp( distance, objectMatrix ) {

					v.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix
					v.multiplyScalar( distance );

					panOffset.add( v );

				};

			}();

			// deltaX and deltaY are in pixels; right and down are positive
			var pan = function() {

				var offset = new THREE.Vector3();

				return function( deltaX, deltaY ) {

					var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

					if ( scope.object instanceof THREE.PerspectiveCamera ) {

						// perspective
						var position = scope.object.position;
						offset.copy( position ).sub( scope.target );
						var targetDistance = offset.length();

						// half of the fov is center to top of screen
						targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

						// we actually don't use screenWidth, since perspective camera is fixed to screen height
						panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
						panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

					} else if ( scope.object instanceof THREE.OrthographicCamera ) {

						// orthographic
						panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
						panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

					} else {

						// camera neither orthographic nor perspective
						console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
						scope.enablePan = false;

					}

				};

			}();

			function dollyIn( dollyScale ) {

				if ( scope.object instanceof THREE.PerspectiveCamera ) {

					scale /= dollyScale;

				} else if ( scope.object instanceof THREE.OrthographicCamera ) {

					scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
					scope.object.updateProjectionMatrix();
					zoomChanged = true;

				} else {

					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
					scope.enableZoom = false;

				}

			}

			function dollyOut( dollyScale ) {

				if ( scope.object instanceof THREE.PerspectiveCamera ) {

					scale *= dollyScale;

				} else if ( scope.object instanceof THREE.OrthographicCamera ) {

					scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
					scope.object.updateProjectionMatrix();
					zoomChanged = true;

				} else {

					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
					scope.enableZoom = false;

				}

			}

			//
			// event callbacks - update the object state
			//

			function handleMouseDownRotate( event ) {

				//console.log( 'handleMouseDownRotate' );

				rotateStart.set( event.clientX, event.clientY );

			}

			function handleMouseDownDolly( event ) {

				//console.log( 'handleMouseDownDolly' );

				dollyStart.set( event.clientX, event.clientY );

			}

			function handleMouseDownPan( event ) {

				//console.log( 'handleMouseDownPan' );

				panStart.set( event.clientX, event.clientY );

			}

			function handleMouseMoveRotate( event ) {

				//console.log( 'handleMouseMoveRotate' );

				rotateEnd.set( event.clientX, event.clientY );
				rotateDelta.subVectors( rotateEnd, rotateStart );

				var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

				// rotating across whole screen goes 360 degrees around
				rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

				// rotating up and down along whole screen attempts to go 360, but limited to 180
				rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

				rotateStart.copy( rotateEnd );

				scope.update();

			}

			function handleMouseMoveDolly( event ) {

				//console.log( 'handleMouseMoveDolly' );

				dollyEnd.set( event.clientX, event.clientY );

				dollyDelta.subVectors( dollyEnd, dollyStart );

				if ( dollyDelta.y > 0 ) {

					dollyIn( getZoomScale() );

				} else if ( dollyDelta.y < 0 ) {

					dollyOut( getZoomScale() );

				}

				dollyStart.copy( dollyEnd );

				scope.update();

			}

			function handleMouseMovePan( event ) {

				//console.log( 'handleMouseMovePan' );

				panEnd.set( event.clientX, event.clientY );

				panDelta.subVectors( panEnd, panStart );

				pan( panDelta.x, panDelta.y );

				panStart.copy( panEnd );

				scope.update();

			}

			function handleMouseUp( event ) {

				//console.log( 'handleMouseUp' );

			}

			function handleMouseWheel( event ) {

				//console.log( 'handleMouseWheel' );

				var delta = 0;

				if ( event.wheelDelta !== undefined ) {

					// WebKit / Opera / Explorer 9

					delta = event.wheelDelta;

				} else if ( event.detail !== undefined ) {

					// Firefox

					delta = - event.detail;

				}

				if ( delta > 0 ) {

					dollyOut( getZoomScale() );

				} else if ( delta < 0 ) {

					dollyIn( getZoomScale() );

				}

				scope.update();

			}

			function handleKeyDown( event ) {

				//console.log( 'handleKeyDown' );

				switch ( event.keyCode ) {

					case scope.keys.UP:
						pan( 0, scope.keyPanSpeed );
						scope.update();
						break;

					case scope.keys.BOTTOM:
						pan( 0, - scope.keyPanSpeed );
						scope.update();
						break;

					case scope.keys.LEFT:
						pan( scope.keyPanSpeed, 0 );
						scope.update();
						break;

					case scope.keys.RIGHT:
						pan( - scope.keyPanSpeed, 0 );
						scope.update();
						break;

				}

			}

			function handleTouchStartRotate( event ) {

				//console.log( 'handleTouchStartRotate' );

				rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

			}

			function handleTouchStartDolly( event ) {

				//console.log( 'handleTouchStartDolly' );

				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

				var distance = Math.sqrt( dx * dx + dy * dy );

				dollyStart.set( 0, distance );

			}

			function handleTouchStartPan( event ) {

				//console.log( 'handleTouchStartPan' );

				panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

			}

			function handleTouchMoveRotate( event ) {

				//console.log( 'handleTouchMoveRotate' );

				rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
				rotateDelta.subVectors( rotateEnd, rotateStart );

				var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

				// rotating across whole screen goes 360 degrees around
				rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

				// rotating up and down along whole screen attempts to go 360, but limited to 180
				rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

				rotateStart.copy( rotateEnd );

				scope.update();

			}

			function handleTouchMoveDolly( event ) {

				//console.log( 'handleTouchMoveDolly' );

				var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
				var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

				var distance = Math.sqrt( dx * dx + dy * dy );

				dollyEnd.set( 0, distance );

				dollyDelta.subVectors( dollyEnd, dollyStart );

				if ( dollyDelta.y > 0 ) {

					dollyOut( getZoomScale() );

				} else if ( dollyDelta.y < 0 ) {

					dollyIn( getZoomScale() );

				}

				dollyStart.copy( dollyEnd );

				scope.update();

			}

			function handleTouchMovePan( event ) {

				//console.log( 'handleTouchMovePan' );

				panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

				panDelta.subVectors( panEnd, panStart );

				pan( panDelta.x, panDelta.y );

				panStart.copy( panEnd );

				scope.update();

			}

			function handleTouchEnd( event ) {

				//console.log( 'handleTouchEnd' );

			}

			//
			// event handlers - FSM: listen for events and reset state
			//

			function onMouseDown( event ) {

				if ( scope.enabled === false ) return;

				event.preventDefault();

				if ( event.button === scope.mouseButtons.ORBIT ) {

					if ( scope.enableRotate === false ) return;

					handleMouseDownRotate( event );

					state = STATE.ROTATE;

				} else if ( event.button === scope.mouseButtons.ZOOM ) {

					if ( scope.enableZoom === false ) return;

					handleMouseDownDolly( event );

					state = STATE.DOLLY;

				} else if ( event.button === scope.mouseButtons.PAN ) {

					if ( scope.enablePan === false ) return;

					handleMouseDownPan( event );

					state = STATE.PAN;

				}

				if ( state !== STATE.NONE ) {

					document.addEventListener( 'mousemove', onMouseMove, false );
					document.addEventListener( 'mouseup', onMouseUp, false );
					document.addEventListener( 'mouseout', onMouseUp, false );

					scope.dispatchEvent( startEvent );

				}

			}

			function onMouseMove( event ) {

				if ( scope.enabled === false ) return;

				event.preventDefault();

				if ( state === STATE.ROTATE ) {

					if ( scope.enableRotate === false ) return;

					handleMouseMoveRotate( event );

				} else if ( state === STATE.DOLLY ) {

					if ( scope.enableZoom === false ) return;

					handleMouseMoveDolly( event );

				} else if ( state === STATE.PAN ) {

					if ( scope.enablePan === false ) return;

					handleMouseMovePan( event );

				}

			}

			function onMouseUp( event ) {

				if ( scope.enabled === false ) return;

				handleMouseUp( event );

				document.removeEventListener( 'mousemove', onMouseMove, false );
				document.removeEventListener( 'mouseup', onMouseUp, false );
				document.removeEventListener( 'mouseout', onMouseUp, false );

				scope.dispatchEvent( endEvent );

				state = STATE.NONE;

			}

			function onMouseWheel( event ) {

				if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

				event.preventDefault();
				event.stopPropagation();

				handleMouseWheel( event );

				scope.dispatchEvent( startEvent ); // not sure why these are here...
				scope.dispatchEvent( endEvent );

			}

			function onKeyDown( event ) {

				if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

				handleKeyDown( event );

			}

			function onTouchStart( event ) {

				if ( scope.enabled === false ) return;

				switch ( event.touches.length ) {

					case 1:	// one-fingered touch: rotate

						if ( scope.enableRotate === false ) return;

						handleTouchStartRotate( event );

						state = STATE.TOUCH_ROTATE;

						break;

					case 2:	// two-fingered touch: dolly

						if ( scope.enableZoom === false ) return;

						handleTouchStartDolly( event );

						state = STATE.TOUCH_DOLLY;

						break;

					case 3: // three-fingered touch: pan

						if ( scope.enablePan === false ) return;

						handleTouchStartPan( event );

						state = STATE.TOUCH_PAN;

						break;

					default:

						state = STATE.NONE;

				}

				if ( state !== STATE.NONE ) {

					scope.dispatchEvent( startEvent );

				}

			}

			function onTouchMove( event ) {

				if ( scope.enabled === false ) return;

				event.preventDefault();
				event.stopPropagation();

				switch ( event.touches.length ) {

					case 1: // one-fingered touch: rotate

						if ( scope.enableRotate === false ) return;
						if ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...

						handleTouchMoveRotate( event );

						break;

					case 2: // two-fingered touch: dolly

						if ( scope.enableZoom === false ) return;
						if ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...

						handleTouchMoveDolly( event );

						break;

					case 3: // three-fingered touch: pan

						if ( scope.enablePan === false ) return;
						if ( state !== STATE.TOUCH_PAN ) return; // is this needed?...

						handleTouchMovePan( event );

						break;

					default:

						state = STATE.NONE;

				}

			}

			function onTouchEnd( event ) {

				if ( scope.enabled === false ) return;

				handleTouchEnd( event );

				scope.dispatchEvent( endEvent );

				state = STATE.NONE;

			}

			function onContextMenu( event ) {

				event.preventDefault();

			}

			//

			scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

			scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
			scope.domElement.addEventListener( 'mousewheel', onMouseWheel, false );
			scope.domElement.addEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox

			scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
			scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
			scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

			window.addEventListener( 'keydown', onKeyDown, false );

			// force an update at start

			this.update();

		};

		THREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
		THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;

		Object.defineProperties( THREE.OrbitControls.prototype, {

			center: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .center has been renamed to .target' );
					return this.target;

				}

			},

			// backward compatibility

			noZoom: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
					return ! this.enableZoom;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
					this.enableZoom = ! value;

				}

			},

			noRotate: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
					return ! this.enableRotate;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
					this.enableRotate = ! value;

				}

			},

			noPan: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
					return ! this.enablePan;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
					this.enablePan = ! value;

				}

			},

			noKeys: {

				get: function () {

					console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
					return ! this.enableKeys;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
					this.enableKeys = ! value;

				}

			},

			staticMoving : {

				get: function () {

					console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
					return ! this.enableDamping;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
					this.enableDamping = ! value;

				}

			},

			dynamicDampingFactor : {

				get: function () {

					console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
					return this.dampingFactor;

				},

				set: function ( value ) {

					console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
					this.dampingFactor = value;

				}

			}

		} );

	};

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		// Parallax Occlusion shaders from
		//    http://sunandblackcat.com/tipFullView.php?topicid=28
		// No tangent-space transforms logic based on
		//   http://mmikkelsen3d.blogspot.sk/2012/02/parallaxpoc-mapping-and-no-tangent.html

		THREE.ParallaxShader = {
			// Ordered from fastest to best quality.
			modes: {
				none:  'NO_PARALLAX',
				basic: 'USE_BASIC_PARALLAX',
				steep: 'USE_STEEP_PARALLAX',
				occlusion: 'USE_OCLUSION_PARALLAX', // a.k.a. POM
				relief: 'USE_RELIEF_PARALLAX',
			},

			uniforms: {
				"bumpMap": { type: "t", value: null },
				"map": { type: "t", value: null },
				"parallaxScale": { type: "f", value: null },
				"parallaxMinLayers": { type: "f", value: null },
				"parallaxMaxLayers": { type: "f", value: null }
			},

			vertexShader: [
				"varying vec2 vUv;",
				"varying vec3 vViewPosition;",
				"varying vec3 vNormal;",

				"void main() {",

					"vUv = uv;",
					"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
					"vViewPosition = -mvPosition.xyz;",
					"vNormal = normalize( normalMatrix * normal );",
					"gl_Position = projectionMatrix * mvPosition;",

				"}"

		  ].join( "\n" ),

			fragmentShader: [
				"uniform sampler2D bumpMap;",
				"uniform sampler2D map;",

				"uniform float parallaxScale;",
				"uniform float parallaxMinLayers;",
				"uniform float parallaxMaxLayers;",

				"varying vec2 vUv;",
				"varying vec3 vViewPosition;",
				"varying vec3 vNormal;",

				"#ifdef USE_BASIC_PARALLAX",

					"vec2 parallaxMap( in vec3 V ) {",

						"float initialHeight = texture2D( bumpMap, vUv ).r;",

						// No Offset Limitting: messy, floating output at grazing angles.
						//"vec2 texCoordOffset = parallaxScale * V.xy / V.z * initialHeight;",

						// Offset Limiting
						"vec2 texCoordOffset = parallaxScale * V.xy * initialHeight;",
						"return vUv - texCoordOffset;",

					"}",

				"#else",

					"vec2 parallaxMap( in vec3 V ) {",

						// Determine number of layers from angle between V and N
						"float numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );",

						"float layerHeight = 1.0 / numLayers;",
						"float currentLayerHeight = 0.0;",
						// Shift of texture coordinates for each iteration
						"vec2 dtex = parallaxScale * V.xy / V.z / numLayers;",

						"vec2 currentTextureCoords = vUv;",

						"float heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;",

						// while ( heightFromTexture > currentLayerHeight )
						// Infinite loops are not well supported. Do a "large" finite
						// loop, but not too large, as it slows down some compilers.
						"for ( int i = 0; i < 30; i += 1 ) {",
							"if ( heightFromTexture <= currentLayerHeight ) {",
								"break;",
							"}",
							"currentLayerHeight += layerHeight;",
							// Shift texture coordinates along vector V
							"currentTextureCoords -= dtex;",
							"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;",
						"}",

						"#ifdef USE_STEEP_PARALLAX",

							"return currentTextureCoords;",

						"#elif defined( USE_RELIEF_PARALLAX )",

							"vec2 deltaTexCoord = dtex / 2.0;",
							"float deltaHeight = layerHeight / 2.0;",

							// Return to the mid point of previous layer
							"currentTextureCoords += deltaTexCoord;",
							"currentLayerHeight -= deltaHeight;",

							// Binary search to increase precision of Steep Parallax Mapping
							"const int numSearches = 5;",
							"for ( int i = 0; i < numSearches; i += 1 ) {",

								"deltaTexCoord /= 2.0;",
								"deltaHeight /= 2.0;",
								"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;",
								// Shift along or against vector V
								"if( heightFromTexture > currentLayerHeight ) {", // Below the surface

									"currentTextureCoords -= deltaTexCoord;",
									"currentLayerHeight += deltaHeight;",

								"} else {", // above the surface

									"currentTextureCoords += deltaTexCoord;",
									"currentLayerHeight -= deltaHeight;",

								"}",

							"}",
							"return currentTextureCoords;",

						"#elif defined( USE_OCLUSION_PARALLAX )",

							"vec2 prevTCoords = currentTextureCoords + dtex;",

							// Heights for linear interpolation
							"float nextH = heightFromTexture - currentLayerHeight;",
							"float prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;",

							// Proportions for linear interpolation
							"float weight = nextH / ( nextH - prevH );",

							// Interpolation of texture coordinates
							"return prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );",

						"#else", // NO_PARALLAX

							"return vUv;",

						"#endif",

					"}",
				"#endif",

				"vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {",

		 			"vec2 texDx = dFdx( vUv );",
					"vec2 texDy = dFdy( vUv );",

					"vec3 vSigmaX = dFdx( surfPosition );",
					"vec3 vSigmaY = dFdy( surfPosition );",
					"vec3 vR1 = cross( vSigmaY, surfNormal );",
					"vec3 vR2 = cross( surfNormal, vSigmaX );",
					"float fDet = dot( vSigmaX, vR1 );",

					"vec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );",
					"vec3 vProjVtex;",
					"vProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;",
					"vProjVtex.z = dot( surfNormal, viewPosition );",

					"return parallaxMap( vProjVtex );",
				"}",

				"void main() {",

					"vec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );",
					"gl_FragColor = texture2D( map, mapUv );",

				"}",

		  ].join( "\n" )

		};

	}


/***/ },
/* 51 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author julianwa / https://github.com/julianwa
		 */

		THREE.RenderableObject = function () {

			this.id = 0;

			this.object = null;
			this.z = 0;
			this.renderOrder = 0;

		};

		//

		THREE.RenderableFace = function () {

			this.id = 0;

			this.v1 = new THREE.RenderableVertex();
			this.v2 = new THREE.RenderableVertex();
			this.v3 = new THREE.RenderableVertex();

			this.normalModel = new THREE.Vector3();

			this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];
			this.vertexNormalsLength = 0;

			this.color = new THREE.Color();
			this.material = null;
			this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];

			this.z = 0;
			this.renderOrder = 0;

		};

		//

		THREE.RenderableVertex = function () {

			this.position = new THREE.Vector3();
			this.positionWorld = new THREE.Vector3();
			this.positionScreen = new THREE.Vector4();

			this.visible = true;

		};

		THREE.RenderableVertex.prototype.copy = function ( vertex ) {

			this.positionWorld.copy( vertex.positionWorld );
			this.positionScreen.copy( vertex.positionScreen );

		};

		//

		THREE.RenderableLine = function () {

			this.id = 0;

			this.v1 = new THREE.RenderableVertex();
			this.v2 = new THREE.RenderableVertex();

			this.vertexColors = [ new THREE.Color(), new THREE.Color() ];
			this.material = null;

			this.z = 0;
			this.renderOrder = 0;

		};

		//

		THREE.RenderableSprite = function () {

			this.id = 0;

			this.object = null;

			this.x = 0;
			this.y = 0;
			this.z = 0;

			this.rotation = 0;
			this.scale = new THREE.Vector2();

			this.material = null;
			this.renderOrder = 0;

		};

		//

		THREE.Projector = function () {

			var _object, _objectCount, _objectPool = [], _objectPoolLength = 0,
			_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,
			_face, _faceCount, _facePool = [], _facePoolLength = 0,
			_line, _lineCount, _linePool = [], _linePoolLength = 0,
			_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,

			_renderData = { objects: [], lights: [], elements: [] },

			_vector3 = new THREE.Vector3(),
			_vector4 = new THREE.Vector4(),

			_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),
			_boundingBox = new THREE.Box3(),
			_points3 = new Array( 3 ),
			_points4 = new Array( 4 ),

			_viewMatrix = new THREE.Matrix4(),
			_viewProjectionMatrix = new THREE.Matrix4(),

			_modelMatrix,
			_modelViewProjectionMatrix = new THREE.Matrix4(),

			_normalMatrix = new THREE.Matrix3(),

			_frustum = new THREE.Frustum(),

			_clippedVertex1PositionScreen = new THREE.Vector4(),
			_clippedVertex2PositionScreen = new THREE.Vector4();

			//

			this.projectVector = function ( vector, camera ) {

				console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
				vector.project( camera );

			};

			this.unprojectVector = function ( vector, camera ) {

				console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
				vector.unproject( camera );

			};

			this.pickingRay = function ( vector, camera ) {

				console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );

			};

			//

			var RenderList = function () {

				var normals = [];
				var uvs = [];

				var object = null;
				var material = null;

				var normalMatrix = new THREE.Matrix3();

				function setObject( value ) {

					object = value;
					material = object.material;

					normalMatrix.getNormalMatrix( object.matrixWorld );

					normals.length = 0;
					uvs.length = 0;

				}

				function projectVertex( vertex ) {

					var position = vertex.position;
					var positionWorld = vertex.positionWorld;
					var positionScreen = vertex.positionScreen;

					positionWorld.copy( position ).applyMatrix4( _modelMatrix );
					positionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );

					var invW = 1 / positionScreen.w;

					positionScreen.x *= invW;
					positionScreen.y *= invW;
					positionScreen.z *= invW;

					vertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&
							 positionScreen.y >= - 1 && positionScreen.y <= 1 &&
							 positionScreen.z >= - 1 && positionScreen.z <= 1;

				}

				function pushVertex( x, y, z ) {

					_vertex = getNextVertexInPool();
					_vertex.position.set( x, y, z );

					projectVertex( _vertex );

				}

				function pushNormal( x, y, z ) {

					normals.push( x, y, z );

				}

				function pushUv( x, y ) {

					uvs.push( x, y );

				}

				function checkTriangleVisibility( v1, v2, v3 ) {

					if ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;

					_points3[ 0 ] = v1.positionScreen;
					_points3[ 1 ] = v2.positionScreen;
					_points3[ 2 ] = v3.positionScreen;

					return _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );

				}

				function checkBackfaceCulling( v1, v2, v3 ) {

					return ( ( v3.positionScreen.x - v1.positionScreen.x ) *
						    ( v2.positionScreen.y - v1.positionScreen.y ) -
						    ( v3.positionScreen.y - v1.positionScreen.y ) *
						    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;

				}

				function pushLine( a, b ) {

					var v1 = _vertexPool[ a ];
					var v2 = _vertexPool[ b ];

					_line = getNextLineInPool();

					_line.id = object.id;
					_line.v1.copy( v1 );
					_line.v2.copy( v2 );
					_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;
					_line.renderOrder = object.renderOrder;

					_line.material = object.material;

					_renderData.elements.push( _line );

				}

				function pushTriangle( a, b, c ) {

					var v1 = _vertexPool[ a ];
					var v2 = _vertexPool[ b ];
					var v3 = _vertexPool[ c ];

					if ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;

					if ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {

						_face = getNextFaceInPool();

						_face.id = object.id;
						_face.v1.copy( v1 );
						_face.v2.copy( v2 );
						_face.v3.copy( v3 );
						_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;
						_face.renderOrder = object.renderOrder;

						// use first vertex normal as face normal

						_face.normalModel.fromArray( normals, a * 3 );
						_face.normalModel.applyMatrix3( normalMatrix ).normalize();

						for ( var i = 0; i < 3; i ++ ) {

							var normal = _face.vertexNormalsModel[ i ];
							normal.fromArray( normals, arguments[ i ] * 3 );
							normal.applyMatrix3( normalMatrix ).normalize();

							var uv = _face.uvs[ i ];
							uv.fromArray( uvs, arguments[ i ] * 2 );

						}

						_face.vertexNormalsLength = 3;

						_face.material = object.material;

						_renderData.elements.push( _face );

					}

				}

				return {
					setObject: setObject,
					projectVertex: projectVertex,
					checkTriangleVisibility: checkTriangleVisibility,
					checkBackfaceCulling: checkBackfaceCulling,
					pushVertex: pushVertex,
					pushNormal: pushNormal,
					pushUv: pushUv,
					pushLine: pushLine,
					pushTriangle: pushTriangle
				}

			};

			var renderList = new RenderList();

			this.projectScene = function ( scene, camera, sortObjects, sortElements ) {

				_faceCount = 0;
				_lineCount = 0;
				_spriteCount = 0;

				_renderData.elements.length = 0;

				if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
				if ( camera.parent === null ) camera.updateMatrixWorld();

				_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );
				_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );

				_frustum.setFromMatrix( _viewProjectionMatrix );

				//

				_objectCount = 0;

				_renderData.objects.length = 0;
				_renderData.lights.length = 0;

				scene.traverseVisible( function ( object ) {

					if ( object instanceof THREE.Light ) {

						_renderData.lights.push( object );

					} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite ) {

						var material = object.material;

						if ( material.visible === false ) return;

						if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {

							_object = getNextObjectInPool();
							_object.id = object.id;
							_object.object = object;

							_vector3.setFromMatrixPosition( object.matrixWorld );
							_vector3.applyProjection( _viewProjectionMatrix );
							_object.z = _vector3.z;
							_object.renderOrder = object.renderOrder;

							_renderData.objects.push( _object );

						}

					}

				} );

				if ( sortObjects === true ) {

					_renderData.objects.sort( painterSort );

				}

				//

				for ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {

					var object = _renderData.objects[ o ].object;
					var geometry = object.geometry;

					renderList.setObject( object );

					_modelMatrix = object.matrixWorld;

					_vertexCount = 0;

					if ( object instanceof THREE.Mesh ) {

						if ( geometry instanceof THREE.BufferGeometry ) {

							var attributes = geometry.attributes;
							var groups = geometry.groups;

							if ( attributes.position === undefined ) continue;

							var positions = attributes.position.array;

							for ( var i = 0, l = positions.length; i < l; i += 3 ) {

								renderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );

							}

							if ( attributes.normal !== undefined ) {

								var normals = attributes.normal.array;

								for ( var i = 0, l = normals.length; i < l; i += 3 ) {

									renderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );

								}

							}

							if ( attributes.uv !== undefined ) {

								var uvs = attributes.uv.array;

								for ( var i = 0, l = uvs.length; i < l; i += 2 ) {

									renderList.pushUv( uvs[ i ], uvs[ i + 1 ] );

								}

							}

							if ( geometry.index !== null ) {

								var indices = geometry.index.array;

								if ( groups.length > 0 ) {

									for ( var o = 0; o < groups.length; o ++ ) {

										var group = groups[ o ];

										for ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {

											renderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

										}

									}

								} else {

									for ( var i = 0, l = indices.length; i < l; i += 3 ) {

										renderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

									}

								}

							} else {

								for ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {

									renderList.pushTriangle( i, i + 1, i + 2 );

								}

							}

						} else if ( geometry instanceof THREE.Geometry ) {

							var vertices = geometry.vertices;
							var faces = geometry.faces;
							var faceVertexUvs = geometry.faceVertexUvs[ 0 ];

							_normalMatrix.getNormalMatrix( _modelMatrix );

							var material = object.material;

							var isFaceMaterial = material instanceof THREE.MultiMaterial;
							var objectMaterials = isFaceMaterial === true ? object.material : null;

							for ( var v = 0, vl = vertices.length; v < vl; v ++ ) {

								var vertex = vertices[ v ];

								_vector3.copy( vertex );

								if ( material.morphTargets === true ) {

									var morphTargets = geometry.morphTargets;
									var morphInfluences = object.morphTargetInfluences;

									for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

										var influence = morphInfluences[ t ];

										if ( influence === 0 ) continue;

										var target = morphTargets[ t ];
										var targetVertex = target.vertices[ v ];

										_vector3.x += ( targetVertex.x - vertex.x ) * influence;
										_vector3.y += ( targetVertex.y - vertex.y ) * influence;
										_vector3.z += ( targetVertex.z - vertex.z ) * influence;

									}

								}

								renderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );

							}

							for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

								var face = faces[ f ];

								material = isFaceMaterial === true
									 ? objectMaterials.materials[ face.materialIndex ]
									 : object.material;

								if ( material === undefined ) continue;

								var side = material.side;

								var v1 = _vertexPool[ face.a ];
								var v2 = _vertexPool[ face.b ];
								var v3 = _vertexPool[ face.c ];

								if ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;

								var visible = renderList.checkBackfaceCulling( v1, v2, v3 );

								if ( side !== THREE.DoubleSide ) {

									if ( side === THREE.FrontSide && visible === false ) continue;
									if ( side === THREE.BackSide && visible === true ) continue;

								}

								_face = getNextFaceInPool();

								_face.id = object.id;
								_face.v1.copy( v1 );
								_face.v2.copy( v2 );
								_face.v3.copy( v3 );

								_face.normalModel.copy( face.normal );

								if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {

									_face.normalModel.negate();

								}

								_face.normalModel.applyMatrix3( _normalMatrix ).normalize();

								var faceVertexNormals = face.vertexNormals;

								for ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {

									var normalModel = _face.vertexNormalsModel[ n ];
									normalModel.copy( faceVertexNormals[ n ] );

									if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {

										normalModel.negate();

									}

									normalModel.applyMatrix3( _normalMatrix ).normalize();

								}

								_face.vertexNormalsLength = faceVertexNormals.length;

								var vertexUvs = faceVertexUvs[ f ];

								if ( vertexUvs !== undefined ) {

									for ( var u = 0; u < 3; u ++ ) {

										_face.uvs[ u ].copy( vertexUvs[ u ] );

									}

								}

								_face.color = face.color;
								_face.material = material;

								_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;
								_face.renderOrder = object.renderOrder;

								_renderData.elements.push( _face );

							}

						}

					} else if ( object instanceof THREE.Line ) {

						if ( geometry instanceof THREE.BufferGeometry ) {

							var attributes = geometry.attributes;

							if ( attributes.position !== undefined ) {

								var positions = attributes.position.array;

								for ( var i = 0, l = positions.length; i < l; i += 3 ) {

									renderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );

								}

								if ( geometry.index !== null ) {

									var indices = geometry.index.array;

									for ( var i = 0, l = indices.length; i < l; i += 2 ) {

										renderList.pushLine( indices[ i ], indices[ i + 1 ] );

									}

								} else {

									var step = object instanceof THREE.LineSegments ? 2 : 1;

									for ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {

										renderList.pushLine( i, i + 1 );

									}

								}

							}

						} else if ( geometry instanceof THREE.Geometry ) {

							_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );

							var vertices = object.geometry.vertices;

							if ( vertices.length === 0 ) continue;

							v1 = getNextVertexInPool();
							v1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );

							var step = object instanceof THREE.LineSegments ? 2 : 1;

							for ( var v = 1, vl = vertices.length; v < vl; v ++ ) {

								v1 = getNextVertexInPool();
								v1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );

								if ( ( v + 1 ) % step > 0 ) continue;

								v2 = _vertexPool[ _vertexCount - 2 ];

								_clippedVertex1PositionScreen.copy( v1.positionScreen );
								_clippedVertex2PositionScreen.copy( v2.positionScreen );

								if ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {

									// Perform the perspective divide
									_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );
									_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );

									_line = getNextLineInPool();

									_line.id = object.id;
									_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );
									_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );

									_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );
									_line.renderOrder = object.renderOrder;

									_line.material = object.material;

									if ( object.material.vertexColors === THREE.VertexColors ) {

										_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );
										_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );

									}

									_renderData.elements.push( _line );

								}

							}

						}

					} else if ( object instanceof THREE.Sprite ) {

						_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );
						_vector4.applyMatrix4( _viewProjectionMatrix );

						var invW = 1 / _vector4.w;

						_vector4.z *= invW;

						if ( _vector4.z >= - 1 && _vector4.z <= 1 ) {

							_sprite = getNextSpriteInPool();
							_sprite.id = object.id;
							_sprite.x = _vector4.x * invW;
							_sprite.y = _vector4.y * invW;
							_sprite.z = _vector4.z;
							_sprite.renderOrder = object.renderOrder;
							_sprite.object = object;

							_sprite.rotation = object.rotation;

							_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );
							_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );

							_sprite.material = object.material;

							_renderData.elements.push( _sprite );

						}

					}

				}

				if ( sortElements === true ) {

					_renderData.elements.sort( painterSort );

				}

				return _renderData;

			};

			// Pools

			function getNextObjectInPool() {

				if ( _objectCount === _objectPoolLength ) {

					var object = new THREE.RenderableObject();
					_objectPool.push( object );
					_objectPoolLength ++;
					_objectCount ++;
					return object;

				}

				return _objectPool[ _objectCount ++ ];

			}

			function getNextVertexInPool() {

				if ( _vertexCount === _vertexPoolLength ) {

					var vertex = new THREE.RenderableVertex();
					_vertexPool.push( vertex );
					_vertexPoolLength ++;
					_vertexCount ++;
					return vertex;

				}

				return _vertexPool[ _vertexCount ++ ];

			}

			function getNextFaceInPool() {

				if ( _faceCount === _facePoolLength ) {

					var face = new THREE.RenderableFace();
					_facePool.push( face );
					_facePoolLength ++;
					_faceCount ++;
					return face;

				}

				return _facePool[ _faceCount ++ ];


			}

			function getNextLineInPool() {

				if ( _lineCount === _linePoolLength ) {

					var line = new THREE.RenderableLine();
					_linePool.push( line );
					_linePoolLength ++;
					_lineCount ++;
					return line;

				}

				return _linePool[ _lineCount ++ ];

			}

			function getNextSpriteInPool() {

				if ( _spriteCount === _spritePoolLength ) {

					var sprite = new THREE.RenderableSprite();
					_spritePool.push( sprite );
					_spritePoolLength ++;
					_spriteCount ++;
					return sprite;

				}

				return _spritePool[ _spriteCount ++ ];

			}

			//

			function painterSort( a, b ) {

				if ( a.renderOrder !== b.renderOrder ) {

					return a.renderOrder - b.renderOrder;

				} else if ( a.z !== b.z ) {

					return b.z - a.z;

				} else if ( a.id !== b.id ) {

					return a.id - b.id;

				} else {

					return 0;

				}

			}

			function clipLine( s1, s2 ) {

				var alpha1 = 0, alpha2 = 1,

				// Calculate the boundary coordinate of each vertex for the near and far clip planes,
				// Z = -1 and Z = +1, respectively.
				bc1near =  s1.z + s1.w,
				bc2near =  s2.z + s2.w,
				bc1far =  - s1.z + s1.w,
				bc2far =  - s2.z + s2.w;

				if ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {

					// Both vertices lie entirely within all clip planes.
					return true;

				} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {

					// Both vertices lie entirely outside one of the clip planes.
					return false;

				} else {

					// The line segment spans at least one clip plane.

					if ( bc1near < 0 ) {

						// v1 lies outside the near plane, v2 inside
						alpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );

					} else if ( bc2near < 0 ) {

						// v2 lies outside the near plane, v1 inside
						alpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );

					}

					if ( bc1far < 0 ) {

						// v1 lies outside the far plane, v2 inside
						alpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );

					} else if ( bc2far < 0 ) {

						// v2 lies outside the far plane, v2 inside
						alpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );

					}

					if ( alpha2 < alpha1 ) {

						// The line segment spans two boundaries, but is outside both of them.
						// (This can't happen when we're only clipping against just near/far but good
						//  to leave the check here for future usage if other clip planes are added.)
						return false;

					} else {

						// Update the s1 and s2 vertices to match the clipped line segment.
						s1.lerp( s2, alpha1 );
						s2.lerp( s1, 1 - alpha2 );

						return true;

					}

				}

			}

		};

	};

/***/ },
/* 52 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author felixturner / http://airtight.cc/
		 *
		 * RGB Shift Shader
		 * Shifts red and blue channels from center in opposite directions
		 * Ported from http://kriss.cx/tom/2009/05/rgb-shift/
		 * by Tom Butterworth / http://kriss.cx/tom/
		 *
		 * amount: shift distance (1 is width of input)
		 * angle: shift angle in radians
		 */

		THREE.RGBShiftShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"amount":   { type: "f", value: 0.005 },
				"angle":    { type: "f", value: 0.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform float amount;",
				"uniform float angle;",

				"varying vec2 vUv;",

				"void main() {",

					"vec2 offset = amount * vec2( cos(angle), sin(angle));",
					"vec4 cr = texture2D(tDiffuse, vUv + offset);",
					"vec4 cga = texture2D(tDiffuse, vUv);",
					"vec4 cb = texture2D(tDiffuse, vUv - offset);",
					"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 53 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {

			this.scene = scene;
			this.camera = camera;

			this.overrideMaterial = overrideMaterial;

			this.clearColor = clearColor;
			this.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 1;

			this.oldClearColor = new THREE.Color();
			this.oldClearAlpha = 1;

			this.enabled = true;
			this.clear = true;
			this.needsSwap = false;

		};

		THREE.RenderPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				this.scene.overrideMaterial = this.overrideMaterial;

				if ( this.clearColor ) {

					this.oldClearColor.copy( renderer.getClearColor() );
					this.oldClearAlpha = renderer.getClearAlpha();

					renderer.setClearColor( this.clearColor, this.clearAlpha );

				}

				renderer.render( this.scene, this.camera, readBuffer, this.clear );

				if ( this.clearColor ) {

					renderer.setClearColor( this.oldClearColor, this.oldClearAlpha );

				}

				this.scene.overrideMaterial = null;

			}

		};

	};

/***/ },
/* 54 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Screen-space ambient occlusion shader
		 * - ported from
		 *   SSAO GLSL shader v1.2
		 *   assembled by Martins Upitis (martinsh) (http://devlog-martinsh.blogspot.com)
		 *   original technique is made by ArKano22 (http://www.gamedev.net/topic/550699-ssao-no-halo-artifacts/)
		 * - modifications
		 * - modified to use RGBA packed depth texture (use clear color 1,1,1,1 for depth pass)
		 * - refactoring and optimizations
		 */

		THREE.SSAOShader = {

			uniforms: {

				"tDiffuse":     { type: "t", value: null },
				"tDepth":       { type: "t", value: null },
				"size":         { type: "v2", value: new THREE.Vector2( 512, 512 ) },
				"cameraNear":   { type: "f", value: 1 },
				"cameraFar":    { type: "f", value: 100 },
				"onlyAO":       { type: "i", value: 0 },
				"aoClamp":      { type: "f", value: 0.5 },
				"lumInfluence": { type: "f", value: 0.5 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",

					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float cameraNear;",
				"uniform float cameraFar;",

				"uniform bool onlyAO;",      // use only ambient occlusion pass?

				"uniform vec2 size;",        // texture width, height
				"uniform float aoClamp;",    // depth clamp - reduces haloing at screen edges

				"uniform float lumInfluence;",  // how much luminance affects occlusion

				"uniform sampler2D tDiffuse;",
				"uniform sampler2D tDepth;",

				"varying vec2 vUv;",

				// "#define PI 3.14159265",
				"#define DL 2.399963229728653",  // PI * ( 3.0 - sqrt( 5.0 ) )
				"#define EULER 2.718281828459045",

				// user variables

				"const int samples = 8;",     // ao sample count
				"const float radius = 5.0;",  // ao radius

				"const bool useNoise = false;",      // use noise instead of pattern for sample dithering
				"const float noiseAmount = 0.0003;", // dithering amount

				"const float diffArea = 0.4;",   // self-shadowing reduction
				"const float gDisplace = 0.4;",  // gauss bell center


				// RGBA depth

				"float unpackDepth( const in vec4 rgba_depth ) {",

					"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
					"float depth = dot( rgba_depth, bit_shift );",
					"return depth;",

				"}",

				// generating noise / pattern texture for dithering

				"vec2 rand( const vec2 coord ) {",

					"vec2 noise;",

					"if ( useNoise ) {",

						"float nx = dot ( coord, vec2( 12.9898, 78.233 ) );",
						"float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );",

						"noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );",

					"} else {",

						"float ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );",
						"float gg = fract( coord.t * ( size.y / 2.0 ) );",

						"noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;",

					"}",

					"return ( noise * 2.0  - 1.0 ) * noiseAmount;",

				"}",

				"float readDepth( const in vec2 coord ) {",

					"float cameraFarPlusNear = cameraFar + cameraNear;",
					"float cameraFarMinusNear = cameraFar - cameraNear;",
					"float cameraCoef = 2.0 * cameraNear;",

					// "return ( 2.0 * cameraNear ) / ( cameraFar + cameraNear - unpackDepth( texture2D( tDepth, coord ) ) * ( cameraFar - cameraNear ) );",
					"return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );",


				"}",

				"float compareDepths( const in float depth1, const in float depth2, inout int far ) {",

					"float garea = 2.0;",                         // gauss bell width
					"float diff = ( depth1 - depth2 ) * 100.0;",  // depth difference (0-100)

					// reduce left bell width to avoid self-shadowing

					"if ( diff < gDisplace ) {",

						"garea = diffArea;",

					"} else {",

						"far = 1;",

					"}",

					"float dd = diff - gDisplace;",
					"float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );",
					"return gauss;",

				"}",

				"float calcAO( float depth, float dw, float dh ) {",

					"float dd = radius - depth * radius;",
					"vec2 vv = vec2( dw, dh );",

					"vec2 coord1 = vUv + dd * vv;",
					"vec2 coord2 = vUv - dd * vv;",

					"float temp1 = 0.0;",
					"float temp2 = 0.0;",

					"int far = 0;",
					"temp1 = compareDepths( depth, readDepth( coord1 ), far );",

					// DEPTH EXTRAPOLATION

					"if ( far > 0 ) {",

						"temp2 = compareDepths( readDepth( coord2 ), depth, far );",
						"temp1 += ( 1.0 - temp1 ) * temp2;",

					"}",

					"return temp1;",

				"}",

				"void main() {",

					"vec2 noise = rand( vUv );",
					"float depth = readDepth( vUv );",

					"float tt = clamp( depth, aoClamp, 1.0 );",

					"float w = ( 1.0 / size.x )  / tt + ( noise.x * ( 1.0 - noise.x ) );",
					"float h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );",

					"float ao = 0.0;",

					"float dz = 1.0 / float( samples );",
					"float z = 1.0 - dz / 2.0;",
					"float l = 0.0;",

					"for ( int i = 0; i <= samples; i ++ ) {",

						"float r = sqrt( 1.0 - z );",

						"float pw = cos( l ) * r;",
						"float ph = sin( l ) * r;",
						"ao += calcAO( depth, pw * w, ph * h );",
						"z = z - dz;",
						"l = l + DL;",

					"}",

					"ao /= float( samples );",
					"ao = 1.0 - ao;",

					"vec3 color = texture2D( tDiffuse, vUv ).rgb;",

					"vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );",
					"float lum = dot( color.rgb, lumcoeff );",
					"vec3 luminance = vec3( lum );",

					"vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );",  // mix( color * ao, white, luminance )

					"if ( onlyAO ) {",

						"final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );",  // ambient occlusion only

					"}",

					"gl_FragColor = vec4( final, 1.0 );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 55 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author zz85 / http://joshuakoo.com/
		 */

		THREE.SVGLoader = function ( manager ) {

			this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

		};

		THREE.SVGLoader.prototype = {

			constructor: THREE.SVGLoader,

			load: function ( url, onLoad, onProgress, onError ) {

				var scope = this;

				var parser = new DOMParser();

				var loader = new THREE.XHRLoader( scope.manager );
				loader.load( url, function ( svgString ) {

					var doc = parser.parseFromString( svgString, 'image/svg+xml' );  // application/xml

					onLoad( doc.documentElement );

				}, onProgress, onError );

			}

		};

	};

/***/ },
/* 56 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.SavePass = function ( renderTarget ) {

			if ( THREE.CopyShader === undefined )
				console.error( "THREE.SavePass relies on THREE.CopyShader" );

			var shader = THREE.CopyShader;

			this.textureID = "tDiffuse";

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			this.material = new THREE.ShaderMaterial( {

				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			this.renderTarget = renderTarget;

			if ( this.renderTarget === undefined ) {

				this.renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };
				this.renderTarget = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, this.renderTargetParameters );

			}

			this.enabled = true;
			this.needsSwap = false;
			this.clear = false;


			this.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.SavePass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				if ( this.uniforms[ this.textureID ] ) {

					this.uniforms[ this.textureID ].value = readBuffer;

				}

				this.quad.material = this.material;

				renderer.render( this.scene, this.camera, this.renderTarget, this.clear );

			}

		};

	};


/***/ },
/* 57 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Sepia tone shader
		 * based on glfx.js sepia shader
		 * https://github.com/evanw/glfx.js
		 */

		THREE.SepiaShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"amount":   { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float amount;",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 color = texture2D( tDiffuse, vUv );",
					"vec3 c = color.rgb;",

					"color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );",
					"color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );",
					"color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );",

					"gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 58 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.ShaderPass = function ( shader, textureID ) {

			this.textureID = ( textureID !== undefined ) ? textureID : "tDiffuse";

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			this.material = new THREE.ShaderMaterial( {

				defines: shader.defines || {},
				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			this.renderToScreen = false;

			this.enabled = true;
			this.needsSwap = true;
			this.clear = false;


			this.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.ShaderPass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				if ( this.uniforms[ this.textureID ] ) {

					this.uniforms[ this.textureID ].value = readBuffer;

				}

				this.quad.material = this.material;

				if ( this.renderToScreen ) {

					renderer.render( this.scene, this.camera );

				} else {

					renderer.render( this.scene, this.camera, writeBuffer, this.clear );

				}

			}

		};

	};


/***/ },
/* 59 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author flimshaw / http://charliehoey.com
		 *
		 * Technicolor Shader
		 * Simulates the look of the two-strip technicolor process popular in early 20th century films.
		 * More historical info here: http://www.widescreenmuseum.com/oldcolor/technicolor1.htm
		 * Demo here: http://charliehoey.com/technicolor_shader/shader_test.html
		 */

		THREE.TechnicolorShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"varying vec2 vUv;",

				"void main() {",

					"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );",
					"vec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);",

					"gl_FragColor = newTex;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 60 */
/***/ function(module, exports) {

	module.exports = function( THREE ){

		/**
		 * @author alteredq / http://alteredqualia.com/
		 */

		THREE.TexturePass = function ( texture, opacity ) {

			if ( THREE.CopyShader === undefined )
				console.error( "THREE.TexturePass relies on THREE.CopyShader" );

			var shader = THREE.CopyShader;

			this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			this.uniforms[ "opacity" ].value = ( opacity !== undefined ) ? opacity : 1.0;
			this.uniforms[ "tDiffuse" ].value = texture;

			this.material = new THREE.ShaderMaterial( {

				uniforms: this.uniforms,
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader

			} );

			this.enabled = true;
			this.needsSwap = false;


			this.camera = new THREE.OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
			this.scene  = new THREE.Scene();

			this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), null );
			this.scene.add( this.quad );

		};

		THREE.TexturePass.prototype = {

			render: function ( renderer, writeBuffer, readBuffer, delta ) {

				this.quad.material = this.material;

				renderer.render( this.scene, this.camera, readBuffer );

			}

		};

	};

/***/ },
/* 61 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author miibond
		 *
		 * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf
		 */

		THREE.ToneMapShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"averageLuminance":  { type: "f", value: 1.0 },
				"luminanceMap":  { type: "t", value: null },
				"maxLuminance":  { type: "f", value: 16.0 },
				"middleGrey":  { type: "f", value: 0.6 }
			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"uniform float middleGrey;",
				"uniform float maxLuminance;",
				"#ifdef ADAPTED_LUMINANCE",
					"uniform sampler2D luminanceMap;",
				"#else",
					"uniform float averageLuminance;",
				"#endif",
				
				"const vec3 LUM_CONVERT = vec3(0.299, 0.587, 0.114);",

				"vec3 ToneMap( vec3 vColor ) {",
					"#ifdef ADAPTED_LUMINANCE",
						// Get the calculated average luminance 
						"float fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;",
					"#else",
						"float fLumAvg = averageLuminance;",
					"#endif",
					
					// Calculate the luminance of the current pixel
					"float fLumPixel = dot(vColor, LUM_CONVERT);",

					// Apply the modified operator (Eq. 4)
					"float fLumScaled = (fLumPixel * middleGrey) / fLumAvg;",

					"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);",
					"return fLumCompressed * vColor;",
				"}",

				"void main() {",

					"vec4 texel = texture2D( tDiffuse, vUv );",
					
					"gl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 62 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Triangle blur shader
		 * based on glfx.js triangle blur shader
		 * https://github.com/evanw/glfx.js
		 *
		 * A basic blur filter, which convolves the image with a
		 * pyramid filter. The pyramid filter is separable and is applied as two
		 * perpendicular triangle filters.
		 */

		THREE.TriangleBlurShader = {

			uniforms : {

				"texture": { type: "t", value: null },
				"delta":   { type: "v2", value: new THREE.Vector2( 1, 1 ) }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"#define ITERATIONS 10.0",

				"uniform sampler2D texture;",
				"uniform vec2 delta;",

				"varying vec2 vUv;",

				"float random( vec3 scale, float seed ) {",

					// use the fragment position for a different seed per-pixel

					"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );",

				"}",

				"void main() {",

					"vec4 color = vec4( 0.0 );",

					"float total = 0.0;",

					// randomize the lookup values to hide the fixed number of samples

					"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );",

					"for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {",

						"float percent = ( t + offset - 0.5 ) / ITERATIONS;",
						"float weight = 1.0 - abs( percent );",

						"color += texture2D( texture, vUv + delta * percent ) * weight;",
						"total += weight;",

					"}",

					"gl_FragColor = color / total;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Unpack RGBA depth shader
		 * - show RGBA encoded depth as monochrome color
		 */

		THREE.UnpackDepthRGBAShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"opacity":  { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float opacity;",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				// RGBA depth

				"float unpackDepth( const in vec4 rgba_depth ) {",

					"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
					"float depth = dot( rgba_depth, bit_shift );",
					"return depth;",

				"}",

				"void main() {",

					"float depth = 1.0 - unpackDepth( texture2D( tDiffuse, vUv ) );",
					"gl_FragColor = opacity * vec4( vec3( depth ), 1.0 );",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Two pass Gaussian blur filter (horizontal and vertical blur shaders)
		 * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/
		 *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html
		 *
		 * - 9 samples per pass
		 * - standard deviation 2.7
		 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
		 */

		THREE.VerticalBlurShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"v":        { type: "f", value: 1.0 / 512.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform float v;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 sum = vec4( 0.0 );",

					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;",

					"gl_FragColor = sum;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position
		 *
		 * - 9 samples per pass
		 * - standard deviation 2.7
		 * - "h" and "v" parameters should be set to "1 / width" and "1 / height"
		 * - "r" parameter control where "focused" horizontal line lies
		 */

		THREE.VerticalTiltShiftShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"v":        { type: "f", value: 1.0 / 512.0 },
				"r":        { type: "f", value: 0.35 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform sampler2D tDiffuse;",
				"uniform float v;",
				"uniform float r;",

				"varying vec2 vUv;",

				"void main() {",

					"vec4 sum = vec4( 0.0 );",

					"float vv = v * abs( r - vUv.y );",

					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;",
					"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;",

					"gl_FragColor = sum;",

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 66 */
/***/ function(module, exports) {

	module.exports = function( THREE ){
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Vignette shader
		 * based on PaintEffect postprocess from ro.me
		 * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js
		 */

		THREE.VignetteShader = {

			uniforms: {

				"tDiffuse": { type: "t", value: null },
				"offset":   { type: "f", value: 1.0 },
				"darkness": { type: "f", value: 1.0 }

			},

			vertexShader: [

				"varying vec2 vUv;",

				"void main() {",

					"vUv = uv;",
					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join( "\n" ),

			fragmentShader: [

				"uniform float offset;",
				"uniform float darkness;",

				"uniform sampler2D tDiffuse;",

				"varying vec2 vUv;",

				"void main() {",

					// Eskil's vignette

					"vec4 texel = texture2D( tDiffuse, vUv );",
					"vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );",
					"gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );",

					/*
					// alternative version from glfx.js
					// this one makes more "dusty" look (as opposed to "burned")

					"vec4 color = texture2D( tDiffuse, vUv );",
					"float dist = distance( vUv, vec2( 0.5 ) );",
					"color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );",
					"gl_FragColor = color;",
					*/

				"}"

			].join( "\n" )

		};

	}


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/*! p5.js v0.5.5 December 05, 2016 */
	(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.p5 = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){

	},{}],2:[function(_dereq_,module,exports){
	// Run-time checking of preconditions.

	'use strict';

	// Precondition function that checks if the given predicate is true.
	// If not, it will throw an error.
	exports.argument = function(predicate, message) {
	    if (!predicate) {
	        throw new Error(message);
	    }
	};

	// Precondition function that checks if the given assertion is true.
	// If not, it will throw an error.
	exports.assert = exports.argument;

	},{}],3:[function(_dereq_,module,exports){
	// Drawing utility functions.

	'use strict';

	// Draw a line on the given context from point `x1,y1` to point `x2,y2`.
	function line(ctx, x1, y1, x2, y2) {
	    ctx.beginPath();
	    ctx.moveTo(x1, y1);
	    ctx.lineTo(x2, y2);
	    ctx.stroke();
	}

	exports.line = line;

	},{}],4:[function(_dereq_,module,exports){
	// Glyph encoding

	'use strict';

	var cffStandardStrings = [
	    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
	    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
	    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
	    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
	    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
	    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
	    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
	    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
	    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
	    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
	    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
	    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
	    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
	    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
	    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
	    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
	    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
	    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
	    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
	    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
	    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
	    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
	    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
	    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
	    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
	    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
	    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
	    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
	    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
	    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
	    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
	    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
	    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
	    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
	    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
	    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
	    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
	    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
	    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
	    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
	    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
	    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
	    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];

	var cffStandardEncoding = [
	    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
	    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
	    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
	    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
	    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
	    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
	    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
	    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
	    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
	    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
	    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
	    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
	    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
	    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
	    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
	    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
	    'lslash', 'oslash', 'oe', 'germandbls'];

	var cffExpertEncoding = [
	    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
	    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
	    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
	    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
	    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
	    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
	    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
	    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
	    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
	    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
	    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
	    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
	    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
	    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
	    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
	    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
	    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
	    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
	    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
	    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
	    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
	    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
	    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
	    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
	    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
	    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];

	var standardNames = [
	    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
	    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
	    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
	    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
	    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
	    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
	    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
	    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
	    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
	    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
	    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
	    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
	    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
	    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
	    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
	    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
	    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
	    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
	    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
	    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
	    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
	    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
	    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
	    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
	    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];

	// This is the encoding used for fonts created from scratch.
	// It loops through all glyphs and finds the appropriate unicode value.
	// Since it's linear time, other encodings will be faster.
	function DefaultEncoding(font) {
	    this.font = font;
	}

	DefaultEncoding.prototype.charToGlyphIndex = function(c) {
	    var code = c.charCodeAt(0);
	    var glyphs = this.font.glyphs;
	    if (glyphs) {
	        for (var i = 0; i < glyphs.length; i += 1) {
	            var glyph = glyphs.get(i);
	            for (var j = 0; j < glyph.unicodes.length; j += 1) {
	                if (glyph.unicodes[j] === code) {
	                    return i;
	                }
	            }
	        }
	    } else {
	        return null;
	    }
	};

	function CmapEncoding(cmap) {
	    this.cmap = cmap;
	}

	CmapEncoding.prototype.charToGlyphIndex = function(c) {
	    return this.cmap.glyphIndexMap[c.charCodeAt(0)] || 0;
	};

	function CffEncoding(encoding, charset) {
	    this.encoding = encoding;
	    this.charset = charset;
	}

	CffEncoding.prototype.charToGlyphIndex = function(s) {
	    var code = s.charCodeAt(0);
	    var charName = this.encoding[code];
	    return this.charset.indexOf(charName);
	};

	function GlyphNames(post) {
	    var i;
	    switch (post.version) {
	    case 1:
	        this.names = exports.standardNames.slice();
	        break;
	    case 2:
	        this.names = new Array(post.numberOfGlyphs);
	        for (i = 0; i < post.numberOfGlyphs; i++) {
	            if (post.glyphNameIndex[i] < exports.standardNames.length) {
	                this.names[i] = exports.standardNames[post.glyphNameIndex[i]];
	            } else {
	                this.names[i] = post.names[post.glyphNameIndex[i] - exports.standardNames.length];
	            }
	        }

	        break;
	    case 2.5:
	        this.names = new Array(post.numberOfGlyphs);
	        for (i = 0; i < post.numberOfGlyphs; i++) {
	            this.names[i] = exports.standardNames[i + post.glyphNameIndex[i]];
	        }

	        break;
	    case 3:
	        this.names = [];
	        break;
	    }
	}

	GlyphNames.prototype.nameToGlyphIndex = function(name) {
	    return this.names.indexOf(name);
	};

	GlyphNames.prototype.glyphIndexToName = function(gid) {
	    return this.names[gid];
	};

	function addGlyphNames(font) {
	    var glyph;
	    var glyphIndexMap = font.tables.cmap.glyphIndexMap;
	    var charCodes = Object.keys(glyphIndexMap);

	    for (var i = 0; i < charCodes.length; i += 1) {
	        var c = charCodes[i];
	        var glyphIndex = glyphIndexMap[c];
	        glyph = font.glyphs.get(glyphIndex);
	        glyph.addUnicode(parseInt(c));
	    }

	    for (i = 0; i < font.glyphs.length; i += 1) {
	        glyph = font.glyphs.get(i);
	        if (font.cffEncoding) {
	            glyph.name = font.cffEncoding.charset[i];
	        } else {
	            glyph.name = font.glyphNames.glyphIndexToName(i);
	        }
	    }
	}

	exports.cffStandardStrings = cffStandardStrings;
	exports.cffStandardEncoding = cffStandardEncoding;
	exports.cffExpertEncoding = cffExpertEncoding;
	exports.standardNames = standardNames;
	exports.DefaultEncoding = DefaultEncoding;
	exports.CmapEncoding = CmapEncoding;
	exports.CffEncoding = CffEncoding;
	exports.GlyphNames = GlyphNames;
	exports.addGlyphNames = addGlyphNames;

	},{}],5:[function(_dereq_,module,exports){
	// The Font object

	'use strict';

	var path = _dereq_('./path');
	var sfnt = _dereq_('./tables/sfnt');
	var encoding = _dereq_('./encoding');
	var glyphset = _dereq_('./glyphset');

	// A Font represents a loaded OpenType font file.
	// It contains a set of glyphs and methods to draw text on a drawing context,
	// or to get a path representing the text.
	function Font(options) {
	    options = options || {};

	    // OS X will complain if the names are empty, so we put a single space everywhere by default.
	    this.familyName = options.familyName || ' ';
	    this.styleName = options.styleName || ' ';
	    this.designer = options.designer || ' ';
	    this.designerURL = options.designerURL || ' ';
	    this.manufacturer = options.manufacturer || ' ';
	    this.manufacturerURL = options.manufacturerURL || ' ';
	    this.license = options.license || ' ';
	    this.licenseURL = options.licenseURL || ' ';
	    this.version = options.version || 'Version 0.1';
	    this.description = options.description || ' ';
	    this.copyright = options.copyright || ' ';
	    this.trademark = options.trademark || ' ';
	    this.unitsPerEm = options.unitsPerEm || 1000;
	    this.ascender = options.ascender;
	    this.descender = options.descender;
	    this.supported = true;
	    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
	    this.encoding = new encoding.DefaultEncoding(this);
	    this.tables = {};
	}

	// Check if the font has a glyph for the given character.
	Font.prototype.hasChar = function(c) {
	    return this.encoding.charToGlyphIndex(c) !== null;
	};

	// Convert the given character to a single glyph index.
	// Note that this function assumes that there is a one-to-one mapping between
	// the given character and a glyph; for complex scripts this might not be the case.
	Font.prototype.charToGlyphIndex = function(s) {
	    return this.encoding.charToGlyphIndex(s);
	};

	// Convert the given character to a single Glyph object.
	// Note that this function assumes that there is a one-to-one mapping between
	// the given character and a glyph; for complex scripts this might not be the case.
	Font.prototype.charToGlyph = function(c) {
	    var glyphIndex = this.charToGlyphIndex(c);
	    var glyph = this.glyphs.get(glyphIndex);
	    if (!glyph) {
	        // .notdef
	        glyph = this.glyphs.get(0);
	    }

	    return glyph;
	};

	// Convert the given text to a list of Glyph objects.
	// Note that there is no strict one-to-one mapping between characters and
	// glyphs, so the list of returned glyphs can be larger or smaller than the
	// length of the given string.
	Font.prototype.stringToGlyphs = function(s) {
	    var glyphs = [];
	    for (var i = 0; i < s.length; i += 1) {
	        var c = s[i];
	        glyphs.push(this.charToGlyph(c));
	    }

	    return glyphs;
	};

	Font.prototype.nameToGlyphIndex = function(name) {
	    return this.glyphNames.nameToGlyphIndex(name);
	};

	Font.prototype.nameToGlyph = function(name) {
	    var glyphIndex = this.nametoGlyphIndex(name);
	    var glyph = this.glyphs.get(glyphIndex);
	    if (!glyph) {
	        // .notdef
	        glyph = this.glyphs.get(0);
	    }

	    return glyph;
	};

	Font.prototype.glyphIndexToName = function(gid) {
	    if (!this.glyphNames.glyphIndexToName) {
	        return '';
	    }

	    return this.glyphNames.glyphIndexToName(gid);
	};

	// Retrieve the value of the kerning pair between the left glyph (or its index)
	// and the right glyph (or its index). If no kerning pair is found, return 0.
	// The kerning value gets added to the advance width when calculating the spacing
	// between glyphs.
	Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
	    leftGlyph = leftGlyph.index || leftGlyph;
	    rightGlyph = rightGlyph.index || rightGlyph;
	    var gposKerning = this.getGposKerningValue;
	    return gposKerning ? gposKerning(leftGlyph, rightGlyph) :
	        (this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0);
	};

	// Helper function that invokes the given callback for each glyph in the given text.
	// The callback gets `(glyph, x, y, fontSize, options)`.
	Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
	    if (!this.supported) {
	        return;
	    }

	    x = x !== undefined ? x : 0;
	    y = y !== undefined ? y : 0;
	    fontSize = fontSize !== undefined ? fontSize : 72;
	    options = options || {};
	    var kerning = options.kerning === undefined ? true : options.kerning;
	    var fontScale = 1 / this.unitsPerEm * fontSize;
	    var glyphs = this.stringToGlyphs(text);
	    for (var i = 0; i < glyphs.length; i += 1) {
	        var glyph = glyphs[i];
	        callback(glyph, x, y, fontSize, options);
	        if (glyph.advanceWidth) {
	            x += glyph.advanceWidth * fontScale;
	        }

	        if (kerning && i < glyphs.length - 1) {
	            var kerningValue = this.getKerningValue(glyph, glyphs[i + 1]);
	            x += kerningValue * fontScale;
	        }
	    }
	};

	// Create a Path object that represents the given text.
	//
	// text - The text to create.
	// x - Horizontal position of the beginning of the text. (default: 0)
	// y - Vertical position of the *baseline* of the text. (default: 0)
	// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
	// Options is an optional object that contains:
	// - kerning - Whether to take kerning information into account. (default: true)
	//
	// Returns a Path object.
	Font.prototype.getPath = function(text, x, y, fontSize, options) {
	    var fullPath = new path.Path();
	    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
	        var glyphPath = glyph.getPath(gX, gY, gFontSize);
	        fullPath.extend(glyphPath);
	    });

	    return fullPath;
	};

	// Draw the text on the given drawing context.
	//
	// ctx - A 2D drawing context, like Canvas.
	// text - The text to create.
	// x - Horizontal position of the beginning of the text. (default: 0)
	// y - Vertical position of the *baseline* of the text. (default: 0)
	// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
	// Options is an optional object that contains:
	// - kerning - Whether to take kerning information into account. (default: true)
	Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
	    this.getPath(text, x, y, fontSize, options).draw(ctx);
	};

	// Draw the points of all glyphs in the text.
	// On-curve points will be drawn in blue, off-curve points will be drawn in red.
	//
	// ctx - A 2D drawing context, like Canvas.
	// text - The text to create.
	// x - Horizontal position of the beginning of the text. (default: 0)
	// y - Vertical position of the *baseline* of the text. (default: 0)
	// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
	// Options is an optional object that contains:
	// - kerning - Whether to take kerning information into account. (default: true)
	Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
	    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
	        glyph.drawPoints(ctx, gX, gY, gFontSize);
	    });
	};

	// Draw lines indicating important font measurements for all glyphs in the text.
	// Black lines indicate the origin of the coordinate system (point 0,0).
	// Blue lines indicate the glyph bounding box.
	// Green line indicates the advance width of the glyph.
	//
	// ctx - A 2D drawing context, like Canvas.
	// text - The text to create.
	// x - Horizontal position of the beginning of the text. (default: 0)
	// y - Vertical position of the *baseline* of the text. (default: 0)
	// fontSize - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`. (default: 72)
	// Options is an optional object that contains:
	// - kerning - Whether to take kerning information into account. (default: true)
	Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
	    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
	        glyph.drawMetrics(ctx, gX, gY, gFontSize);
	    });
	};

	// Validate
	Font.prototype.validate = function() {
	    var warnings = [];
	    var _this = this;

	    function assert(predicate, message) {
	        if (!predicate) {
	            warnings.push(message);
	        }
	    }

	    function assertStringAttribute(attrName) {
	        assert(_this[attrName] && _this[attrName].trim().length > 0, 'No ' + attrName + ' specified.');
	    }

	    // Identification information
	    assertStringAttribute('familyName');
	    assertStringAttribute('weightName');
	    assertStringAttribute('manufacturer');
	    assertStringAttribute('copyright');
	    assertStringAttribute('version');

	    // Dimension information
	    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');
	};

	// Convert the font object to a SFNT data structure.
	// This structure contains all the necessary tables and metadata to create a binary OTF file.
	Font.prototype.toTables = function() {
	    return sfnt.fontToTable(this);
	};

	Font.prototype.toBuffer = function() {
	    var sfntTable = this.toTables();
	    var bytes = sfntTable.encode();
	    var buffer = new ArrayBuffer(bytes.length);
	    var intArray = new Uint8Array(buffer);
	    for (var i = 0; i < bytes.length; i++) {
	        intArray[i] = bytes[i];
	    }

	    return buffer;
	};

	// Initiate a download of the OpenType font.
	Font.prototype.download = function() {
	    var fileName = this.familyName.replace(/\s/g, '') + '-' + this.styleName + '.otf';
	    var buffer = this.toBuffer();

	    window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
	    window.requestFileSystem(window.TEMPORARY, buffer.byteLength, function(fs) {
	        fs.root.getFile(fileName, {create: true}, function(fileEntry) {
	            fileEntry.createWriter(function(writer) {
	                var dataView = new DataView(buffer);
	                var blob = new Blob([dataView], {type: 'font/opentype'});
	                writer.write(blob);

	                writer.addEventListener('writeend', function() {
	                    // Navigating to the file will download it.
	                    location.href = fileEntry.toURL();
	                }, false);
	            });
	        });
	    },

	    function(err) {
	        throw err;
	    });
	};

	exports.Font = Font;

	},{"./encoding":4,"./glyphset":7,"./path":10,"./tables/sfnt":25}],6:[function(_dereq_,module,exports){
	// The Glyph object

	'use strict';

	var check = _dereq_('./check');
	var draw = _dereq_('./draw');
	var path = _dereq_('./path');

	function getPathDefinition(glyph, path) {
	    var _path = path || { commands: [] };
	    return {
	        configurable: true,

	        get: function() {
	            if (typeof _path === 'function') {
	                _path = _path();
	            }

	            return _path;
	        },

	        set: function(p) {
	            _path = p;
	        }
	    };
	}

	// A Glyph is an individual mark that often corresponds to a character.
	// Some glyphs, such as ligatures, are a combination of many characters.
	// Glyphs are the basic building blocks of a font.
	//
	// The `Glyph` class contains utility methods for drawing the path and its points.
	function Glyph(options) {
	    // By putting all the code on a prototype function (which is only declared once)
	    // we reduce the memory requirements for larger fonts by some 2%
	    this.bindConstructorValues(options);
	}

	Glyph.prototype.bindConstructorValues = function(options) {
	    this.index = options.index || 0;

	    // These three values cannnot be deferred for memory optimization:
	    this.name = options.name || null;
	    this.unicode = options.unicode || undefined;
	    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];

	    // But by binding these values only when necessary, we reduce can
	    // the memory requirements by almost 3% for larger fonts.
	    if (options.xMin) {
	        this.xMin = options.xMin;
	    }

	    if (options.yMin) {
	        this.yMin = options.yMin;
	    }

	    if (options.xMax) {
	        this.xMax = options.xMax;
	    }

	    if (options.yMax) {
	        this.yMax = options.yMax;
	    }

	    if (options.advanceWidth) {
	        this.advanceWidth = options.advanceWidth;
	    }

	    // The path for a glyph is the most memory intensive, and is bound as a value
	    // with a getter/setter to ensure we actually do path parsing only once the
	    // path is actually needed by anything.
	    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
	};

	Glyph.prototype.addUnicode = function(unicode) {
	    if (this.unicodes.length === 0) {
	        this.unicode = unicode;
	    }

	    this.unicodes.push(unicode);
	};

	// Convert the glyph to a Path we can draw on a drawing context.
	//
	// x - Horizontal position of the glyph. (default: 0)
	// y - Vertical position of the *baseline* of the glyph. (default: 0)
	// fontSize - Font size, in pixels (default: 72).
	Glyph.prototype.getPath = function(x, y, fontSize) {
	    x = x !== undefined ? x : 0;
	    y = y !== undefined ? y : 0;
	    fontSize = fontSize !== undefined ? fontSize : 72;
	    var scale = 1 / this.path.unitsPerEm * fontSize;
	    var p = new path.Path();
	    var commands = this.path.commands;
	    for (var i = 0; i < commands.length; i += 1) {
	        var cmd = commands[i];
	        if (cmd.type === 'M') {
	            p.moveTo(x + (cmd.x * scale), y + (-cmd.y * scale));
	        } else if (cmd.type === 'L') {
	            p.lineTo(x + (cmd.x * scale), y + (-cmd.y * scale));
	        } else if (cmd.type === 'Q') {
	            p.quadraticCurveTo(x + (cmd.x1 * scale), y + (-cmd.y1 * scale),
	                               x + (cmd.x * scale), y + (-cmd.y * scale));
	        } else if (cmd.type === 'C') {
	            p.curveTo(x + (cmd.x1 * scale), y + (-cmd.y1 * scale),
	                      x + (cmd.x2 * scale), y + (-cmd.y2 * scale),
	                      x + (cmd.x * scale), y + (-cmd.y * scale));
	        } else if (cmd.type === 'Z') {
	            p.closePath();
	        }
	    }

	    return p;
	};

	// Split the glyph into contours.
	// This function is here for backwards compatibility, and to
	// provide raw access to the TrueType glyph outlines.
	Glyph.prototype.getContours = function() {
	    if (this.points === undefined) {
	        return [];
	    }

	    var contours = [];
	    var currentContour = [];
	    for (var i = 0; i < this.points.length; i += 1) {
	        var pt = this.points[i];
	        currentContour.push(pt);
	        if (pt.lastPointOfContour) {
	            contours.push(currentContour);
	            currentContour = [];
	        }
	    }

	    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
	    return contours;
	};

	// Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
	Glyph.prototype.getMetrics = function() {
	    var commands = this.path.commands;
	    var xCoords = [];
	    var yCoords = [];
	    for (var i = 0; i < commands.length; i += 1) {
	        var cmd = commands[i];
	        if (cmd.type !== 'Z') {
	            xCoords.push(cmd.x);
	            yCoords.push(cmd.y);
	        }

	        if (cmd.type === 'Q' || cmd.type === 'C') {
	            xCoords.push(cmd.x1);
	            yCoords.push(cmd.y1);
	        }

	        if (cmd.type === 'C') {
	            xCoords.push(cmd.x2);
	            yCoords.push(cmd.y2);
	        }
	    }

	    var metrics = {
	        xMin: Math.min.apply(null, xCoords),
	        yMin: Math.min.apply(null, yCoords),
	        xMax: Math.max.apply(null, xCoords),
	        yMax: Math.max.apply(null, yCoords),
	        leftSideBearing: 0
	    };
	    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
	    return metrics;
	};

	// Draw the glyph on the given context.
	//
	// ctx - The drawing context.
	// x - Horizontal position of the glyph. (default: 0)
	// y - Vertical position of the *baseline* of the glyph. (default: 0)
	// fontSize - Font size, in pixels (default: 72).
	Glyph.prototype.draw = function(ctx, x, y, fontSize) {
	    this.getPath(x, y, fontSize).draw(ctx);
	};

	// Draw the points of the glyph.
	// On-curve points will be drawn in blue, off-curve points will be drawn in red.
	//
	// ctx - The drawing context.
	// x - Horizontal position of the glyph. (default: 0)
	// y - Vertical position of the *baseline* of the glyph. (default: 0)
	// fontSize - Font size, in pixels (default: 72).
	Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {

	    function drawCircles(l, x, y, scale) {
	        var PI_SQ = Math.PI * 2;
	        ctx.beginPath();
	        for (var j = 0; j < l.length; j += 1) {
	            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));
	            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);
	        }

	        ctx.closePath();
	        ctx.fill();
	    }

	    x = x !== undefined ? x : 0;
	    y = y !== undefined ? y : 0;
	    fontSize = fontSize !== undefined ? fontSize : 24;
	    var scale = 1 / this.path.unitsPerEm * fontSize;

	    var blueCircles = [];
	    var redCircles = [];
	    var path = this.path;
	    for (var i = 0; i < path.commands.length; i += 1) {
	        var cmd = path.commands[i];
	        if (cmd.x !== undefined) {
	            blueCircles.push({x: cmd.x, y: -cmd.y});
	        }

	        if (cmd.x1 !== undefined) {
	            redCircles.push({x: cmd.x1, y: -cmd.y1});
	        }

	        if (cmd.x2 !== undefined) {
	            redCircles.push({x: cmd.x2, y: -cmd.y2});
	        }
	    }

	    ctx.fillStyle = 'blue';
	    drawCircles(blueCircles, x, y, scale);
	    ctx.fillStyle = 'red';
	    drawCircles(redCircles, x, y, scale);
	};

	// Draw lines indicating important font measurements.
	// Black lines indicate the origin of the coordinate system (point 0,0).
	// Blue lines indicate the glyph bounding box.
	// Green line indicates the advance width of the glyph.
	//
	// ctx - The drawing context.
	// x - Horizontal position of the glyph. (default: 0)
	// y - Vertical position of the *baseline* of the glyph. (default: 0)
	// fontSize - Font size, in pixels (default: 72).
	Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
	    var scale;
	    x = x !== undefined ? x : 0;
	    y = y !== undefined ? y : 0;
	    fontSize = fontSize !== undefined ? fontSize : 24;
	    scale = 1 / this.path.unitsPerEm * fontSize;
	    ctx.lineWidth = 1;

	    // Draw the origin
	    ctx.strokeStyle = 'black';
	    draw.line(ctx, x, -10000, x, 10000);
	    draw.line(ctx, -10000, y, 10000, y);

	    // This code is here due to memory optimization: by not using
	    // defaults in the constructor, we save a notable amount of memory.
	    var xMin = this.xMin || 0;
	    var yMin = this.yMin || 0;
	    var xMax = this.xMax || 0;
	    var yMax = this.yMax || 0;
	    var advanceWidth = this.advanceWidth || 0;

	    // Draw the glyph box
	    ctx.strokeStyle = 'blue';
	    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);
	    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);
	    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));
	    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));

	    // Draw the advance width
	    ctx.strokeStyle = 'green';
	    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);
	};

	exports.Glyph = Glyph;

	},{"./check":2,"./draw":3,"./path":10}],7:[function(_dereq_,module,exports){
	// The GlyphSet object

	'use strict';

	var _glyph = _dereq_('./glyph');

	// A GlyphSet represents all glyphs available in the font, but modelled using
	// a deferred glyph loader, for retrieving glyphs only once they are absolutely
	// necessary, to keep the memory footprint down.
	function GlyphSet(font, glyphs) {
	    this.font = font;
	    this.glyphs = {};
	    if (Array.isArray(glyphs)) {
	        for (var i = 0; i < glyphs.length; i++) {
	            this.glyphs[i] = glyphs[i];
	        }
	    }

	    this.length = (glyphs && glyphs.length) || 0;
	}

	GlyphSet.prototype.get = function(index) {
	    if (typeof this.glyphs[index] === 'function') {
	        this.glyphs[index] = this.glyphs[index]();
	    }

	    return this.glyphs[index];
	};

	GlyphSet.prototype.push = function(index, loader) {
	    this.glyphs[index] = loader;
	    this.length++;
	};

	function glyphLoader(font, index) {
	    return new _glyph.Glyph({index: index, font: font});
	}

	/**
	 * Generate a stub glyph that can be filled with all metadata *except*
	 * the "points" and "path" properties, which must be loaded only once
	 * the glyph's path is actually requested for text shaping.
	 */

	function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
	    return function() {
	        var glyph = new _glyph.Glyph({index: index, font: font});

	        glyph.path = function() {
	            parseGlyph(glyph, data, position);
	            var path = buildPath(font.glyphs, glyph);
	            path.unitsPerEm = font.unitsPerEm;
	            return path;
	        };

	        return glyph;
	    };
	}

	function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
	    return function() {
	        var glyph = new _glyph.Glyph({index: index, font: font});

	        glyph.path = function() {
	            var path = parseCFFCharstring(font, glyph, charstring);
	            path.unitsPerEm = font.unitsPerEm;
	            return path;
	        };

	        return glyph;
	    };
	}

	exports.GlyphSet = GlyphSet;
	exports.glyphLoader = glyphLoader;
	exports.ttfGlyphLoader = ttfGlyphLoader;
	exports.cffGlyphLoader = cffGlyphLoader;

	},{"./glyph":6}],8:[function(_dereq_,module,exports){
	// opentype.js
	// https://github.com/nodebox/opentype.js
	// (c) 2015 Frederik De Bleser
	// opentype.js may be freely distributed under the MIT license.

	/* global ArrayBuffer, DataView, Uint8Array, XMLHttpRequest  */

	'use strict';

	var encoding = _dereq_('./encoding');
	var _font = _dereq_('./font');
	var glyph = _dereq_('./glyph');
	var parse = _dereq_('./parse');
	var path = _dereq_('./path');

	var cmap = _dereq_('./tables/cmap');
	var cff = _dereq_('./tables/cff');
	var glyf = _dereq_('./tables/glyf');
	var gpos = _dereq_('./tables/gpos');
	var head = _dereq_('./tables/head');
	var hhea = _dereq_('./tables/hhea');
	var hmtx = _dereq_('./tables/hmtx');
	var kern = _dereq_('./tables/kern');
	var loca = _dereq_('./tables/loca');
	var maxp = _dereq_('./tables/maxp');
	var _name = _dereq_('./tables/name');
	var os2 = _dereq_('./tables/os2');
	var post = _dereq_('./tables/post');

	// File loaders /////////////////////////////////////////////////////////

	// Convert a Node.js Buffer to an ArrayBuffer
	function toArrayBuffer(buffer) {
	    var arrayBuffer = new ArrayBuffer(buffer.length);
	    var data = new Uint8Array(arrayBuffer);
	    for (var i = 0; i < buffer.length; i += 1) {
	        data[i] = buffer[i];
	    }

	    return arrayBuffer;
	}

	function loadFromFile(path, callback) {
	    var fs = _dereq_('fs');
	    fs.readFile(path, function(err, buffer) {
	        if (err) {
	            return callback(err.message);
	        }

	        callback(null, toArrayBuffer(buffer));
	    });
	}

	function loadFromUrl(url, callback) {
	    var request = new XMLHttpRequest();
	    request.open('get', url, true);
	    request.responseType = 'arraybuffer';
	    request.onload = function() {
	        if (request.status !== 200) {
	            return callback('Font could not be loaded: ' + request.statusText);
	        }

	        return callback(null, request.response);
	    };

	    request.send();
	}

	// Public API ///////////////////////////////////////////////////////////

	// Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
	// If the file could not be parsed (most likely because it contains Postscript outlines)
	// we return an empty Font object with the `supported` flag set to `false`.
	function parseBuffer(buffer) {
	    var indexToLocFormat;
	    var hmtxOffset;
	    var glyfOffset;
	    var locaOffset;
	    var cffOffset;
	    var kernOffset;
	    var gposOffset;

	    // OpenType fonts use big endian byte ordering.
	    // We can't rely on typed array view types, because they operate with the endianness of the host computer.
	    // Instead we use DataViews where we can specify endianness.

	    var font = new _font.Font();
	    var data = new DataView(buffer, 0);

	    var version = parse.getFixed(data, 0);
	    if (version === 1.0) {
	        font.outlinesFormat = 'truetype';
	    } else {
	        version = parse.getTag(data, 0);
	        if (version === 'OTTO') {
	            font.outlinesFormat = 'cff';
	        } else {
	            throw new Error('Unsupported OpenType version ' + version);
	        }
	    }

	    var numTables = parse.getUShort(data, 4);

	    // Offset into the table records.
	    var p = 12;
	    for (var i = 0; i < numTables; i += 1) {
	        var tag = parse.getTag(data, p);
	        var offset = parse.getULong(data, p + 8);
	        switch (tag) {
	        case 'cmap':
	            font.tables.cmap = cmap.parse(data, offset);
	            font.encoding = new encoding.CmapEncoding(font.tables.cmap);
	            if (!font.encoding) {
	                font.supported = false;
	            }

	            break;
	        case 'head':
	            font.tables.head = head.parse(data, offset);
	            font.unitsPerEm = font.tables.head.unitsPerEm;
	            indexToLocFormat = font.tables.head.indexToLocFormat;
	            break;
	        case 'hhea':
	            font.tables.hhea = hhea.parse(data, offset);
	            font.ascender = font.tables.hhea.ascender;
	            font.descender = font.tables.hhea.descender;
	            font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
	            break;
	        case 'hmtx':
	            hmtxOffset = offset;
	            break;
	        case 'maxp':
	            font.tables.maxp = maxp.parse(data, offset);
	            font.numGlyphs = font.tables.maxp.numGlyphs;
	            break;
	        case 'name':
	            font.tables.name = _name.parse(data, offset);
	            font.familyName = font.tables.name.fontFamily;
	            font.styleName = font.tables.name.fontSubfamily;
	            break;
	        case 'OS/2':
	            font.tables.os2 = os2.parse(data, offset);
	            break;
	        case 'post':
	            font.tables.post = post.parse(data, offset);
	            font.glyphNames = new encoding.GlyphNames(font.tables.post);
	            break;
	        case 'glyf':
	            glyfOffset = offset;
	            break;
	        case 'loca':
	            locaOffset = offset;
	            break;
	        case 'CFF ':
	            cffOffset = offset;
	            break;
	        case 'kern':
	            kernOffset = offset;
	            break;
	        case 'GPOS':
	            gposOffset = offset;
	            break;
	        }
	        p += 16;
	    }

	    if (glyfOffset && locaOffset) {
	        var shortVersion = indexToLocFormat === 0;
	        var locaTable = loca.parse(data, locaOffset, font.numGlyphs, shortVersion);
	        font.glyphs = glyf.parse(data, glyfOffset, locaTable, font);
	        hmtx.parse(data, hmtxOffset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);
	        encoding.addGlyphNames(font);
	    } else if (cffOffset) {
	        cff.parse(data, cffOffset, font);
	        encoding.addGlyphNames(font);
	    } else {
	        font.supported = false;
	    }

	    if (font.supported) {
	        if (kernOffset) {
	            font.kerningPairs = kern.parse(data, kernOffset);
	        } else {
	            font.kerningPairs = {};
	        }

	        if (gposOffset) {
	            gpos.parse(data, gposOffset, font);
	        }
	    }

	    return font;
	}

	// Asynchronously load the font from a URL or a filesystem. When done, call the callback
	// with two arguments `(err, font)`. The `err` will be null on success,
	// the `font` is a Font object.
	//
	// We use the node.js callback convention so that
	// opentype.js can integrate with frameworks like async.js.
	function load(url, callback) {
	    var isNode = typeof window === 'undefined';
	    var loadFn = isNode ? loadFromFile : loadFromUrl;
	    loadFn(url, function(err, arrayBuffer) {
	        if (err) {
	            return callback(err);
	        }

	        var font = parseBuffer(arrayBuffer);
	        if (!font.supported) {
	            return callback('Font is not supported (is this a Postscript font?)');
	        }

	        return callback(null, font);
	    });
	}

	exports._parse = parse;
	exports.Font = _font.Font;
	exports.Glyph = glyph.Glyph;
	exports.Path = path.Path;
	exports.parse = parseBuffer;
	exports.load = load;

	},{"./encoding":4,"./font":5,"./glyph":6,"./parse":9,"./path":10,"./tables/cff":12,"./tables/cmap":13,"./tables/glyf":14,"./tables/gpos":15,"./tables/head":16,"./tables/hhea":17,"./tables/hmtx":18,"./tables/kern":19,"./tables/loca":20,"./tables/maxp":21,"./tables/name":22,"./tables/os2":23,"./tables/post":24,"fs":1}],9:[function(_dereq_,module,exports){
	// Parsing utility functions

	'use strict';

	// Retrieve an unsigned byte from the DataView.
	exports.getByte = function getByte(dataView, offset) {
	    return dataView.getUint8(offset);
	};

	exports.getCard8 = exports.getByte;

	// Retrieve an unsigned 16-bit short from the DataView.
	// The value is stored in big endian.
	exports.getUShort = function(dataView, offset) {
	    return dataView.getUint16(offset, false);
	};

	exports.getCard16 = exports.getUShort;

	// Retrieve a signed 16-bit short from the DataView.
	// The value is stored in big endian.
	exports.getShort = function(dataView, offset) {
	    return dataView.getInt16(offset, false);
	};

	// Retrieve an unsigned 32-bit long from the DataView.
	// The value is stored in big endian.
	exports.getULong = function(dataView, offset) {
	    return dataView.getUint32(offset, false);
	};

	// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
	// The value is stored in big endian.
	exports.getFixed = function(dataView, offset) {
	    var decimal = dataView.getInt16(offset, false);
	    var fraction = dataView.getUint16(offset + 2, false);
	    return decimal + fraction / 65535;
	};

	// Retrieve a 4-character tag from the DataView.
	// Tags are used to identify tables.
	exports.getTag = function(dataView, offset) {
	    var tag = '';
	    for (var i = offset; i < offset + 4; i += 1) {
	        tag += String.fromCharCode(dataView.getInt8(i));
	    }

	    return tag;
	};

	// Retrieve an offset from the DataView.
	// Offsets are 1 to 4 bytes in length, depending on the offSize argument.
	exports.getOffset = function(dataView, offset, offSize) {
	    var v = 0;
	    for (var i = 0; i < offSize; i += 1) {
	        v <<= 8;
	        v += dataView.getUint8(offset + i);
	    }

	    return v;
	};

	// Retrieve a number of bytes from start offset to the end offset from the DataView.
	exports.getBytes = function(dataView, startOffset, endOffset) {
	    var bytes = [];
	    for (var i = startOffset; i < endOffset; i += 1) {
	        bytes.push(dataView.getUint8(i));
	    }

	    return bytes;
	};

	// Convert the list of bytes to a string.
	exports.bytesToString = function(bytes) {
	    var s = '';
	    for (var i = 0; i < bytes.length; i += 1) {
	        s += String.fromCharCode(bytes[i]);
	    }

	    return s;
	};

	var typeOffsets = {
	    byte: 1,
	    uShort: 2,
	    short: 2,
	    uLong: 4,
	    fixed: 4,
	    longDateTime: 8,
	    tag: 4
	};

	// A stateful parser that changes the offset whenever a value is retrieved.
	// The data is a DataView.
	function Parser(data, offset) {
	    this.data = data;
	    this.offset = offset;
	    this.relativeOffset = 0;
	}

	Parser.prototype.parseByte = function() {
	    var v = this.data.getUint8(this.offset + this.relativeOffset);
	    this.relativeOffset += 1;
	    return v;
	};

	Parser.prototype.parseChar = function() {
	    var v = this.data.getInt8(this.offset + this.relativeOffset);
	    this.relativeOffset += 1;
	    return v;
	};

	Parser.prototype.parseCard8 = Parser.prototype.parseByte;

	Parser.prototype.parseUShort = function() {
	    var v = this.data.getUint16(this.offset + this.relativeOffset);
	    this.relativeOffset += 2;
	    return v;
	};

	Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
	Parser.prototype.parseSID = Parser.prototype.parseUShort;
	Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;

	Parser.prototype.parseShort = function() {
	    var v = this.data.getInt16(this.offset + this.relativeOffset);
	    this.relativeOffset += 2;
	    return v;
	};

	Parser.prototype.parseF2Dot14 = function() {
	    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
	    this.relativeOffset += 2;
	    return v;
	};

	Parser.prototype.parseULong = function() {
	    var v = exports.getULong(this.data, this.offset + this.relativeOffset);
	    this.relativeOffset += 4;
	    return v;
	};

	Parser.prototype.parseFixed = function() {
	    var v = exports.getFixed(this.data, this.offset + this.relativeOffset);
	    this.relativeOffset += 4;
	    return v;
	};

	Parser.prototype.parseOffset16List =
	Parser.prototype.parseUShortList = function(count) {
	    var offsets = new Array(count);
	    var dataView = this.data;
	    var offset = this.offset + this.relativeOffset;
	    for (var i = 0; i < count; i++) {
	        offsets[i] = exports.getUShort(dataView, offset);
	        offset += 2;
	    }

	    this.relativeOffset += count * 2;
	    return offsets;
	};

	Parser.prototype.parseString = function(length) {
	    var dataView = this.data;
	    var offset = this.offset + this.relativeOffset;
	    var string = '';
	    this.relativeOffset += length;
	    for (var i = 0; i < length; i++) {
	        string += String.fromCharCode(dataView.getUint8(offset + i));
	    }

	    return string;
	};

	Parser.prototype.parseTag = function() {
	    return this.parseString(4);
	};

	// LONGDATETIME is a 64-bit integer.
	// JavaScript and unix timestamps traditionally use 32 bits, so we
	// only take the last 32 bits.
	Parser.prototype.parseLongDateTime = function() {
	    var v = exports.getULong(this.data, this.offset + this.relativeOffset + 4);
	    this.relativeOffset += 8;
	    return v;
	};

	Parser.prototype.parseFixed = function() {
	    var v = exports.getULong(this.data, this.offset + this.relativeOffset);
	    this.relativeOffset += 4;
	    return v / 65536;
	};

	Parser.prototype.parseVersion = function() {
	    var major = exports.getUShort(this.data, this.offset + this.relativeOffset);

	    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
	    // This returns the correct number if minor = 0xN000 where N is 0-9
	    var minor = exports.getUShort(this.data, this.offset + this.relativeOffset + 2);
	    this.relativeOffset += 4;
	    return major + minor / 0x1000 / 10;
	};

	Parser.prototype.skip = function(type, amount) {
	    if (amount === undefined) {
	        amount = 1;
	    }

	    this.relativeOffset += typeOffsets[type] * amount;
	};

	exports.Parser = Parser;

	},{}],10:[function(_dereq_,module,exports){
	// Geometric objects

	'use strict';

	// A bÃ©zier path containing a set of path commands similar to a SVG path.
	// Paths can be drawn on a context using `draw`.
	function Path() {
	    this.commands = [];
	    this.fill = 'black';
	    this.stroke = null;
	    this.strokeWidth = 1;
	}

	Path.prototype.moveTo = function(x, y) {
	    this.commands.push({
	        type: 'M',
	        x: x,
	        y: y
	    });
	};

	Path.prototype.lineTo = function(x, y) {
	    this.commands.push({
	        type: 'L',
	        x: x,
	        y: y
	    });
	};

	Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
	    this.commands.push({
	        type: 'C',
	        x1: x1,
	        y1: y1,
	        x2: x2,
	        y2: y2,
	        x: x,
	        y: y
	    });
	};

	Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
	    this.commands.push({
	        type: 'Q',
	        x1: x1,
	        y1: y1,
	        x: x,
	        y: y
	    });
	};

	Path.prototype.close = Path.prototype.closePath = function() {
	    this.commands.push({
	        type: 'Z'
	    });
	};

	// Add the given path or list of commands to the commands of this path.
	Path.prototype.extend = function(pathOrCommands) {
	    if (pathOrCommands.commands) {
	        pathOrCommands = pathOrCommands.commands;
	    }

	    Array.prototype.push.apply(this.commands, pathOrCommands);
	};

	// Draw the path to a 2D context.
	Path.prototype.draw = function(ctx) {
	    ctx.beginPath();
	    for (var i = 0; i < this.commands.length; i += 1) {
	        var cmd = this.commands[i];
	        if (cmd.type === 'M') {
	            ctx.moveTo(cmd.x, cmd.y);
	        } else if (cmd.type === 'L') {
	            ctx.lineTo(cmd.x, cmd.y);
	        } else if (cmd.type === 'C') {
	            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
	        } else if (cmd.type === 'Q') {
	            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
	        } else if (cmd.type === 'Z') {
	            ctx.closePath();
	        }
	    }

	    if (this.fill) {
	        ctx.fillStyle = this.fill;
	        ctx.fill();
	    }

	    if (this.stroke) {
	        ctx.strokeStyle = this.stroke;
	        ctx.lineWidth = this.strokeWidth;
	        ctx.stroke();
	    }
	};

	// Convert the Path to a string of path data instructions
	// See http://www.w3.org/TR/SVG/paths.html#PathData
	// Parameters:
	// - decimalPlaces: The amount of decimal places for floating-point values (default: 2)
	Path.prototype.toPathData = function(decimalPlaces) {
	    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;

	    function floatToString(v) {
	        if (Math.round(v) === v) {
	            return '' + Math.round(v);
	        } else {
	            return v.toFixed(decimalPlaces);
	        }
	    }

	    function packValues() {
	        var s = '';
	        for (var i = 0; i < arguments.length; i += 1) {
	            var v = arguments[i];
	            if (v >= 0 && i > 0) {
	                s += ' ';
	            }

	            s += floatToString(v);
	        }

	        return s;
	    }

	    var d = '';
	    for (var i = 0; i < this.commands.length; i += 1) {
	        var cmd = this.commands[i];
	        if (cmd.type === 'M') {
	            d += 'M' + packValues(cmd.x, cmd.y);
	        } else if (cmd.type === 'L') {
	            d += 'L' + packValues(cmd.x, cmd.y);
	        } else if (cmd.type === 'C') {
	            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
	        } else if (cmd.type === 'Q') {
	            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
	        } else if (cmd.type === 'Z') {
	            d += 'Z';
	        }
	    }

	    return d;
	};

	// Convert the path to a SVG <path> element, as a string.
	// Parameters:
	// - decimalPlaces: The amount of decimal places for floating-point values (default: 2)
	Path.prototype.toSVG = function(decimalPlaces) {
	    var svg = '<path d="';
	    svg += this.toPathData(decimalPlaces);
	    svg += '"';
	    if (this.fill & this.fill !== 'black') {
	        if (this.fill === null) {
	            svg += ' fill="none"';
	        } else {
	            svg += ' fill="' + this.fill + '"';
	        }
	    }

	    if (this.stroke) {
	        svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
	    }

	    svg += '/>';
	    return svg;
	};

	exports.Path = Path;

	},{}],11:[function(_dereq_,module,exports){
	// Table metadata

	'use strict';

	var check = _dereq_('./check');
	var encode = _dereq_('./types').encode;
	var sizeOf = _dereq_('./types').sizeOf;

	function Table(tableName, fields, options) {
	    var i;
	    for (i = 0; i < fields.length; i += 1) {
	        var field = fields[i];
	        this[field.name] = field.value;
	    }

	    this.tableName = tableName;
	    this.fields = fields;
	    if (options) {
	        var optionKeys = Object.keys(options);
	        for (i = 0; i < optionKeys.length; i += 1) {
	            var k = optionKeys[i];
	            var v = options[k];
	            if (this[k] !== undefined) {
	                this[k] = v;
	            }
	        }
	    }
	}

	Table.prototype.sizeOf = function() {
	    var v = 0;
	    for (var i = 0; i < this.fields.length; i += 1) {
	        var field = this.fields[i];
	        var value = this[field.name];
	        if (value === undefined) {
	            value = field.value;
	        }

	        if (typeof value.sizeOf === 'function') {
	            v += value.sizeOf();
	        } else {
	            var sizeOfFunction = sizeOf[field.type];
	            check.assert(typeof sizeOfFunction === 'function', 'Could not find sizeOf function for field' + field.name);
	            v += sizeOfFunction(value);
	        }
	    }

	    return v;
	};

	Table.prototype.encode = function() {
	    return encode.TABLE(this);
	};

	exports.Table = Table;

	},{"./check":2,"./types":26}],12:[function(_dereq_,module,exports){
	// The `CFF` table contains the glyph outlines in PostScript format.
	// https://www.microsoft.com/typography/OTSPEC/cff.htm
	// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/cff.pdf
	// http://download.microsoft.com/download/8/0/1/801a191c-029d-4af3-9642-555f6fe514ee/type2.pdf

	'use strict';

	var encoding = _dereq_('../encoding');
	var glyphset = _dereq_('../glyphset');
	var parse = _dereq_('../parse');
	var path = _dereq_('../path');
	var table = _dereq_('../table');

	// Custom equals function that can also check lists.
	function equals(a, b) {
	    if (a === b) {
	        return true;
	    } else if (Array.isArray(a) && Array.isArray(b)) {
	        if (a.length !== b.length) {
	            return false;
	        }

	        for (var i = 0; i < a.length; i += 1) {
	            if (!equals(a[i], b[i])) {
	                return false;
	            }
	        }

	        return true;
	    } else {
	        return false;
	    }
	}

	// Parse a `CFF` INDEX array.
	// An index array consists of a list of offsets, then a list of objects at those offsets.
	function parseCFFIndex(data, start, conversionFn) {
	    //var i, objectOffset, endOffset;
	    var offsets = [];
	    var objects = [];
	    var count = parse.getCard16(data, start);
	    var i;
	    var objectOffset;
	    var endOffset;
	    if (count !== 0) {
	        var offsetSize = parse.getByte(data, start + 2);
	        objectOffset = start + ((count + 1) * offsetSize) + 2;
	        var pos = start + 3;
	        for (i = 0; i < count + 1; i += 1) {
	            offsets.push(parse.getOffset(data, pos, offsetSize));
	            pos += offsetSize;
	        }

	        // The total size of the index array is 4 header bytes + the value of the last offset.
	        endOffset = objectOffset + offsets[count];
	    } else {
	        endOffset = start + 2;
	    }

	    for (i = 0; i < offsets.length - 1; i += 1) {
	        var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);
	        if (conversionFn) {
	            value = conversionFn(value);
	        }

	        objects.push(value);
	    }

	    return {objects: objects, startOffset: start, endOffset: endOffset};
	}

	// Parse a `CFF` DICT real value.
	function parseFloatOperand(parser) {
	    var s = '';
	    var eof = 15;
	    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
	    while (true) {
	        var b = parser.parseByte();
	        var n1 = b >> 4;
	        var n2 = b & 15;

	        if (n1 === eof) {
	            break;
	        }

	        s += lookup[n1];

	        if (n2 === eof) {
	            break;
	        }

	        s += lookup[n2];
	    }

	    return parseFloat(s);
	}

	// Parse a `CFF` DICT operand.
	function parseOperand(parser, b0) {
	    var b1;
	    var b2;
	    var b3;
	    var b4;
	    if (b0 === 28) {
	        b1 = parser.parseByte();
	        b2 = parser.parseByte();
	        return b1 << 8 | b2;
	    }

	    if (b0 === 29) {
	        b1 = parser.parseByte();
	        b2 = parser.parseByte();
	        b3 = parser.parseByte();
	        b4 = parser.parseByte();
	        return b1 << 24 | b2 << 16 | b3 << 8 | b4;
	    }

	    if (b0 === 30) {
	        return parseFloatOperand(parser);
	    }

	    if (b0 >= 32 && b0 <= 246) {
	        return b0 - 139;
	    }

	    if (b0 >= 247 && b0 <= 250) {
	        b1 = parser.parseByte();
	        return (b0 - 247) * 256 + b1 + 108;
	    }

	    if (b0 >= 251 && b0 <= 254) {
	        b1 = parser.parseByte();
	        return -(b0 - 251) * 256 - b1 - 108;
	    }

	    throw new Error('Invalid b0 ' + b0);
	}

	// Convert the entries returned by `parseDict` to a proper dictionary.
	// If a value is a list of one, it is unpacked.
	function entriesToObject(entries) {
	    var o = {};
	    for (var i = 0; i < entries.length; i += 1) {
	        var key = entries[i][0];
	        var values = entries[i][1];
	        var value;
	        if (values.length === 1) {
	            value = values[0];
	        } else {
	            value = values;
	        }

	        if (o.hasOwnProperty(key)) {
	            throw new Error('Object ' + o + ' already has key ' + key);
	        }

	        o[key] = value;
	    }

	    return o;
	}

	// Parse a `CFF` DICT object.
	// A dictionary contains key-value pairs in a compact tokenized format.
	function parseCFFDict(data, start, size) {
	    start = start !== undefined ? start : 0;
	    var parser = new parse.Parser(data, start);
	    var entries = [];
	    var operands = [];
	    size = size !== undefined ? size : data.length;

	    while (parser.relativeOffset < size) {
	        var op = parser.parseByte();

	        // The first byte for each dict item distinguishes between operator (key) and operand (value).
	        // Values <= 21 are operators.
	        if (op <= 21) {
	            // Two-byte operators have an initial escape byte of 12.
	            if (op === 12) {
	                op = 1200 + parser.parseByte();
	            }

	            entries.push([op, operands]);
	            operands = [];
	        } else {
	            // Since the operands (values) come before the operators (keys), we store all operands in a list
	            // until we encounter an operator.
	            operands.push(parseOperand(parser, op));
	        }
	    }

	    return entriesToObject(entries);
	}

	// Given a String Index (SID), return the value of the string.
	// Strings below index 392 are standard CFF strings and are not encoded in the font.
	function getCFFString(strings, index) {
	    if (index <= 390) {
	        index = encoding.cffStandardStrings[index];
	    } else {
	        index = strings[index - 391];
	    }

	    return index;
	}

	// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
	// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
	function interpretDict(dict, meta, strings) {
	    var newDict = {};

	    // Because we also want to include missing values, we start out from the meta list
	    // and lookup values in the dict.
	    for (var i = 0; i < meta.length; i += 1) {
	        var m = meta[i];
	        var value = dict[m.op];
	        if (value === undefined) {
	            value = m.value !== undefined ? m.value : null;
	        }

	        if (m.type === 'SID') {
	            value = getCFFString(strings, value);
	        }

	        newDict[m.name] = value;
	    }

	    return newDict;
	}

	// Parse the CFF header.
	function parseCFFHeader(data, start) {
	    var header = {};
	    header.formatMajor = parse.getCard8(data, start);
	    header.formatMinor = parse.getCard8(data, start + 1);
	    header.size = parse.getCard8(data, start + 2);
	    header.offsetSize = parse.getCard8(data, start + 3);
	    header.startOffset = start;
	    header.endOffset = start + 4;
	    return header;
	}

	var TOP_DICT_META = [
	    {name: 'version', op: 0, type: 'SID'},
	    {name: 'notice', op: 1, type: 'SID'},
	    {name: 'copyright', op: 1200, type: 'SID'},
	    {name: 'fullName', op: 2, type: 'SID'},
	    {name: 'familyName', op: 3, type: 'SID'},
	    {name: 'weight', op: 4, type: 'SID'},
	    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
	    {name: 'italicAngle', op: 1202, type: 'number', value: 0},
	    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
	    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
	    {name: 'paintType', op: 1205, type: 'number', value: 0},
	    {name: 'charstringType', op: 1206, type: 'number', value: 2},
	    {name: 'fontMatrix', op: 1207, type: ['real', 'real', 'real', 'real', 'real', 'real'], value: [0.001, 0, 0, 0.001, 0, 0]},
	    {name: 'uniqueId', op: 13, type: 'number'},
	    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
	    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
	    {name: 'xuid', op: 14, type: [], value: null},
	    {name: 'charset', op: 15, type: 'offset', value: 0},
	    {name: 'encoding', op: 16, type: 'offset', value: 0},
	    {name: 'charStrings', op: 17, type: 'offset', value: 0},
	    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]}
	];

	var PRIVATE_DICT_META = [
	    {name: 'subrs', op: 19, type: 'offset', value: 0},
	    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
	    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
	];

	// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
	// The top dictionary contains the essential metadata for the font, together with the private dictionary.
	function parseCFFTopDict(data, strings) {
	    var dict = parseCFFDict(data, 0, data.byteLength);
	    return interpretDict(dict, TOP_DICT_META, strings);
	}

	// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
	function parseCFFPrivateDict(data, start, size, strings) {
	    var dict = parseCFFDict(data, start, size);
	    return interpretDict(dict, PRIVATE_DICT_META, strings);
	}

	// Parse the CFF charset table, which contains internal names for all the glyphs.
	// This function will return a list of glyph names.
	// See Adobe TN #5176 chapter 13, "Charsets".
	function parseCFFCharset(data, start, nGlyphs, strings) {
	    var i;
	    var sid;
	    var count;
	    var parser = new parse.Parser(data, start);

	    // The .notdef glyph is not included, so subtract 1.
	    nGlyphs -= 1;
	    var charset = ['.notdef'];

	    var format = parser.parseCard8();
	    if (format === 0) {
	        for (i = 0; i < nGlyphs; i += 1) {
	            sid = parser.parseSID();
	            charset.push(getCFFString(strings, sid));
	        }
	    } else if (format === 1) {
	        while (charset.length <= nGlyphs) {
	            sid = parser.parseSID();
	            count = parser.parseCard8();
	            for (i = 0; i <= count; i += 1) {
	                charset.push(getCFFString(strings, sid));
	                sid += 1;
	            }
	        }
	    } else if (format === 2) {
	        while (charset.length <= nGlyphs) {
	            sid = parser.parseSID();
	            count = parser.parseCard16();
	            for (i = 0; i <= count; i += 1) {
	                charset.push(getCFFString(strings, sid));
	                sid += 1;
	            }
	        }
	    } else {
	        throw new Error('Unknown charset format ' + format);
	    }

	    return charset;
	}

	// Parse the CFF encoding data. Only one encoding can be specified per font.
	// See Adobe TN #5176 chapter 12, "Encodings".
	function parseCFFEncoding(data, start, charset) {
	    var i;
	    var code;
	    var enc = {};
	    var parser = new parse.Parser(data, start);
	    var format = parser.parseCard8();
	    if (format === 0) {
	        var nCodes = parser.parseCard8();
	        for (i = 0; i < nCodes; i += 1) {
	            code = parser.parseCard8();
	            enc[code] = i;
	        }
	    } else if (format === 1) {
	        var nRanges = parser.parseCard8();
	        code = 1;
	        for (i = 0; i < nRanges; i += 1) {
	            var first = parser.parseCard8();
	            var nLeft = parser.parseCard8();
	            for (var j = first; j <= first + nLeft; j += 1) {
	                enc[j] = code;
	                code += 1;
	            }
	        }
	    } else {
	        throw new Error('Unknown encoding format ' + format);
	    }

	    return new encoding.CffEncoding(enc, charset);
	}

	// Take in charstring code and return a Glyph object.
	// The encoding is described in the Type 2 Charstring Format
	// https://www.microsoft.com/typography/OTSPEC/charstr2.htm
	function parseCFFCharstring(font, glyph, code) {
	    var c1x;
	    var c1y;
	    var c2x;
	    var c2y;
	    var p = new path.Path();
	    var stack = [];
	    var nStems = 0;
	    var haveWidth = false;
	    var width = font.defaultWidthX;
	    var open = false;
	    var x = 0;
	    var y = 0;

	    function newContour(x, y) {
	        if (open) {
	            p.closePath();
	        }

	        p.moveTo(x, y);
	        open = true;
	    }

	    function parseStems() {
	        var hasWidthArg;

	        // The number of stem operators on the stack is always even.
	        // If the value is uneven, that means a width is specified.
	        hasWidthArg = stack.length % 2 !== 0;
	        if (hasWidthArg && !haveWidth) {
	            width = stack.shift() + font.nominalWidthX;
	        }

	        nStems += stack.length >> 1;
	        stack.length = 0;
	        haveWidth = true;
	    }

	    function parse(code) {
	        var b1;
	        var b2;
	        var b3;
	        var b4;
	        var codeIndex;
	        var subrCode;
	        var jpx;
	        var jpy;
	        var c3x;
	        var c3y;
	        var c4x;
	        var c4y;

	        var i = 0;
	        while (i < code.length) {
	            var v = code[i];
	            i += 1;
	            switch (v) {
	            case 1: // hstem
	                parseStems();
	                break;
	            case 3: // vstem
	                parseStems();
	                break;
	            case 4: // vmoveto
	                if (stack.length > 1 && !haveWidth) {
	                    width = stack.shift() + font.nominalWidthX;
	                    haveWidth = true;
	                }

	                y += stack.pop();
	                newContour(x, y);
	                break;
	            case 5: // rlineto
	                while (stack.length > 0) {
	                    x += stack.shift();
	                    y += stack.shift();
	                    p.lineTo(x, y);
	                }

	                break;
	            case 6: // hlineto
	                while (stack.length > 0) {
	                    x += stack.shift();
	                    p.lineTo(x, y);
	                    if (stack.length === 0) {
	                        break;
	                    }

	                    y += stack.shift();
	                    p.lineTo(x, y);
	                }

	                break;
	            case 7: // vlineto
	                while (stack.length > 0) {
	                    y += stack.shift();
	                    p.lineTo(x, y);
	                    if (stack.length === 0) {
	                        break;
	                    }

	                    x += stack.shift();
	                    p.lineTo(x, y);
	                }

	                break;
	            case 8: // rrcurveto
	                while (stack.length > 0) {
	                    c1x = x + stack.shift();
	                    c1y = y + stack.shift();
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    x = c2x + stack.shift();
	                    y = c2y + stack.shift();
	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                }

	                break;
	            case 10: // callsubr
	                codeIndex = stack.pop() + font.subrsBias;
	                subrCode = font.subrs[codeIndex];
	                if (subrCode) {
	                    parse(subrCode);
	                }

	                break;
	            case 11: // return
	                return;
	            case 12: // flex operators
	                v = code[i];
	                i += 1;
	                switch (v) {
	                case 35: // flex
	                    // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
	                    c1x = x   + stack.shift();    // dx1
	                    c1y = y   + stack.shift();    // dy1
	                    c2x = c1x + stack.shift();    // dx2
	                    c2y = c1y + stack.shift();    // dy2
	                    jpx = c2x + stack.shift();    // dx3
	                    jpy = c2y + stack.shift();    // dy3
	                    c3x = jpx + stack.shift();    // dx4
	                    c3y = jpy + stack.shift();    // dy4
	                    c4x = c3x + stack.shift();    // dx5
	                    c4y = c3y + stack.shift();    // dy5
	                    x = c4x + stack.shift();      // dx6
	                    y = c4y + stack.shift();      // dy6
	                    stack.shift();                // flex depth
	                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
	                    p.curveTo(c3x, c3y, c4x, c4y, x, y);
	                    break;
	                case 34: // hflex
	                    // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
	                    c1x = x   + stack.shift();    // dx1
	                    c1y = y;                      // dy1
	                    c2x = c1x + stack.shift();    // dx2
	                    c2y = c1y + stack.shift();    // dy2
	                    jpx = c2x + stack.shift();    // dx3
	                    jpy = c2y;                    // dy3
	                    c3x = jpx + stack.shift();    // dx4
	                    c3y = c2y;                    // dy4
	                    c4x = c3x + stack.shift();    // dx5
	                    c4y = y;                      // dy5
	                    x = c4x + stack.shift();      // dx6
	                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
	                    p.curveTo(c3x, c3y, c4x, c4y, x, y);
	                    break;
	                case 36: // hflex1
	                    // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
	                    c1x = x   + stack.shift();    // dx1
	                    c1y = y   + stack.shift();    // dy1
	                    c2x = c1x + stack.shift();    // dx2
	                    c2y = c1y + stack.shift();    // dy2
	                    jpx = c2x + stack.shift();    // dx3
	                    jpy = c2y;                    // dy3
	                    c3x = jpx + stack.shift();    // dx4
	                    c3y = c2y;                    // dy4
	                    c4x = c3x + stack.shift();    // dx5
	                    c4y = c3y + stack.shift();    // dy5
	                    x = c4x + stack.shift();      // dx6
	                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
	                    p.curveTo(c3x, c3y, c4x, c4y, x, y);
	                    break;
	                case 37: // flex1
	                    // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
	                    c1x = x   + stack.shift();    // dx1
	                    c1y = y   + stack.shift();    // dy1
	                    c2x = c1x + stack.shift();    // dx2
	                    c2y = c1y + stack.shift();    // dy2
	                    jpx = c2x + stack.shift();    // dx3
	                    jpy = c2y + stack.shift();    // dy3
	                    c3x = jpx + stack.shift();    // dx4
	                    c3y = jpy + stack.shift();    // dy4
	                    c4x = c3x + stack.shift();    // dx5
	                    c4y = c3y + stack.shift();    // dy5
	                    if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
	                        x = c4x + stack.shift();
	                    } else {
	                        y = c4y + stack.shift();
	                    }

	                    p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
	                    p.curveTo(c3x, c3y, c4x, c4y, x, y);
	                    break;
	                default:
	                    console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
	                    stack.length = 0;
	                }
	                break;
	            case 14: // endchar
	                if (stack.length > 0 && !haveWidth) {
	                    width = stack.shift() + font.nominalWidthX;
	                    haveWidth = true;
	                }

	                if (open) {
	                    p.closePath();
	                    open = false;
	                }

	                break;
	            case 18: // hstemhm
	                parseStems();
	                break;
	            case 19: // hintmask
	            case 20: // cntrmask
	                parseStems();
	                i += (nStems + 7) >> 3;
	                break;
	            case 21: // rmoveto
	                if (stack.length > 2 && !haveWidth) {
	                    width = stack.shift() + font.nominalWidthX;
	                    haveWidth = true;
	                }

	                y += stack.pop();
	                x += stack.pop();
	                newContour(x, y);
	                break;
	            case 22: // hmoveto
	                if (stack.length > 1 && !haveWidth) {
	                    width = stack.shift() + font.nominalWidthX;
	                    haveWidth = true;
	                }

	                x += stack.pop();
	                newContour(x, y);
	                break;
	            case 23: // vstemhm
	                parseStems();
	                break;
	            case 24: // rcurveline
	                while (stack.length > 2) {
	                    c1x = x + stack.shift();
	                    c1y = y + stack.shift();
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    x = c2x + stack.shift();
	                    y = c2y + stack.shift();
	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                }

	                x += stack.shift();
	                y += stack.shift();
	                p.lineTo(x, y);
	                break;
	            case 25: // rlinecurve
	                while (stack.length > 6) {
	                    x += stack.shift();
	                    y += stack.shift();
	                    p.lineTo(x, y);
	                }

	                c1x = x + stack.shift();
	                c1y = y + stack.shift();
	                c2x = c1x + stack.shift();
	                c2y = c1y + stack.shift();
	                x = c2x + stack.shift();
	                y = c2y + stack.shift();
	                p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                break;
	            case 26: // vvcurveto
	                if (stack.length % 2) {
	                    x += stack.shift();
	                }

	                while (stack.length > 0) {
	                    c1x = x;
	                    c1y = y + stack.shift();
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    x = c2x;
	                    y = c2y + stack.shift();
	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                }

	                break;
	            case 27: // hhcurveto
	                if (stack.length % 2) {
	                    y += stack.shift();
	                }

	                while (stack.length > 0) {
	                    c1x = x + stack.shift();
	                    c1y = y;
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    x = c2x + stack.shift();
	                    y = c2y;
	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                }

	                break;
	            case 28: // shortint
	                b1 = code[i];
	                b2 = code[i + 1];
	                stack.push(((b1 << 24) | (b2 << 16)) >> 16);
	                i += 2;
	                break;
	            case 29: // callgsubr
	                codeIndex = stack.pop() + font.gsubrsBias;
	                subrCode = font.gsubrs[codeIndex];
	                if (subrCode) {
	                    parse(subrCode);
	                }

	                break;
	            case 30: // vhcurveto
	                while (stack.length > 0) {
	                    c1x = x;
	                    c1y = y + stack.shift();
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    x = c2x + stack.shift();
	                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                    if (stack.length === 0) {
	                        break;
	                    }

	                    c1x = x + stack.shift();
	                    c1y = y;
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    y = c2y + stack.shift();
	                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                }

	                break;
	            case 31: // hvcurveto
	                while (stack.length > 0) {
	                    c1x = x + stack.shift();
	                    c1y = y;
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    y = c2y + stack.shift();
	                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                    if (stack.length === 0) {
	                        break;
	                    }

	                    c1x = x;
	                    c1y = y + stack.shift();
	                    c2x = c1x + stack.shift();
	                    c2y = c1y + stack.shift();
	                    x = c2x + stack.shift();
	                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
	                }

	                break;
	            default:
	                if (v < 32) {
	                    console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
	                } else if (v < 247) {
	                    stack.push(v - 139);
	                } else if (v < 251) {
	                    b1 = code[i];
	                    i += 1;
	                    stack.push((v - 247) * 256 + b1 + 108);
	                } else if (v < 255) {
	                    b1 = code[i];
	                    i += 1;
	                    stack.push(-(v - 251) * 256 - b1 - 108);
	                } else {
	                    b1 = code[i];
	                    b2 = code[i + 1];
	                    b3 = code[i + 2];
	                    b4 = code[i + 3];
	                    i += 4;
	                    stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
	                }
	            }
	        }
	    }

	    parse(code);

	    glyph.advanceWidth = width;
	    return p;
	}

	// Subroutines are encoded using the negative half of the number space.
	// See type 2 chapter 4.7 "Subroutine operators".
	function calcCFFSubroutineBias(subrs) {
	    var bias;
	    if (subrs.length < 1240) {
	        bias = 107;
	    } else if (subrs.length < 33900) {
	        bias = 1131;
	    } else {
	        bias = 32768;
	    }

	    return bias;
	}

	// Parse the `CFF` table, which contains the glyph outlines in PostScript format.
	function parseCFFTable(data, start, font) {
	    font.tables.cff = {};
	    var header = parseCFFHeader(data, start);
	    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
	    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
	    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
	    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
	    font.gsubrs = globalSubrIndex.objects;
	    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);

	    var topDictData = new DataView(new Uint8Array(topDictIndex.objects[0]).buffer);
	    var topDict = parseCFFTopDict(topDictData, stringIndex.objects);
	    font.tables.cff.topDict = topDict;

	    var privateDictOffset = start + topDict['private'][1];
	    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict['private'][0], stringIndex.objects);
	    font.defaultWidthX = privateDict.defaultWidthX;
	    font.nominalWidthX = privateDict.nominalWidthX;

	    if (privateDict.subrs !== 0) {
	        var subrOffset = privateDictOffset + privateDict.subrs;
	        var subrIndex = parseCFFIndex(data, subrOffset);
	        font.subrs = subrIndex.objects;
	        font.subrsBias = calcCFFSubroutineBias(font.subrs);
	    } else {
	        font.subrs = [];
	        font.subrsBias = 0;
	    }

	    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
	    var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
	    font.nGlyphs = charStringsIndex.objects.length;

	    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
	    if (topDict.encoding === 0) { // Standard encoding
	        font.cffEncoding = new encoding.CffEncoding(encoding.cffStandardEncoding, charset);
	    } else if (topDict.encoding === 1) { // Expert encoding
	        font.cffEncoding = new encoding.CffEncoding(encoding.cffExpertEncoding, charset);
	    } else {
	        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
	    }

	    // Prefer the CMAP encoding to the CFF encoding.
	    font.encoding = font.encoding || font.cffEncoding;

	    font.glyphs = new glyphset.GlyphSet(font);
	    for (var i = 0; i < font.nGlyphs; i += 1) {
	        var charString = charStringsIndex.objects[i];
	        font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
	    }
	}

	// Convert a string to a String ID (SID).
	// The list of strings is modified in place.
	function encodeString(s, strings) {
	    var sid;

	    // Is the string in the CFF standard strings?
	    var i = encoding.cffStandardStrings.indexOf(s);
	    if (i >= 0) {
	        sid = i;
	    }

	    // Is the string already in the string index?
	    i = strings.indexOf(s);
	    if (i >= 0) {
	        sid = i + encoding.cffStandardStrings.length;
	    } else {
	        sid = encoding.cffStandardStrings.length + strings.length;
	        strings.push(s);
	    }

	    return sid;
	}

	function makeHeader() {
	    return new table.Table('Header', [
	        {name: 'major', type: 'Card8', value: 1},
	        {name: 'minor', type: 'Card8', value: 0},
	        {name: 'hdrSize', type: 'Card8', value: 4},
	        {name: 'major', type: 'Card8', value: 1}
	    ]);
	}

	function makeNameIndex(fontNames) {
	    var t = new table.Table('Name INDEX', [
	        {name: 'names', type: 'INDEX', value: []}
	    ]);
	    t.names = [];
	    for (var i = 0; i < fontNames.length; i += 1) {
	        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});
	    }

	    return t;
	}

	// Given a dictionary's metadata, create a DICT structure.
	function makeDict(meta, attrs, strings) {
	    var m = {};
	    for (var i = 0; i < meta.length; i += 1) {
	        var entry = meta[i];
	        var value = attrs[entry.name];
	        if (value !== undefined && !equals(value, entry.value)) {
	            if (entry.type === 'SID') {
	                value = encodeString(value, strings);
	            }

	            m[entry.op] = {name: entry.name, type: entry.type, value: value};
	        }
	    }

	    return m;
	}

	// The Top DICT houses the global font attributes.
	function makeTopDict(attrs, strings) {
	    var t = new table.Table('Top DICT', [
	        {name: 'dict', type: 'DICT', value: {}}
	    ]);
	    t.dict = makeDict(TOP_DICT_META, attrs, strings);
	    return t;
	}

	function makeTopDictIndex(topDict) {
	    var t = new table.Table('Top DICT INDEX', [
	        {name: 'topDicts', type: 'INDEX', value: []}
	    ]);
	    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];
	    return t;
	}

	function makeStringIndex(strings) {
	    var t = new table.Table('String INDEX', [
	        {name: 'strings', type: 'INDEX', value: []}
	    ]);
	    t.strings = [];
	    for (var i = 0; i < strings.length; i += 1) {
	        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});
	    }

	    return t;
	}

	function makeGlobalSubrIndex() {
	    // Currently we don't use subroutines.
	    return new table.Table('Global Subr INDEX', [
	        {name: 'subrs', type: 'INDEX', value: []}
	    ]);
	}

	function makeCharsets(glyphNames, strings) {
	    var t = new table.Table('Charsets', [
	        {name: 'format', type: 'Card8', value: 0}
	    ]);
	    for (var i = 0; i < glyphNames.length; i += 1) {
	        var glyphName = glyphNames[i];
	        var glyphSID = encodeString(glyphName, strings);
	        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});
	    }

	    return t;
	}

	function glyphToOps(glyph) {
	    var ops = [];
	    var path = glyph.path;
	    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});
	    var x = 0;
	    var y = 0;
	    for (var i = 0; i < path.commands.length; i += 1) {
	        var dx;
	        var dy;
	        var cmd = path.commands[i];
	        if (cmd.type === 'Q') {
	            // CFF only supports bÃ©zier curves, so convert the quad to a bÃ©zier.
	            var _13 = 1 / 3;
	            var _23 = 2 / 3;

	            // We're going to create a new command so we don't change the original path.
	            cmd = {
	                type: 'C',
	                x: cmd.x,
	                y: cmd.y,
	                x1: _13 * x + _23 * cmd.x1,
	                y1: _13 * y + _23 * cmd.y1,
	                x2: _13 * cmd.x + _23 * cmd.x1,
	                y2: _13 * cmd.y + _23 * cmd.y1
	            };
	        }

	        if (cmd.type === 'M') {
	            dx = Math.round(cmd.x - x);
	            dy = Math.round(cmd.y - y);
	            ops.push({name: 'dx', type: 'NUMBER', value: dx});
	            ops.push({name: 'dy', type: 'NUMBER', value: dy});
	            ops.push({name: 'rmoveto', type: 'OP', value: 21});
	            x = Math.round(cmd.x);
	            y = Math.round(cmd.y);
	        } else if (cmd.type === 'L') {
	            dx = Math.round(cmd.x - x);
	            dy = Math.round(cmd.y - y);
	            ops.push({name: 'dx', type: 'NUMBER', value: dx});
	            ops.push({name: 'dy', type: 'NUMBER', value: dy});
	            ops.push({name: 'rlineto', type: 'OP', value: 5});
	            x = Math.round(cmd.x);
	            y = Math.round(cmd.y);
	        } else if (cmd.type === 'C') {
	            var dx1 = Math.round(cmd.x1 - x);
	            var dy1 = Math.round(cmd.y1 - y);
	            var dx2 = Math.round(cmd.x2 - cmd.x1);
	            var dy2 = Math.round(cmd.y2 - cmd.y1);
	            dx = Math.round(cmd.x - cmd.x2);
	            dy = Math.round(cmd.y - cmd.y2);
	            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});
	            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});
	            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});
	            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});
	            ops.push({name: 'dx', type: 'NUMBER', value: dx});
	            ops.push({name: 'dy', type: 'NUMBER', value: dy});
	            ops.push({name: 'rrcurveto', type: 'OP', value: 8});
	            x = Math.round(cmd.x);
	            y = Math.round(cmd.y);
	        }

	        // Contours are closed automatically.

	    }

	    ops.push({name: 'endchar', type: 'OP', value: 14});
	    return ops;
	}

	function makeCharStringsIndex(glyphs) {
	    var t = new table.Table('CharStrings INDEX', [
	        {name: 'charStrings', type: 'INDEX', value: []}
	    ]);

	    for (var i = 0; i < glyphs.length; i += 1) {
	        var glyph = glyphs.get(i);
	        var ops = glyphToOps(glyph);
	        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});
	    }

	    return t;
	}

	function makePrivateDict(attrs, strings) {
	    var t = new table.Table('Private DICT', [
	        {name: 'dict', type: 'DICT', value: {}}
	    ]);
	    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
	    return t;
	}

	function makePrivateDictIndex(privateDict) {
	    var t = new table.Table('Private DICT INDEX', [
	        {name: 'privateDicts', type: 'INDEX', value: []}
	    ]);
	    t.privateDicts = [{name: 'privateDict_0', type: 'TABLE', value: privateDict}];
	    return t;
	}

	function makeCFFTable(glyphs, options) {
	    var t = new table.Table('CFF ', [
	        {name: 'header', type: 'TABLE'},
	        {name: 'nameIndex', type: 'TABLE'},
	        {name: 'topDictIndex', type: 'TABLE'},
	        {name: 'stringIndex', type: 'TABLE'},
	        {name: 'globalSubrIndex', type: 'TABLE'},
	        {name: 'charsets', type: 'TABLE'},
	        {name: 'charStringsIndex', type: 'TABLE'},
	        {name: 'privateDictIndex', type: 'TABLE'}
	    ]);

	    var fontScale = 1 / options.unitsPerEm;
	    // We use non-zero values for the offsets so that the DICT encodes them.
	    // This is important because the size of the Top DICT plays a role in offset calculation,
	    // and the size shouldn't change after we've written correct offsets.
	    var attrs = {
	        version: options.version,
	        fullName: options.fullName,
	        familyName: options.familyName,
	        weight: options.weightName,
	        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
	        charset: 999,
	        encoding: 0,
	        charStrings: 999,
	        private: [0, 999]
	    };

	    var privateAttrs = {};

	    var glyphNames = [];
	    var glyph;

	    // Skip first glyph (.notdef)
	    for (var i = 1; i < glyphs.length; i += 1) {
	        glyph = glyphs.get(i);
	        glyphNames.push(glyph.name);
	    }

	    var strings = [];

	    t.header = makeHeader();
	    t.nameIndex = makeNameIndex([options.postScriptName]);
	    var topDict = makeTopDict(attrs, strings);
	    t.topDictIndex = makeTopDictIndex(topDict);
	    t.globalSubrIndex = makeGlobalSubrIndex();
	    t.charsets = makeCharsets(glyphNames, strings);
	    t.charStringsIndex = makeCharStringsIndex(glyphs);
	    var privateDict = makePrivateDict(privateAttrs, strings);
	    t.privateDictIndex = makePrivateDictIndex(privateDict);

	    // Needs to come at the end, to encode all custom strings used in the font.
	    t.stringIndex = makeStringIndex(strings);

	    var startOffset = t.header.sizeOf() +
	        t.nameIndex.sizeOf() +
	        t.topDictIndex.sizeOf() +
	        t.stringIndex.sizeOf() +
	        t.globalSubrIndex.sizeOf();
	    attrs.charset = startOffset;

	    // We use the CFF standard encoding; proper encoding will be handled in cmap.
	    attrs.encoding = 0;
	    attrs.charStrings = attrs.charset + t.charsets.sizeOf();
	    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();

	    // Recreate the Top DICT INDEX with the correct offsets.
	    topDict = makeTopDict(attrs, strings);
	    t.topDictIndex = makeTopDictIndex(topDict);

	    return t;
	}

	exports.parse = parseCFFTable;
	exports.make = makeCFFTable;

	},{"../encoding":4,"../glyphset":7,"../parse":9,"../path":10,"../table":11}],13:[function(_dereq_,module,exports){
	// The `cmap` table stores the mappings from characters to glyphs.
	// https://www.microsoft.com/typography/OTSPEC/cmap.htm

	'use strict';

	var check = _dereq_('../check');
	var parse = _dereq_('../parse');
	var table = _dereq_('../table');

	// Parse the `cmap` table. This table stores the mappings from characters to glyphs.
	// There are many available formats, but we only support the Windows format 4.
	// This function returns a `CmapEncoding` object or null if no supported format could be found.
	function parseCmapTable(data, start) {
	    var i;
	    var cmap = {};
	    cmap.version = parse.getUShort(data, start);
	    check.argument(cmap.version === 0, 'cmap table version should be 0.');

	    // The cmap table can contain many sub-tables, each with their own format.
	    // We're only interested in a "platform 3" table. This is a Windows format.
	    cmap.numTables = parse.getUShort(data, start + 2);
	    var offset = -1;
	    for (i = 0; i < cmap.numTables; i += 1) {
	        var platformId = parse.getUShort(data, start + 4 + (i * 8));
	        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);
	        if (platformId === 3 && (encodingId === 1 || encodingId === 0)) {
	            offset = parse.getULong(data, start + 4 + (i * 8) + 4);
	            break;
	        }
	    }

	    if (offset === -1) {
	        // There is no cmap table in the font that we support, so return null.
	        // This font will be marked as unsupported.
	        return null;
	    }

	    var p = new parse.Parser(data, start + offset);
	    cmap.format = p.parseUShort();
	    check.argument(cmap.format === 4, 'Only format 4 cmap tables are supported.');

	    // Length in bytes of the sub-tables.
	    cmap.length = p.parseUShort();
	    cmap.language = p.parseUShort();

	    // segCount is stored x 2.
	    var segCount;
	    cmap.segCount = segCount = p.parseUShort() >> 1;

	    // Skip searchRange, entrySelector, rangeShift.
	    p.skip('uShort', 3);

	    // The "unrolled" mapping from character codes to glyph indices.
	    cmap.glyphIndexMap = {};

	    var endCountParser = new parse.Parser(data, start + offset + 14);
	    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
	    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
	    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
	    var glyphIndexOffset = start + offset + 16 + segCount * 8;
	    for (i = 0; i < segCount - 1; i += 1) {
	        var glyphIndex;
	        var endCount = endCountParser.parseUShort();
	        var startCount = startCountParser.parseUShort();
	        var idDelta = idDeltaParser.parseShort();
	        var idRangeOffset = idRangeOffsetParser.parseUShort();
	        for (var c = startCount; c <= endCount; c += 1) {
	            if (idRangeOffset !== 0) {
	                // The idRangeOffset is relative to the current position in the idRangeOffset array.
	                // Take the current offset in the idRangeOffset array.
	                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);

	                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
	                glyphIndexOffset += idRangeOffset;

	                // Then add the character index of the current segment, multiplied by 2 for USHORTs.
	                glyphIndexOffset += (c - startCount) * 2;
	                glyphIndex = parse.getUShort(data, glyphIndexOffset);
	                if (glyphIndex !== 0) {
	                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;
	                }
	            } else {
	                glyphIndex = (c + idDelta) & 0xFFFF;
	            }

	            cmap.glyphIndexMap[c] = glyphIndex;
	        }
	    }

	    return cmap;
	}

	function addSegment(t, code, glyphIndex) {
	    t.segments.push({
	        end: code,
	        start: code,
	        delta: -(code - glyphIndex),
	        offset: 0
	    });
	}

	function addTerminatorSegment(t) {
	    t.segments.push({
	        end: 0xFFFF,
	        start: 0xFFFF,
	        delta: 1,
	        offset: 0
	    });
	}

	function makeCmapTable(glyphs) {
	    var i;
	    var t = new table.Table('cmap', [
	        {name: 'version', type: 'USHORT', value: 0},
	        {name: 'numTables', type: 'USHORT', value: 1},
	        {name: 'platformID', type: 'USHORT', value: 3},
	        {name: 'encodingID', type: 'USHORT', value: 1},
	        {name: 'offset', type: 'ULONG', value: 12},
	        {name: 'format', type: 'USHORT', value: 4},
	        {name: 'length', type: 'USHORT', value: 0},
	        {name: 'language', type: 'USHORT', value: 0},
	        {name: 'segCountX2', type: 'USHORT', value: 0},
	        {name: 'searchRange', type: 'USHORT', value: 0},
	        {name: 'entrySelector', type: 'USHORT', value: 0},
	        {name: 'rangeShift', type: 'USHORT', value: 0}
	    ]);

	    t.segments = [];
	    for (i = 0; i < glyphs.length; i += 1) {
	        var glyph = glyphs.get(i);
	        for (var j = 0; j < glyph.unicodes.length; j += 1) {
	            addSegment(t, glyph.unicodes[j], i);
	        }

	        t.segments = t.segments.sort(function(a, b) {
	            return a.start - b.start;
	        });
	    }

	    addTerminatorSegment(t);

	    var segCount;
	    segCount = t.segments.length;
	    t.segCountX2 = segCount * 2;
	    t.searchRange = Math.pow(2, Math.floor(Math.log(segCount) / Math.log(2))) * 2;
	    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
	    t.rangeShift = t.segCountX2 - t.searchRange;

	    // Set up parallel segment arrays.
	    var endCounts = [];
	    var startCounts = [];
	    var idDeltas = [];
	    var idRangeOffsets = [];
	    var glyphIds = [];

	    for (i = 0; i < segCount; i += 1) {
	        var segment = t.segments[i];
	        endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});
	        startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});
	        idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});
	        idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});
	        if (segment.glyphId !== undefined) {
	            glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});
	        }
	    }

	    t.fields = t.fields.concat(endCounts);
	    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});
	    t.fields = t.fields.concat(startCounts);
	    t.fields = t.fields.concat(idDeltas);
	    t.fields = t.fields.concat(idRangeOffsets);
	    t.fields = t.fields.concat(glyphIds);

	    t.length = 14 + // Subtable header
	        endCounts.length * 2 +
	        2 + // reservedPad
	        startCounts.length * 2 +
	        idDeltas.length * 2 +
	        idRangeOffsets.length * 2 +
	        glyphIds.length * 2;

	    return t;
	}

	exports.parse = parseCmapTable;
	exports.make = makeCmapTable;

	},{"../check":2,"../parse":9,"../table":11}],14:[function(_dereq_,module,exports){
	// The `glyf` table describes the glyphs in TrueType outline format.
	// http://www.microsoft.com/typography/otspec/glyf.htm

	'use strict';

	var check = _dereq_('../check');
	var glyphset = _dereq_('../glyphset');
	var parse = _dereq_('../parse');
	var path = _dereq_('../path');

	// Parse the coordinate data for a glyph.
	function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
	    var v;
	    if ((flag & shortVectorBitMask) > 0) {
	        // The coordinate is 1 byte long.
	        v = p.parseByte();
	        // The `same` bit is re-used for short values to signify the sign of the value.
	        if ((flag & sameBitMask) === 0) {
	            v = -v;
	        }

	        v = previousValue + v;
	    } else {
	        //  The coordinate is 2 bytes long.
	        // If the `same` bit is set, the coordinate is the same as the previous coordinate.
	        if ((flag & sameBitMask) > 0) {
	            v = previousValue;
	        } else {
	            // Parse the coordinate as a signed 16-bit delta value.
	            v = previousValue + p.parseShort();
	        }
	    }

	    return v;
	}

	// Parse a TrueType glyph.
	function parseGlyph(glyph, data, start) {
	    var p = new parse.Parser(data, start);
	    glyph.numberOfContours = p.parseShort();
	    glyph.xMin = p.parseShort();
	    glyph.yMin = p.parseShort();
	    glyph.xMax = p.parseShort();
	    glyph.yMax = p.parseShort();
	    var flags;
	    var flag;
	    if (glyph.numberOfContours > 0) {
	        var i;
	        // This glyph is not a composite.
	        var endPointIndices = glyph.endPointIndices = [];
	        for (i = 0; i < glyph.numberOfContours; i += 1) {
	            endPointIndices.push(p.parseUShort());
	        }

	        glyph.instructionLength = p.parseUShort();
	        glyph.instructions = [];
	        for (i = 0; i < glyph.instructionLength; i += 1) {
	            glyph.instructions.push(p.parseByte());
	        }

	        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
	        flags = [];
	        for (i = 0; i < numberOfCoordinates; i += 1) {
	            flag = p.parseByte();
	            flags.push(flag);
	            // If bit 3 is set, we repeat this flag n times, where n is the next byte.
	            if ((flag & 8) > 0) {
	                var repeatCount = p.parseByte();
	                for (var j = 0; j < repeatCount; j += 1) {
	                    flags.push(flag);
	                    i += 1;
	                }
	            }
	        }

	        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');

	        if (endPointIndices.length > 0) {
	            var points = [];
	            var point;
	            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
	            if (numberOfCoordinates > 0) {
	                for (i = 0; i < numberOfCoordinates; i += 1) {
	                    flag = flags[i];
	                    point = {};
	                    point.onCurve = !!(flag & 1);
	                    point.lastPointOfContour = endPointIndices.indexOf(i) >= 0;
	                    points.push(point);
	                }

	                var px = 0;
	                for (i = 0; i < numberOfCoordinates; i += 1) {
	                    flag = flags[i];
	                    point = points[i];
	                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
	                    px = point.x;
	                }

	                var py = 0;
	                for (i = 0; i < numberOfCoordinates; i += 1) {
	                    flag = flags[i];
	                    point = points[i];
	                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
	                    py = point.y;
	                }
	            }

	            glyph.points = points;
	        } else {
	            glyph.points = [];
	        }
	    } else if (glyph.numberOfContours === 0) {
	        glyph.points = [];
	    } else {
	        glyph.isComposite = true;
	        glyph.points = [];
	        glyph.components = [];
	        var moreComponents = true;
	        while (moreComponents) {
	            flags = p.parseUShort();
	            var component = {
	                glyphIndex: p.parseUShort(),
	                xScale: 1,
	                scale01: 0,
	                scale10: 0,
	                yScale: 1,
	                dx: 0,
	                dy: 0
	            };
	            if ((flags & 1) > 0) {
	                // The arguments are words
	                component.dx = p.parseShort();
	                component.dy = p.parseShort();
	            } else {
	                // The arguments are bytes
	                component.dx = p.parseChar();
	                component.dy = p.parseChar();
	            }

	            if ((flags & 8) > 0) {
	                // We have a scale
	                component.xScale = component.yScale = p.parseF2Dot14();
	            } else if ((flags & 64) > 0) {
	                // We have an X / Y scale
	                component.xScale = p.parseF2Dot14();
	                component.yScale = p.parseF2Dot14();
	            } else if ((flags & 128) > 0) {
	                // We have a 2x2 transformation
	                component.xScale = p.parseF2Dot14();
	                component.scale01 = p.parseF2Dot14();
	                component.scale10 = p.parseF2Dot14();
	                component.yScale = p.parseF2Dot14();
	            }

	            glyph.components.push(component);
	            moreComponents = !!(flags & 32);
	        }
	    }
	}

	// Transform an array of points and return a new array.
	function transformPoints(points, transform) {
	    var newPoints = [];
	    for (var i = 0; i < points.length; i += 1) {
	        var pt = points[i];
	        var newPt = {
	            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
	            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
	            onCurve: pt.onCurve,
	            lastPointOfContour: pt.lastPointOfContour
	        };
	        newPoints.push(newPt);
	    }

	    return newPoints;
	}

	function getContours(points) {
	    var contours = [];
	    var currentContour = [];
	    for (var i = 0; i < points.length; i += 1) {
	        var pt = points[i];
	        currentContour.push(pt);
	        if (pt.lastPointOfContour) {
	            contours.push(currentContour);
	            currentContour = [];
	        }
	    }

	    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
	    return contours;
	}

	// Convert the TrueType glyph outline to a Path.
	function getPath(points) {
	    var p = new path.Path();
	    if (!points) {
	        return p;
	    }

	    var contours = getContours(points);
	    for (var i = 0; i < contours.length; i += 1) {
	        var contour = contours[i];
	        var firstPt = contour[0];
	        var lastPt = contour[contour.length - 1];
	        var curvePt;
	        var realFirstPoint;
	        if (firstPt.onCurve) {
	            curvePt = null;
	            // The first point will be consumed by the moveTo command,
	            // so skip it in the loop.
	            realFirstPoint = true;
	        } else {
	            if (lastPt.onCurve) {
	                // If the first point is off-curve and the last point is on-curve,
	                // start at the last point.
	                firstPt = lastPt;
	            } else {
	                // If both first and last points are off-curve, start at their middle.
	                firstPt = { x: (firstPt.x + lastPt.x) / 2, y: (firstPt.y + lastPt.y) / 2 };
	            }

	            curvePt = firstPt;
	            // The first point is synthesized, so don't skip the real first point.
	            realFirstPoint = false;
	        }

	        p.moveTo(firstPt.x, firstPt.y);

	        for (var j = realFirstPoint ? 1 : 0; j < contour.length; j += 1) {
	            var pt = contour[j];
	            var prevPt = j === 0 ? firstPt : contour[j - 1];
	            if (prevPt.onCurve && pt.onCurve) {
	                // This is a straight line.
	                p.lineTo(pt.x, pt.y);
	            } else if (prevPt.onCurve && !pt.onCurve) {
	                curvePt = pt;
	            } else if (!prevPt.onCurve && !pt.onCurve) {
	                var midPt = { x: (prevPt.x + pt.x) / 2, y: (prevPt.y + pt.y) / 2 };
	                p.quadraticCurveTo(prevPt.x, prevPt.y, midPt.x, midPt.y);
	                curvePt = pt;
	            } else if (!prevPt.onCurve && pt.onCurve) {
	                // Previous point off-curve, this point on-curve.
	                p.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
	                curvePt = null;
	            } else {
	                throw new Error('Invalid state.');
	            }
	        }

	        if (firstPt !== lastPt) {
	            // Connect the last and first points
	            if (curvePt) {
	                p.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
	            } else {
	                p.lineTo(firstPt.x, firstPt.y);
	            }
	        }
	    }

	    p.closePath();
	    return p;
	}

	function buildPath(glyphs, glyph) {
	    if (glyph.isComposite) {
	        for (var j = 0; j < glyph.components.length; j += 1) {
	            var component = glyph.components[j];
	            var componentGlyph = glyphs.get(component.glyphIndex);
	            if (componentGlyph.points) {
	                var transformedPoints = transformPoints(componentGlyph.points, component);
	                glyph.points = glyph.points.concat(transformedPoints);
	            }
	        }
	    }

	    return getPath(glyph.points);
	}

	// Parse all the glyphs according to the offsets from the `loca` table.
	function parseGlyfTable(data, start, loca, font) {
	    var glyphs = new glyphset.GlyphSet(font);
	    var i;

	    // The last element of the loca table is invalid.
	    for (i = 0; i < loca.length - 1; i += 1) {
	        var offset = loca[i];
	        var nextOffset = loca[i + 1];
	        if (offset !== nextOffset) {
	            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
	        } else {
	            glyphs.push(i, glyphset.glyphLoader(font, i));
	        }
	    }

	    return glyphs;
	}

	exports.parse = parseGlyfTable;

	},{"../check":2,"../glyphset":7,"../parse":9,"../path":10}],15:[function(_dereq_,module,exports){
	// The `GPOS` table contains kerning pairs, among other things.
	// https://www.microsoft.com/typography/OTSPEC/gpos.htm

	'use strict';

	var check = _dereq_('../check');
	var parse = _dereq_('../parse');

	// Parse ScriptList and FeatureList tables of GPOS, GSUB, GDEF, BASE, JSTF tables.
	// These lists are unused by now, this function is just the basis for a real parsing.
	function parseTaggedListTable(data, start) {
	    var p = new parse.Parser(data, start);
	    var n = p.parseUShort();
	    var list = [];
	    for (var i = 0; i < n; i++) {
	        list[p.parseTag()] = { offset: p.parseUShort() };
	    }

	    return list;
	}

	// Parse a coverage table in a GSUB, GPOS or GDEF table.
	// Format 1 is a simple list of glyph ids,
	// Format 2 is a list of ranges. It is expanded in a list of glyphs, maybe not the best idea.
	function parseCoverageTable(data, start) {
	    var p = new parse.Parser(data, start);
	    var format = p.parseUShort();
	    var count =  p.parseUShort();
	    if (format === 1) {
	        return p.parseUShortList(count);
	    }
	    else if (format === 2) {
	        var coverage = [];
	        for (; count--;) {
	            var begin = p.parseUShort();
	            var end = p.parseUShort();
	            var index = p.parseUShort();
	            for (var i = begin; i <= end; i++) {
	                coverage[index++] = i;
	            }
	        }

	        return coverage;
	    }
	}

	// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
	// Returns a function that gets a class value from a glyph ID.
	function parseClassDefTable(data, start) {
	    var p = new parse.Parser(data, start);
	    var format = p.parseUShort();
	    if (format === 1) {
	        // Format 1 specifies a range of consecutive glyph indices, one class per glyph ID.
	        var startGlyph = p.parseUShort();
	        var glyphCount = p.parseUShort();
	        var classes = p.parseUShortList(glyphCount);
	        return function(glyphID) {
	            return classes[glyphID - startGlyph] || 0;
	        };
	    }
	    else if (format === 2) {
	        // Format 2 defines multiple groups of glyph indices that belong to the same class.
	        var rangeCount = p.parseUShort();
	        var startGlyphs = [];
	        var endGlyphs = [];
	        var classValues = [];
	        for (var i = 0; i < rangeCount; i++) {
	            startGlyphs[i] = p.parseUShort();
	            endGlyphs[i] = p.parseUShort();
	            classValues[i] = p.parseUShort();
	        }

	        return function(glyphID) {
	            var l = 0;
	            var r = startGlyphs.length - 1;
	            while (l < r) {
	                var c = (l + r + 1) >> 1;
	                if (glyphID < startGlyphs[c]) {
	                    r = c - 1;
	                } else {
	                    l = c;
	                }
	            }

	            if (startGlyphs[l] <= glyphID && glyphID <= endGlyphs[l]) {
	                return classValues[l] || 0;
	            }

	            return 0;
	        };
	    }
	}

	// Parse a pair adjustment positioning subtable, format 1 or format 2
	// The subtable is returned in the form of a lookup function.
	function parsePairPosSubTable(data, start) {
	    var p = new parse.Parser(data, start);
	    // This part is common to format 1 and format 2 subtables
	    var format = p.parseUShort();
	    var coverageOffset = p.parseUShort();
	    var coverage = parseCoverageTable(data, start + coverageOffset);
	    // valueFormat 4: XAdvance only, 1: XPlacement only, 0: no ValueRecord for second glyph
	    // Only valueFormat1=4 and valueFormat2=0 is supported.
	    var valueFormat1 = p.parseUShort();
	    var valueFormat2 = p.parseUShort();
	    var value1;
	    var value2;
	    if (valueFormat1 !== 4 || valueFormat2 !== 0) return;
	    var sharedPairSets = {};
	    if (format === 1) {
	        // Pair Positioning Adjustment: Format 1
	        var pairSetCount = p.parseUShort();
	        var pairSet = [];
	        // Array of offsets to PairSet tables-from beginning of PairPos subtable-ordered by Coverage Index
	        var pairSetOffsets = p.parseOffset16List(pairSetCount);
	        for (var firstGlyph = 0; firstGlyph < pairSetCount; firstGlyph++) {
	            var pairSetOffset = pairSetOffsets[firstGlyph];
	            var sharedPairSet = sharedPairSets[pairSetOffset];
	            if (!sharedPairSet) {
	                // Parse a pairset table in a pair adjustment subtable format 1
	                sharedPairSet = {};
	                p.relativeOffset = pairSetOffset;
	                var pairValueCount = p.parseUShort();
	                for (; pairValueCount--;) {
	                    var secondGlyph = p.parseUShort();
	                    if (valueFormat1) value1 = p.parseShort();
	                    if (valueFormat2) value2 = p.parseShort();
	                    // We only support valueFormat1 = 4 and valueFormat2 = 0,
	                    // so value1 is the XAdvance and value2 is empty.
	                    sharedPairSet[secondGlyph] = value1;
	                }
	            }

	            pairSet[coverage[firstGlyph]] = sharedPairSet;
	        }

	        return function(leftGlyph, rightGlyph) {
	            var pairs = pairSet[leftGlyph];
	            if (pairs) return pairs[rightGlyph];
	        };
	    }
	    else if (format === 2) {
	        // Pair Positioning Adjustment: Format 2
	        var classDef1Offset = p.parseUShort();
	        var classDef2Offset = p.parseUShort();
	        var class1Count = p.parseUShort();
	        var class2Count = p.parseUShort();
	        var getClass1 = parseClassDefTable(data, start + classDef1Offset);
	        var getClass2 = parseClassDefTable(data, start + classDef2Offset);

	        // Parse kerning values by class pair.
	        var kerningMatrix = [];
	        for (var i = 0; i < class1Count; i++) {
	            var kerningRow = kerningMatrix[i] = [];
	            for (var j = 0; j < class2Count; j++) {
	                if (valueFormat1) value1 = p.parseShort();
	                if (valueFormat2) value2 = p.parseShort();
	                // We only support valueFormat1 = 4 and valueFormat2 = 0,
	                // so value1 is the XAdvance and value2 is empty.
	                kerningRow[j] = value1;
	            }
	        }

	        // Convert coverage list to a hash
	        var covered = {};
	        for (i = 0; i < coverage.length; i++) covered[coverage[i]] = 1;

	        // Get the kerning value for a specific glyph pair.
	        return function(leftGlyph, rightGlyph) {
	            if (!covered[leftGlyph]) return;
	            var class1 = getClass1(leftGlyph);
	            var class2 = getClass2(rightGlyph);
	            var kerningRow = kerningMatrix[class1];

	            if (kerningRow) {
	                return kerningRow[class2];
	            }
	        };
	    }
	}

	// Parse a LookupTable (present in of GPOS, GSUB, GDEF, BASE, JSTF tables).
	function parseLookupTable(data, start) {
	    var p = new parse.Parser(data, start);
	    var lookupType = p.parseUShort();
	    var lookupFlag = p.parseUShort();
	    var useMarkFilteringSet = lookupFlag & 0x10;
	    var subTableCount = p.parseUShort();
	    var subTableOffsets = p.parseOffset16List(subTableCount);
	    var table = {
	        lookupType: lookupType,
	        lookupFlag: lookupFlag,
	        markFilteringSet: useMarkFilteringSet ? p.parseUShort() : -1
	    };
	    // LookupType 2, Pair adjustment
	    if (lookupType === 2) {
	        var subtables = [];
	        for (var i = 0; i < subTableCount; i++) {
	            subtables.push(parsePairPosSubTable(data, start + subTableOffsets[i]));
	        }
	        // Return a function which finds the kerning values in the subtables.
	        table.getKerningValue = function(leftGlyph, rightGlyph) {
	            for (var i = subtables.length; i--;) {
	                var value = subtables[i](leftGlyph, rightGlyph);
	                if (value !== undefined) return value;
	            }

	            return 0;
	        };
	    }

	    return table;
	}

	// Parse the `GPOS` table which contains, among other things, kerning pairs.
	// https://www.microsoft.com/typography/OTSPEC/gpos.htm
	function parseGposTable(data, start, font) {
	    var p = new parse.Parser(data, start);
	    var tableVersion = p.parseFixed();
	    check.argument(tableVersion === 1, 'Unsupported GPOS table version.');

	    // ScriptList and FeatureList - ignored for now
	    parseTaggedListTable(data, start + p.parseUShort());
	    // 'kern' is the feature we are looking for.
	    parseTaggedListTable(data, start + p.parseUShort());

	    // LookupList
	    var lookupListOffset = p.parseUShort();
	    p.relativeOffset = lookupListOffset;
	    var lookupCount = p.parseUShort();
	    var lookupTableOffsets = p.parseOffset16List(lookupCount);
	    var lookupListAbsoluteOffset = start + lookupListOffset;
	    for (var i = 0; i < lookupCount; i++) {
	        var table = parseLookupTable(data, lookupListAbsoluteOffset + lookupTableOffsets[i]);
	        if (table.lookupType === 2 && !font.getGposKerningValue) font.getGposKerningValue = table.getKerningValue;
	    }
	}

	exports.parse = parseGposTable;

	},{"../check":2,"../parse":9}],16:[function(_dereq_,module,exports){
	// The `head` table contains global information about the font.
	// https://www.microsoft.com/typography/OTSPEC/head.htm

	'use strict';

	var check = _dereq_('../check');
	var parse = _dereq_('../parse');
	var table = _dereq_('../table');

	// Parse the header `head` table
	function parseHeadTable(data, start) {
	    var head = {};
	    var p = new parse.Parser(data, start);
	    head.version = p.parseVersion();
	    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
	    head.checkSumAdjustment = p.parseULong();
	    head.magicNumber = p.parseULong();
	    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
	    head.flags = p.parseUShort();
	    head.unitsPerEm = p.parseUShort();
	    head.created = p.parseLongDateTime();
	    head.modified = p.parseLongDateTime();
	    head.xMin = p.parseShort();
	    head.yMin = p.parseShort();
	    head.xMax = p.parseShort();
	    head.yMax = p.parseShort();
	    head.macStyle = p.parseUShort();
	    head.lowestRecPPEM = p.parseUShort();
	    head.fontDirectionHint = p.parseShort();
	    head.indexToLocFormat = p.parseShort();     // 50
	    head.glyphDataFormat = p.parseShort();
	    return head;
	}

	function makeHeadTable(options) {
	    return new table.Table('head', [
	        {name: 'version', type: 'FIXED', value: 0x00010000},
	        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},
	        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},
	        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},
	        {name: 'flags', type: 'USHORT', value: 0},
	        {name: 'unitsPerEm', type: 'USHORT', value: 1000},
	        {name: 'created', type: 'LONGDATETIME', value: 0},
	        {name: 'modified', type: 'LONGDATETIME', value: 0},
	        {name: 'xMin', type: 'SHORT', value: 0},
	        {name: 'yMin', type: 'SHORT', value: 0},
	        {name: 'xMax', type: 'SHORT', value: 0},
	        {name: 'yMax', type: 'SHORT', value: 0},
	        {name: 'macStyle', type: 'USHORT', value: 0},
	        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},
	        {name: 'fontDirectionHint', type: 'SHORT', value: 2},
	        {name: 'indexToLocFormat', type: 'SHORT', value: 0},
	        {name: 'glyphDataFormat', type: 'SHORT', value: 0}
	    ], options);
	}

	exports.parse = parseHeadTable;
	exports.make = makeHeadTable;

	},{"../check":2,"../parse":9,"../table":11}],17:[function(_dereq_,module,exports){
	// The `hhea` table contains information for horizontal layout.
	// https://www.microsoft.com/typography/OTSPEC/hhea.htm

	'use strict';

	var parse = _dereq_('../parse');
	var table = _dereq_('../table');

	// Parse the horizontal header `hhea` table
	function parseHheaTable(data, start) {
	    var hhea = {};
	    var p = new parse.Parser(data, start);
	    hhea.version = p.parseVersion();
	    hhea.ascender = p.parseShort();
	    hhea.descender = p.parseShort();
	    hhea.lineGap = p.parseShort();
	    hhea.advanceWidthMax = p.parseUShort();
	    hhea.minLeftSideBearing = p.parseShort();
	    hhea.minRightSideBearing = p.parseShort();
	    hhea.xMaxExtent = p.parseShort();
	    hhea.caretSlopeRise = p.parseShort();
	    hhea.caretSlopeRun = p.parseShort();
	    hhea.caretOffset = p.parseShort();
	    p.relativeOffset += 8;
	    hhea.metricDataFormat = p.parseShort();
	    hhea.numberOfHMetrics = p.parseUShort();
	    return hhea;
	}

	function makeHheaTable(options) {
	    return new table.Table('hhea', [
	        {name: 'version', type: 'FIXED', value: 0x00010000},
	        {name: 'ascender', type: 'FWORD', value: 0},
	        {name: 'descender', type: 'FWORD', value: 0},
	        {name: 'lineGap', type: 'FWORD', value: 0},
	        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},
	        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},
	        {name: 'minRightSideBearing', type: 'FWORD', value: 0},
	        {name: 'xMaxExtent', type: 'FWORD', value: 0},
	        {name: 'caretSlopeRise', type: 'SHORT', value: 1},
	        {name: 'caretSlopeRun', type: 'SHORT', value: 0},
	        {name: 'caretOffset', type: 'SHORT', value: 0},
	        {name: 'reserved1', type: 'SHORT', value: 0},
	        {name: 'reserved2', type: 'SHORT', value: 0},
	        {name: 'reserved3', type: 'SHORT', value: 0},
	        {name: 'reserved4', type: 'SHORT', value: 0},
	        {name: 'metricDataFormat', type: 'SHORT', value: 0},
	        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}
	    ], options);
	}

	exports.parse = parseHheaTable;
	exports.make = makeHheaTable;

	},{"../parse":9,"../table":11}],18:[function(_dereq_,module,exports){
	// The `hmtx` table contains the horizontal metrics for all glyphs.
	// https://www.microsoft.com/typography/OTSPEC/hmtx.htm

	'use strict';

	var parse = _dereq_('../parse');
	var table = _dereq_('../table');

	// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
	// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
	function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
	    var advanceWidth;
	    var leftSideBearing;
	    var p = new parse.Parser(data, start);
	    for (var i = 0; i < numGlyphs; i += 1) {
	        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
	        if (i < numMetrics) {
	            advanceWidth = p.parseUShort();
	            leftSideBearing = p.parseShort();
	        }

	        var glyph = glyphs.get(i);
	        glyph.advanceWidth = advanceWidth;
	        glyph.leftSideBearing = leftSideBearing;
	    }
	}

	function makeHmtxTable(glyphs) {
	    var t = new table.Table('hmtx', []);
	    for (var i = 0; i < glyphs.length; i += 1) {
	        var glyph = glyphs.get(i);
	        var advanceWidth = glyph.advanceWidth || 0;
	        var leftSideBearing = glyph.leftSideBearing || 0;
	        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});
	        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});
	    }

	    return t;
	}

	exports.parse = parseHmtxTable;
	exports.make = makeHmtxTable;

	},{"../parse":9,"../table":11}],19:[function(_dereq_,module,exports){
	// The `kern` table contains kerning pairs.
	// Note that some fonts use the GPOS OpenType layout table to specify kerning.
	// https://www.microsoft.com/typography/OTSPEC/kern.htm

	'use strict';

	var check = _dereq_('../check');
	var parse = _dereq_('../parse');

	// Parse the `kern` table which contains kerning pairs.
	function parseKernTable(data, start) {
	    var pairs = {};
	    var p = new parse.Parser(data, start);
	    var tableVersion = p.parseUShort();
	    check.argument(tableVersion === 0, 'Unsupported kern table version.');
	    // Skip nTables.
	    p.skip('uShort', 1);
	    var subTableVersion = p.parseUShort();
	    check.argument(subTableVersion === 0, 'Unsupported kern sub-table version.');
	    // Skip subTableLength, subTableCoverage
	    p.skip('uShort', 2);
	    var nPairs = p.parseUShort();
	    // Skip searchRange, entrySelector, rangeShift.
	    p.skip('uShort', 3);
	    for (var i = 0; i < nPairs; i += 1) {
	        var leftIndex = p.parseUShort();
	        var rightIndex = p.parseUShort();
	        var value = p.parseShort();
	        pairs[leftIndex + ',' + rightIndex] = value;
	    }

	    return pairs;
	}

	exports.parse = parseKernTable;

	},{"../check":2,"../parse":9}],20:[function(_dereq_,module,exports){
	// The `loca` table stores the offsets to the locations of the glyphs in the font.
	// https://www.microsoft.com/typography/OTSPEC/loca.htm

	'use strict';

	var parse = _dereq_('../parse');

	// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
	// relative to the beginning of the glyphData table.
	// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
	// The loca table has two versions: a short version where offsets are stored as uShorts, and a long
	// version where offsets are stored as uLongs. The `head` table specifies which version to use
	// (under indexToLocFormat).
	function parseLocaTable(data, start, numGlyphs, shortVersion) {
	    var p = new parse.Parser(data, start);
	    var parseFn = shortVersion ? p.parseUShort : p.parseULong;
	    // There is an extra entry after the last index element to compute the length of the last glyph.
	    // That's why we use numGlyphs + 1.
	    var glyphOffsets = [];
	    for (var i = 0; i < numGlyphs + 1; i += 1) {
	        var glyphOffset = parseFn.call(p);
	        if (shortVersion) {
	            // The short table version stores the actual offset divided by 2.
	            glyphOffset *= 2;
	        }

	        glyphOffsets.push(glyphOffset);
	    }

	    return glyphOffsets;
	}

	exports.parse = parseLocaTable;

	},{"../parse":9}],21:[function(_dereq_,module,exports){
	// The `maxp` table establishes the memory requirements for the font.
	// We need it just to get the number of glyphs in the font.
	// https://www.microsoft.com/typography/OTSPEC/maxp.htm

	'use strict';

	var parse = _dereq_('../parse');
	var table = _dereq_('../table');

	// Parse the maximum profile `maxp` table.
	function parseMaxpTable(data, start) {
	    var maxp = {};
	    var p = new parse.Parser(data, start);
	    maxp.version = p.parseVersion();
	    maxp.numGlyphs = p.parseUShort();
	    if (maxp.version === 1.0) {
	        maxp.maxPoints = p.parseUShort();
	        maxp.maxContours = p.parseUShort();
	        maxp.maxCompositePoints = p.parseUShort();
	        maxp.maxCompositeContours = p.parseUShort();
	        maxp.maxZones = p.parseUShort();
	        maxp.maxTwilightPoints = p.parseUShort();
	        maxp.maxStorage = p.parseUShort();
	        maxp.maxFunctionDefs = p.parseUShort();
	        maxp.maxInstructionDefs = p.parseUShort();
	        maxp.maxStackElements = p.parseUShort();
	        maxp.maxSizeOfInstructions = p.parseUShort();
	        maxp.maxComponentElements = p.parseUShort();
	        maxp.maxComponentDepth = p.parseUShort();
	    }

	    return maxp;
	}

	function makeMaxpTable(numGlyphs) {
	    return new table.Table('maxp', [
	        {name: 'version', type: 'FIXED', value: 0x00005000},
	        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}
	    ]);
	}

	exports.parse = parseMaxpTable;
	exports.make = makeMaxpTable;

	},{"../parse":9,"../table":11}],22:[function(_dereq_,module,exports){
	// The `name` naming table.
	// https://www.microsoft.com/typography/OTSPEC/name.htm

	'use strict';

	var encode = _dereq_('../types').encode;
	var parse = _dereq_('../parse');
	var table = _dereq_('../table');

	// NameIDs for the name table.
	var nameTableNames = [
	    'copyright',              // 0
	    'fontFamily',             // 1
	    'fontSubfamily',          // 2
	    'uniqueID',               // 3
	    'fullName',               // 4
	    'version',                // 5
	    'postScriptName',         // 6
	    'trademark',              // 7
	    'manufacturer',           // 8
	    'designer',               // 9
	    'description',            // 10
	    'manufacturerURL',        // 11
	    'designerURL',            // 12
	    'licence',                // 13
	    'licenceURL',             // 14
	    'reserved',               // 15
	    'preferredFamily',        // 16
	    'preferredSubfamily',     // 17
	    'compatibleFullName',     // 18
	    'sampleText',             // 19
	    'postScriptFindFontName', // 20
	    'wwsFamily',              // 21
	    'wwsSubfamily'            // 22
	];

	// Parse the naming `name` table
	// Only Windows Unicode English names are supported.
	// Format 1 additional fields are not supported
	function parseNameTable(data, start) {
	    var name = {};
	    var p = new parse.Parser(data, start);
	    name.format = p.parseUShort();
	    var count = p.parseUShort();
	    var stringOffset = p.offset + p.parseUShort();
	    var unknownCount = 0;
	    for (var i = 0; i < count; i++) {
	        var platformID = p.parseUShort();
	        var encodingID = p.parseUShort();
	        var languageID = p.parseUShort();
	        var nameID = p.parseUShort();
	        var property = nameTableNames[nameID];
	        var byteLength = p.parseUShort();
	        var offset = p.parseUShort();
	        // platformID - encodingID - languageID standard combinations :
	        // 1 - 0 - 0 : Macintosh, Roman, English
	        // 3 - 1 - 0x409 : Windows, Unicode BMP (UCS-2), en-US
	        if (platformID === 3 && encodingID === 1 && languageID === 0x409) {
	            var codePoints = [];
	            var length = byteLength / 2;
	            for (var j = 0; j < length; j++, offset += 2) {
	                codePoints[j] = parse.getShort(data, stringOffset + offset);
	            }

	            var str = String.fromCharCode.apply(null, codePoints);
	            if (property) {
	                name[property] = str;
	            }
	            else {
	                unknownCount++;
	                name['unknown' + unknownCount] = str;
	            }
	        }

	    }

	    if (name.format === 1) {
	        name.langTagCount = p.parseUShort();
	    }

	    return name;
	}

	function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
	    return new table.Table('NameRecord', [
	        {name: 'platformID', type: 'USHORT', value: platformID},
	        {name: 'encodingID', type: 'USHORT', value: encodingID},
	        {name: 'languageID', type: 'USHORT', value: languageID},
	        {name: 'nameID', type: 'USHORT', value: nameID},
	        {name: 'length', type: 'USHORT', value: length},
	        {name: 'offset', type: 'USHORT', value: offset}
	    ]);
	}

	function addMacintoshNameRecord(t, recordID, s, offset) {
	    // Macintosh, Roman, English
	    var stringBytes = encode.STRING(s);
	    t.records.push(makeNameRecord(1, 0, 0, recordID, stringBytes.length, offset));
	    t.strings.push(stringBytes);
	    offset += stringBytes.length;
	    return offset;
	}

	function addWindowsNameRecord(t, recordID, s, offset) {
	    // Windows, Unicode BMP (UCS-2), US English
	    var utf16Bytes = encode.UTF16(s);
	    t.records.push(makeNameRecord(3, 1, 0x0409, recordID, utf16Bytes.length, offset));
	    t.strings.push(utf16Bytes);
	    offset += utf16Bytes.length;
	    return offset;
	}

	function makeNameTable(options) {
	    var t = new table.Table('name', [
	        {name: 'format', type: 'USHORT', value: 0},
	        {name: 'count', type: 'USHORT', value: 0},
	        {name: 'stringOffset', type: 'USHORT', value: 0}
	    ]);
	    t.records = [];
	    t.strings = [];
	    var offset = 0;
	    var i;
	    var s;
	    // Add Macintosh records first
	    for (i = 0; i < nameTableNames.length; i += 1) {
	        if (options[nameTableNames[i]] !== undefined) {
	            s = options[nameTableNames[i]];
	            offset = addMacintoshNameRecord(t, i, s, offset);
	        }
	    }
	    // Then add Windows records
	    for (i = 0; i < nameTableNames.length; i += 1) {
	        if (options[nameTableNames[i]] !== undefined) {
	            s = options[nameTableNames[i]];
	            offset = addWindowsNameRecord(t, i, s, offset);
	        }
	    }

	    t.count = t.records.length;
	    t.stringOffset = 6 + t.count * 12;
	    for (i = 0; i < t.records.length; i += 1) {
	        t.fields.push({name: 'record_' + i, type: 'TABLE', value: t.records[i]});
	    }

	    for (i = 0; i < t.strings.length; i += 1) {
	        t.fields.push({name: 'string_' + i, type: 'LITERAL', value: t.strings[i]});
	    }

	    return t;
	}

	exports.parse = parseNameTable;
	exports.make = makeNameTable;

	},{"../parse":9,"../table":11,"../types":26}],23:[function(_dereq_,module,exports){
	// The `OS/2` table contains metrics required in OpenType fonts.
	// https://www.microsoft.com/typography/OTSPEC/os2.htm

	'use strict';

	var parse = _dereq_('../parse');
	var table = _dereq_('../table');

	var unicodeRanges = [
	    {begin: 0x0000, end: 0x007F}, // Basic Latin
	    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement
	    {begin: 0x0100, end: 0x017F}, // Latin Extended-A
	    {begin: 0x0180, end: 0x024F}, // Latin Extended-B
	    {begin: 0x0250, end: 0x02AF}, // IPA Extensions
	    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters
	    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks
	    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic
	    {begin: 0x2C80, end: 0x2CFF}, // Coptic
	    {begin: 0x0400, end: 0x04FF}, // Cyrillic
	    {begin: 0x0530, end: 0x058F}, // Armenian
	    {begin: 0x0590, end: 0x05FF}, // Hebrew
	    {begin: 0xA500, end: 0xA63F}, // Vai
	    {begin: 0x0600, end: 0x06FF}, // Arabic
	    {begin: 0x07C0, end: 0x07FF}, // NKo
	    {begin: 0x0900, end: 0x097F}, // Devanagari
	    {begin: 0x0980, end: 0x09FF}, // Bengali
	    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi
	    {begin: 0x0A80, end: 0x0AFF}, // Gujarati
	    {begin: 0x0B00, end: 0x0B7F}, // Oriya
	    {begin: 0x0B80, end: 0x0BFF}, // Tamil
	    {begin: 0x0C00, end: 0x0C7F}, // Telugu
	    {begin: 0x0C80, end: 0x0CFF}, // Kannada
	    {begin: 0x0D00, end: 0x0D7F}, // Malayalam
	    {begin: 0x0E00, end: 0x0E7F}, // Thai
	    {begin: 0x0E80, end: 0x0EFF}, // Lao
	    {begin: 0x10A0, end: 0x10FF}, // Georgian
	    {begin: 0x1B00, end: 0x1B7F}, // Balinese
	    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo
	    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional
	    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended
	    {begin: 0x2000, end: 0x206F}, // General Punctuation
	    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts
	    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol
	    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols
	    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols
	    {begin: 0x2150, end: 0x218F}, // Number Forms
	    {begin: 0x2190, end: 0x21FF}, // Arrows
	    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators
	    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical
	    {begin: 0x2400, end: 0x243F}, // Control Pictures
	    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition
	    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics
	    {begin: 0x2500, end: 0x257F}, // Box Drawing
	    {begin: 0x2580, end: 0x259F}, // Block Elements
	    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes
	    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols
	    {begin: 0x2700, end: 0x27BF}, // Dingbats
	    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation
	    {begin: 0x3040, end: 0x309F}, // Hiragana
	    {begin: 0x30A0, end: 0x30FF}, // Katakana
	    {begin: 0x3100, end: 0x312F}, // Bopomofo
	    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo
	    {begin: 0xA840, end: 0xA87F}, // Phags-pa
	    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months
	    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility
	    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables
	    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *
	    {begin: 0x10900, end: 0x1091F}, // Phoenicia
	    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs
	    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)
	    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes
	    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms
	    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A
	    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks
	    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms
	    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants
	    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B
	    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms
	    {begin: 0xFFF0, end: 0xFFFF}, // Specials
	    {begin: 0x0F00, end: 0x0FFF}, // Tibetan
	    {begin: 0x0700, end: 0x074F}, // Syriac
	    {begin: 0x0780, end: 0x07BF}, // Thaana
	    {begin: 0x0D80, end: 0x0DFF}, // Sinhala
	    {begin: 0x1000, end: 0x109F}, // Myanmar
	    {begin: 0x1200, end: 0x137F}, // Ethiopic
	    {begin: 0x13A0, end: 0x13FF}, // Cherokee
	    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics
	    {begin: 0x1680, end: 0x169F}, // Ogham
	    {begin: 0x16A0, end: 0x16FF}, // Runic
	    {begin: 0x1780, end: 0x17FF}, // Khmer
	    {begin: 0x1800, end: 0x18AF}, // Mongolian
	    {begin: 0x2800, end: 0x28FF}, // Braille Patterns
	    {begin: 0xA000, end: 0xA48F}, // Yi Syllables
	    {begin: 0x1700, end: 0x171F}, // Tagalog
	    {begin: 0x10300, end: 0x1032F}, // Old Italic
	    {begin: 0x10330, end: 0x1034F}, // Gothic
	    {begin: 0x10400, end: 0x1044F}, // Deseret
	    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols
	    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols
	    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)
	    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors
	    {begin: 0xE0000, end: 0xE007F}, // Tags
	    {begin: 0x1900, end: 0x194F}, // Limbu
	    {begin: 0x1950, end: 0x197F}, // Tai Le
	    {begin: 0x1980, end: 0x19DF}, // New Tai Lue
	    {begin: 0x1A00, end: 0x1A1F}, // Buginese
	    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic
	    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh
	    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols
	    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri
	    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary
	    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers
	    {begin: 0x10380, end: 0x1039F}, // Ugaritic
	    {begin: 0x103A0, end: 0x103DF}, // Old Persian
	    {begin: 0x10450, end: 0x1047F}, // Shavian
	    {begin: 0x10480, end: 0x104AF}, // Osmanya
	    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary
	    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi
	    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols
	    {begin: 0x12000, end: 0x123FF}, // Cuneiform
	    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals
	    {begin: 0x1B80, end: 0x1BBF}, // Sundanese
	    {begin: 0x1C00, end: 0x1C4F}, // Lepcha
	    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki
	    {begin: 0xA880, end: 0xA8DF}, // Saurashtra
	    {begin: 0xA900, end: 0xA92F}, // Kayah Li
	    {begin: 0xA930, end: 0xA95F}, // Rejang
	    {begin: 0xAA00, end: 0xAA5F}, // Cham
	    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols
	    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc
	    {begin: 0x102A0, end: 0x102DF}, // Carian
	    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles
	];

	function getUnicodeRange(unicode) {
	    for (var i = 0; i < unicodeRanges.length; i += 1) {
	        var range = unicodeRanges[i];
	        if (unicode >= range.begin && unicode < range.end) {
	            return i;
	        }
	    }

	    return -1;
	}

	// Parse the OS/2 and Windows metrics `OS/2` table
	function parseOS2Table(data, start) {
	    var os2 = {};
	    var p = new parse.Parser(data, start);
	    os2.version = p.parseUShort();
	    os2.xAvgCharWidth = p.parseShort();
	    os2.usWeightClass = p.parseUShort();
	    os2.usWidthClass = p.parseUShort();
	    os2.fsType = p.parseUShort();
	    os2.ySubscriptXSize = p.parseShort();
	    os2.ySubscriptYSize = p.parseShort();
	    os2.ySubscriptXOffset = p.parseShort();
	    os2.ySubscriptYOffset = p.parseShort();
	    os2.ySuperscriptXSize = p.parseShort();
	    os2.ySuperscriptYSize = p.parseShort();
	    os2.ySuperscriptXOffset = p.parseShort();
	    os2.ySuperscriptYOffset = p.parseShort();
	    os2.yStrikeoutSize = p.parseShort();
	    os2.yStrikeoutPosition = p.parseShort();
	    os2.sFamilyClass = p.parseShort();
	    os2.panose = [];
	    for (var i = 0; i < 10; i++) {
	        os2.panose[i] = p.parseByte();
	    }

	    os2.ulUnicodeRange1 = p.parseULong();
	    os2.ulUnicodeRange2 = p.parseULong();
	    os2.ulUnicodeRange3 = p.parseULong();
	    os2.ulUnicodeRange4 = p.parseULong();
	    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
	    os2.fsSelection = p.parseUShort();
	    os2.usFirstCharIndex = p.parseUShort();
	    os2.usLastCharIndex = p.parseUShort();
	    os2.sTypoAscender = p.parseShort();
	    os2.sTypoDescender = p.parseShort();
	    os2.sTypoLineGap = p.parseShort();
	    os2.usWinAscent = p.parseUShort();
	    os2.usWinDescent = p.parseUShort();
	    if (os2.version >= 1) {
	        os2.ulCodePageRange1 = p.parseULong();
	        os2.ulCodePageRange2 = p.parseULong();
	    }

	    if (os2.version >= 2) {
	        os2.sxHeight = p.parseShort();
	        os2.sCapHeight = p.parseShort();
	        os2.usDefaultChar = p.parseUShort();
	        os2.usBreakChar = p.parseUShort();
	        os2.usMaxContent = p.parseUShort();
	    }

	    return os2;
	}

	function makeOS2Table(options) {
	    return new table.Table('OS/2', [
	        {name: 'version', type: 'USHORT', value: 0x0003},
	        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},
	        {name: 'usWeightClass', type: 'USHORT', value: 0},
	        {name: 'usWidthClass', type: 'USHORT', value: 0},
	        {name: 'fsType', type: 'USHORT', value: 0},
	        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},
	        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},
	        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},
	        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},
	        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},
	        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},
	        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},
	        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},
	        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},
	        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},
	        {name: 'sFamilyClass', type: 'SHORT', value: 0},
	        {name: 'bFamilyType', type: 'BYTE', value: 0},
	        {name: 'bSerifStyle', type: 'BYTE', value: 0},
	        {name: 'bWeight', type: 'BYTE', value: 0},
	        {name: 'bProportion', type: 'BYTE', value: 0},
	        {name: 'bContrast', type: 'BYTE', value: 0},
	        {name: 'bStrokeVariation', type: 'BYTE', value: 0},
	        {name: 'bArmStyle', type: 'BYTE', value: 0},
	        {name: 'bLetterform', type: 'BYTE', value: 0},
	        {name: 'bMidline', type: 'BYTE', value: 0},
	        {name: 'bXHeight', type: 'BYTE', value: 0},
	        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},
	        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},
	        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},
	        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},
	        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},
	        {name: 'fsSelection', type: 'USHORT', value: 0},
	        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},
	        {name: 'usLastCharIndex', type: 'USHORT', value: 0},
	        {name: 'sTypoAscender', type: 'SHORT', value: 0},
	        {name: 'sTypoDescender', type: 'SHORT', value: 0},
	        {name: 'sTypoLineGap', type: 'SHORT', value: 0},
	        {name: 'usWinAscent', type: 'USHORT', value: 0},
	        {name: 'usWinDescent', type: 'USHORT', value: 0},
	        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},
	        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},
	        {name: 'sxHeight', type: 'SHORT', value: 0},
	        {name: 'sCapHeight', type: 'SHORT', value: 0},
	        {name: 'usDefaultChar', type: 'USHORT', value: 0},
	        {name: 'usBreakChar', type: 'USHORT', value: 0},
	        {name: 'usMaxContext', type: 'USHORT', value: 0}
	    ], options);
	}

	exports.unicodeRanges = unicodeRanges;
	exports.getUnicodeRange = getUnicodeRange;
	exports.parse = parseOS2Table;
	exports.make = makeOS2Table;

	},{"../parse":9,"../table":11}],24:[function(_dereq_,module,exports){
	// The `post` table stores additional PostScript information, such as glyph names.
	// https://www.microsoft.com/typography/OTSPEC/post.htm

	'use strict';

	var encoding = _dereq_('../encoding');
	var parse = _dereq_('../parse');
	var table = _dereq_('../table');

	// Parse the PostScript `post` table
	function parsePostTable(data, start) {
	    var post = {};
	    var p = new parse.Parser(data, start);
	    var i;
	    post.version = p.parseVersion();
	    post.italicAngle = p.parseFixed();
	    post.underlinePosition = p.parseShort();
	    post.underlineThickness = p.parseShort();
	    post.isFixedPitch = p.parseULong();
	    post.minMemType42 = p.parseULong();
	    post.maxMemType42 = p.parseULong();
	    post.minMemType1 = p.parseULong();
	    post.maxMemType1 = p.parseULong();
	    switch (post.version) {
	    case 1:
	        post.names = encoding.standardNames.slice();
	        break;
	    case 2:
	        post.numberOfGlyphs = p.parseUShort();
	        post.glyphNameIndex = new Array(post.numberOfGlyphs);
	        for (i = 0; i < post.numberOfGlyphs; i++) {
	            post.glyphNameIndex[i] = p.parseUShort();
	        }

	        post.names = [];
	        for (i = 0; i < post.numberOfGlyphs; i++) {
	            if (post.glyphNameIndex[i] >= encoding.standardNames.length) {
	                var nameLength = p.parseChar();
	                post.names.push(p.parseString(nameLength));
	            }
	        }

	        break;
	    case 2.5:
	        post.numberOfGlyphs = p.parseUShort();
	        post.offset = new Array(post.numberOfGlyphs);
	        for (i = 0; i < post.numberOfGlyphs; i++) {
	            post.offset[i] = p.parseChar();
	        }

	        break;
	    }
	    return post;
	}

	function makePostTable() {
	    return new table.Table('post', [
	        {name: 'version', type: 'FIXED', value: 0x00030000},
	        {name: 'italicAngle', type: 'FIXED', value: 0},
	        {name: 'underlinePosition', type: 'FWORD', value: 0},
	        {name: 'underlineThickness', type: 'FWORD', value: 0},
	        {name: 'isFixedPitch', type: 'ULONG', value: 0},
	        {name: 'minMemType42', type: 'ULONG', value: 0},
	        {name: 'maxMemType42', type: 'ULONG', value: 0},
	        {name: 'minMemType1', type: 'ULONG', value: 0},
	        {name: 'maxMemType1', type: 'ULONG', value: 0}
	    ]);
	}

	exports.parse = parsePostTable;
	exports.make = makePostTable;

	},{"../encoding":4,"../parse":9,"../table":11}],25:[function(_dereq_,module,exports){
	// The `sfnt` wrapper provides organization for the tables in the font.
	// It is the top-level data structure in a font.
	// https://www.microsoft.com/typography/OTSPEC/otff.htm
	// Recommendations for creating OpenType Fonts:
	// http://www.microsoft.com/typography/otspec140/recom.htm

	'use strict';

	var check = _dereq_('../check');
	var table = _dereq_('../table');

	var cmap = _dereq_('./cmap');
	var cff = _dereq_('./cff');
	var head = _dereq_('./head');
	var hhea = _dereq_('./hhea');
	var hmtx = _dereq_('./hmtx');
	var maxp = _dereq_('./maxp');
	var _name = _dereq_('./name');
	var os2 = _dereq_('./os2');
	var post = _dereq_('./post');

	function log2(v) {
	    return Math.log(v) / Math.log(2) | 0;
	}

	function computeCheckSum(bytes) {
	    while (bytes.length % 4 !== 0) {
	        bytes.push(0);
	    }

	    var sum = 0;
	    for (var i = 0; i < bytes.length; i += 4) {
	        sum += (bytes[i] << 24) +
	            (bytes[i + 1] << 16) +
	            (bytes[i + 2] << 8) +
	            (bytes[i + 3]);
	    }

	    sum %= Math.pow(2, 32);
	    return sum;
	}

	function makeTableRecord(tag, checkSum, offset, length) {
	    return new table.Table('Table Record', [
	        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},
	        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},
	        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},
	        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}
	    ]);
	}

	function makeSfntTable(tables) {
	    var sfnt = new table.Table('sfnt', [
	        {name: 'version', type: 'TAG', value: 'OTTO'},
	        {name: 'numTables', type: 'USHORT', value: 0},
	        {name: 'searchRange', type: 'USHORT', value: 0},
	        {name: 'entrySelector', type: 'USHORT', value: 0},
	        {name: 'rangeShift', type: 'USHORT', value: 0}
	    ]);
	    sfnt.tables = tables;
	    sfnt.numTables = tables.length;
	    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));
	    sfnt.searchRange = 16 * highestPowerOf2;
	    sfnt.entrySelector = log2(highestPowerOf2);
	    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;

	    var recordFields = [];
	    var tableFields = [];

	    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);
	    while (offset % 4 !== 0) {
	        offset += 1;
	        tableFields.push({name: 'padding', type: 'BYTE', value: 0});
	    }

	    for (var i = 0; i < tables.length; i += 1) {
	        var t = tables[i];
	        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
	        var tableLength = t.sizeOf();
	        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
	        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'TABLE', value: tableRecord});
	        tableFields.push({name: t.tableName + ' table', type: 'TABLE', value: t});
	        offset += tableLength;
	        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');
	        while (offset % 4 !== 0) {
	            offset += 1;
	            tableFields.push({name: 'padding', type: 'BYTE', value: 0});
	        }
	    }

	    // Table records need to be sorted alphabetically.
	    recordFields.sort(function(r1, r2) {
	        if (r1.value.tag > r2.value.tag) {
	            return 1;
	        } else {
	            return -1;
	        }
	    });

	    sfnt.fields = sfnt.fields.concat(recordFields);
	    sfnt.fields = sfnt.fields.concat(tableFields);
	    return sfnt;
	}

	// Get the metrics for a character. If the string has more than one character
	// this function returns metrics for the first available character.
	// You can provide optional fallback metrics if no characters are available.
	function metricsForChar(font, chars, notFoundMetrics) {
	    for (var i = 0; i < chars.length; i += 1) {
	        var glyphIndex = font.charToGlyphIndex(chars[i]);
	        if (glyphIndex > 0) {
	            var glyph = font.glyphs.get(glyphIndex);
	            return glyph.getMetrics();
	        }
	    }

	    return notFoundMetrics;
	}

	function average(vs) {
	    var sum = 0;
	    for (var i = 0; i < vs.length; i += 1) {
	        sum += vs[i];
	    }

	    return sum / vs.length;
	}

	// Convert the font object to a SFNT data structure.
	// This structure contains all the necessary tables and metadata to create a binary OTF file.
	function fontToSfntTable(font) {
	    var xMins = [];
	    var yMins = [];
	    var xMaxs = [];
	    var yMaxs = [];
	    var advanceWidths = [];
	    var leftSideBearings = [];
	    var rightSideBearings = [];
	    var firstCharIndex;
	    var lastCharIndex = 0;
	    var ulUnicodeRange1 = 0;
	    var ulUnicodeRange2 = 0;
	    var ulUnicodeRange3 = 0;
	    var ulUnicodeRange4 = 0;

	    for (var i = 0; i < font.glyphs.length; i += 1) {
	        var glyph = font.glyphs.get(i);
	        var unicode = glyph.unicode | 0;
	        if (firstCharIndex > unicode || firstCharIndex === null) {
	            firstCharIndex = unicode;
	        }

	        if (lastCharIndex < unicode) {
	            lastCharIndex = unicode;
	        }

	        var position = os2.getUnicodeRange(unicode);
	        if (position < 32) {
	            ulUnicodeRange1 |= 1 << position;
	        } else if (position < 64) {
	            ulUnicodeRange2 |= 1 << position - 32;
	        } else if (position < 96) {
	            ulUnicodeRange3 |= 1 << position - 64;
	        } else if (position < 123) {
	            ulUnicodeRange4 |= 1 << position - 96;
	        } else {
	            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
	        }
	        // Skip non-important characters.
	        if (glyph.name === '.notdef') continue;
	        var metrics = glyph.getMetrics();
	        xMins.push(metrics.xMin);
	        yMins.push(metrics.yMin);
	        xMaxs.push(metrics.xMax);
	        yMaxs.push(metrics.yMax);
	        leftSideBearings.push(metrics.leftSideBearing);
	        rightSideBearings.push(metrics.rightSideBearing);
	        advanceWidths.push(glyph.advanceWidth);
	    }

	    var globals = {
	        xMin: Math.min.apply(null, xMins),
	        yMin: Math.min.apply(null, yMins),
	        xMax: Math.max.apply(null, xMaxs),
	        yMax: Math.max.apply(null, yMaxs),
	        advanceWidthMax: Math.max.apply(null, advanceWidths),
	        advanceWidthAvg: average(advanceWidths),
	        minLeftSideBearing: Math.min.apply(null, leftSideBearings),
	        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
	        minRightSideBearing: Math.min.apply(null, rightSideBearings)
	    };
	    globals.ascender = font.ascender !== undefined ? font.ascender : globals.yMax;
	    globals.descender = font.descender !== undefined ? font.descender : globals.yMin;

	    var headTable = head.make({
	        unitsPerEm: font.unitsPerEm,
	        xMin: globals.xMin,
	        yMin: globals.yMin,
	        xMax: globals.xMax,
	        yMax: globals.yMax
	    });

	    var hheaTable = hhea.make({
	        ascender: globals.ascender,
	        descender: globals.descender,
	        advanceWidthMax: globals.advanceWidthMax,
	        minLeftSideBearing: globals.minLeftSideBearing,
	        minRightSideBearing: globals.minRightSideBearing,
	        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
	        numberOfHMetrics: font.glyphs.length
	    });

	    var maxpTable = maxp.make(font.glyphs.length);

	    var os2Table = os2.make({
	        xAvgCharWidth: Math.round(globals.advanceWidthAvg),
	        usWeightClass: 500, // Medium FIXME Make this configurable
	        usWidthClass: 5, // Medium (normal) FIXME Make this configurable
	        usFirstCharIndex: firstCharIndex,
	        usLastCharIndex: lastCharIndex,
	        ulUnicodeRange1: ulUnicodeRange1,
	        ulUnicodeRange2: ulUnicodeRange2,
	        ulUnicodeRange3: ulUnicodeRange3,
	        ulUnicodeRange4: ulUnicodeRange4,
	        // See http://typophile.com/node/13081 for more info on vertical metrics.
	        // We get metrics for typical characters (such as "x" for xHeight).
	        // We provide some fallback characters if characters are unavailable: their
	        // ordering was chosen experimentally.
	        sTypoAscender: globals.ascender,
	        sTypoDescender: globals.descender,
	        sTypoLineGap: 0,
	        usWinAscent: globals.ascender,
	        usWinDescent: -globals.descender,
	        sxHeight: metricsForChar(font, 'xyvw', {yMax: 0}).yMax,
	        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
	        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.
	    });

	    var hmtxTable = hmtx.make(font.glyphs);
	    var cmapTable = cmap.make(font.glyphs);

	    var fullName = font.familyName + ' ' + font.styleName;
	    var postScriptName = font.familyName.replace(/\s/g, '') + '-' + font.styleName;
	    var nameTable = _name.make({
	        copyright: font.copyright,
	        fontFamily: font.familyName,
	        fontSubfamily: font.styleName,
	        uniqueID: font.manufacturer + ':' + fullName,
	        fullName: fullName,
	        version: font.version,
	        postScriptName: postScriptName,
	        trademark: font.trademark,
	        manufacturer: font.manufacturer,
	        designer: font.designer,
	        description: font.description,
	        manufacturerURL: font.manufacturerURL,
	        designerURL: font.designerURL,
	        license: font.license,
	        licenseURL: font.licenseURL,
	        preferredFamily: font.familyName,
	        preferredSubfamily: font.styleName
	    });
	    var postTable = post.make();
	    var cffTable = cff.make(font.glyphs, {
	        version: font.version,
	        fullName: fullName,
	        familyName: font.familyName,
	        weightName: font.styleName,
	        postScriptName: postScriptName,
	        unitsPerEm: font.unitsPerEm
	    });
	    // Order the tables according to the the OpenType specification 1.4.
	    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];

	    var sfntTable = makeSfntTable(tables);

	    // Compute the font's checkSum and store it in head.checkSumAdjustment.
	    var bytes = sfntTable.encode();
	    var checkSum = computeCheckSum(bytes);
	    var tableFields = sfntTable.fields;
	    var checkSumAdjusted = false;
	    for (i = 0; i < tableFields.length; i += 1) {
	        if (tableFields[i].name === 'head table') {
	            tableFields[i].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
	            checkSumAdjusted = true;
	            break;
	        }
	    }

	    if (!checkSumAdjusted) {
	        throw new Error('Could not find head table with checkSum to adjust.');
	    }

	    return sfntTable;
	}

	exports.computeCheckSum = computeCheckSum;
	exports.make = makeSfntTable;
	exports.fontToTable = fontToSfntTable;

	},{"../check":2,"../table":11,"./cff":12,"./cmap":13,"./head":16,"./hhea":17,"./hmtx":18,"./maxp":21,"./name":22,"./os2":23,"./post":24}],26:[function(_dereq_,module,exports){
	// Data types used in the OpenType font file.
	// All OpenType fonts use Motorola-style byte ordering (Big Endian)

	/* global WeakMap */

	'use strict';

	var check = _dereq_('./check');

	var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
	var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31

	var decode = {};
	var encode = {};
	var sizeOf = {};

	// Return a function that always returns the same value.
	function constant(v) {
	    return function() {
	        return v;
	    };
	}

	// OpenType data types //////////////////////////////////////////////////////

	// Convert an 8-bit unsigned integer to a list of 1 byte.
	encode.BYTE = function(v) {
	    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
	    return [v];
	};

	sizeOf.BYTE = constant(1);

	// Convert a 8-bit signed integer to a list of 1 byte.
	encode.CHAR = function(v) {
	    return [v.charCodeAt(0)];
	};

	sizeOf.BYTE = constant(1);

	// Convert an ASCII string to a list of bytes.
	encode.CHARARRAY = function(v) {
	    var b = [];
	    for (var i = 0; i < v.length; i += 1) {
	        b.push(v.charCodeAt(i));
	    }

	    return b;
	};

	sizeOf.CHARARRAY = function(v) {
	    return v.length;
	};

	// Convert a 16-bit unsigned integer to a list of 2 bytes.
	encode.USHORT = function(v) {
	    return [(v >> 8) & 0xFF, v & 0xFF];
	};

	sizeOf.USHORT = constant(2);

	// Convert a 16-bit signed integer to a list of 2 bytes.
	encode.SHORT = function(v) {
	    // Two's complement
	    if (v >= LIMIT16) {
	        v = -(2 * LIMIT16 - v);
	    }

	    return [(v >> 8) & 0xFF, v & 0xFF];
	};

	sizeOf.SHORT = constant(2);

	// Convert a 24-bit unsigned integer to a list of 3 bytes.
	encode.UINT24 = function(v) {
	    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
	};

	sizeOf.UINT24 = constant(3);

	// Convert a 32-bit unsigned integer to a list of 4 bytes.
	encode.ULONG = function(v) {
	    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
	};

	sizeOf.ULONG = constant(4);

	// Convert a 32-bit unsigned integer to a list of 4 bytes.
	encode.LONG = function(v) {
	    // Two's complement
	    if (v >= LIMIT32) {
	        v = -(2 * LIMIT32 - v);
	    }

	    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
	};

	sizeOf.LONG = constant(4);

	encode.FIXED = encode.ULONG;
	sizeOf.FIXED = sizeOf.ULONG;

	encode.FWORD = encode.SHORT;
	sizeOf.FWORD = sizeOf.SHORT;

	encode.UFWORD = encode.USHORT;
	sizeOf.UFWORD = sizeOf.USHORT;

	// FIXME Implement LONGDATETIME
	encode.LONGDATETIME = function() {
	    return [0, 0, 0, 0, 0, 0, 0, 0];
	};

	sizeOf.LONGDATETIME = constant(8);

	// Convert a 4-char tag to a list of 4 bytes.
	encode.TAG = function(v) {
	    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
	    return [v.charCodeAt(0),
	            v.charCodeAt(1),
	            v.charCodeAt(2),
	            v.charCodeAt(3)];
	};

	sizeOf.TAG = constant(4);

	// CFF data types ///////////////////////////////////////////////////////////

	encode.Card8 = encode.BYTE;
	sizeOf.Card8 = sizeOf.BYTE;

	encode.Card16 = encode.USHORT;
	sizeOf.Card16 = sizeOf.USHORT;

	encode.OffSize = encode.BYTE;
	sizeOf.OffSize = sizeOf.BYTE;

	encode.SID = encode.USHORT;
	sizeOf.SID = sizeOf.USHORT;

	// Convert a numeric operand or charstring number to a variable-size list of bytes.
	encode.NUMBER = function(v) {
	    if (v >= -107 && v <= 107) {
	        return [v + 139];
	    } else if (v >= 108 && v <= 1131) {
	        v = v - 108;
	        return [(v >> 8) + 247, v & 0xFF];
	    } else if (v >= -1131 && v <= -108) {
	        v = -v - 108;
	        return [(v >> 8) + 251, v & 0xFF];
	    } else if (v >= -32768 && v <= 32767) {
	        return encode.NUMBER16(v);
	    } else {
	        return encode.NUMBER32(v);
	    }
	};

	sizeOf.NUMBER = function(v) {
	    return encode.NUMBER(v).length;
	};

	// Convert a signed number between -32768 and +32767 to a three-byte value.
	// This ensures we always use three bytes, but is not the most compact format.
	encode.NUMBER16 = function(v) {
	    return [28, (v >> 8) & 0xFF, v & 0xFF];
	};

	sizeOf.NUMBER16 = constant(2);

	// Convert a signed number between -(2^31) and +(2^31-1) to a four-byte value.
	// This is useful if you want to be sure you always use four bytes,
	// at the expense of wasting a few bytes for smaller numbers.
	encode.NUMBER32 = function(v) {
	    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
	};

	sizeOf.NUMBER32 = constant(4);

	encode.REAL = function(v) {
	    var value = v.toString();

	    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
	    // This code converts it back to a number without the epsilon.
	    var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
	    if (m) {
	        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
	        value = (Math.round(v * epsilon) / epsilon).toString();
	    }

	    var nibbles = '';
	    var i;
	    var ii;
	    for (i = 0, ii = value.length; i < ii; i += 1) {
	        var c = value[i];
	        if (c === 'e') {
	            nibbles += value[++i] === '-' ? 'c' : 'b';
	        } else if (c === '.') {
	            nibbles += 'a';
	        } else if (c === '-') {
	            nibbles += 'e';
	        } else {
	            nibbles += c;
	        }
	    }

	    nibbles += (nibbles.length & 1) ? 'f' : 'ff';
	    var out = [30];
	    for (i = 0, ii = nibbles.length; i < ii; i += 2) {
	        out.push(parseInt(nibbles.substr(i, 2), 16));
	    }

	    return out;
	};

	sizeOf.REAL = function(v) {
	    return encode.REAL(v).length;
	};

	encode.NAME = encode.CHARARRAY;
	sizeOf.NAME = sizeOf.CHARARRAY;

	encode.STRING = encode.CHARARRAY;
	sizeOf.STRING = sizeOf.CHARARRAY;

	// Convert a ASCII string to a list of UTF16 bytes.
	encode.UTF16 = function(v) {
	    var b = [];
	    for (var i = 0; i < v.length; i += 1) {
	        b.push(0);
	        b.push(v.charCodeAt(i));
	    }

	    return b;
	};

	sizeOf.UTF16 = function(v) {
	    return v.length * 2;
	};

	// Convert a list of values to a CFF INDEX structure.
	// The values should be objects containing name / type / value.
	encode.INDEX = function(l) {
	    var i;
	    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
	    //    dataSize, i, v;
	    // Because we have to know which data type to use to encode the offsets,
	    // we have to go through the values twice: once to encode the data and
	    // calculate the offets, then again to encode the offsets using the fitting data type.
	    var offset = 1; // First offset is always 1.
	    var offsets = [offset];
	    var data = [];
	    var dataSize = 0;
	    for (i = 0; i < l.length; i += 1) {
	        var v = encode.OBJECT(l[i]);
	        Array.prototype.push.apply(data, v);
	        dataSize += v.length;
	        offset += v.length;
	        offsets.push(offset);
	    }

	    if (data.length === 0) {
	        return [0, 0];
	    }

	    var encodedOffsets = [];
	    var offSize = (1 + Math.floor(Math.log(dataSize) / Math.log(2)) / 8) | 0;
	    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];
	    for (i = 0; i < offsets.length; i += 1) {
	        var encodedOffset = offsetEncoder(offsets[i]);
	        Array.prototype.push.apply(encodedOffsets, encodedOffset);
	    }

	    return Array.prototype.concat(encode.Card16(l.length),
	                           encode.OffSize(offSize),
	                           encodedOffsets,
	                           data);
	};

	sizeOf.INDEX = function(v) {
	    return encode.INDEX(v).length;
	};

	// Convert an object to a CFF DICT structure.
	// The keys should be numeric.
	// The values should be objects containing name / type / value.
	encode.DICT = function(m) {
	    var d = [];
	    var keys = Object.keys(m);
	    var length = keys.length;

	    for (var i = 0; i < length; i += 1) {
	        // Object.keys() return string keys, but our keys are always numeric.
	        var k = parseInt(keys[i], 0);
	        var v = m[k];
	        // Value comes before the key.
	        d = d.concat(encode.OPERAND(v.value, v.type));
	        d = d.concat(encode.OPERATOR(k));
	    }

	    return d;
	};

	sizeOf.DICT = function(m) {
	    return encode.DICT(m).length;
	};

	encode.OPERATOR = function(v) {
	    if (v < 1200) {
	        return [v];
	    } else {
	        return [12, v - 1200];
	    }
	};

	encode.OPERAND = function(v, type) {
	    var d = [];
	    if (Array.isArray(type)) {
	        for (var i = 0; i < type.length; i += 1) {
	            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
	            d = d.concat(encode.OPERAND(v[i], type[i]));
	        }
	    } else {
	        if (type === 'SID') {
	            d = d.concat(encode.NUMBER(v));
	        } else if (type === 'offset') {
	            // We make it easy for ourselves and always encode offsets as
	            // 4 bytes. This makes offset calculation for the top dict easier.
	            d = d.concat(encode.NUMBER32(v));
	        } else if (type === 'number') {
	            d = d.concat(encode.NUMBER(v));
	        } else if (type === 'real') {
	            d = d.concat(encode.REAL(v));
	        } else {
	            throw new Error('Unknown operand type ' + type);
	            // FIXME Add support for booleans
	        }
	    }

	    return d;
	};

	encode.OP = encode.BYTE;
	sizeOf.OP = sizeOf.BYTE;

	// memoize charstring encoding using WeakMap if available
	var wmm = typeof WeakMap === 'function' && new WeakMap();
	// Convert a list of CharString operations to bytes.
	encode.CHARSTRING = function(ops) {
	    if (wmm && wmm.has(ops)) {
	        return wmm.get(ops);
	    }

	    var d = [];
	    var length = ops.length;

	    for (var i = 0; i < length; i += 1) {
	        var op = ops[i];
	        d = d.concat(encode[op.type](op.value));
	    }

	    if (wmm) {
	        wmm.set(ops, d);
	    }

	    return d;
	};

	sizeOf.CHARSTRING = function(ops) {
	    return encode.CHARSTRING(ops).length;
	};

	// Utility functions ////////////////////////////////////////////////////////

	// Convert an object containing name / type / value to bytes.
	encode.OBJECT = function(v) {
	    var encodingFunction = encode[v.type];
	    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
	    return encodingFunction(v.value);
	};

	// Convert a table object to bytes.
	// A table contains a list of fields containing the metadata (name, type and default value).
	// The table itself has the field values set as attributes.
	encode.TABLE = function(table) {
	    var d = [];
	    var length = table.fields.length;

	    for (var i = 0; i < length; i += 1) {
	        var field = table.fields[i];
	        var encodingFunction = encode[field.type];
	        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type);
	        var value = table[field.name];
	        if (value === undefined) {
	            value = field.value;
	        }

	        var bytes = encodingFunction(value);
	        d = d.concat(bytes);
	    }

	    return d;
	};

	// Merge in a list of bytes.
	encode.LITERAL = function(v) {
	    return v;
	};

	sizeOf.LITERAL = function(v) {
	    return v.length;
	};

	exports.decode = decode;
	exports.encode = encode;
	exports.sizeOf = sizeOf;

	},{"./check":2}],27:[function(_dereq_,module,exports){
	/*!
	  * Reqwest! A general purpose XHR connection manager
	  * license MIT (c) Dustin Diaz 2014
	  * https://github.com/ded/reqwest
	  */

	!function (name, context, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (typeof define == 'function' && define.amd) define(definition)
	  else context[name] = definition()
	}('reqwest', this, function () {

	  var win = window
	    , doc = document
	    , httpsRe = /^http/
	    , protocolRe = /(^\w+):\/\//
	    , twoHundo = /^(20\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	    , byTag = 'getElementsByTagName'
	    , readyState = 'readyState'
	    , contentType = 'Content-Type'
	    , requestedWith = 'X-Requested-With'
	    , head = doc[byTag]('head')[0]
	    , uniqid = 0
	    , callbackPrefix = 'reqwest_' + (+new Date())
	    , lastValue // data stored by the most recent JSONP callback
	    , xmlHttpRequest = 'XMLHttpRequest'
	    , xDomainRequest = 'XDomainRequest'
	    , noop = function () {}

	    , isArray = typeof Array.isArray == 'function'
	        ? Array.isArray
	        : function (a) {
	            return a instanceof Array
	          }

	    , defaultHeaders = {
	          'contentType': 'application/x-www-form-urlencoded'
	        , 'requestedWith': xmlHttpRequest
	        , 'accept': {
	              '*':  'text/javascript, text/html, application/xml, text/xml, */*'
	            , 'xml':  'application/xml, text/xml'
	            , 'html': 'text/html'
	            , 'text': 'text/plain'
	            , 'json': 'application/json, text/javascript'
	            , 'js':   'application/javascript, text/javascript'
	          }
	      }

	    , xhr = function(o) {
	        // is it x-domain
	        if (o['crossOrigin'] === true) {
	          var xhr = win[xmlHttpRequest] ? new XMLHttpRequest() : null
	          if (xhr && 'withCredentials' in xhr) {
	            return xhr
	          } else if (win[xDomainRequest]) {
	            return new XDomainRequest()
	          } else {
	            throw new Error('Browser does not support cross-origin requests')
	          }
	        } else if (win[xmlHttpRequest]) {
	          return new XMLHttpRequest()
	        } else {
	          return new ActiveXObject('Microsoft.XMLHTTP')
	        }
	      }
	    , globalSetupOptions = {
	        dataFilter: function (data) {
	          return data
	        }
	      }

	  function succeed(r) {
	    var protocol = protocolRe.exec(r.url);
	    protocol = (protocol && protocol[1]) || window.location.protocol;
	    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response;
	  }

	  function handleReadyState(r, success, error) {
	    return function () {
	      // use _aborted to mitigate against IE err c00c023f
	      // (can't read props on aborted request objects)
	      if (r._aborted) return error(r.request)
	      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')
	      if (r.request && r.request[readyState] == 4) {
	        r.request.onreadystatechange = noop
	        if (succeed(r)) success(r.request)
	        else
	          error(r.request)
	      }
	    }
	  }

	  function setHeaders(http, o) {
	    var headers = o['headers'] || {}
	      , h

	    headers['Accept'] = headers['Accept']
	      || defaultHeaders['accept'][o['type']]
	      || defaultHeaders['accept']['*']

	    var isAFormData = typeof FormData === 'function' && (o['data'] instanceof FormData);
	    // breaks cross-origin requests with legacy browsers
	    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']
	    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']
	    for (h in headers)
	      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])
	  }

	  function setCredentials(http, o) {
	    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {
	      http.withCredentials = !!o['withCredentials']
	    }
	  }

	  function generalCallback(data) {
	    lastValue = data
	  }

	  function urlappend (url, s) {
	    return url + (/\?/.test(url) ? '&' : '?') + s
	  }

	  function handleJsonp(o, fn, err, url) {
	    var reqId = uniqid++
	      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key
	      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)
	      , cbreg = new RegExp('((^|\\?|&)' + cbkey + ')=([^&]+)')
	      , match = url.match(cbreg)
	      , script = doc.createElement('script')
	      , loaded = 0
	      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1

	    if (match) {
	      if (match[3] === '?') {
	        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name
	      } else {
	        cbval = match[3] // provided callback func name
	      }
	    } else {
	      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em
	    }

	    win[cbval] = generalCallback

	    script.type = 'text/javascript'
	    script.src = url
	    script.async = true
	    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {
	      // need this for IE due to out-of-order onreadystatechange(), binding script
	      // execution to an event listener gives us control over when the script
	      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
	      script.htmlFor = script.id = '_reqwest_' + reqId
	    }

	    script.onload = script.onreadystatechange = function () {
	      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {
	        return false
	      }
	      script.onload = script.onreadystatechange = null
	      script.onclick && script.onclick()
	      // Call the user callback with the last value stored and clean up values and scripts.
	      fn(lastValue)
	      lastValue = undefined
	      head.removeChild(script)
	      loaded = 1
	    }

	    // Add the script to the DOM head
	    head.appendChild(script)

	    // Enable JSONP timeout
	    return {
	      abort: function () {
	        script.onload = script.onreadystatechange = null
	        err({}, 'Request is aborted: timeout', {})
	        lastValue = undefined
	        head.removeChild(script)
	        loaded = 1
	      }
	    }
	  }

	  function getRequest(fn, err) {
	    var o = this.o
	      , method = (o['method'] || 'GET').toUpperCase()
	      , url = typeof o === 'string' ? o : o['url']
	      // convert non-string objects to query-string form unless o['processData'] is false
	      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')
	        ? reqwest.toQueryString(o['data'])
	        : (o['data'] || null)
	      , http
	      , sendWait = false

	    // if we're working on a GET request and we have data then we should append
	    // query string to end of URL and not post data
	    if ((o['type'] == 'jsonp' || method == 'GET') && data) {
	      url = urlappend(url, data)
	      data = null
	    }

	    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)

	    // get the xhr from the factory if passed
	    // if the factory returns null, fall-back to ours
	    http = (o.xhr && o.xhr(o)) || xhr(o)

	    http.open(method, url, o['async'] === false ? false : true)
	    setHeaders(http, o)
	    setCredentials(http, o)
	    if (win[xDomainRequest] && http instanceof win[xDomainRequest]) {
	        http.onload = fn
	        http.onerror = err
	        // NOTE: see
	        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e
	        http.onprogress = function() {}
	        sendWait = true
	    } else {
	      http.onreadystatechange = handleReadyState(this, fn, err)
	    }
	    o['before'] && o['before'](http)
	    if (sendWait) {
	      setTimeout(function () {
	        http.send(data)
	      }, 200)
	    } else {
	      http.send(data)
	    }
	    return http
	  }

	  function Reqwest(o, fn) {
	    this.o = o
	    this.fn = fn

	    init.apply(this, arguments)
	  }

	  function setType(header) {
	    // json, javascript, text/plain, text/html, xml
	    if (header.match('json')) return 'json'
	    if (header.match('javascript')) return 'js'
	    if (header.match('text')) return 'html'
	    if (header.match('xml')) return 'xml'
	  }

	  function init(o, fn) {

	    this.url = typeof o == 'string' ? o : o['url']
	    this.timeout = null

	    // whether request has been fulfilled for purpose
	    // of tracking the Promises
	    this._fulfilled = false
	    // success handlers
	    this._successHandler = function(){}
	    this._fulfillmentHandlers = []
	    // error handlers
	    this._errorHandlers = []
	    // complete (both success and fail) handlers
	    this._completeHandlers = []
	    this._erred = false
	    this._responseArgs = {}

	    var self = this

	    fn = fn || function () {}

	    if (o['timeout']) {
	      this.timeout = setTimeout(function () {
	        timedOut()
	      }, o['timeout'])
	    }

	    if (o['success']) {
	      this._successHandler = function () {
	        o['success'].apply(o, arguments)
	      }
	    }

	    if (o['error']) {
	      this._errorHandlers.push(function () {
	        o['error'].apply(o, arguments)
	      })
	    }

	    if (o['complete']) {
	      this._completeHandlers.push(function () {
	        o['complete'].apply(o, arguments)
	      })
	    }

	    function complete (resp) {
	      o['timeout'] && clearTimeout(self.timeout)
	      self.timeout = null
	      while (self._completeHandlers.length > 0) {
	        self._completeHandlers.shift()(resp)
	      }
	    }

	    function success (resp) {
	      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE
	      resp = (type !== 'jsonp') ? self.request : resp
	      // use global data filter on response text
	      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)
	        , r = filteredResponse
	      try {
	        resp.responseText = r
	      } catch (e) {
	        // can't assign this in IE<=8, just ignore
	      }
	      if (r) {
	        switch (type) {
	        case 'json':
	          try {
	            resp = win.JSON ? win.JSON.parse(r) : eval('(' + r + ')')
	          } catch (err) {
	            return error(resp, 'Could not parse JSON in response', err)
	          }
	          break
	        case 'js':
	          resp = eval(r)
	          break
	        case 'html':
	          resp = r
	          break
	        case 'xml':
	          resp = resp.responseXML
	              && resp.responseXML.parseError // IE trololo
	              && resp.responseXML.parseError.errorCode
	              && resp.responseXML.parseError.reason
	            ? null
	            : resp.responseXML
	          break
	        }
	      }

	      self._responseArgs.resp = resp
	      self._fulfilled = true
	      fn(resp)
	      self._successHandler(resp)
	      while (self._fulfillmentHandlers.length > 0) {
	        resp = self._fulfillmentHandlers.shift()(resp)
	      }

	      complete(resp)
	    }

	    function timedOut() {
	      self._timedOut = true
	      self.request.abort()      
	    }

	    function error(resp, msg, t) {
	      resp = self.request
	      self._responseArgs.resp = resp
	      self._responseArgs.msg = msg
	      self._responseArgs.t = t
	      self._erred = true
	      while (self._errorHandlers.length > 0) {
	        self._errorHandlers.shift()(resp, msg, t)
	      }
	      complete(resp)
	    }

	    this.request = getRequest.call(this, success, error)
	  }

	  Reqwest.prototype = {
	    abort: function () {
	      this._aborted = true
	      this.request.abort()
	    }

	  , retry: function () {
	      init.call(this, this.o, this.fn)
	    }

	    /**
	     * Small deviation from the Promises A CommonJs specification
	     * http://wiki.commonjs.org/wiki/Promises/A
	     */

	    /**
	     * `then` will execute upon successful requests
	     */
	  , then: function (success, fail) {
	      success = success || function () {}
	      fail = fail || function () {}
	      if (this._fulfilled) {
	        this._responseArgs.resp = success(this._responseArgs.resp)
	      } else if (this._erred) {
	        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
	      } else {
	        this._fulfillmentHandlers.push(success)
	        this._errorHandlers.push(fail)
	      }
	      return this
	    }

	    /**
	     * `always` will execute whether the request succeeds or fails
	     */
	  , always: function (fn) {
	      if (this._fulfilled || this._erred) {
	        fn(this._responseArgs.resp)
	      } else {
	        this._completeHandlers.push(fn)
	      }
	      return this
	    }

	    /**
	     * `fail` will execute when the request fails
	     */
	  , fail: function (fn) {
	      if (this._erred) {
	        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
	      } else {
	        this._errorHandlers.push(fn)
	      }
	      return this
	    }
	  , 'catch': function (fn) {
	      return this.fail(fn)
	    }
	  }

	  function reqwest(o, fn) {
	    return new Reqwest(o, fn)
	  }

	  // normalize newline variants according to spec -> CRLF
	  function normalize(s) {
	    return s ? s.replace(/\r?\n/g, '\r\n') : ''
	  }

	  function serial(el, cb) {
	    var n = el.name
	      , t = el.tagName.toLowerCase()
	      , optCb = function (o) {
	          // IE gives value="" even where there is no value attribute
	          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273
	          if (o && !o['disabled'])
	            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))
	        }
	      , ch, ra, val, i

	    // don't serialize elements that are disabled or without a name
	    if (el.disabled || !n) return

	    switch (t) {
	    case 'input':
	      if (!/reset|button|image|file/i.test(el.type)) {
	        ch = /checkbox/i.test(el.type)
	        ra = /radio/i.test(el.type)
	        val = el.value
	        // WebKit gives us "" instead of "on" if a checkbox has no value, so correct it here
	        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))
	      }
	      break
	    case 'textarea':
	      cb(n, normalize(el.value))
	      break
	    case 'select':
	      if (el.type.toLowerCase() === 'select-one') {
	        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)
	      } else {
	        for (i = 0; el.length && i < el.length; i++) {
	          el.options[i].selected && optCb(el.options[i])
	        }
	      }
	      break
	    }
	  }

	  // collect up all form elements found from the passed argument elements all
	  // the way down to child elements; pass a '<form>' or form fields.
	  // called with 'this'=callback to use for serial() on each element
	  function eachFormElement() {
	    var cb = this
	      , e, i
	      , serializeSubtags = function (e, tags) {
	          var i, j, fa
	          for (i = 0; i < tags.length; i++) {
	            fa = e[byTag](tags[i])
	            for (j = 0; j < fa.length; j++) serial(fa[j], cb)
	          }
	        }

	    for (i = 0; i < arguments.length; i++) {
	      e = arguments[i]
	      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)
	      serializeSubtags(e, [ 'input', 'select', 'textarea' ])
	    }
	  }

	  // standard query string style serialization
	  function serializeQueryString() {
	    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))
	  }

	  // { 'name': 'value', ... } style serialization
	  function serializeHash() {
	    var hash = {}
	    eachFormElement.apply(function (name, value) {
	      if (name in hash) {
	        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])
	        hash[name].push(value)
	      } else hash[name] = value
	    }, arguments)
	    return hash
	  }

	  // [ { name: 'name', value: 'value' }, ... ] style serialization
	  reqwest.serializeArray = function () {
	    var arr = []
	    eachFormElement.apply(function (name, value) {
	      arr.push({name: name, value: value})
	    }, arguments)
	    return arr
	  }

	  reqwest.serialize = function () {
	    if (arguments.length === 0) return ''
	    var opt, fn
	      , args = Array.prototype.slice.call(arguments, 0)

	    opt = args.pop()
	    opt && opt.nodeType && args.push(opt) && (opt = null)
	    opt && (opt = opt.type)

	    if (opt == 'map') fn = serializeHash
	    else if (opt == 'array') fn = reqwest.serializeArray
	    else fn = serializeQueryString

	    return fn.apply(null, args)
	  }

	  reqwest.toQueryString = function (o, trad) {
	    var prefix, i
	      , traditional = trad || false
	      , s = []
	      , enc = encodeURIComponent
	      , add = function (key, value) {
	          // If value is a function, invoke it and return its value
	          value = ('function' === typeof value) ? value() : (value == null ? '' : value)
	          s[s.length] = enc(key) + '=' + enc(value)
	        }
	    // If an array was passed in, assume that it is an array of form elements.
	    if (isArray(o)) {
	      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])
	    } else {
	      // If traditional, encode the "old" way (the way 1.3.2 or older
	      // did it), otherwise encode params recursively.
	      for (prefix in o) {
	        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)
	      }
	    }

	    // spaces should be + according to spec
	    return s.join('&').replace(/%20/g, '+')
	  }

	  function buildParams(prefix, obj, traditional, add) {
	    var name, i, v
	      , rbracket = /\[\]$/

	    if (isArray(obj)) {
	      // Serialize array item.
	      for (i = 0; obj && i < obj.length; i++) {
	        v = obj[i]
	        if (traditional || rbracket.test(prefix)) {
	          // Treat each array item as a scalar.
	          add(prefix, v)
	        } else {
	          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)
	        }
	      }
	    } else if (obj && obj.toString() === '[object Object]') {
	      // Serialize object item.
	      for (name in obj) {
	        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
	      }

	    } else {
	      // Serialize scalar item.
	      add(prefix, obj)
	    }
	  }

	  reqwest.getcallbackPrefix = function () {
	    return callbackPrefix
	  }

	  // jQuery and Zepto compatibility, differences can be remapped here so you can call
	  // .ajax.compat(options, callback)
	  reqwest.compat = function (o, fn) {
	    if (o) {
	      o['type'] && (o['method'] = o['type']) && delete o['type']
	      o['dataType'] && (o['type'] = o['dataType'])
	      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']
	      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])
	    }
	    return new Reqwest(o, fn)
	  }

	  reqwest.ajaxSetup = function (options) {
	    options = options || {}
	    for (var k in options) {
	      globalSetupOptions[k] = options[k]
	    }
	  }

	  return reqwest
	});

	},{}],28:[function(_dereq_,module,exports){

	'use strict';

	var p5 = _dereq_('./core/core');
	_dereq_('./color/p5.Color');
	_dereq_('./core/p5.Element');
	_dereq_('./typography/p5.Font');
	_dereq_('./core/p5.Graphics');
	_dereq_('./core/p5.Renderer2D');

	_dereq_('./image/p5.Image');
	_dereq_('./math/p5.Vector');
	_dereq_('./io/p5.TableRow');
	_dereq_('./io/p5.Table');
	_dereq_('./io/p5.XML');

	_dereq_('./color/creating_reading');
	_dereq_('./color/setting');
	_dereq_('./core/constants');
	_dereq_('./utilities/conversion');
	_dereq_('./utilities/array_functions');
	_dereq_('./utilities/string_functions');
	_dereq_('./core/environment');
	_dereq_('./image/image');
	_dereq_('./image/loading_displaying');
	_dereq_('./image/pixels');
	_dereq_('./io/files');
	_dereq_('./events/keyboard');
	_dereq_('./events/acceleration'); //john
	_dereq_('./events/mouse');
	_dereq_('./utilities/time_date');
	_dereq_('./events/touch');
	_dereq_('./math/math');
	_dereq_('./math/calculation');
	_dereq_('./math/random');
	_dereq_('./math/noise');
	_dereq_('./math/trigonometry');
	_dereq_('./core/rendering');
	_dereq_('./core/2d_primitives');

	_dereq_('./core/attributes');
	_dereq_('./core/curves');
	_dereq_('./core/vertex');
	_dereq_('./core/structure');
	_dereq_('./core/transform');
	_dereq_('./typography/attributes');
	_dereq_('./typography/loading_displaying');

	_dereq_('./webgl/p5.RendererGL');
	_dereq_('./webgl/p5.Geometry');
	_dereq_('./webgl/p5.RendererGL.Retained');
	_dereq_('./webgl/p5.RendererGL.Immediate');
	_dereq_('./webgl/primitives');
	_dereq_('./webgl/loading');
	_dereq_('./webgl/p5.Matrix');
	_dereq_('./webgl/material');
	_dereq_('./webgl/light');
	_dereq_('./webgl/shader');
	_dereq_('./webgl/camera');
	_dereq_('./webgl/interaction');

	/**
	 * _globalInit
	 *
	 * TODO: ???
	 * if sketch is on window
	 * assume "global" mode
	 * and instantiate p5 automatically
	 * otherwise do nothing
	 *
	 * @return {Undefined}
	 */
	var _globalInit = function() {
	  if (!window.PHANTOMJS && !window.mocha) {
	    // If there is a setup or draw function on the window
	    // then instantiate p5 in "global" mode
	    if(((window.setup && typeof window.setup === 'function') ||
	       (window.draw && typeof window.draw === 'function')) &&
	       !p5.instance) {
	      new p5();
	    }
	  }
	};

	// TODO: ???
	if (document.readyState === 'complete') {
	  _globalInit();
	} else {
	  window.addEventListener('load', _globalInit , false);
	}

	module.exports = p5;

	},{"./color/creating_reading":30,"./color/p5.Color":31,"./color/setting":32,"./core/2d_primitives":33,"./core/attributes":34,"./core/constants":36,"./core/core":37,"./core/curves":38,"./core/environment":39,"./core/p5.Element":41,"./core/p5.Graphics":42,"./core/p5.Renderer2D":44,"./core/rendering":45,"./core/structure":47,"./core/transform":48,"./core/vertex":49,"./events/acceleration":50,"./events/keyboard":51,"./events/mouse":52,"./events/touch":53,"./image/image":55,"./image/loading_displaying":56,"./image/p5.Image":57,"./image/pixels":58,"./io/files":59,"./io/p5.Table":60,"./io/p5.TableRow":61,"./io/p5.XML":62,"./math/calculation":63,"./math/math":64,"./math/noise":65,"./math/p5.Vector":66,"./math/random":68,"./math/trigonometry":69,"./typography/attributes":70,"./typography/loading_displaying":71,"./typography/p5.Font":72,"./utilities/array_functions":73,"./utilities/conversion":74,"./utilities/string_functions":75,"./utilities/time_date":76,"./webgl/camera":77,"./webgl/interaction":78,"./webgl/light":79,"./webgl/loading":80,"./webgl/material":81,"./webgl/p5.Geometry":82,"./webgl/p5.Matrix":83,"./webgl/p5.RendererGL":86,"./webgl/p5.RendererGL.Immediate":84,"./webgl/p5.RendererGL.Retained":85,"./webgl/primitives":87,"./webgl/shader":88}],29:[function(_dereq_,module,exports){
	/**
	 * module Conversion
	 * submodule Color Conversion
	 * @for p5
	 * @requires core
	 */

	'use strict';

	/**
	 * Conversions adapted from <http://www.easyrgb.com/math.html>.
	 *
	 * In these functions, hue is always in the range [0,1); all other components
	 * are in the range [0,1]. 'Brightness' and 'value' are used interchangeably.
	 */

	var p5 = _dereq_('../core/core');
	p5.ColorConversion = {};

	/**
	 * Convert an HSBA array to HSLA.
	 */
	p5.ColorConversion._hsbaToHSLA = function(hsba) {
	  var hue = hsba[0];
	  var sat = hsba[1];
	  var val = hsba[2];

	  // Calculate lightness.
	  var li = (2 - sat) * val / 2;

	  // Convert saturation.
	  if (li !== 0) {
	    if (li === 1) {
	      sat = 0;
	    } else if (li < 0.5) {
	      sat = sat / (2 - sat);
	    } else {
	      sat = sat * val / (2 - li * 2);
	    }
	  }

	  // Hue and alpha stay the same.
	  return [hue, sat, li, hsba[3]];
	};

	/**
	 * Convert an HSBA array to RGBA.
	 */
	p5.ColorConversion._hsbaToRGBA = function(hsba) {
	  var hue = hsba[0] * 6;  // We will split hue into 6 sectors.
	  var sat = hsba[1];
	  var val = hsba[2];

	  var RGBA = [];

	  if (sat === 0) {
	    RGBA = [val, val, val, hsba[3]];  // Return early if grayscale.
	  } else {
	    var sector = Math.floor(hue);
	    var tint1 = val * (1 - sat);
	    var tint2 = val * (1 - sat * (hue - sector));
	    var tint3 = val * (1 - sat * (1 + sector - hue));
	    var red, green, blue;
	    if (sector === 1) {  // Yellow to green.
	      red = tint2;
	      green = val;
	      blue = tint1;
	    } else if (sector === 2) {  // Green to cyan.
	      red = tint1;
	      green = val;
	      blue = tint3;
	    } else if (sector === 3) {  // Cyan to blue.
	      red = tint1;
	      green = tint2;
	      blue = val;
	    } else if (sector === 4) {  // Blue to magenta.
	      red = tint3;
	      green = tint1;
	      blue = val;
	    } else if (sector === 5) {  // Magenta to red.
	      red = val;
	      green = tint1;
	      blue = tint2;
	    } else {  // Red to yellow (sector could be 0 or 6).
	      red = val;
	      green = tint3;
	      blue = tint1;
	    }
	    RGBA = [red, green, blue, hsba[3]];
	  }

	  return RGBA;
	};

	/**
	 * Convert an HSLA array to HSBA.
	 */
	p5.ColorConversion._hslaToHSBA = function(hsla) {
	  var hue = hsla[0];
	  var sat = hsla[1];
	  var li = hsla[2];

	  // Calculate brightness.
	  var val;
	  if (li < 0.5) {
	    val = (1 + sat) * li;
	  } else {
	    val = li + sat - li * sat;
	  }

	  // Convert saturation.
	  sat = 2 * (val - li) / val;

	  // Hue and alpha stay the same.
	  return [hue, sat, val, hsla[3]];
	};

	/**
	 * Convert an HSLA array to RGBA.
	 *
	 * We need to change basis from HSLA to something that can be more easily be
	 * projected onto RGBA. We will choose hue and brightness as our first two
	 * components, and pick a convenient third one ('zest') so that we don't need
	 * to calculate formal HSBA saturation.
	 */
	p5.ColorConversion._hslaToRGBA = function(hsla){
	  var hue = hsla[0] * 6;  // We will split hue into 6 sectors.
	  var sat = hsla[1];
	  var li = hsla[2];

	  var RGBA = [];

	  if (sat === 0) {
	    RGBA = [li, li, li, hsla[3]]; // Return early if grayscale.
	  } else {

	    // Calculate brightness.
	    var val;
	    if (li < 0.5) {
	      val = (1 + sat) * li;
	    } else {
	      val = li + sat - li * sat;
	    }

	    // Define zest.
	    var zest = 2 * li - val;

	    // Implement projection (project onto green by default).
	    var hzvToRGB = function(hue, zest, val) {
	      if (hue < 0) {  // Hue must wrap to allow projection onto red and blue.
	        hue += 6;
	      } else if (hue >= 6) {
	        hue -= 6;
	      }
	      if (hue < 1) {  // Red to yellow (increasing green).
	        return (zest + (val - zest) * hue);
	      } else if (hue < 3) {  // Yellow to cyan (greatest green).
	        return val;
	      } else if (hue < 4) {  // Cyan to blue (decreasing green).
	        return (zest + (val - zest) * (4 - hue));
	      } else {  // Blue to red (least green).
	        return zest;
	      }
	    };

	    // Perform projections, offsetting hue as necessary.
	    RGBA = [hzvToRGB(hue + 2, zest, val),
	            hzvToRGB(hue    , zest, val),
	            hzvToRGB(hue - 2, zest, val),
	            hsla[3]];
	  }

	  return RGBA;
	};

	/**
	 * Convert an RGBA array to HSBA.
	 */
	p5.ColorConversion._rgbaToHSBA = function(rgba) {
	  var red = rgba[0];
	  var green = rgba[1];
	  var blue = rgba[2];

	  var val = Math.max(red, green, blue);
	  var chroma = val - Math.min(red, green, blue);

	  var hue, sat;
	  if (chroma === 0) {  // Return early if grayscale.
	    hue = 0;
	    sat = 0;
	  }
	  else {
	    sat = chroma / val;
	    if (red === val) {  // Magenta to yellow.
	      hue = (green - blue) / chroma;
	    } else if (green === val) { // Yellow to cyan.
	      hue = 2 + (blue - red) / chroma;
	    } else if (blue === val) {  // Cyan to magenta.
	      hue = 4 + (red - green) / chroma;
	    }
	    if (hue < 0) {  // Confine hue to the interval [0, 1).
	      hue += 6;
	    } else if (hue >= 6) {
	      hue -= 6;
	    }
	  }

	  return [hue / 6, sat, val, rgba[3]];
	};

	/**
	 * Convert an RGBA array to HSLA.
	 */
	p5.ColorConversion._rgbaToHSLA = function(rgba) {
	  var red = rgba[0];
	  var green = rgba[1];
	  var blue = rgba[2];

	  var val = Math.max(red, green, blue);
	  var min = Math.min(red, green, blue);
	  var li = val + min;  // We will halve this later.
	  var chroma = val - min;

	  var hue, sat;
	  if (chroma === 0) {  // Return early if grayscale.
	    hue = 0;
	    sat = 0;
	  } else {
	    if (li < 1) {
	      sat = chroma / li;
	    } else {
	      sat = chroma / (2 - li);
	    }
	    if (red === val) {  // Magenta to yellow.
	      hue = (green - blue) / chroma;
	    } else if (green === val) {  // Yellow to cyan.
	      hue = 2 + (blue - red) / chroma;
	    } else if (blue === val) {  // Cyan to magenta.
	      hue = 4 + (red - green) / chroma;
	    }
	    if (hue < 0) {  // Confine hue to the interval [0, 1).
	      hue += 6;
	    } else if (hue >= 6) {
	      hue -= 6;
	    }
	  }

	  return [hue / 6, sat, li / 2, rgba[3]];
	};

	module.exports = p5.ColorConversion;

	},{"../core/core":37}],30:[function(_dereq_,module,exports){
	/**
	 * @module Color
	 * @submodule Creating & Reading
	 * @for p5
	 * @requires core
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var constants = _dereq_('../core/constants');
	_dereq_('./p5.Color');

	/**
	 * Extracts the alpha value from a color or pixel array.
	 *
	 * @method alpha
	 * @param {Object} obj p5.Color object or pixel array
	 * @example
	 * <div>
	 * <code>
	 * noStroke();
	 * c = color(0, 126, 255, 102);
	 * fill(c);
	 * rect(15, 15, 35, 70);
	 * value = alpha(c);  // Sets 'value' to 102
	 * fill(value);
	 * rect(50, 15, 35, 70);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Left half of canvas light blue and right half light charcoal grey.
	 * Left half of canvas light purple and right half a royal blue.
	 * Left half of canvas salmon pink and the right half white.
	 * Yellow rect in middle right of canvas, with 55 pixel width and height.
	 * Yellow ellipse in top left canvas, black ellipse in bottom right,both 80x80.
	 * Bright fuschia rect in middle of canvas, 60 pixel width and height.
	 * Two bright green rects on opposite sides of the canvas, both 45x80.
	 * Four blue rects in each corner of the canvas, each are 35x35.
	 * Bright sea green rect on left and darker rect on right of canvas, both 45x80.
	 * Dark green rect on left and light green rect on right of canvas, both 45x80.
	 * Dark blue rect on left and light teal rect on right of canvas, both 45x80.
	 * blue rect on left and green on right, both with black outlines & 35x60.
	 * salmon pink rect on left and black on right, both 35x60.
	 * 4 rects, tan, brown, brownish purple and purple, with white outlines & 20x60.
	 * light pastel green rect on left and dark grey rect on right, both 35x60.
	 * yellow rect on left and red rect on right, both with black outlines & 35x60.
	 * grey canvas
	 * deep pink rect on left and grey rect on right, both 35x60.
	 */
	p5.prototype.alpha = function(c) {
	  if (c instanceof p5.Color || c instanceof Array) {
	    return this.color(c)._getAlpha();
	  } else {
	    throw new Error('Needs p5.Color or pixel array as argument.');
	  }
	};

	/**
	 * Extracts the blue value from a color or pixel array.
	 *
	 * @method blue
	 * @param {Object} obj p5.Color object or pixel array
	 * @example
	 * <div>
	 * <code>
	 * c = color(175, 100, 220);  // Define color 'c'
	 * fill(c);  // Use color variable 'c' as fill color
	 * rect(15, 20, 35, 60);  // Draw left rectangle
	 *
	 * blueValue = blue(c);  // Get blue in 'c'
	 * print(blueValue);  // Prints "220.0"
	 * fill(0, 0, blueValue);  // Use 'blueValue' in new fill
	 * rect(50, 20, 35, 60);  // Draw right rectangle
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Left half of canvas light purple and right half a royal blue.
	 *
	 */
	p5.prototype.blue = function(c) {
	  if (c instanceof p5.Color || c instanceof Array) {
	    return this.color(c)._getBlue();
	  } else {
	    throw new Error('Needs p5.Color or pixel array as argument.');
	  }
	};

	/**
	 * Extracts the HSB brightness value from a color or pixel array.
	 *
	 * @method brightness
	 * @param {Object} color p5.Color object or pixel array
	 * @example
	 * <div>
	 * <code>
	 * noStroke();
	 * colorMode(HSB, 255);
	 * c = color(0, 126, 255);
	 * fill(c);
	 * rect(15, 20, 35, 60);
	 * value = brightness(c);  // Sets 'value' to 255
	 * fill(value);
	 * rect(50, 20, 35, 60);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Left half of canvas salmon pink and the right half white.
	 *
	 */
	p5.prototype.brightness = function(c) {
	  if (c instanceof p5.Color || c instanceof Array) {
	    return this.color(c)._getBrightness();
	  } else {
	    throw new Error('Needs p5.Color or pixel array as argument.');
	  }
	};

	/**
	 * Creates colors for storing in variables of the color datatype. The
	 * parameters are interpreted as RGB or HSB values depending on the
	 * current colorMode(). The default mode is RGB values from 0 to 255
	 * and, therefore, the function call color(255, 204, 0) will return a
	 * bright yellow color.
	 * <br><br>
	 * Note that if only one value is provided to color(), it will be interpreted
	 * as a grayscale value. Add a second value, and it will be used for alpha
	 * transparency. When three values are specified, they are interpreted as
	 * either RGB or HSB values. Adding a fourth value applies alpha
	 * transparency. If a single string parameter is provided it will be
	 * interpreted as a CSS-compatible color string.
	 *
	 * Colors are stored as Numbers or Arrays.
	 *
	 * @method color
	 * @param  {Number|String} gray    number specifying value between white
	 *                                 and black.
	 * @param  {Number}        [alpha] alpha value relative to current color range
	 *                                 (default is 0-255)
	 * @return {Array}                 resulting color
	 *
	 * @example
	 * <div>
	 * <code>
	 * var c = color(255, 204, 0);  // Define color 'c'
	 * fill(c);  // Use color variable 'c' as fill color
	 * noStroke();  // Don't draw a stroke around shapes
	 * rect(30, 20, 55, 55);  // Draw rectangle
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var c = color(255, 204, 0);  // Define color 'c'
	 * fill(c);  // Use color variable 'c' as fill color
	 * noStroke();  // Don't draw a stroke around shapes
	 * ellipse(25, 25, 80, 80);  // Draw left circle
	 *
	 * // Using only one value with color()
	 * // generates a grayscale value.
	 * var c = color(65);  // Update 'c' with grayscale value
	 * fill(c);  // Use updated 'c' as fill color
	 * ellipse(75, 75, 80, 80);  // Draw right circle
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // Named SVG & CSS colors may be used,
	 * var c = color('magenta');
	 * fill(c);  // Use 'c' as fill color
	 * noStroke();  // Don't draw a stroke around shapes
	 * rect(20, 20, 60, 60);  // Draw rectangle
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // as can hex color codes:
	 * noStroke();  // Don't draw a stroke around shapes
	 * var c = color('#0f0');
	 * fill(c);  // Use 'c' as fill color
	 * rect(0, 10, 45, 80);  // Draw rectangle
	 *
	 * c = color('#00ff00');
	 * fill(c);  // Use updated 'c' as fill color
	 * rect(55, 10, 45, 80);  // Draw rectangle
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // RGB and RGBA color strings are also supported:
	 * // these all set to the same color (solid blue)
	 * var c;
	 * noStroke();  // Don't draw a stroke around shapes
	 * c = color('rgb(0,0,255)');
	 * fill(c); // Use 'c' as fill color
	 * rect(10, 10, 35, 35);  // Draw rectangle
	 *
	 * c = color('rgb(0%, 0%, 100%)');
	 * fill(c); // Use updated 'c' as fill color
	 * rect(55, 10, 35, 35);  // Draw rectangle
	 *
	 * c = color('rgba(0, 0, 255, 1)');
	 * fill(c); // Use updated 'c' as fill color
	 * rect(10, 55, 35, 35);  // Draw rectangle
	 *
	 * c = color('rgba(0%, 0%, 100%, 1)');
	 * fill(c); // Use updated 'c' as fill color
	 * rect(55, 55, 35, 35);  // Draw rectangle
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // HSL color is also supported and can be specified
	 * // by value
	 * var c;
	 * noStroke();  // Don't draw a stroke around shapes
	 * c = color('hsl(160, 100%, 50%)');
	 * fill(c);  // Use 'c' as fill color
	 * rect(0, 10, 45, 80);  // Draw rectangle
	 *
	 * c = color('hsla(160, 100%, 50%, 0.5)');
	 * fill(c); // Use updated 'c' as fill color
	 * rect(55, 10, 45, 80);  // Draw rectangle
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // HSB color is also supported and can be specified
	 * // by value
	 * var c;
	 * noStroke();  // Don't draw a stroke around shapes
	 * c = color('hsb(160, 100%, 50%)');
	 * fill(c);  // Use 'c' as fill color
	 * rect(0, 10, 45, 80);  // Draw rectangle
	 *
	 * c = color('hsba(160, 100%, 50%, 0.5)');
	 * fill(c); // Use updated 'c' as fill color
	 * rect(55, 10, 45, 80);  // Draw rectangle
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var c;  // Declare color 'c'
	 * noStroke();  // Don't draw a stroke around shapes
	 *
	 * // If no colorMode is specified, then the
	 * // default of RGB with scale of 0-255 is used.
	 * c = color(50, 55, 100);  // Create a color for 'c'
	 * fill(c);  // Use color variable 'c' as fill color
	 * rect(0, 10, 45, 80);  // Draw left rect
	 *
	 * colorMode(HSB, 100);  // Use HSB with scale of 0-100
	 * c = color(50, 55, 100);  // Update 'c' with new color
	 * fill(c);  // Use updated 'c' as fill color
	 * rect(55, 10, 45, 80);  // Draw right rect
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Yellow rect in middle right of canvas, with 55 pixel width and height.
	 * Yellow ellipse in top left of canvas, black ellipse in bottom right,both 80x80.
	 * Bright fuschia rect in middle of canvas, 60 pixel width and height.
	 * Two bright green rects on opposite sides of the canvas, both 45x80.
	 * Four blue rects in each corner of the canvas, each are 35x35.
	 * Bright sea green rect on left and darker rect on right of canvas, both 45x80.
	 * Dark green rect on left and lighter green rect on right of canvas, both 45x80.
	 * Dark blue rect on left and light teal rect on right of canvas, both 45x80.
	 *
	 */

	/**
	 * @method color
	 * @param  {Number|String} v1      red or hue value relative to
	 *                                 the current color range, or a color string
	 * @param  {Number}        v2      green or saturation value
	 *                                 relative to the current color range
	 * @param  {Number}        v3      blue or brightness value
	 *                                 relative to the current color range
	 * @param  {Number}        [alpha]
	 */

	p5.prototype.color = function() {
	  if (arguments[0] instanceof p5.Color) {
	    return arguments[0];  // Do nothing if argument is already a color object.
	  } else if (arguments[0] instanceof Array) {
	    if (this instanceof p5.Renderer) {
	      return new p5.Color(this, arguments[0]);
	    } else {
	      return new p5.Color(this._renderer, arguments[0]);
	    }
	  } else {
	    if (this instanceof p5.Renderer) {
	      return new p5.Color(this, arguments);
	    } else {
	      return new p5.Color(this._renderer, arguments);
	    }
	  }
	};

	/**
	 * Extracts the green value from a color or pixel array.
	 *
	 * @method green
	 * @param {Object} color p5.Color object or pixel array
	 * @example
	 * <div>
	 * <code>
	 * c = color(20, 75, 200);  // Define color 'c'
	 * fill(c);  // Use color variable 'c' as fill color
	 * rect(15, 20, 35, 60);  // Draw left rectangle
	 *
	 * greenValue = green(c);  // Get green in 'c'
	 * print(greenValue);  // Print "75.0"
	 * fill(0, greenValue, 0);  // Use 'greenValue' in new fill
	 * rect(50, 20, 35, 60);  // Draw right rectangle
	 * </code>
	 * </div>
	 *
	 * @alt
	 * blue rect on left and green on right, both with black outlines & 35x60.
	 *
	 */

	p5.prototype.green = function(c) {
	  if (c instanceof p5.Color || c instanceof Array) {
	    return this.color(c)._getGreen();
	  } else {
	    throw new Error('Needs p5.Color or pixel array as argument.');
	  }
	};

	/**
	 * Extracts the hue value from a color or pixel array.
	 *
	 * Hue exists in both HSB and HSL. This function will return the
	 * HSB-normalized hue when supplied with an HSB color object (or when supplied
	 * with a pixel array while the color mode is HSB), but will default to the
	 * HSL-normalized hue otherwise. (The values will only be different if the
	 * maximum hue setting for each system is different.)
	 *
	 * @method hue
	 * @param {Object} color p5.Color object or pixel array
	 * @example
	 * <div>
	 * <code>
	 * noStroke();
	 * colorMode(HSB, 255);
	 * c = color(0, 126, 255);
	 * fill(c);
	 * rect(15, 20, 35, 60);
	 * value = hue(c);  // Sets 'value' to "0"
	 * fill(value);
	 * rect(50, 20, 35, 60);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * salmon pink rect on left and black on right, both 35x60.
	 *
	 */

	p5.prototype.hue = function(c) {
	  if (c instanceof p5.Color || c instanceof Array) {
	    return this.color(c)._getHue();
	  } else {
	    throw new Error('Needs p5.Color or pixel array as argument.');
	  }
	};

	/**
	 * Blends two colors to find a third color somewhere between them. The amt
	 * parameter is the amount to interpolate between the two values where 0.0
	 * equal to the first color, 0.1 is very near the first color, 0.5 is halfway
	 * in between, etc. An amount below 0 will be treated as 0. Likewise, amounts
	 * above 1 will be capped at 1. This is different from the behavior of lerp(),
	 * but necessary because otherwise numbers outside the range will produce
	 * strange and unexpected colors.
	 * <br><br>
	 * The way that colours are interpolated depends on the current color mode.
	 *
	 * @method lerpColor
	 * @param  {Array/Number} c1  interpolate from this color
	 * @param  {Array/Number} c2  interpolate to this color
	 * @param  {Number}       amt number between 0 and 1
	 * @return {Array/Number}     interpolated color
	 * @example
	 * <div>
	 * <code>
	 * colorMode(RGB);
	 * stroke(255);
	 * background(51);
	 * from = color(218, 165, 32);
	 * to = color(72, 61, 139);
	 * colorMode(RGB);  // Try changing to HSB.
	 * interA = lerpColor(from, to, .33);
	 * interB = lerpColor(from, to, .66);
	 * fill(from);
	 * rect(10, 20, 20, 60);
	 * fill(interA);
	 * rect(30, 20, 20, 60);
	 * fill(interB);
	 * rect(50, 20, 20, 60);
	 * fill(to);
	 * rect(70, 20, 20, 60);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 4 rects one tan, brown, brownish purple, purple, with white outlines & 20x60
	 *
	 */

	p5.prototype.lerpColor = function(c1, c2, amt) {
	  var mode = this._renderer._colorMode;
	  var maxes = this._renderer._colorMaxes;
	  var l0, l1, l2, l3;
	  var fromArray, toArray;

	  if (mode === constants.RGB) {
	    fromArray = c1.levels.map(function(level) {
	      return level / 255;
	    });
	    toArray = c2.levels.map(function(level) {
	      return level / 255;
	    });
	  } else if (mode === constants.HSB) {
	    c1._getBrightness();  // Cache hsba so it definitely exists.
	    c2._getBrightness();
	    fromArray = c1.hsba;
	    toArray = c2.hsba;
	  } else if (mode === constants.HSL) {
	    c1._getLightness();  // Cache hsla so it definitely exists.
	    c2._getLightness();
	    fromArray = c1.hsla;
	    toArray = c2.hsla;
	  } else {
	    throw new Error (mode + 'cannot be used for interpolation.');
	  }

	  // Prevent extrapolation.
	  amt = Math.max(Math.min(amt, 1), 0);

	  // Perform interpolation.
	  l0 = this.lerp(fromArray[0], toArray[0], amt);
	  l1 = this.lerp(fromArray[1], toArray[1], amt);
	  l2 = this.lerp(fromArray[2], toArray[2], amt);
	  l3 = this.lerp(fromArray[3], toArray[3], amt);

	  // Scale components.
	  l0 *= maxes[mode][0];
	  l1 *= maxes[mode][1];
	  l2 *= maxes[mode][2];
	  l3 *= maxes[mode][3];

	  return this.color(l0, l1, l2, l3);
	};

	/**
	 * Extracts the HSL lightness value from a color or pixel array.
	 *
	 * @method lightness
	 * @param {Object} color p5.Color object or pixel array
	 * @example
	 * <div>
	 * <code>
	 * noStroke();
	 * colorMode(HSL);
	 * c = color(156, 100, 50, 1);
	 * fill(c);
	 * rect(15, 20, 35, 60);
	 * value = lightness(c);  // Sets 'value' to 50
	 * fill(value);
	 * rect(50, 20, 35, 60);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * light pastel green rect on left and dark grey rect on right, both 35x60.
	 *
	 */
	p5.prototype.lightness = function(c) {
	  if (c instanceof p5.Color || c instanceof Array) {
	    return this.color(c)._getLightness();
	  } else {
	    throw new Error('Needs p5.Color or pixel array as argument.');
	  }
	};

	/**
	 * Extracts the red value from a color or pixel array.
	 *
	 * @method red
	 * @param {Object} obj p5.Color object or pixel array
	 * @example
	 * <div>
	 * <code>
	 * c = color(255, 204, 0);  // Define color 'c'
	 * fill(c);  // Use color variable 'c' as fill color
	 * rect(15, 20, 35, 60);  // Draw left rectangle
	 *
	 * redValue = red(c);  // Get red in 'c'
	 * print(redValue);  // Print "255.0"
	 * fill(redValue, 0, 0);  // Use 'redValue' in new fill
	 * rect(50, 20, 35, 60);  // Draw right rectangle
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * colorMode(RGB, 255);
	 * var c = color(127, 255, 0);
	 * colorMode(RGB, 1);
	 * var myColor = red(c);
	 * print(myColor);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * yellow rect on left and red rect on right, both with black outlines and 35x60.
	 * grey canvas
	 */
	p5.prototype.red = function(c) {
	  if (c instanceof p5.Color || c instanceof Array) {
	    return this.color(c)._getRed();
	  } else {
	    throw new Error('Needs p5.Color or pixel array as argument.');
	  }
	};

	/**
	 * Extracts the saturation value from a color or pixel array.
	 *
	 * Saturation is scaled differently in HSB and HSL. This function will return
	 * the HSB saturation when supplied with an HSB color object (or when supplied
	 * with a pixel array while the color mode is HSB), but will default to the
	 * HSL saturation otherwise.
	 *
	 * @method saturation
	 * @param {Object} color p5.Color object or pixel array
	 * @example
	 * <div>
	 * <code>
	 * noStroke();
	 * colorMode(HSB, 255);
	 * c = color(0, 126, 255);
	 * fill(c);
	 * rect(15, 20, 35, 60);
	 * value = saturation(c);  // Sets 'value' to 126
	 * fill(value);
	 * rect(50, 20, 35, 60);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *deep pink rect on left and grey rect on right, both 35x60.
	 *
	 */

	p5.prototype.saturation = function(c) {
	  if (c instanceof p5.Color || c instanceof Array) {
	    return this.color(c)._getSaturation();
	  } else {
	    throw new Error('Needs p5.Color or pixel array as argument.');
	  }
	};

	module.exports = p5;

	},{"../core/constants":36,"../core/core":37,"./p5.Color":31}],31:[function(_dereq_,module,exports){
	/**
	 * @module Color
	 * @submodule Creating & Reading
	 * @for p5
	 * @requires core
	 * @requires constants
	 * @requires color_conversion
	 */

	var p5 = _dereq_('../core/core');
	var constants = _dereq_('../core/constants');
	var color_conversion = _dereq_('./color_conversion');

	/**
	 * We define colors to be immutable objects. Each color stores the color mode
	 * and level maxes that applied at the time of its construction. These are
	 * used to interpret the input arguments and to format the output e.g. when
	 * saturation() is requested.
	 *
	 * Internally we store an array representing the ideal RGBA values in floating
	 * point form, normalized from 0 to 1. From this we calculate the closest
	 * screen color (RGBA levels from 0 to 255) and expose this to the renderer.
	 *
	 * We also cache normalized, floating point components of the color in various
	 * representations as they are calculated. This is done to prevent repeating a
	 * conversion that has already been performed.
	 *
	 * @class p5.Color
	 * @constructor
	 */
	p5.Color = function(renderer, vals) {

	  // Record color mode and maxes at time of construction.
	  this.mode = renderer._colorMode;
	  this.maxes = renderer._colorMaxes;

	  // Calculate normalized RGBA values.
	  if (this.mode !== constants.RGB &&
	      this.mode !== constants.HSL &&
	      this.mode !== constants.HSB) {
	    throw new Error(this.mode + ' is an invalid colorMode.');
	  } else {
	    this._array = p5.Color._parseInputs.apply(renderer, vals);
	  }

	  // Expose closest screen color.
	  this.levels = this._array.map(function(level) {
	    return Math.round(level * 255);
	  });

	  return this;
	};

	p5.Color.prototype.toString = function() {
	  var a = this.levels;
	  var alpha = this._array[3];  // String representation uses normalized alpha.
	  return 'rgba('+a[0]+','+a[1]+','+a[2]+','+ alpha +')';
	};

	p5.Color.prototype._getAlpha = function() {
	  return this._array[3] * this.maxes[this.mode][3];
	};

	p5.Color.prototype._getBlue = function() {
	  return this._array[2] * this.maxes[constants.RGB][2];
	};

	p5.Color.prototype._getBrightness = function() {
	  if (!this.hsba) {
	    this.hsba = color_conversion._rgbaToHSBA(this._array);
	  }
	  return this.hsba[2] * this.maxes[constants.HSB][2];
	};

	p5.Color.prototype._getGreen = function() {
	  return this._array[1] * this.maxes[constants.RGB][1];
	};

	/**
	 * Hue is the same in HSB and HSL, but the maximum value may be different.
	 * This function will return the HSB-normalized saturation when supplied with
	 * an HSB color object, but will default to the HSL-normalized saturation
	 * otherwise.
	 */
	p5.Color.prototype._getHue = function() {
	  if (this.mode === constants.HSB) {
	    if (!this.hsba) {
	      this.hsba = color_conversion._rgbaToHSBA(this._array);
	    }
	    return this.hsba[0] * this.maxes[constants.HSB][0];
	  } else {
	    if (!this.hsla) {
	      this.hsla = color_conversion._rgbaToHSLA(this._array);
	    }
	    return this.hsla[0] * this.maxes[constants.HSL][0];
	  }
	};

	p5.Color.prototype._getLightness = function() {
	  if (!this.hsla) {
	    this.hsla = color_conversion._rgbaToHSLA(this._array);
	  }
	  return this.hsla[2] * this.maxes[constants.HSL][2];
	};

	p5.Color.prototype._getRed = function() {
	  return this._array[0] * this.maxes[constants.RGB][0];
	};

	/**
	 * Saturation is scaled differently in HSB and HSL. This function will return
	 * the HSB saturation when supplied with an HSB color object, but will default
	 * to the HSL saturation otherwise.
	 */
	p5.Color.prototype._getSaturation = function() {
	  if (this.mode === constants.HSB) {
	    if (!this.hsba) {
	      this.hsba = color_conversion._rgbaToHSBA(this._array);
	    }
	    return this.hsba[1] * this.maxes[constants.HSB][1];
	  } else {
	    if (!this.hsla) {
	      this.hsla = color_conversion._rgbaToHSLA(this._array);
	    }
	    return this.hsla[1] * this.maxes[constants.HSL][1];
	  }
	};

	/**
	 * CSS named colors.
	 */
	var namedColors = {
	  aliceblue:             '#f0f8ff',
	  antiquewhite:          '#faebd7',
	  aqua:                  '#00ffff',
	  aquamarine:            '#7fffd4',
	  azure:                 '#f0ffff',
	  beige:                 '#f5f5dc',
	  bisque:                '#ffe4c4',
	  black:                 '#000000',
	  blanchedalmond:        '#ffebcd',
	  blue:                  '#0000ff',
	  blueviolet:            '#8a2be2',
	  brown:                 '#a52a2a',
	  burlywood:             '#deb887',
	  cadetblue:             '#5f9ea0',
	  chartreuse:            '#7fff00',
	  chocolate:             '#d2691e',
	  coral:                 '#ff7f50',
	  cornflowerblue:        '#6495ed',
	  cornsilk:              '#fff8dc',
	  crimson:               '#dc143c',
	  cyan:                  '#00ffff',
	  darkblue:              '#00008b',
	  darkcyan:              '#008b8b',
	  darkgoldenrod:         '#b8860b',
	  darkgray:              '#a9a9a9',
	  darkgreen:             '#006400',
	  darkgrey:              '#a9a9a9',
	  darkkhaki:             '#bdb76b',
	  darkmagenta:           '#8b008b',
	  darkolivegreen:        '#556b2f',
	  darkorange:            '#ff8c00',
	  darkorchid:            '#9932cc',
	  darkred:               '#8b0000',
	  darksalmon:            '#e9967a',
	  darkseagreen:          '#8fbc8f',
	  darkslateblue:         '#483d8b',
	  darkslategray:         '#2f4f4f',
	  darkslategrey:         '#2f4f4f',
	  darkturquoise:         '#00ced1',
	  darkviolet:            '#9400d3',
	  deeppink:              '#ff1493',
	  deepskyblue:           '#00bfff',
	  dimgray:               '#696969',
	  dimgrey:               '#696969',
	  dodgerblue:            '#1e90ff',
	  firebrick:             '#b22222',
	  floralwhite:           '#fffaf0',
	  forestgreen:           '#228b22',
	  fuchsia:               '#ff00ff',
	  gainsboro:             '#dcdcdc',
	  ghostwhite:            '#f8f8ff',
	  gold:                  '#ffd700',
	  goldenrod:             '#daa520',
	  gray:                  '#808080',
	  green:                 '#008000',
	  greenyellow:           '#adff2f',
	  grey:                  '#808080',
	  honeydew:              '#f0fff0',
	  hotpink:               '#ff69b4',
	  indianred:             '#cd5c5c',
	  indigo:                '#4b0082',
	  ivory:                 '#fffff0',
	  khaki:                 '#f0e68c',
	  lavender:              '#e6e6fa',
	  lavenderblush:         '#fff0f5',
	  lawngreen:             '#7cfc00',
	  lemonchiffon:          '#fffacd',
	  lightblue:             '#add8e6',
	  lightcoral:            '#f08080',
	  lightcyan:             '#e0ffff',
	  lightgoldenrodyellow:  '#fafad2',
	  lightgray:             '#d3d3d3',
	  lightgreen:            '#90ee90',
	  lightgrey:             '#d3d3d3',
	  lightpink:             '#ffb6c1',
	  lightsalmon:           '#ffa07a',
	  lightseagreen:         '#20b2aa',
	  lightskyblue:          '#87cefa',
	  lightslategray:        '#778899',
	  lightslategrey:        '#778899',
	  lightsteelblue:        '#b0c4de',
	  lightyellow:           '#ffffe0',
	  lime:                  '#00ff00',
	  limegreen:             '#32cd32',
	  linen:                 '#faf0e6',
	  magenta:               '#ff00ff',
	  maroon:                '#800000',
	  mediumaquamarine:      '#66cdaa',
	  mediumblue:            '#0000cd',
	  mediumorchid:          '#ba55d3',
	  mediumpurple:          '#9370db',
	  mediumseagreen:        '#3cb371',
	  mediumslateblue:       '#7b68ee',
	  mediumspringgreen:     '#00fa9a',
	  mediumturquoise:       '#48d1cc',
	  mediumvioletred:       '#c71585',
	  midnightblue:          '#191970',
	  mintcream:             '#f5fffa',
	  mistyrose:             '#ffe4e1',
	  moccasin:              '#ffe4b5',
	  navajowhite:           '#ffdead',
	  navy:                  '#000080',
	  oldlace:               '#fdf5e6',
	  olive:                 '#808000',
	  olivedrab:             '#6b8e23',
	  orange:                '#ffa500',
	  orangered:             '#ff4500',
	  orchid:                '#da70d6',
	  palegoldenrod:         '#eee8aa',
	  palegreen:             '#98fb98',
	  paleturquoise:         '#afeeee',
	  palevioletred:         '#db7093',
	  papayawhip:            '#ffefd5',
	  peachpuff:             '#ffdab9',
	  peru:                  '#cd853f',
	  pink:                  '#ffc0cb',
	  plum:                  '#dda0dd',
	  powderblue:            '#b0e0e6',
	  purple:                '#800080',
	  red:                   '#ff0000',
	  rosybrown:             '#bc8f8f',
	  royalblue:             '#4169e1',
	  saddlebrown:           '#8b4513',
	  salmon:                '#fa8072',
	  sandybrown:            '#f4a460',
	  seagreen:              '#2e8b57',
	  seashell:              '#fff5ee',
	  sienna:                '#a0522d',
	  silver:                '#c0c0c0',
	  skyblue:               '#87ceeb',
	  slateblue:             '#6a5acd',
	  slategray:             '#708090',
	  slategrey:             '#708090',
	  snow:                  '#fffafa',
	  springgreen:           '#00ff7f',
	  steelblue:             '#4682b4',
	  tan:                   '#d2b48c',
	  teal:                  '#008080',
	  thistle:               '#d8bfd8',
	  tomato:                '#ff6347',
	  turquoise:             '#40e0d0',
	  violet:                '#ee82ee',
	  wheat:                 '#f5deb3',
	  white:                 '#ffffff',
	  whitesmoke:            '#f5f5f5',
	  yellow:                '#ffff00',
	  yellowgreen:           '#9acd32'
	};

	/**
	 * These regular expressions are used to build up the patterns for matching
	 * viable CSS color strings: fragmenting the regexes in this way increases the
	 * legibility and comprehensibility of the code.
	 *
	 * Note that RGB values of .9 are not parsed by IE, but are supported here for
	 * color string consistency.
	 */
	var WHITESPACE = /\s*/;  // Match zero or more whitespace characters.
	var INTEGER = /(\d{1,3})/;  // Match integers: 79, 255, etc.
	var DECIMAL = /((?:\d+(?:\.\d+)?)|(?:\.\d+))/;  // Match 129.6, 79, .9, etc.
	var PERCENT = new RegExp(DECIMAL.source + '%');  // Match 12.9%, 79%, .9%, etc.

	/**
	 * Full color string patterns. The capture groups are necessary.
	 */
	var colorPatterns = {
	  // Match colors in format #XXX, e.g. #416.
	  HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,

	  // Match colors in format #XXXXXX, e.g. #b4d455.
	  HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,

	  // Match colors in format rgb(R, G, B), e.g. rgb(255, 0, 128).
	  RGB: new RegExp([
	    '^rgb\\(',
	    INTEGER.source,
	    ',',
	    INTEGER.source,
	    ',',
	    INTEGER.source,
	    '\\)$'
	  ].join(WHITESPACE.source), 'i'),

	  // Match colors in format rgb(R%, G%, B%), e.g. rgb(100%, 0%, 28.9%).
	  RGB_PERCENT: new RegExp([
	    '^rgb\\(',
	    PERCENT.source,
	    ',',
	    PERCENT.source,
	    ',',
	    PERCENT.source,
	    '\\)$'
	  ].join(WHITESPACE.source), 'i'),

	  // Match colors in format rgb(R, G, B, A), e.g. rgb(255, 0, 128, 0.25).
	  RGBA: new RegExp([
	    '^rgba\\(',
	    INTEGER.source,
	    ',',
	    INTEGER.source,
	    ',',
	    INTEGER.source,
	    ',',
	    DECIMAL.source,
	    '\\)$'
	  ].join(WHITESPACE.source), 'i'),

	  // Match colors in format rgb(R%, G%, B%, A), e.g. rgb(100%, 0%, 28.9%, 0.5).
	  RGBA_PERCENT: new RegExp([
	    '^rgba\\(',
	    PERCENT.source,
	    ',',
	    PERCENT.source,
	    ',',
	    PERCENT.source,
	    ',',
	    DECIMAL.source,
	    '\\)$'
	  ].join(WHITESPACE.source), 'i'),

	  // Match colors in format hsla(H, S%, L%), e.g. hsl(100, 40%, 28.9%).
	  HSL: new RegExp([
	    '^hsl\\(',
	    INTEGER.source,
	    ',',
	    PERCENT.source,
	    ',',
	    PERCENT.source,
	    '\\)$'
	  ].join(WHITESPACE.source), 'i'),

	  // Match colors in format hsla(H, S%, L%, A), e.g. hsla(100, 40%, 28.9%, 0.5).
	  HSLA: new RegExp([
	    '^hsla\\(',
	    INTEGER.source,
	    ',',
	    PERCENT.source,
	    ',',
	    PERCENT.source,
	    ',',
	    DECIMAL.source,
	    '\\)$'
	  ].join(WHITESPACE.source), 'i'),

	  // Match colors in format hsb(H, S%, B%), e.g. hsb(100, 40%, 28.9%).
	  HSB: new RegExp([
	    '^hsb\\(',
	    INTEGER.source,
	    ',',
	    PERCENT.source,
	    ',',
	    PERCENT.source,
	    '\\)$'
	  ].join(WHITESPACE.source), 'i'),

	  // Match colors in format hsba(H, S%, B%, A), e.g. hsba(100, 40%, 28.9%, 0.5).
	  HSBA: new RegExp([
	    '^hsba\\(',
	    INTEGER.source,
	    ',',
	    PERCENT.source,
	    ',',
	    PERCENT.source,
	    ',',
	    DECIMAL.source,
	    '\\)$'
	  ].join(WHITESPACE.source), 'i')
	};

	/**
	 * For a number of different inputs, returns a color formatted as [r, g, b, a]
	 * arrays, with each component normalized between 0 and 1.
	 *
	 * @param {Array-like} args An 'array-like' object that represents a list of
	 *                          arguments
	 * @return {Array}          a color formatted as [r, g, b, a]
	 *                          Example:
	 *                          input        ==> output
	 *                          g            ==> [g, g, g, 255]
	 *                          g,a          ==> [g, g, g, a]
	 *                          r, g, b      ==> [r, g, b, 255]
	 *                          r, g, b, a   ==> [r, g, b, a]
	 *                          [g]          ==> [g, g, g, 255]
	 *                          [g, a]       ==> [g, g, g, a]
	 *                          [r, g, b]    ==> [r, g, b, 255]
	 *                          [r, g, b, a] ==> [r, g, b, a]
	 * @example
	 * <div>
	 * <code>
	 * // todo
	 * </code>
	 * </div>
	 *
	 * @alt
	 * //todo
	 *
	 */
	p5.Color._parseInputs = function() {
	  var numArgs = arguments.length;
	  var mode = this._colorMode;
	  var maxes = this._colorMaxes;
	  var results = [];

	  if (numArgs >= 3) {  // Argument is a list of component values.

	    results[0] = arguments[0] / maxes[mode][0];
	    results[1] = arguments[1] / maxes[mode][1];
	    results[2] = arguments[2] / maxes[mode][2];

	    // Alpha may be undefined, so default it to 100%.
	    if (typeof arguments[3] === 'number') {
	      results[3] = arguments[3] / maxes[mode][3];
	    } else {
	      results[3] = 1;
	    }

	    // Constrain components to the range [0,1].
	    results = results.map(function(value) {
	      return Math.max(Math.min(value, 1), 0);
	    });

	    // Convert to RGBA and return.
	    if (mode === constants.HSL) {
	      return color_conversion._hslaToRGBA(results);
	    } else if (mode === constants.HSB) {
	      return color_conversion._hsbaToRGBA(results);
	    } else {
	      return results;
	    }

	  } else if (numArgs === 1 && typeof arguments[0] === 'string') {

	    var str = arguments[0].trim().toLowerCase();

	    // Return if string is a named colour.
	    if (namedColors[str]) {
	      return p5.Color._parseInputs.apply(this, [namedColors[str]]);
	    }

	    // Try RGBA pattern matching.
	    if (colorPatterns.HEX3.test(str)) {  // #rgb
	      results = colorPatterns.HEX3.exec(str).slice(1).map(function(color) {
	        return parseInt(color + color, 16) / 255;
	      });
	      results[3] = 1;
	      return results;
	    } else if (colorPatterns.HEX6.test(str)) {  // #rrggbb
	      results = colorPatterns.HEX6.exec(str).slice(1).map(function(color) {
	        return parseInt(color, 16) / 255;
	      });
	      results[3] = 1;
	      return results;
	    } else if (colorPatterns.RGB.test(str)) {  // rgb(R,G,B)
	      results = colorPatterns.RGB.exec(str).slice(1).map(function(color) {
	        return color / 255;
	      });
	      results[3] = 1;
	      return results;
	    } else if (colorPatterns.RGB_PERCENT.test(str)) {  // rgb(R%,G%,B%)
	      results = colorPatterns.RGB_PERCENT.exec(str).slice(1)
	        .map(function(color) {
	          return parseFloat(color) / 100;
	        });
	      results[3] = 1;
	      return results;
	    } else if (colorPatterns.RGBA.test(str)) {  // rgba(R,G,B,A)
	      results = colorPatterns.RGBA.exec(str).slice(1)
	        .map(function(color, idx) {
	          if (idx === 3) {
	            return parseFloat(color);
	          }
	          return color / 255;
	        });
	      return results;
	    } else if (colorPatterns.RGBA_PERCENT.test(str)) {  // rgba(R%,G%,B%,A%)
	      results = colorPatterns.RGBA_PERCENT.exec(str).slice(1)
	        .map(function(color, idx) {
	          if (idx === 3) {
	            return parseFloat(color);
	          }
	          return parseFloat(color) / 100;
	        });
	      return results;
	    }

	    // Try HSLA pattern matching.
	    if (colorPatterns.HSL.test(str)) {  // hsl(H,S,L)
	      results = colorPatterns.HSL.exec(str).slice(1)
	        .map(function(color, idx) {
	        if (idx === 0) {
	          return parseInt(color, 10) / 360;
	        }
	        return parseInt(color, 10) / 100;
	      });
	      results[3] = 1;
	    } else if (colorPatterns.HSLA.test(str)) {  // hsla(H,S,L,A)
	      results = colorPatterns.HSLA.exec(str).slice(1)
	        .map(function(color, idx) {
	        if (idx === 0) {
	          return parseInt(color, 10) / 360;
	        }
	        else if (idx === 3) {
	          return parseFloat(color);
	        }
	        return parseInt(color, 10) / 100;
	      });
	    }
	    if (results.length) {
	      return color_conversion._hslaToRGBA(results);
	    }

	    // Try HSBA pattern matching.
	    if (colorPatterns.HSB.test(str)) {  // hsb(H,S,B)
	      results = colorPatterns.HSB.exec(str).slice(1)
	        .map(function(color, idx) {
	        if (idx === 0) {
	          return parseInt(color, 10) / 360;
	        }
	        return parseInt(color, 10) / 100;
	      });
	      results[3] = 1;
	    } else if (colorPatterns.HSBA.test(str)) {  // hsba(H,S,B,A)
	      results = colorPatterns.HSBA.exec(str).slice(1)
	        .map(function(color, idx) {
	        if (idx === 0) {
	          return parseInt(color, 10) / 360;
	        }
	        else if (idx === 3) {
	          return parseFloat(color);
	        }
	        return parseInt(color, 10) / 100;
	      });
	    }
	    if (results.length) {
	      return color_conversion._hsbaToRGBA(results);
	    }

	    // Input did not match any CSS color pattern: default to white.
	    results = [1, 1, 1, 1];

	  } else if ((numArgs === 1 || numArgs === 2) &&
	              typeof arguments[0] === 'number') {  // 'Grayscale' mode.

	    /**
	     * For HSB and HSL, interpret the gray level as a brightness/lightness
	     * value (they are equivalent when chroma is zero). For RGB, normalize the
	     * gray level according to the blue maximum.
	     */
	    results[0] = arguments[0] / maxes[mode][2];
	    results[1] = arguments[0] / maxes[mode][2];
	    results[2] = arguments[0] / maxes[mode][2];

	    // Alpha may be undefined, so default it to 100%.
	    if (typeof arguments[1] === 'number') {
	      results[3] = arguments[1] / maxes[mode][3];
	    } else {
	      results[3] = 1;
	    }

	    // Constrain components to the range [0,1].
	    results = results.map(function(value) {
	      return Math.max(Math.min(value, 1), 0);
	    });

	  } else {
	    throw new Error (arguments + 'is not a valid color representation.');
	  }

	  return results;
	};

	module.exports = p5.Color;

	},{"../core/constants":36,"../core/core":37,"./color_conversion":29}],32:[function(_dereq_,module,exports){
	/**
	 * @module Color
	 * @submodule Setting
	 * @for p5
	 * @requires core
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var constants = _dereq_('../core/constants');
	_dereq_('./p5.Color');

	/**
	 * The background() function sets the color used for the background of the
	 * p5.js canvas. The default background is light gray. This function is
	 * typically used within draw() to clear the display window at the beginning
	 * of each frame, but it can be used inside setup() to set the background on
	 * the first frame of animation or if the background need only be set once.
	 *
	 * @method background
	 * @param {p5.Color} color     any value created by the color() function
	 * @param {Number} [a]         opacity of the background relative to current
	 *                             color range (default is 0-100)
	 *
	 * @example
	 * <div>
	 * <code>
	 * // Grayscale integer value
	 * background(51);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // R, G & B integer values
	 * background(255, 204, 0);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // H, S & B integer values
	 * colorMode(HSB);
	 * background(255, 204, 100);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // Named SVG/CSS color string
	 * background('red');
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // three-digit hexadecimal RGB notation
	 * background('#fae');
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // six-digit hexadecimal RGB notation
	 * background('#222222');
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // integer RGB notation
	 * background('rgb(0,255,0)');
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // integer RGBA notation
	 * background('rgba(0,255,0, 0.25)');
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // percentage RGB notation
	 * background('rgb(100%,0%,10%)');
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // percentage RGBA notation
	 * background('rgba(100%,0%,100%,0.5)');
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // p5 Color object
	 * background(color(0, 0, 255));
	 * </code>
	 * </div>
	 *
	 * @alt
	 * canvas with darkest charcoal grey background.
	 * canvas with yellow background.
	 * canvas with royal blue background.
	 * canvas with red background.
	 * canvas with pink background.
	 * canvas with black background.
	 * canvas with bright green background.
	 * canvas with soft green background.
	 * canvas with red background.
	 * canvas with light purple background.
	 * canvas with blue background.
	 */

	/**
	 * @method background
	 * @param {String} colorstring color string, possible formats include: integer
	 *                         rgb() or rgba(), percentage rgb() or rgba(),
	 *                         3-digit hex, 6-digit hex
	 * @param {Number} [a]
	 */

	/**
	 * @method background
	 * @param {Number} gray   specifies a value between white and black
	 * @param {Number} [a]
	 */

	/**
	 * @method background
	 * @param {Number} v1     red or hue value (depending on the current color
	 *                        mode)
	 * @param {Number} v2     green or saturation value (depending on the current
	 *                        color mode)
	 * @param {Number} v3     blue or brightness value (depending on the current
	 *                        color mode)
	 * @param  {Number} [a]
	 */

	/**
	 * @method background
	 * @param {p5.Image} image     image created with loadImage() or createImage(),
	 *                             to set as background
	 *                             (must be same size as the sketch window)
	 * @param  {Number}  [a]
	 */
	p5.prototype.background = function() {
	  if (arguments[0] instanceof p5.Image) {
	    this.image(arguments[0], 0, 0, this.width, this.height);
	  } else {
	    this._renderer.background.apply(this._renderer, arguments);
	  }
	  return this;
	};

	/**
	 * Clears the pixels within a buffer. This function only works on p5.Canvas
	 * objects created with the createCanvas() function; it won't work with the
	 * main display window. Unlike the main graphics context, pixels in
	 * additional graphics areas created with createGraphics() can be entirely
	 * or partially transparent. This function clears everything to make all of
	 * the pixels 100% transparent.
	 *
	 * @method clear
	 * @example
	 * <div>
	 * <code>
	 * // Clear the screen on mouse press.
	 * function setup() {
	 *   createCanvas(100, 100);
	 * }
	 *
	 * function draw() {
	 *   ellipse(mouseX, mouseY, 20, 20);
	 * }
	 *
	 * function mousePressed() {
	 *   clear();
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 20x20 white ellipses are continually drawn at mouse x and y coordinates.
	 *
	 */

	p5.prototype.clear = function() {
	  this._renderer.clear();
	  return this;
	};

	/**
	 * colorMode() changes the way p5.js interprets color data. By default, the
	 * parameters for fill(), stroke(), background(), and color() are defined by
	 * values between 0 and 255 using the RGB color model. This is equivalent to
	 * setting colorMode(RGB, 255). Setting colorMode(HSB) lets you use the HSB
	 * system instead. By default, this is colorMode(HSB, 360, 100, 100, 1). You
	 * can also use HSL.
	 * <br><br>
	 * Note: existing color objects remember the mode that they were created in,
	 * so you can change modes as you like without affecting their appearance.
	 *
	 * @method colorMode
	 * @param {Constant} mode   either RGB or HSB, corresponding to
	 *                          Red/Green/Blue and Hue/Saturation/Brightness
	 *                          (or Lightness)
	 * @param {Number} [max1] range for the red or hue depending on the
	 *                              current color mode, or range for all values
	 * @param {Number} [max2] range for the green or saturation depending
	 *                              on the current color mode
	 * @param {Number} [max3] range for the blue or brightness/lighntess
	 *                              depending on the current color mode
	 * @param {Number} [maxA] range for the alpha
	 * @example
	 * <div>
	 * <code>
	 * noStroke();
	 * colorMode(RGB, 100);
	 * for (i = 0; i < 100; i++) {
	 *   for (j = 0; j < 100; j++) {
	 *     stroke(i, j, 0);
	 *     point(i, j);
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * noStroke();
	 * colorMode(HSB, 100);
	 * for (i = 0; i < 100; i++) {
	 *   for (j = 0; j < 100; j++) {
	 *     stroke(i, j, 100);
	 *     point(i, j);
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * colorMode(RGB, 255);
	 * var c = color(127, 255, 0);
	 *
	 * colorMode(RGB, 1);
	 * var myColor = c._getRed();
	 * text(myColor, 10, 10, 80, 80);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * noFill();
	 * colorMode(RGB, 255, 255, 255, 1);
	 * background(255);
	 *
	 * strokeWeight(4);
	 * stroke(255, 0 , 10, 0.3);
	 * ellipse(40, 40, 50, 50);
	 * ellipse(50, 50, 40, 40);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *Green to red gradient from bottom L to top R. shading originates from top left.
	 *Rainbow gradient from left to right. Brightness increasing to white at top.
	 *unknown image.
	 *50x50 ellipse at middle L & 40x40 ellipse at center. Transluscent pink outlines.
	 *
	 */
	p5.prototype.colorMode = function() {
	  if (arguments[0] === constants.RGB ||
	      arguments[0] === constants.HSB ||
	      arguments[0] === constants.HSL) {

	    // Set color mode.
	    this._renderer._colorMode = arguments[0];

	    // Set color maxes.
	    var maxes = this._renderer._colorMaxes[this._renderer._colorMode];
	    if (arguments.length === 2) {
	      maxes[0] = arguments[1];  // Red
	      maxes[1] = arguments[1];  // Green
	      maxes[2] = arguments[1];  // Blue
	      maxes[3] = arguments[1];  // Alpha
	    } else if (arguments.length === 4) {
	      maxes[0] = arguments[1];  // Red
	      maxes[1] = arguments[2];  // Green
	      maxes[2] = arguments[3];  // Blue
	    } else if (arguments.length === 5) {
	      maxes[0] = arguments[1];  // Red
	      maxes[1] = arguments[2];  // Green
	      maxes[2] = arguments[3];  // Blue
	      maxes[3] = arguments[4];  // Alpha
	    }
	  }

	  return this;
	};

	/**
	 * Sets the color used to fill shapes. For example, if you run
	 * fill(204, 102, 0), all subsequent shapes will be filled with orange. This
	 * color is either specified in terms of the RGB or HSB color depending on
	 * the current colorMode(). (The default color space is RGB, with each value
	 * in the range from 0 to 255).
	 * <br><br>
	 * If a single string argument is provided, RGB, RGBA and Hex CSS color strings
	 * and all named color strings are supported. A p5 Color object can also be
	 * provided to set the fill color.
	 *
	 * @method fill
	 * @param {Number|Array|String|p5.Color} v1   gray value, red or hue value
	 *                                            (depending on the current color
	 *                                            mode), or color Array, or CSS
	 *                                            color string
	 * @param {Number}                       [v2] green or saturation value
	 *                                            (depending on the current
	 *                                            color mode)
	 * @param {Number}                       [v3] blue or brightness value
	 *                                            (depending on the current
	 *                                            color mode)
	 * @param {Number}                       [a]  opacity of the background
	 *
	 * @example
	 * <div>
	 * <code>
	 * // Grayscale integer value
	 * fill(51);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // R, G & B integer values
	 * fill(255, 204, 0);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // H, S & B integer values
	 * colorMode(HSB);
	 * fill(255, 204, 100);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // Named SVG/CSS color string
	 * fill('red');
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // three-digit hexadecimal RGB notation
	 * fill('#fae');
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // six-digit hexadecimal RGB notation
	 * fill('#222222');
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // integer RGB notation
	 * fill('rgb(0,255,0)');
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // integer RGBA notation
	 * fill('rgba(0,255,0, 0.25)');
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // percentage RGB notation
	 * fill('rgb(100%,0%,10%)');
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // percentage RGBA notation
	 * fill('rgba(100%,0%,100%,0.5)');
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // p5 Color object
	 * fill(color(0, 0, 255));
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 * @alt
	 * 60x60 dark charcoal grey rect with black outline in center of canvas.
	 * 60x60 yellow rect with black outline in center of canvas.
	 * 60x60 royal blue rect with black outline in center of canvas.
	 * 60x60 red rect with black outline in center of canvas.
	 * 60x60 pink rect with black outline in center of canvas.
	 * 60x60 black rect with black outline in center of canvas.
	 * 60x60 light green rect with black outline in center of canvas.
	 * 60x60 soft green rect with black outline in center of canvas.
	 * 60x60 red rect with black outline in center of canvas.
	 * 60x60 dark fushcia rect with black outline in center of canvas.
	 * 60x60 blue rect with black outline in center of canvas.
	 */

	p5.prototype.fill = function() {
	  this._renderer._setProperty('_fillSet', true);
	  this._renderer._setProperty('_doFill', true);
	  this._renderer.fill.apply(this._renderer, arguments);
	  return this;
	};

	/**
	 * Disables filling geometry. If both noStroke() and noFill() are called,
	 * nothing will be drawn to the screen.
	 *
	 * @method noFill
	 * @example
	 * <div>
	 * <code>
	 * rect(15, 10, 55, 55);
	 * noFill();
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 * @alt
	 * white rect top middle and noFill rect center. Both 60x60 with black outlines.
	 */
	p5.prototype.noFill = function() {
	  this._renderer._setProperty('_doFill', false);
	  return this;
	};

	/**
	 * Disables drawing the stroke (outline). If both noStroke() and noFill()
	 * are called, nothing will be drawn to the screen.
	 *
	 * @method noStroke
	 * @example
	 * <div>
	 * <code>
	 * noStroke();
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 *
	 * @alt
	 *60x60 white rect at center. no outline.
	 *
	 */

	p5.prototype.noStroke = function() {
	  this._renderer._setProperty('_doStroke', false);
	  return this;
	};

	/**
	 * Sets the color used to draw lines and borders around shapes. This color
	 * is either specified in terms of the RGB or HSB color depending on the
	 * current colorMode() (the default color space is RGB, with each value in
	 * the range from 0 to 255).
	 * <br><br>
	 * If a single string argument is provided, RGB, RGBA and Hex CSS color
	 * strings and all named color strings are supported. A p5 Color object
	 * can also be provided to set the stroke color.
	 *
	 * @method stroke
	 * @param {Number|Array|String|p5.Color} v1   gray value, red or hue value
	 *                                            (depending on the current color
	 *                                            mode), or color Array, or CSS
	 *                                            color string
	 * @param {Number}                       [v2] green or saturation value
	 *                                            (depending on the current
	 *                                            color mode)
	 * @param {Number}                       [v3] blue or brightness value
	 *                                            (depending on the current
	 *                                            color mode)
	 * @param {Number}                       [a]  opacity of the background
	 *
	 * @example
	 * <div>
	 * <code>
	 * // Grayscale integer value
	 * strokeWeight(4);
	 * stroke(51);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // R, G & B integer values
	 * stroke(255, 204, 0);
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // H, S & B integer values
	 * colorMode(HSB);
	 * strokeWeight(4);
	 * stroke(255, 204, 100);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // Named SVG/CSS color string
	 * stroke('red');
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // three-digit hexadecimal RGB notation
	 * stroke('#fae');
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // six-digit hexadecimal RGB notation
	 * stroke('#222222');
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // integer RGB notation
	 * stroke('rgb(0,255,0)');
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // integer RGBA notation
	 * stroke('rgba(0,255,0,0.25)');
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // percentage RGB notation
	 * stroke('rgb(100%,0%,10%)');
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // percentage RGBA notation
	 * stroke('rgba(100%,0%,100%,0.5)');
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // p5 Color object
	 * stroke(color(0, 0, 255));
	 * strokeWeight(4);
	 * rect(20, 20, 60, 60);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 60x60 white rect at center. Dark charcoal grey outline.
	 * 60x60 white rect at center. Yellow outline.
	 * 60x60 white rect at center. Royal blue outline.
	 * 60x60 white rect at center. Red outline.
	 * 60x60 white rect at center. Pink outline.
	 * 60x60 white rect at center. Black outline.
	 * 60x60 white rect at center. Bright green outline.
	 * 60x60 white rect at center. Soft green outline.
	 * 60x60 white rect at center. Red outline.
	 * 60x60 white rect at center. Dark fushcia outline.
	 * 60x60 white rect at center. Blue outline.
	 */

	p5.prototype.stroke = function() {
	  this._renderer._setProperty('_strokeSet', true);
	  this._renderer._setProperty('_doStroke', true);
	  this._renderer.stroke.apply(this._renderer, arguments);
	  return this;
	};

	module.exports = p5;

	},{"../core/constants":36,"../core/core":37,"./p5.Color":31}],33:[function(_dereq_,module,exports){
	/**
	 * @module Shape
	 * @submodule 2D Primitives
	 * @for p5
	 * @requires core
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('./core');
	var constants = _dereq_('./constants');
	var canvas = _dereq_('./canvas');
	_dereq_('./error_helpers');

	/**
	 * Draw an arc to the screen. If called with only a, b, c, d, start, and
	 * stop, the arc will be drawn as an open pie. If mode is provided, the arc
	 * will be drawn either open, as a chord, or as a pie as specified. The
	 * origin may be changed with the ellipseMode() function.<br><br>
	 * Note that drawing a full circle (ex: 0 to TWO_PI) will appear blank
	 * because 0 and TWO_PI are the same position on the unit circle. The
	 * best way to handle this is by using the ellipse() function instead
	 * to create a closed ellipse, and to use the arc() function
	 * only to draw parts of an ellipse.
	 *
	 * @method arc
	 * @param  {Number} a      x-coordinate of the arc's ellipse
	 * @param  {Number} b      y-coordinate of the arc's ellipse
	 * @param  {Number} c      width of the arc's ellipse by default
	 * @param  {Number} d      height of the arc's ellipse by default
	 * @param  {Number} start  angle to start the arc, specified in radians
	 * @param  {Number} stop   angle to stop the arc, specified in radians
	 * @param  {Constant} [mode] optional parameter to determine the way of drawing
	 *                         the arc
	 * @return {Object}        the p5 object
	 * @example
	 * <div>
	 * <code>
	 * arc(50, 55, 50, 50, 0, HALF_PI);
	 * noFill();
	 * arc(50, 55, 60, 60, HALF_PI, PI);
	 * arc(50, 55, 70, 70, PI, PI+QUARTER_PI);
	 * arc(50, 55, 80, 80, PI+QUARTER_PI, TWO_PI);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * arc(50, 50, 80, 80, 0, PI+QUARTER_PI, OPEN);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * arc(50, 50, 80, 80, 0, PI+QUARTER_PI, CHORD);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * arc(50, 50, 80, 80, 0, PI+QUARTER_PI, PIE);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *shattered outline of an ellipse with a quarter of a white circle bottom-right.
	 *white ellipse with black outline with top right missing.
	 *white ellipse with top right missing with black outline around shape.
	 *white ellipse with top right quarter missing with black outline around the shape.
	 *
	 */
	p5.prototype.arc = function(x, y, w, h, start, stop, mode) {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  if (!this._renderer._doStroke && !this._renderer._doFill) {
	    return this;
	  }
	  if (this._angleMode === constants.DEGREES) {
	    start = this.radians(start);
	    stop = this.radians(stop);
	  }

	  // Make all angles positive...
	  while (start < 0) {
	    start += constants.TWO_PI;
	  }
	  while (stop < 0) {
	    stop += constants.TWO_PI;
	  }
	  // ...and confine them to the interval [0,TWO_PI).
	  start %= constants.TWO_PI;
	  stop %= constants.TWO_PI;

	  // account for full circle
	  if (stop === start) {
	    stop += constants.TWO_PI;
	  }

	  // Adjust angles to counter linear scaling.
	  if (start <= constants.HALF_PI) {
	    start = Math.atan(w / h * Math.tan(start));
	  } else  if (start > constants.HALF_PI && start <= 3 * constants.HALF_PI) {
	    start = Math.atan(w / h * Math.tan(start)) + constants.PI;
	  } else {
	    start = Math.atan(w / h * Math.tan(start)) + constants.TWO_PI;
	  }
	  if (stop <= constants.HALF_PI) {
	    stop = Math.atan(w / h * Math.tan(stop));
	  } else  if (stop > constants.HALF_PI && stop <= 3 * constants.HALF_PI) {
	    stop = Math.atan(w / h * Math.tan(stop)) + constants.PI;
	  } else {
	    stop = Math.atan(w / h * Math.tan(stop)) + constants.TWO_PI;
	  }

	  // Exceed the interval if necessary in order to preserve the size and
	  // orientation of the arc.
	  if (start > stop) {
	    stop += constants.TWO_PI;
	  }
	  // p5 supports negative width and heights for ellipses
	  w = Math.abs(w);
	  h = Math.abs(h);
	  this._renderer.arc(x, y, w, h, start, stop, mode);
	  return this;
	};

	/**
	 * Draws an ellipse (oval) to the screen. An ellipse with equal width and
	 * height is a circle. By default, the first two parameters set the location,
	 * and the third and fourth parameters set the shape's width and height. If
	 * no height is specified, the value of width is used for both the width and
	 * height. If a negative height or width is specified, the absolute value is taken.
	 * The origin may be changed with the ellipseMode() function.
	 *
	 * @method ellipse
	 * @param  {Number} x x-coordinate of the ellipse.
	 * @param  {Number} y y-coordinate of the ellipse.
	 * @param  {Number} w width of the ellipse.
	 * @param  {Number} [h] height of the ellipse.
	 * @return {p5}       the p5 object
	 * @example
	 * <div>
	 * <code>
	 * ellipse(56, 46, 55, 55);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *white ellipse with black outline in middle-right of canvas that is 55x55.
	 *
	 */
	/**
	 * @method ellipse
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Number} w
	 * @param {Number} [h]
	 * @return {p5}
	 */
	p5.prototype.ellipse = function() {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  // Duplicate 3rd argument if only 3 given.
	  if (args.length === 3) {
	    args.push(args[2]);
	  }
	  // p5 supports negative width and heights for rects
	  if (args[2] < 0){args[2] = Math.abs(args[2]);}
	  if (args[3] < 0){args[3] = Math.abs(args[3]);}
	  if (!this._renderer._doStroke && !this._renderer._doFill) {
	    return this;
	  }
	  var vals = canvas.modeAdjust(
	    args[0],
	    args[1],
	    args[2],
	    args[3],
	    this._renderer._ellipseMode);
	  args[0] = vals.x;
	  args[1] = vals.y;
	  args[2] = vals.w;
	  args[3] = vals.h;
	  this._renderer.ellipse(args);
	  return this;
	};
	/**
	 * Draws a line (a direct path between two points) to the screen. The version
	 * of line() with four parameters draws the line in 2D. To color a line, use
	 * the stroke() function. A line cannot be filled, therefore the fill()
	 * function will not affect the color of a line. 2D lines are drawn with a
	 * width of one pixel by default, but this can be changed with the
	 * strokeWeight() function.
	 *
	 * @method line
	 * @param  {Number} x1 the x-coordinate of the first point
	 * @param  {Number} y1 the y-coordinate of the first point
	 * @param  {Number} x2 the x-coordinate of the second point
	 * @param  {Number} y2 the y-coordinate of the second point
	 * @return {p5}        the p5 object
	 * @example
	 * <div>
	 * <code>
	 * line(30, 20, 85, 75);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * line(30, 20, 85, 20);
	 * stroke(126);
	 * line(85, 20, 85, 75);
	 * stroke(255);
	 * line(85, 75, 30, 75);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *line 78 pixels long running from mid-top to bottom-right of canvas.
	 *3 lines of various stroke sizes. Form top, bottom and right sides of a square.
	 *
	 */
	////commented out original
	// p5.prototype.line = function(x1, y1, x2, y2) {
	//   if (!this._renderer._doStroke) {
	//     return this;
	//   }
	//   if(this._renderer.isP3D){
	//   } else {
	//     this._renderer.line(x1, y1, x2, y2);
	//   }
	// };
	p5.prototype.line = function() {
	  if (!this._renderer._doStroke) {
	    return this;
	  }
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  //check whether we should draw a 3d line or 2d
	  if(this._renderer.isP3D){
	    this._renderer.line(
	      args[0],
	      args[1],
	      args[2],
	      args[3],
	      args[4],
	      args[5]);
	  } else {
	    this._renderer.line(
	      args[0],
	      args[1],
	      args[2],
	      args[3]);
	  }
	  return this;
	};

	/**
	 * Draws a point, a coordinate in space at the dimension of one pixel.
	 * The first parameter is the horizontal value for the point, the second
	 * value is the vertical value for the point. The color of the point is
	 * determined by the current stroke.
	 *
	 * @method point
	 * @param  {Number} x the x-coordinate
	 * @param  {Number} y the y-coordinate
	 * @return {p5}       the p5 object
	 * @example
	 * <div>
	 * <code>
	 * point(30, 20);
	 * point(85, 20);
	 * point(85, 75);
	 * point(30, 75);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *4 points centered in the middle-right of the canvas.
	 *
	 */
	p5.prototype.point = function() {
	  if (!this._renderer._doStroke) {
	    return this;
	  }
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  //check whether we should draw a 3d line or 2d
	  if(this._renderer.isP3D){
	    this._renderer.point(
	      args[0],
	      args[1],
	      args[2]
	      );
	  } else {
	    this._renderer.point(
	      args[0],
	      args[1]
	    );
	  }
	  return this;
	};


	/**
	 * Draw a quad. A quad is a quadrilateral, a four sided polygon. It is
	 * similar to a rectangle, but the angles between its edges are not
	 * constrained to ninety degrees. The first pair of parameters (x1,y1)
	 * sets the first vertex and the subsequent pairs should proceed
	 * clockwise or counter-clockwise around the defined shape.
	 *
	 * @method quad
	 * @param {Number} x1 the x-coordinate of the first point
	 * @param {Number} y1 the y-coordinate of the first point
	 * @param {Number} x2 the x-coordinate of the second point
	 * @param {Number} y2 the y-coordinate of the second point
	 * @param {Number} x3 the x-coordinate of the third point
	 * @param {Number} y3 the y-coordinate of the third point
	 * @param {Number} x4 the x-coordinate of the fourth point
	 * @param {Number} y4 the y-coordinate of the fourth point
	 * @return {p5}     the p5 object
	 * @example
	 * <div>
	 * <code>
	 * quad(38, 31, 86, 20, 69, 63, 30, 76);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *irregular white quadrilateral shape with black outline mid-right of canvas.
	 *
	 */
	/**
	 * @method quad
	 * @param {Number} x1
	 * @param {Number} y1
	 * @param {Number} x2
	 * @param {Number} y2
	 * @param {Number} x3
	 * @param {Number} y3
	 * @param {Number} x4
	 * @param {Number} y4
	 * @return {p5} the p5 object
	 */
	p5.prototype.quad = function() {
	  if (!this._renderer._doStroke && !this._renderer._doFill) {
	    return this;
	  }
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  if(this._renderer.isP3D){
	    this._renderer.quad(
	      args[0],
	      args[1],
	      args[2],
	      args[3],
	      args[4],
	      args[5],
	      args[6],
	      args[7],
	      args[8],
	      args[9],
	      args[10],
	      args[11]
	      );
	  } else {
	    this._renderer.quad(
	     args[0],
	     args[1],
	     args[2],
	     args[3],
	     args[4],
	     args[5],
	     args[6],
	    args[7]
	    );
	  }
	  return this;
	};

	/**
	* Draws a rectangle to the screen. A rectangle is a four-sided shape with
	* every angle at ninety degrees. By default, the first two parameters set
	* the location of the upper-left corner, the third sets the width, and the
	* fourth sets the height. The way these parameters are interpreted, however,
	* may be changed with the rectMode() function.
	* <br><br>
	* The fifth, sixth, seventh and eighth parameters, if specified,
	* determine corner radius for the top-right, top-left, lower-right and
	* lower-left corners, respectively. An omitted corner radius parameter is set
	* to the value of the previously specified radius value in the parameter list.
	*
	* @method rect
	* @param  {Number} x  x-coordinate of the rectangle.
	* @param  {Number} y  y-coordinate of the rectangle.
	* @param  {Number} w  width of the rectangle.
	* @param  {Number} h  height of the rectangle.
	* @param  {Number} [tl] optional radius of top-left corner.
	* @param  {Number} [tr] optional radius of top-right corner.
	* @param  {Number} [br] optional radius of bottom-right corner.
	* @param  {Number} [bl] optional radius of bottom-left corner.
	* @return {p5}          the p5 object.
	* @example
	* <div>
	* <code>
	* // Draw a rectangle at location (30, 20) with a width and height of 55.
	* rect(30, 20, 55, 55);
	* </code>
	* </div>
	*
	* <div>
	* <code>
	* // Draw a rectangle with rounded corners, each having a radius of 20.
	* rect(30, 20, 55, 55, 20);
	* </code>
	* </div>
	*
	* <div>
	* <code>
	* // Draw a rectangle with rounded corners having the following radii:
	* // top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.
	* rect(30, 20, 55, 55, 20, 15, 10, 5);
	* </code>
	* </div>
	*
	* @alt
	* 55x55 white rect with black outline in mid-right of canvas.
	* 55x55 white rect with black outline and rounded edges in mid-right of canvas.
	* 55x55 white rect with black outline and rounded edges of different radii.
	*/
	/**
	* @method rect
	* @param  {Number} x
	* @param  {Number} y
	* @param  {Number} w
	* @param  {Number} h
	* @param  {Number} [detailX]
	* @param  {Number} [detailY]
	* @return {p5}          the p5 object.
	*/
	p5.prototype.rect = function () {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  if (!this._renderer._doStroke && !this._renderer._doFill) {
	    return;
	  }
	  var vals = canvas.modeAdjust(
	    args[0],
	    args[1],
	    args[2],
	    args[3],
	    this._renderer._rectMode);
	  args[0] = vals.x;
	  args[1] = vals.y;
	  args[2] = vals.w;
	  args[3] = vals.h;
	  this._renderer.rect(args);
	  return this;
	};

	/**
	* A triangle is a plane created by connecting three points. The first two
	* arguments specify the first point, the middle two arguments specify the
	* second point, and the last two arguments specify the third point.
	*
	* @method triangle
	* @param  {Number} x1 x-coordinate of the first point
	* @param  {Number} y1 y-coordinate of the first point
	* @param  {Number} x2 x-coordinate of the second point
	* @param  {Number} y2 y-coordinate of the second point
	* @param  {Number} x3 x-coordinate of the third point
	* @param  {Number} y3 y-coordinate of the third point
	* @return {p5}        the p5 object
	* @example
	* <div>
	* <code>
	* triangle(30, 75, 58, 20, 86, 75);
	* </code>
	* </div>
	*
	*@alt
	* white triangle with black outline in mid-right of canvas.
	*
	*/
	p5.prototype.triangle = function() {

	  if (!this._renderer._doStroke && !this._renderer._doFill) {
	    return this;
	  }
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  this._renderer.triangle(args);
	  return this;
	};

	module.exports = p5;

	},{"./canvas":35,"./constants":36,"./core":37,"./error_helpers":40}],34:[function(_dereq_,module,exports){
	/**
	 * @module Shape
	 * @submodule Attributes
	 * @for p5
	 * @requires core
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('./core');
	var constants = _dereq_('./constants');

	/**
	 * Modifies the location from which ellipses are drawn by changing the way
	 * in which parameters given to ellipse() are interpreted.
	 * <br><br>
	 * The default mode is ellipseMode(CENTER), which interprets the first two
	 * parameters of ellipse() as the shape's center point, while the third and
	 * fourth parameters are its width and height.
	 * <br><br>
	 * ellipseMode(RADIUS) also uses the first two parameters of ellipse() as
	 * the shape's center point, but uses the third and fourth parameters to
	 * specify half of the shapes's width and height.
	 * <br><br>
	 * ellipseMode(CORNER) interprets the first two parameters of ellipse() as
	 * the upper-left corner of the shape, while the third and fourth parameters
	 * are its width and height.
	 * <br><br>
	 * ellipseMode(CORNERS) interprets the first two parameters of ellipse() as
	 * the location of one corner of the ellipse's bounding box, and the third
	 * and fourth parameters as the location of the opposite corner.
	 * <br><br>
	 * The parameter must be written in ALL CAPS because Javascript is a
	 * case-sensitive language.
	 *
	 * @method ellipseMode
	 * @param  {Constant} mode either CENTER, RADIUS, CORNER, or CORNERS
	 * @return {p5}                   the p5 object
	 * @example
	 * <div>
	 * <code>
	 * ellipseMode(RADIUS);  // Set ellipseMode to RADIUS
	 * fill(255);  // Set fill to white
	 * ellipse(50, 50, 30, 30);  // Draw white ellipse using RADIUS mode
	 *
	 * ellipseMode(CENTER);  // Set ellipseMode to CENTER
	 * fill(100);  // Set fill to gray
	 * ellipse(50, 50, 30, 30);  // Draw gray ellipse using CENTER mode
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * ellipseMode(CORNER);  // Set ellipseMode is CORNER
	 * fill(255);  // Set fill to white
	 * ellipse(25, 25, 50, 50);  // Draw white ellipse using CORNER mode
	 *
	 * ellipseMode(CORNERS);  // Set ellipseMode to CORNERS
	 * fill(100);  // Set fill to gray
	 * ellipse(25, 25, 50, 50);  // Draw gray ellipse using CORNERS mode
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 60x60 white ellipse and 30x30 grey ellipse with black outlines at center.
	 * 60x60 white ellipse @center and 30x30 grey ellipse top-right, black outlines.
	 *
	 */
	p5.prototype.ellipseMode = function(m) {
	  if (m === constants.CORNER ||
	    m === constants.CORNERS ||
	    m === constants.RADIUS ||
	    m === constants.CENTER) {
	    this._renderer._ellipseMode = m;
	  }
	  return this;
	};

	/**
	 * Draws all geometry with jagged (aliased) edges. Note that smooth() is
	 * active by default, so it is necessary to call noSmooth() to disable
	 * smoothing of geometry, images, and fonts.
	 *
	 * @method noSmooth
	 * @return {p5} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * background(0);
	 * noStroke();
	 * smooth();
	 * ellipse(30, 48, 36, 36);
	 * noSmooth();
	 * ellipse(70, 48, 36, 36);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 2 pixelated 36x36 white ellipses to left & right of center, black background
	 *
	 */
	p5.prototype.noSmooth = function() {
	  this._renderer.noSmooth();
	  return this;
	};

	/**
	 * Modifies the location from which rectangles are drawn by changing the way
	 * in which parameters given to rect() are interpreted.
	 * <br><br>
	 * The default mode is rectMode(CORNER), which interprets the first two
	 * parameters of rect() as the upper-left corner of the shape, while the
	 * third and fourth parameters are its width and height.
	 * <br><br>
	 * rectMode(CORNERS) interprets the first two parameters of rect() as the
	 * location of one corner, and the third and fourth parameters as the
	 * location of the opposite corner.
	 * <br><br>
	 * rectMode(CENTER) interprets the first two parameters of rect() as the
	 * shape's center point, while the third and fourth parameters are its
	 * width and height.
	 * <br><br>
	 * rectMode(RADIUS) also uses the first two parameters of rect() as the
	 * shape's center point, but uses the third and fourth parameters to specify
	 * half of the shapes's width and height.
	 * <br><br>
	 * The parameter must be written in ALL CAPS because Javascript is a
	 * case-sensitive language.
	 *
	 * @method rectMode
	 * @param  {Constant} mode either CORNER, CORNERS, CENTER, or RADIUS
	 * @return {p5}                   the p5 object
	 * @example
	 * <div>
	 * <code>
	 * rectMode(CORNER);  // Default rectMode is CORNER
	 * fill(255);  // Set fill to white
	 * rect(25, 25, 50, 50);  // Draw white rect using CORNER mode
	 *
	 * rectMode(CORNERS);  // Set rectMode to CORNERS
	 * fill(100);  // Set fill to gray
	 * rect(25, 25, 50, 50);  // Draw gray rect using CORNERS mode
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * rectMode(RADIUS);  // Set rectMode to RADIUS
	 * fill(255);  // Set fill to white
	 * rect(50, 50, 30, 30);  // Draw white rect using RADIUS mode
	 *
	 * rectMode(CENTER);  // Set rectMode to CENTER
	 * fill(100);  // Set fill to gray
	 * rect(50, 50, 30, 30);  // Draw gray rect using CENTER mode
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 white rect at center and 25x25 grey rect in the top left of the other.
	 * 50x50 white rect at center and 25x25 grey rect in the center of the other.
	 *
	 */
	p5.prototype.rectMode = function(m) {
	  if (m === constants.CORNER ||
	    m === constants.CORNERS ||
	    m === constants.RADIUS ||
	    m === constants.CENTER) {
	    this._renderer._rectMode = m;
	  }
	  return this;
	};

	/**
	 * Draws all geometry with smooth (anti-aliased) edges. smooth() will also
	 * improve image quality of resized images. Note that smooth() is active by
	 * default; noSmooth() can be used to disable smoothing of geometry,
	 * images, and fonts.
	 *
	 * @method smooth
	 * @return {p5} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * background(0);
	 * noStroke();
	 * smooth();
	 * ellipse(30, 48, 36, 36);
	 * noSmooth();
	 * ellipse(70, 48, 36, 36);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 2 pixelated 36x36 white ellipses one left one right of center. On black.
	 *
	 */
	p5.prototype.smooth = function() {
	  this._renderer.smooth();
	  return this;
	};

	/**
	 * Sets the style for rendering line endings. These ends are either squared,
	 * extended, or rounded, each of which specified with the corresponding
	 * parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.
	 *
	 * @method strokeCap
	 * @param  {Number/Constant} cap either SQUARE, PROJECT, or ROUND
	 * @return {p5}                  the p5 object
	 * @example
	 * <div>
	 * <code>
	 * strokeWeight(12.0);
	 * strokeCap(ROUND);
	 * line(20, 30, 80, 30);
	 * strokeCap(SQUARE);
	 * line(20, 50, 80, 50);
	 * strokeCap(PROJECT);
	 * line(20, 70, 80, 70);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 3 lines. Top line: rounded ends, mid: squared, bottom:longer squared ends.
	 *
	 */
	p5.prototype.strokeCap = function(cap) {
	  if (cap === constants.ROUND ||
	    cap === constants.SQUARE ||
	    cap === constants.PROJECT) {
	    this._renderer.strokeCap(cap);
	  }
	  return this;
	};

	/**
	 * Sets the style of the joints which connect line segments. These joints
	 * are either mitered, beveled, or rounded and specified with the
	 * corresponding parameters MITER, BEVEL, and ROUND. The default joint is
	 * MITER.
	 *
	 * @method strokeJoin
	 * @param  {Number/Constant} join either MITER, BEVEL, ROUND
	 * @return {p5}                   the p5 object
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * strokeWeight(10.0);
	 * strokeJoin(MITER);
	 * beginShape();
	 * vertex(35, 20);
	 * vertex(65, 50);
	 * vertex(35, 80);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * noFill();
	 * strokeWeight(10.0);
	 * strokeJoin(BEVEL);
	 * beginShape();
	 * vertex(35, 20);
	 * vertex(65, 50);
	 * vertex(35, 80);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * noFill();
	 * strokeWeight(10.0);
	 * strokeJoin(ROUND);
	 * beginShape();
	 * vertex(35, 20);
	 * vertex(65, 50);
	 * vertex(35, 80);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Right-facing arrowhead shape with pointed tip in center of canvas.
	 * Right-facing arrowhead shape with flat tip in center of canvas.
	 * Right-facing arrowhead shape with rounded tip in center of canvas.
	 *
	 */
	p5.prototype.strokeJoin = function(join) {
	  if (join === constants.ROUND ||
	    join === constants.BEVEL ||
	    join === constants.MITER) {
	    this._renderer.strokeJoin(join);
	  }
	  return this;
	};

	/**
	 * Sets the width of the stroke used for lines, points, and the border
	 * around shapes. All widths are set in units of pixels.
	 *
	 * @method strokeWeight
	 * @param  {Number} weight the weight (in pixels) of the stroke
	 * @return {p5}            the p5 object
	 * @example
	 * <div>
	 * <code>
	 * strokeWeight(1);  // Default
	 * line(20, 20, 80, 20);
	 * strokeWeight(4);  // Thicker
	 * line(20, 40, 80, 40);
	 * strokeWeight(10);  // Beastly
	 * line(20, 70, 80, 70);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 3 horizontal black lines. Top line: thin, mid: medium, bottom:thick.
	 *
	 */
	p5.prototype.strokeWeight = function(w) {
	  this._renderer.strokeWeight(w);
	  return this;
	};

	module.exports = p5;

	},{"./constants":36,"./core":37}],35:[function(_dereq_,module,exports){
	/**
	 * @requires constants
	 */

	var constants = _dereq_('./constants');

	module.exports = {

	  modeAdjust: function(a, b, c, d, mode) {
	    if (mode === constants.CORNER) {
	      return { x: a, y: b, w: c, h: d };
	    } else if (mode === constants.CORNERS) {
	      return { x: a, y: b, w: c-a, h: d-b };
	    } else if (mode === constants.RADIUS) {
	      return { x: a-c, y: b-d, w: 2*c, h: 2*d };
	    } else if (mode === constants.CENTER) {
	      return { x: a-c*0.5, y: b-d*0.5, w: c, h: d };
	    }
	  },

	  arcModeAdjust: function(a, b, c, d, mode) {
	    if (mode === constants.CORNER) {
	      return { x: a+c*0.5, y: b+d*0.5, w: c, h: d };
	    } else if (mode === constants.CORNERS) {
	      return { x: a, y: b, w: c+a, h: d+b };
	    } else if (mode === constants.RADIUS) {
	      return { x: a, y: b, w: 2*c, h: 2*d };
	    } else if (mode === constants.CENTER) {
	      return { x: a, y: b, w: c, h: d };
	    }
	  }

	};


	},{"./constants":36}],36:[function(_dereq_,module,exports){
	/**
	 * @module Constants
	 * @submodule Constants
	 * @for p5
	 */

	var PI = Math.PI;

	module.exports = {

	  // GRAPHICS RENDERER
	  P2D: 'p2d',
	  WEBGL: 'webgl',

	  // ENVIRONMENT
	  ARROW: 'default',
	  CROSS: 'crosshair',
	  HAND: 'pointer',
	  MOVE: 'move',
	  TEXT: 'text',
	  WAIT: 'wait',

	  // TRIGONOMETRY

	  /**
	   * HALF_PI is a mathematical constant with the value
	   * 1.57079632679489661923. It is half the ratio of the
	   * circumference of a circle to its diameter. It is useful in
	   * combination with the trigonometric functions sin() and cos().
	   *
	   * @property HALF_PI
	   *
	   * @example
	   * <div><code>
	   * arc(50, 50, 80, 80, 0, HALF_PI);
	   * </code></div>
	   *
	   * @alt
	   * 80x80 white quarter-circle with curve toward bottom right of canvas.
	   *
	   */
	  HALF_PI: PI / 2,
	  /**
	   * PI is a mathematical constant with the value
	   * 3.14159265358979323846. It is the ratio of the circumference
	   * of a circle to its diameter. It is useful in combination with
	   * the trigonometric functions sin() and cos().
	   *
	   * @property PI
	   *
	   * @example
	   * <div><code>
	   * arc(50, 50, 80, 80, 0, PI);
	   * </code></div>
	   *
	   * @alt
	   * white half-circle with curve toward bottom of canvas.
	   *
	   */
	  PI: PI,
	  /**
	   * QUARTER_PI is a mathematical constant with the value 0.7853982.
	   * It is one quarter the ratio of the circumference of a circle to
	   * its diameter. It is useful in combination with the trigonometric
	   * functions sin() and cos().
	   *
	   * @property QUARTER_PI
	   *
	   * @example
	   * <div><code>
	   * arc(50, 50, 80, 80, 0, QUARTER_PI);
	   * </code></div>
	   *
	   * @alt
	   * white eighth-circle rotated about 40 degrees with curve bottom right canvas.
	   *
	   */
	  QUARTER_PI: PI / 4,
	  /**
	   * TAU is an alias for TWO_PI, a mathematical constant with the
	   * value 6.28318530717958647693. It is twice the ratio of the
	   * circumference of a circle to its diameter. It is useful in
	   * combination with the trigonometric functions sin() and cos().
	   *
	   * @property TAU
	   *
	   * @example
	   * <div><code>
	   * arc(50, 50, 80, 80, 0, TAU);
	   * </code></div>
	   *
	   * @alt
	   * 80x80 white ellipse shape in center of canvas.
	   *
	   */
	  TAU: PI * 2,
	  /**
	   * TWO_PI is a mathematical constant with the value
	   * 6.28318530717958647693. It is twice the ratio of the
	   * circumference of a circle to its diameter. It is useful in
	   * combination with the trigonometric functions sin() and cos().
	   *
	   * @property TWO_PI
	   *
	   * @example
	   * <div><code>
	   * arc(50, 50, 80, 80, 0, TWO_PI);
	   * </code></div>
	   *
	   * @alt
	   * 80x80 white ellipse shape in center of canvas.
	   *
	   */
	  TWO_PI: PI * 2,
	  DEGREES: 'degrees',
	  RADIANS: 'radians',

	  // SHAPE
	  CORNER: 'corner',
	  CORNERS: 'corners',
	  RADIUS: 'radius',
	  RIGHT: 'right',
	  LEFT: 'left',
	  CENTER: 'center',
	  TOP: 'top',
	  BOTTOM: 'bottom',
	  BASELINE: 'alphabetic',
	  POINTS: 0x0000,
	  LINES: 0x0001,
	  LINE_STRIP: 0x0003,
	  LINE_LOOP: 0x0002,
	  TRIANGLES: 0x0004,
	  TRIANGLE_FAN: 0x0006,
	  TRIANGLE_STRIP: 0x0005,
	  QUADS: 'quads',
	  QUAD_STRIP: 'quad_strip',
	  CLOSE: 'close',
	  OPEN: 'open',
	  CHORD: 'chord',
	  PIE: 'pie',
	  PROJECT: 'square', // PEND: careful this is counterintuitive
	  SQUARE: 'butt',
	  ROUND: 'round',
	  BEVEL: 'bevel',
	  MITER: 'miter',

	  // COLOR
	  RGB: 'rgb',
	  HSB: 'hsb',
	  HSL: 'hsl',

	  // DOM EXTENSION
	  AUTO: 'auto',

	  // INPUT
	  ALT: 18,
	  BACKSPACE: 8,
	  CONTROL: 17,
	  DELETE: 46,
	  DOWN_ARROW: 40,
	  ENTER: 13,
	  ESCAPE: 27,
	  LEFT_ARROW: 37,
	  OPTION: 18,
	  RETURN: 13,
	  RIGHT_ARROW: 39,
	  SHIFT: 16,
	  TAB: 9,
	  UP_ARROW: 38,

	  // RENDERING
	  BLEND: 'normal',
	  ADD: 'lighter',
	  //ADD: 'add', //
	  //SUBTRACT: 'subtract', //
	  DARKEST: 'darken',
	  LIGHTEST: 'lighten',
	  DIFFERENCE: 'difference',
	  EXCLUSION: 'exclusion',
	  MULTIPLY: 'multiply',
	  SCREEN: 'screen',
	  REPLACE: 'source-over',
	  OVERLAY: 'overlay',
	  HARD_LIGHT: 'hard-light',
	  SOFT_LIGHT: 'soft-light',
	  DODGE: 'color-dodge',
	  BURN: 'color-burn',

	  // FILTERS
	  THRESHOLD: 'threshold',
	  GRAY: 'gray',
	  OPAQUE: 'opaque',
	  INVERT: 'invert',
	  POSTERIZE: 'posterize',
	  DILATE: 'dilate',
	  ERODE: 'erode',
	  BLUR: 'blur',

	  // TYPOGRAPHY
	  NORMAL: 'normal',
	  ITALIC: 'italic',
	  BOLD: 'bold',

	  // TYPOGRAPHY-INTERNAL
	  _DEFAULT_TEXT_FILL: '#000000',
	  _DEFAULT_LEADMULT: 1.25,
	  _CTX_MIDDLE: 'middle',

	  // VERTICES
	  LINEAR: 'linear',
	  QUADRATIC: 'quadratic',
	  BEZIER: 'bezier',
	  CURVE: 'curve',

	  // DEFAULTS
	  _DEFAULT_STROKE: '#000000',
	  _DEFAULT_FILL: '#FFFFFF'

	};

	},{}],37:[function(_dereq_,module,exports){
	/**
	 * @module Structure
	 * @submodule Structure
	 * @for p5
	 * @requires constants
	 */

	'use strict';

	_dereq_('./shim');

	// Core needs the PVariables object
	var constants = _dereq_('./constants');

	/**
	 * This is the p5 instance constructor.
	 *
	 * A p5 instance holds all the properties and methods related to
	 * a p5 sketch.  It expects an incoming sketch closure and it can also
	 * take an optional node parameter for attaching the generated p5 canvas
	 * to a node.  The sketch closure takes the newly created p5 instance as
	 * its sole argument and may optionally set preload(), setup(), and/or
	 * draw() properties on it for running a sketch.
	 *
	 * A p5 sketch can run in "global" or "instance" mode:
	 * "global"   - all properties and methods are attached to the window
	 * "instance" - all properties and methods are bound to this p5 object
	 *
	 * @param  {Function}    sketch a closure that can set optional preload(),
	 *                              setup(), and/or draw() properties on the
	 *                              given p5 instance
	 * @param  {HTMLElement|boolean} [node] element to attach canvas to, if a
	 *                                      boolean is passed in use it as sync
	 * @param  {boolean}     [sync] start synchronously (optional)
	 * @return {p5}                 a p5 instance
	 */
	var p5 = function(sketch, node, sync) {

	  if (arguments.length === 2 && typeof node === 'boolean') {
	    sync = node;
	    node = undefined;
	  }

	  //////////////////////////////////////////////
	  // PUBLIC p5 PROPERTIES AND METHODS
	  //////////////////////////////////////////////


	  /**
	   * Called directly before setup(), the preload() function is used to handle
	   * asynchronous loading of external files. If a preload function is
	   * defined, setup() will wait until any load calls within have finished.
	   * Nothing besides load calls should be inside preload (loadImage,
	   * loadJSON, loadFont, loadStrings, etc).
	   *
	   * @method preload
	   * @example
	   * <div><code>
	   * var img;
	   * var c;
	   * function preload() {  // preload() runs once
	   *   img = loadImage('assets/laDefense.jpg');
	   * }
	   *
	   * function setup() {  // setup() waits until preload() is done
	   *   img.loadPixels();
	   *   // get color of middle pixel
	   *   c = img.get(img.width/2, img.height/2);
	   * }
	   *
	   * function draw() {
	   *   background(c);
	   *   image(img, 25, 25, 50, 50);
	   * }
	   * </code></div>
	   *
	   * @alt
	   * nothing displayed
	   *
	   */

	  /**
	   * The setup() function is called once when the program starts. It's used to
	   * define initial environment properties such as screen size and background
	   * color and to load media such as images and fonts as the program starts.
	   * There can only be one setup() function for each program and it shouldn't
	   * be called again after its initial execution.
	   * <br><br>
	   * Note: Variables declared within setup() are not accessible within other
	   * functions, including draw().
	   *
	   * @method setup
	   * @example
	   * <div><code>
	   * var a = 0;
	   *
	   * function setup() {
	   *   background(0);
	   *   noStroke();
	   *   fill(102);
	   * }
	   *
	   * function draw() {
	   *   rect(a++%width, 10, 2, 80);
	   * }
	   * </code></div>
	   *
	   * @alt
	   * nothing displayed
	   *
	   */

	  /**
	   * Called directly after setup(), the draw() function continuously executes
	   * the lines of code contained inside its block until the program is stopped
	   * or noLoop() is called. Note if noLoop() is called in setup(), draw() will
	   * still be executed once before stopping. draw() is called automatically and
	   * should never be called explicitly.
	   * <br><br>
	   * It should always be controlled with noLoop(), redraw() and loop(). After
	   * noLoop() stops the code in draw() from executing, redraw() causes the
	   * code inside draw() to execute once, and loop() will cause the code
	   * inside draw() to resume executing continuously.
	   * <br><br>
	   * The number of times draw() executes in each second may be controlled with
	   * the frameRate() function.
	   * <br><br>
	   * There can only be one draw() function for each sketch, and draw() must
	   * exist if you want the code to run continuously, or to process events such
	   * as mousePressed(). Sometimes, you might have an empty call to draw() in
	   * your program, as shown in the above example.
	   * <br><br>
	   * It is important to note that the drawing coordinate system will be reset
	   * at the beginning of each draw() call. If any transformations are performed
	   * within draw() (ex: scale, rotate, translate, their effects will be
	   * undone at the beginning of draw(), so transformations will not accumulate
	   * over time. On the other hand, styling applied (ex: fill, stroke, etc) will
	   * remain in effect.
	   *
	   * @method draw
	   * @example
	   * <div><code>
	   * var yPos = 0;
	   * function setup() {  // setup() runs once
	   *   frameRate(30);
	   * }
	   * function draw() {  // draw() loops forever, until stopped
	   *   background(204);
	   *   yPos = yPos - 1;
	   *   if (yPos < 0) {
	   *     yPos = height;
	   *   }
	   *   line(0, yPos, width, yPos);
	   * }
	   * </code></div>
	   *
	   * @alt
	   * nothing displayed
	   *
	   */


	  //////////////////////////////////////////////
	  // PRIVATE p5 PROPERTIES AND METHODS
	  //////////////////////////////////////////////

	  this._setupDone = false;
	  // for handling hidpi
	  this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1;
	  this._userNode = node;
	  this._curElement = null;
	  this._elements = [];
	  this._requestAnimId = 0;
	  this._preloadCount = 0;
	  this._isGlobal = false;
	  this._loop = true;
	  this._styles = [];
	  this._defaultCanvasSize = {
	    width: 100,
	    height: 100
	  };
	  this._events = { // keep track of user-events for unregistering later
	    'mousemove': null,
	    'mousedown': null,
	    'mouseup': null,
	    'dragend': null,
	    'dragover': null,
	    'click': null,
	    'mouseover': null,
	    'mouseout': null,
	    'keydown': null,
	    'keyup': null,
	    'keypress': null,
	    'touchstart': null,
	    'touchmove': null,
	    'touchend': null,
	    'resize': null,
	    'blur': null
	  };

	  this._events.wheel = null;
	  this._loadingScreenId = 'p5_loading';

	  if (window.DeviceOrientationEvent) {
	    this._events.deviceorientation = null;
	  }
	  if (window.DeviceMotionEvent && !window._isNodeWebkit) {
	    this._events.devicemotion = null;
	  }

	  this._start = function () {
	    // Find node if id given
	    if (this._userNode) {
	      if (typeof this._userNode === 'string') {
	        this._userNode = document.getElementById(this._userNode);
	      }
	    }

	    // Always create a default canvas.
	    // Later on if the user calls createCanvas, this default one
	    // will be replaced
	    this.createCanvas(
	      this._defaultCanvasSize.width,
	      this._defaultCanvasSize.height,
	      'p2d',
	      true
	    );

	    var userPreload = this.preload || window.preload; // look for "preload"
	    if (userPreload) {

	      // Setup loading screen
	      // Set loading scfeen into dom if not present
	      // Otherwise displays and removes user provided loading screen
	      var loadingScreen = document.getElementById(this._loadingScreenId);
	      if(!loadingScreen){
	        loadingScreen = document.createElement('div');
	        loadingScreen.innerHTML = 'Loading...';
	        loadingScreen.style.position = 'absolute';
	        loadingScreen.id = this._loadingScreenId;
	        var node = this._userNode || document.body;
	        node.appendChild(loadingScreen);
	      }
	      // var methods = this._preloadMethods;
	      for (var method in this._preloadMethods){
	        // default to p5 if no object defined
	        this._preloadMethods[method] = this._preloadMethods[method] || p5;
	        var obj = this._preloadMethods[method];
	        //it's p5, check if it's global or instance
	        if (obj === p5.prototype || obj === p5){
	          obj = this._isGlobal ? window : this;
	        }
	        this._registeredPreloadMethods[method] = obj[method];
	        obj[method] = this._wrapPreload(obj, method);
	      }

	      userPreload();
	      this._runIfPreloadsAreDone();
	    } else {
	      this._setup();
	      this._runFrames();
	      this._draw();
	    }
	  }.bind(this);

	  this._runIfPreloadsAreDone = function(){
	    var context = this._isGlobal ? window : this;
	    if (context._preloadCount === 0) {
	      var loadingScreen = document.getElementById(context._loadingScreenId);
	      if (loadingScreen) {
	        loadingScreen.parentNode.removeChild(loadingScreen);
	      }
	      context._setup();
	      context._runFrames();
	      context._draw();
	    }
	  };

	  this._decrementPreload = function(){
	    var context = this._isGlobal ? window : this;
	    context._setProperty('_preloadCount', context._preloadCount - 1);
	    context._runIfPreloadsAreDone();
	  };

	  this._wrapPreload = function(obj, fnName){
	    return function(){
	      //increment counter
	      this._incrementPreload();
	      //call original function
	      var args = new Array(arguments.length);
	      for (var i = 0; i < args.length; ++i) {
	        args[i] = arguments[i];
	      }
	      args.push(this._decrementPreload.bind(this));
	      return this._registeredPreloadMethods[fnName].apply(obj, args);
	    }.bind(this);
	  };

	  this._incrementPreload = function(){
	    var context = this._isGlobal ? window : this;
	    context._setProperty('_preloadCount', context._preloadCount + 1);
	  };

	  this._setup = function() {

	    // return preload functions to their normal vals if switched by preload
	    var context = this._isGlobal ? window : this;
	    if (typeof context.preload === 'function') {
	      for (var f in this._preloadMethods) {
	        context[f] = this._preloadMethods[f][f];
	        if (context[f] && this) {
	          context[f] = context[f].bind(this);
	        }
	      }
	    }

	    // Short-circuit on this, in case someone used the library in "global"
	    // mode earlier
	    if (typeof context.setup === 'function') {
	      context.setup();
	    }

	    // unhide any hidden canvases that were created
	    var canvases = document.getElementsByTagName('canvas');
	    for (var i = 0; i < canvases.length; i++) {
	      var k = canvases[i];
	      if (k.dataset.hidden === 'true') {
	        k.style.visibility = '';
	        delete(k.dataset.hidden);
	      }
	    }
	    this._setupDone = true;

	  }.bind(this);

	  this._draw = function () {
	    var now = window.performance.now();
	    var time_since_last = now - this._lastFrameTime;
	    var target_time_between_frames = 1000 / this._targetFrameRate;

	    // only draw if we really need to; don't overextend the browser.
	    // draw if we're within 5ms of when our next frame should paint
	    // (this will prevent us from giving up opportunities to draw
	    // again when it's really about time for us to do so). fixes an
	    // issue where the frameRate is too low if our refresh loop isn't
	    // in sync with the browser. note that we have to draw once even
	    // if looping is off, so we bypass the time delay if that
	    // is the case.
	    var epsilon = 5;
	    if (!this._loop ||
	        time_since_last >= target_time_between_frames - epsilon) {

	      //mandatory update values(matrixs and stack)

	      this._setProperty('frameCount', this.frameCount + 1);
	      this.redraw();
	      this._updateMouseCoords();
	      this._frameRate = 1000.0/(now - this._lastFrameTime);
	      this._lastFrameTime = now;
	    }

	    // get notified the next time the browser gives us
	    // an opportunity to draw.
	    if (this._loop) {
	      this._requestAnimId = window.requestAnimationFrame(this._draw);
	    }
	  }.bind(this);

	  this._runFrames = function() {
	    if (this._updateInterval) {
	      clearInterval(this._updateInterval);
	    }
	  }.bind(this);

	  this._setProperty = function(prop, value) {
	    this[prop] = value;
	    if (this._isGlobal) {
	      window[prop] = value;
	    }
	  }.bind(this);

	  /**
	   * Removes the entire p5 sketch. This will remove the canvas and any
	   * elements created by p5.js. It will also stop the draw loop and unbind
	   * any properties or methods from the window global scope. It will
	   * leave a variable p5 in case you wanted to create a new p5 sketch.
	   * If you like, you can set p5 = null to erase it.
	   * @method remove
	   * @example
	   * <div class='norender'><code>
	   * function draw() {
	   *   ellipse(50, 50, 10, 10);
	   * }
	   *
	   * function mousePressed() {
	   *   remove(); // remove whole sketch on mouse press
	   * }
	   * </code></div>
	   *
	   * @alt
	   * nothing displayed
	   *
	   */
	  this.remove = function() {
	    if (this._curElement) {

	      // stop draw
	      this._loop = false;
	      if (this._requestAnimId) {
	        window.cancelAnimationFrame(this._requestAnimId);
	      }

	      // unregister events sketch-wide
	      for (var ev in this._events) {
	        window.removeEventListener(ev, this._events[ev]);
	      }

	      // remove DOM elements created by p5, and listeners
	      for (var i=0; i<this._elements.length; i++) {
	        var e = this._elements[i];
	        if (e.elt.parentNode) {
	          e.elt.parentNode.removeChild(e.elt);
	        }
	        for (var elt_ev in e._events) {
	          e.elt.removeEventListener(elt_ev, e._events[elt_ev]);
	        }
	      }

	      // call any registered remove functions
	      var self = this;
	      this._registeredMethods.remove.forEach(function (f) {
	        if (typeof(f) !== 'undefined') {
	          f.call(self);
	        }
	      });

	      // remove window bound properties and methods
	      if (this._isGlobal) {
	        for (var p in p5.prototype) {
	          try {
	            delete window[p];
	          } catch (x) {
	            window[p] = undefined;
	          }
	        }
	        for (var p2 in this) {
	          if (this.hasOwnProperty(p2)) {
	            try {
	              delete window[p2];
	            } catch (x) {
	              window[p2] = undefined;
	            }
	          }
	        }
	      }
	    }
	    // window.p5 = undefined;
	  }.bind(this);

	  // call any registered init functions
	  this._registeredMethods.init.forEach(function (f) {
	    if (typeof(f) !== 'undefined') {
	      f.call(this);
	    }
	  }, this);

	  var friendlyBindGlobal = this._createFriendlyGlobalFunctionBinder();

	  // If the user has created a global setup or draw function,
	  // assume "global" mode and make everything global (i.e. on the window)
	  if (!sketch) {
	    this._isGlobal = true;
	    p5.instance = this;
	    // Loop through methods on the prototype and attach them to the window
	    for (var p in p5.prototype) {
	      if(typeof p5.prototype[p] === 'function') {
	        var ev = p.substring(2);
	        if (!this._events.hasOwnProperty(ev)) {
	          if (Math.hasOwnProperty(p) && (Math[p] === p5.prototype[p])) {
	            // Multiple p5 methods are just native Math functions. These can be
	            // called without any binding.
	            friendlyBindGlobal(p, p5.prototype[p]);
	          } else {
	            friendlyBindGlobal(p, p5.prototype[p].bind(this));
	          }
	        }
	      } else {
	        friendlyBindGlobal(p, p5.prototype[p]);
	      }
	    }
	    // Attach its properties to the window
	    for (var p2 in this) {
	      if (this.hasOwnProperty(p2)) {
	        friendlyBindGlobal(p2, this[p2]);
	      }
	    }

	  } else {
	    // Else, the user has passed in a sketch closure that may set
	    // user-provided 'setup', 'draw', etc. properties on this instance of p5
	    sketch(this);
	  }

	  // Bind events to window (not using container div bc key events don't work)

	  for (var e in this._events) {
	    var f = this['_on'+e];
	    if (f) {
	      var m = f.bind(this);
	      window.addEventListener(e, m);
	      this._events[e] = m;
	    }
	  }

	  var focusHandler = function() {
	    this._setProperty('focused', true);
	  }.bind(this);
	  var blurHandler = function() {
	    this._setProperty('focused', false);
	  }.bind(this);
	  window.addEventListener('focus', focusHandler);
	  window.addEventListener('blur', blurHandler);
	  this.registerMethod('remove', function() {
	    window.removeEventListener('focus', focusHandler);
	    window.removeEventListener('blur', blurHandler);
	  });

	  if (sync) {
	    this._start();
	  } else {
	    if (document.readyState === 'complete') {
	      this._start();
	    } else {
	      window.addEventListener('load', this._start.bind(this), false);
	    }
	  }
	};

	// This is a pointer to our global mode p5 instance, if we're in
	// global mode.
	p5.instance = null;

	// Allows for the friendly error system to be turned off when creating a sketch,
	// which can give a significant boost to performance when needed.
	p5.disableFriendlyErrors = false;

	// attach constants to p5 prototype
	for (var k in constants) {
	  p5.prototype[k] = constants[k];
	}

	// functions that cause preload to wait
	// more can be added by using registerPreloadMethod(func)
	p5.prototype._preloadMethods = {
	  loadJSON: p5.prototype,
	  loadImage: p5.prototype,
	  loadStrings: p5.prototype,
	  loadXML: p5.prototype,
	  loadShape: p5.prototype,
	  loadTable: p5.prototype,
	  loadFont: p5.prototype,
	  loadModel: p5.prototype
	};

	p5.prototype._registeredMethods = { init: [], pre: [], post: [], remove: [] };

	p5.prototype._registeredPreloadMethods = {};

	p5.prototype.registerPreloadMethod = function(fnString, obj) {
	  // obj = obj || p5.prototype;
	  if (!p5.prototype._preloadMethods.hasOwnProperty(fnString)) {
	    p5.prototype._preloadMethods[fnString] = obj;
	  }
	};

	p5.prototype.registerMethod = function(name, m) {
	  if (!p5.prototype._registeredMethods.hasOwnProperty(name)) {
	    p5.prototype._registeredMethods[name] = [];
	  }
	  p5.prototype._registeredMethods[name].push(m);
	};

	p5.prototype._createFriendlyGlobalFunctionBinder = function(options) {
	  options = options || {};

	  var globalObject = options.globalObject || window;
	  var log = options.log || console.log.bind(console);
	  var propsToForciblyOverwrite = {
	    // p5.print actually always overwrites an existing global function,
	    // albeit one that is very unlikely to be used:
	    //
	    //   https://developer.mozilla.org/en-US/docs/Web/API/Window/print
	    'print': true
	  };

	  return function(prop, value) {
	    if (!p5.disableFriendlyErrors &&
	        typeof(IS_MINIFIED) === 'undefined' &&
	        typeof(value) === 'function' &&
	        !(prop in p5.prototype._preloadMethods)) {
	      try {
	        // Because p5 has so many common function names, it's likely
	        // that users may accidentally overwrite global p5 functions with
	        // their own variables. Let's allow this but log a warning to
	        // help users who may be doing this unintentionally.
	        //
	        // For more information, see:
	        //
	        //   https://github.com/processing/p5.js/issues/1317

	        if (prop in globalObject && !(prop in propsToForciblyOverwrite)) {
	          throw new Error('global "' + prop + '" already exists');
	        }

	        // It's possible that this might throw an error because there
	        // are a lot of edge-cases in which `Object.defineProperty` might
	        // not succeed; since this functionality is only intended to
	        // help beginners anyways, we'll just catch such an exception
	        // if it occurs, and fall back to legacy behavior.
	        Object.defineProperty(globalObject, prop, {
	          configurable: true,
	          enumerable: true,
	          get: function() {
	            return value;
	          },
	          set: function(newValue) {
	            Object.defineProperty(globalObject, prop, {
	              configurable: true,
	              enumerable: true,
	              value: newValue,
	              writable: true
	            });
	            log(
	              'You just changed the value of "' + prop + '", which was ' +
	              'a p5 function. This could cause problems later if you\'re ' +
	              'not careful.'
	            );
	          }
	        });
	      } catch (e) {
	        log(
	          'p5 had problems creating the global function "' + prop + '", ' +
	          'possibly because your code is already using that name as ' +
	          'a variable. You may want to rename your variable to something ' +
	          'else.'
	        );
	        globalObject[prop] = value;
	      }
	    } else {
	      globalObject[prop] = value;
	    }
	  };
	};

	module.exports = p5;

	},{"./constants":36,"./shim":46}],38:[function(_dereq_,module,exports){
	/**
	 * @module Shape
	 * @submodule Curves
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('./core');

	_dereq_('./error_helpers');

	var bezierDetail = 20;
	var curveDetail = 20;

	/**
	 * Draws a cubic Bezier curve on the screen. These curves are defined by a
	 * series of anchor and control points. The first two parameters specify
	 * the first anchor point and the last two parameters specify the other
	 * anchor point, which become the first and last points on the curve. The
	 * middle parameters specify the two control points which define the shape
	 * of the curve. Approximately speaking, control points "pull" the curve
	 * towards them.<br /><br />Bezier curves were developed by French
	 * automotive engineer Pierre Bezier, and are commonly used in computer
	 * graphics to define gently sloping curves. See also curve().
	 *
	 * @method bezier
	 * @param  {Number} x1 x-coordinate for the first anchor point
	 * @param  {Number} y1 y-coordinate for the first anchor point
	 * @param  {Number} x2 x-coordinate for the first control point
	 * @param  {Number} y2 y-coordinate for the first control point
	 * @param  {Number} x3 x-coordinate for the second control point
	 * @param  {Number} y3 y-coordinate for the second control point
	 * @param  {Number} x4 x-coordinate for the second anchor point
	 * @param  {Number} y4 y-coordinate for the second anchor point
	 * @return {Object}    the p5 object
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * stroke(255, 102, 0);
	 * line(85, 20, 10, 10);
	 * line(90, 90, 15, 80);
	 * stroke(0, 0, 0);
	 * bezier(85, 20, 10, 10, 90, 90, 15, 80);
	 * </code>
	 * </div>
	 * @alt
	 * stretched black s-shape in center with orange lines extending from end points.
	 * stretched black s-shape with 10 5x5 white ellipses along the shape.
	 * stretched black s-shape with 7 5x5 ellipses and orange lines along the shape.
	 * stretched black s-shape with 17 small orange lines extending from under shape.
	 * horseshoe shape with orange ends facing left and black curved center.
	 * horseshoe shape with orange ends facing left and black curved center.
	 * Line shaped like right-facing arrow,points move with mouse-x and warp shape.
	 * horizontal line that hooks downward on the right and 13 5x5 ellipses along it.
	 * right curving line mid-right of canvas with 7 short lines radiating from it.
	 */
	/**
	 * @method bezier
	 * @param  {Number} z1 z-coordinate for the first anchor point
	 * @param  {Number} z2 z-coordinate for the first control point
	 * @param  {Number} z3 z-coordinate for the first anchor point
	 * @param  {Number} z4 z-coordinate for the first control point
	 * @return {p5.Renderer3D}   [description]
	 * @example
	 * <div>
	 * <code>
	 *background(0, 0, 0);
	 *noFill();
	 *stroke(255);
	 *bezier(250,250,0, 100,100,0, 100,0,0, 0,100,0);
	 * </code>
	 * </div>
	*/
	p5.prototype.bezier = function() {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  if (!this._renderer._doStroke && !this._renderer._doFill) {
	    return this;
	  }
	  if (this._renderer.isP3D){
	    args.push(bezierDetail);//adding value of bezier detail to the args array
	    this._renderer.bezier(args);
	  } else{
	    this._renderer.bezier(args[0],args[1],
	      args[2],args[3],
	      args[4],args[5],
	      args[6],args[7]);
	  }

	  return this;
	};

	/**
	 * Sets the resolution at which Beziers display.
	 *
	 * The default value is 20.
	 *
	 * @param {Number} detail resolution of the curves
	 * @return {Object} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * background(204);
	 * bezierDetail(50);
	 * bezier(85, 20, 10, 10, 90, 90, 15, 80);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * stretched black s-shape with 7 5x5 ellipses and orange lines along the shape.
	 *
	 */
	p5.prototype.bezierDetail = function(d) {
	  bezierDetail = d;
	  return this;
	};

	/**
	 * Evaluates the Bezier at position t for points a, b, c, d.
	 * The parameters a and d are the first and last points
	 * on the curve, and b and c are the control points.
	 * The final parameter t varies between 0 and 1.
	 * This can be done once with the x coordinates and a second time
	 * with the y coordinates to get the location of a bezier curve at t.
	 *
	 * @method bezierPoint
	 * @param {Number} a coordinate of first point on the curve
	 * @param {Number} b coordinate of first control point
	 * @param {Number} c coordinate of second control point
	 * @param {Number} d coordinate of second point on the curve
	 * @param {Number} t value between 0 and 1
	 * @return {Number} the value of the Bezier at position t
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * x1 = 85, x2 = 10, x3 = 90, x4 = 15;
	 * y1 = 20, y2 = 10, y3 = 90, y4 = 80;
	 * bezier(x1, y1, x2, y2, x3, y3, x4, y4);
	 * fill(255);
	 * steps = 10;
	 * for (i = 0; i <= steps; i++) {
	 *   t = i / steps;
	 *   x = bezierPoint(x1, x2, x3, x4, t);
	 *   y = bezierPoint(y1, y2, y3, y4, t);
	 *   ellipse(x, y, 5, 5);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * stretched black s-shape with 17 small orange lines extending from under shape.
	 *
	 */
	p5.prototype.bezierPoint = function(a, b, c, d, t) {
	  var adjustedT = 1-t;
	  return Math.pow(adjustedT,3)*a +
	   3*(Math.pow(adjustedT,2))*t*b +
	   3*adjustedT*Math.pow(t,2)*c +
	   Math.pow(t,3)*d;
	};

	/**
	 * Evaluates the tangent to the Bezier at position t for points a, b, c, d.
	 * The parameters a and d are the first and last points
	 * on the curve, and b and c are the control points.
	 * The final parameter t varies between 0 and 1.
	 *
	 * @method bezierTangent
	 * @param {Number} a coordinate of first point on the curve
	 * @param {Number} b coordinate of first control point
	 * @param {Number} c coordinate of second control point
	 * @param {Number} d coordinate of second point on the curve
	 * @param {Number} t value between 0 and 1
	 * @return {Number} the tangent at position t
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * bezier(85, 20, 10, 10, 90, 90, 15, 80);
	 * steps = 6;
	 * fill(255);
	 * for (i = 0; i <= steps; i++) {
	 *   t = i / steps;
	 *   // Get the location of the point
	 *   x = bezierPoint(85, 10, 90, 15, t);
	 *   y = bezierPoint(20, 10, 90, 80, t);
	 *   // Get the tangent points
	 *   tx = bezierTangent(85, 10, 90, 15, t);
	 *   ty = bezierTangent(20, 10, 90, 80, t);
	 *   // Calculate an angle from the tangent points
	 *   a = atan2(ty, tx);
	 *   a += PI;
	 *   stroke(255, 102, 0);
	 *   line(x, y, cos(a)*30 + x, sin(a)*30 + y);
	 *   // The following line of code makes a line
	 *   // inverse of the above line
	 *   //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);
	 *   stroke(0);
	 *   ellipse(x, y, 5, 5);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * noFill();
	 * bezier(85, 20, 10, 10, 90, 90, 15, 80);
	 * stroke(255, 102, 0);
	 * steps = 16;
	 * for (i = 0; i <= steps; i++) {
	 *   t = i / steps;
	 *   x = bezierPoint(85, 10, 90, 15, t);
	 *   y = bezierPoint(20, 10, 90, 80, t);
	 *   tx = bezierTangent(85, 10, 90, 15, t);
	 *   ty = bezierTangent(20, 10, 90, 80, t);
	 *   a = atan2(ty, tx);
	 *   a -= HALF_PI;
	 *   line(x, y, cos(a)*8 + x, sin(a)*8 + y);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * s-shaped line with 17 short orange lines extending from underside of shape
	 *
	 */
	p5.prototype.bezierTangent = function(a, b, c, d, t) {
	  var adjustedT = 1-t;
	  return 3*d*Math.pow(t,2) -
	   3*c*Math.pow(t,2) +
	   6*c*adjustedT*t -
	   6*b*adjustedT*t +
	   3*b*Math.pow(adjustedT,2) -
	   3*a*Math.pow(adjustedT,2);
	};

	/**
	 * Draws a curved line on the screen between two points, given as the
	 * middle four parameters. The first two parameters are a control point, as
	 * if the curve came from this point even though it's not drawn. The last
	 * two parameters similarly describe the other control point. <br /><br />
	 * Longer curves can be created by putting a series of curve() functions
	 * together or using curveVertex(). An additional function called
	 * curveTightness() provides control for the visual quality of the curve.
	 * The curve() function is an implementation of Catmull-Rom splines.
	 *
	 * @method curve
	 * @param  {Number} x1 x-coordinate for the beginning control point
	 * @param  {Number} y1 y-coordinate for the beginning control point
	 * @param  {Number} x2 x-coordinate for the first point
	 * @param  {Number} y2 y-coordinate for the first point
	 * @param  {Number} x3 x-coordinate for the second point
	 * @param  {Number} y3 y-coordinate for the second point
	 * @param  {Number} x4 x-coordinate for the ending control point
	 * @param  {Number} y4 y-coordinate for the ending control point
	 * @return {Object}    the p5 object
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * stroke(255, 102, 0);
	 * curve(5, 26, 5, 26, 73, 24, 73, 61);
	 * stroke(0);
	 * curve(5, 26, 73, 24, 73, 61, 15, 65);
	 * stroke(255, 102, 0);
	 * curve(73, 24, 73, 61, 15, 65, 15, 65);
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * // Define the curve points as JavaScript objects
	 * p1 = {x: 5, y: 26}, p2 = {x: 73, y: 24}
	 * p3 = {x: 73, y: 61}, p4 = {x: 15, y: 65}
	 * noFill();
	 * stroke(255, 102, 0);
	 * curve(p1.x, p1.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y)
	 * stroke(0);
	 * curve(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y)
	 * stroke(255, 102, 0);
	 * curve(p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, p4.x, p4.y)
	 * </code>
	 * </div>
	 *
	 * @alt
	 * horseshoe shape with orange ends facing left and black curved center.
	 * horseshoe shape with orange ends facing left and black curved center.
	 *
	 */
	/**
	 * @method curve
	 * @param  {Number} z1 z-coordinate for the beginning control point
	 * @param  {Number} z2 z-coordinate for the first point
	 * @param  {Number} z3 z-coordinate for the second point
	 * @param  {Number} z4 z-coordinate for the ending control point
	 * @return {Object}    the p5 object
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * stroke(255, 102, 0);
	 * curve(5,26,0, 5,26,0, 73,24,0, 73,61,0);
	 * stroke(0);
	 * curve(5,26,0, 73,24,0, 73,61,0, 15,65,0);
	 * stroke(255, 102, 0);
	 * curve(73,24,0, 73,61,0, 15,65,0, 15,65,0);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * curving black and orange lines.
	 */
	p5.prototype.curve = function() {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  if (!this._renderer._doStroke) {
	    return this;
	  }
	  if (this._renderer.isP3D){
	    args.push(curveDetail);
	    this._renderer.curve(args);
	  } else{
	    this._renderer.curve(args[0],args[1],
	      args[2],args[3],
	      args[4],args[5],
	      args[6],args[7]);
	  }
	  return this;
	};

	/**
	 * Sets the resolution at which curves display.
	 *
	 * The default value is 20.
	 *
	 * @param {Number} resolution of the curves
	 * @return {Object} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * background(204);
	 * curveDetail(20);
	 * curve(5, 26, 5, 26, 73, 24, 73, 61);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * white arch shape in top-mid canvas.
	 *
	 */
	p5.prototype.curveDetail = function(d) {
	  curveDetail = d;
	  return this;
	};

	/**
	 * Modifies the quality of forms created with curve() and curveVertex().
	 * The parameter tightness determines how the curve fits to the vertex
	 * points. The value 0.0 is the default value for tightness (this value
	 * defines the curves to be Catmull-Rom splines) and the value 1.0 connects
	 * all the points with straight lines. Values within the range -5.0 and 5.0
	 * will deform the curves but will leave them recognizable and as values
	 * increase in magnitude, they will continue to deform.
	 *
	 * @method curveTightness
	 * @param {Number} amount of deformation from the original vertices
	 * @return {Object} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * // Move the mouse left and right to see the curve change
	 *
	 * function setup() {
	 *   createCanvas(100, 100);
	 *   noFill();
	 * }
	 *
	 * function draw() {
	 *   background(204);
	 *   var t = map(mouseX, 0, width, -5, 5);
	 *   curveTightness(t);
	 *   beginShape();
	 *   curveVertex(10, 26);
	 *   curveVertex(10, 26);
	 *   curveVertex(83, 24);
	 *   curveVertex(83, 61);
	 *   curveVertex(25, 65);
	 *   curveVertex(25, 65);
	 *   endShape();
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Line shaped like right-facing arrow,points move with mouse-x and warp shape.
	 */
	p5.prototype.curveTightness = function (t) {
	  this._renderer._curveTightness = t;
	};

	/**
	 * Evaluates the curve at position t for points a, b, c, d.
	 * The parameter t varies between 0 and 1, a and d are points
	 * on the curve, and b and c are the control points.
	 * This can be done once with the x coordinates and a second time
	 * with the y coordinates to get the location of a curve at t.
	 *
	 * @method curvePoint
	 * @param {Number} a coordinate of first point on the curve
	 * @param {Number} b coordinate of first control point
	 * @param {Number} c coordinate of second control point
	 * @param {Number} d coordinate of second point on the curve
	 * @param {Number} t value between 0 and 1
	 * @return {Number} bezier value at position t
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * curve(5, 26, 5, 26, 73, 24, 73, 61);
	 * curve(5, 26, 73, 24, 73, 61, 15, 65);
	 * fill(255);
	 * ellipseMode(CENTER);
	 * steps = 6;
	 * for (i = 0; i <= steps; i++) {
	 *   t = i / steps;
	 *   x = curvePoint(5, 5, 73, 73, t);
	 *   y = curvePoint(26, 26, 24, 61, t);
	 *   ellipse(x, y, 5, 5);
	 *   x = curvePoint(5, 73, 73, 15, t);
	 *   y = curvePoint(26, 24, 61, 65, t);
	 *   ellipse(x, y, 5, 5);
	 * }
	 * </code>
	 * </div>
	 *
	 *line hooking down to right-bottom with 13 5x5 white ellipse points
	 */
	p5.prototype.curvePoint = function(a, b, c, d, t) {
	  var t3 = t*t*t,
	    t2 = t*t,
	    f1 = -0.5 * t3 + t2 - 0.5 * t,
	    f2 = 1.5 * t3 - 2.5 * t2 + 1.0,
	    f3 = -1.5 * t3 + 2.0 * t2 + 0.5 * t,
	    f4 = 0.5 * t3 - 0.5 * t2;
	  return a*f1 + b*f2 + c*f3 + d*f4;
	};

	/**
	 * Evaluates the tangent to the curve at position t for points a, b, c, d.
	 * The parameter t varies between 0 and 1, a and d are points on the curve,
	 * and b and c are the control points.
	 *
	 * @method curveTangent
	 * @param {Number} a coordinate of first point on the curve
	 * @param {Number} b coordinate of first control point
	 * @param {Number} c coordinate of second control point
	 * @param {Number} d coordinate of second point on the curve
	 * @param {Number} t value between 0 and 1
	 * @return {Number} the tangent at position t
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * curve(5, 26, 73, 24, 73, 61, 15, 65);
	 * steps = 6;
	 * for (i = 0; i <= steps; i++) {
	 *   t = i / steps;
	 *   x = curvePoint(5, 73, 73, 15, t);
	 *   y = curvePoint(26, 24, 61, 65, t);
	 *   //ellipse(x, y, 5, 5);
	 *   tx = curveTangent(5, 73, 73, 15, t);
	 *   ty = curveTangent(26, 24, 61, 65, t);
	 *   a = atan2(ty, tx);
	 *   a -= PI/2.0;
	 *   line(x, y, cos(a)*8 + x, sin(a)*8 + y);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 *right curving line mid-right of canvas with 7 short lines radiating from it.
	 */
	p5.prototype.curveTangent = function(a, b,c, d, t) {
	  var t2 = t*t,
	    f1 = (-3*t2)/2 + 2*t - 0.5,
	    f2 = (9*t2)/2 - 5*t,
	    f3 = (-9*t2)/2 + 4*t + 0.5,
	    f4 = (3*t2)/2 - t;
	  return a*f1 + b*f2 + c*f3 + d*f4;
	};

	module.exports = p5;

	},{"./core":37,"./error_helpers":40}],39:[function(_dereq_,module,exports){
	/**
	 * @module Environment
	 * @submodule Environment
	 * @for p5
	 * @requires core
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('./core');
	var C = _dereq_('./constants');

	var standardCursors = [C.ARROW, C.CROSS, C.HAND, C.MOVE, C.TEXT, C.WAIT];

	p5.prototype._frameRate = 0;
	p5.prototype._lastFrameTime = window.performance.now();
	p5.prototype._targetFrameRate = 60;

	var _windowPrint = window.print;


	if (window.console && console.log) {
	  /**
	   * The print() function writes to the console area of your browser.
	   * This function is often helpful for looking at the data a program is
	   * producing. This function creates a new line of text for each call to
	   * the function. Individual elements can be
	   * separated with quotes ("") and joined with the addition operator (+).
	   * <br><br>
	   * While print() is similar to console.log(), it does not directly map to
	   * it in order to simulate easier to understand behavior than
	   * console.log(). Due to this, it is slower. For fastest results, use
	   * console.log().
	   *
	   * @method print
	   * @param {Any} contents any combination of Number, String, Object, Boolean,
	   *                       Array to print
	   * @example
	   * <div><code class='norender'>
	   * var x = 10;
	   * print("The value of x is " + x);
	   * // prints "The value of x is 10"
	   * </code></div>
	   * @alt
	   * default grey canvas
	   */
	  // Converts passed args into a string and then parses that string to
	  // simulate synchronous behavior. This is a hack and is gross.
	  // Since this will not work on all objects, particularly circular
	  // structures, simply console.log() on error.
	  p5.prototype.print = function(args) {
	    try {
	      if (arguments.length === 0) {
	        _windowPrint();
	      }
	      else if (arguments.length > 1) {
	        console.log.apply(console, arguments);
	      } else {
	        var newArgs = JSON.parse(JSON.stringify(args));
	        console.log(newArgs);
	      }
	    } catch(err) {
	      console.log(args);
	    }
	  };
	} else {
	  p5.prototype.print = function() {};
	}


	/**
	 * The system variable frameCount contains the number of frames that have
	 * been displayed since the program started. Inside setup() the value is 0,
	 * after the first iteration of draw it is 1, etc.
	 *
	 * @property frameCount
	 * @example
	 *   <div><code>
	 *     function setup() {
	 *       frameRate(30);
	 *       textSize(20);
	 *       textSize(30);
	 *       textAlign(CENTER);
	 *     }
	 *
	 *     function draw() {
	 *       background(200);
	 *       text(frameCount, width/2, height/2);
	 *     }
	 *   </code></div>
	 *
	 * @alt
	 * numbers rapidly counting upward with frame count set to 30.
	 *
	 */
	p5.prototype.frameCount = 0;

	/**
	 * Confirms if the window a p5.js program is in is "focused," meaning that
	 * the sketch will accept mouse or keyboard input. This variable is
	 * "true" if the window is focused and "false" if not.
	 *
	 * @property focused
	 * @example
	 * <div><code>
	 * // To demonstrate, put two windows side by side.
	 * // Click on the window that the p5 sketch isn't in!
	 * function draw() {
	 *   background(200);
	 *   noStroke();
	 *   fill(0, 200, 0);
	 *   ellipse(25, 25, 50, 50);
	 *
	 *   if (!focused) {  // or "if (focused === false)"
	 *     stroke(200,0,0);
	 *     line(0, 0, 100, 100);
	 *     line(100, 0, 0, 100);
	 *   }
	 * }
	 * </code></div>
	 *
	 * @alt
	 * green 50x50 ellipse at top left. Red X covers canvas when page focus changes
	 *
	 */
	p5.prototype.focused = (document.hasFocus());

	/**
	 * Sets the cursor to a predefined symbol or an image, or makes it visible
	 * if already hidden. If you are trying to set an image as the cursor, the
	 * recommended size is 16x16 or 32x32 pixels. It is not possible to load an
	 * image as the cursor if you are exporting your program for the Web, and not
	 * all MODES work with all browsers. The values for parameters x and y must
	 * be less than the dimensions of the image.
	 *
	 * @method cursor
	 * @param {Number/Constant} type either ARROW, CROSS, HAND, MOVE, TEXT, or
	 *                               WAIT, or path for image
	 * @param {Number}          [x]  the horizontal active spot of the cursor
	 * @param {Number}          [y]  the vertical active spot of the cursor
	 * @example
	 * <div><code>
	 * // Move the mouse left and right across the image
	 * // to see the cursor change from a cross to a hand
	 * function draw() {
	 *   line(width/2, 0, width/2, height);
	 *   if (mouseX < 50) {
	 *     cursor(CROSS);
	 *   } else {
	 *     cursor(HAND);
	 *   }
	 * }
	 * </code></div>
	 *
	 * @alt
	 * horizontal line divides canvas. cursor on left is a cross, right is hand.
	 *
	 */
	p5.prototype.cursor = function(type, x, y) {
	  var cursor = 'auto';
	  var canvas = this._curElement.elt;
	  if (standardCursors.indexOf(type) > -1) {
	    // Standard css cursor
	    cursor = type;
	  } else if (typeof type === 'string') {
	    var coords = '';
	    if (x && y && (typeof x === 'number' && typeof y === 'number')) {
	      // Note that x and y values must be unit-less positive integers < 32
	      // https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
	      coords = x + ' ' + y;
	    }
	    if (type.substring(0, 6) !== 'http://') {
	      // Image (absolute url)
	      cursor = 'url(' + type + ') ' + coords + ', auto';
	    } else if (/\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(type)) {
	      // Image file (relative path) - Separated for performance reasons
	      cursor = 'url(' + type + ') ' + coords + ', auto';
	    } else {
	      // Any valid string for the css cursor property
	      cursor = type;
	    }
	  }
	  canvas.style.cursor = cursor;
	};

	/**
	 * Specifies the number of frames to be displayed every second. For example,
	 * the function call frameRate(30) will attempt to refresh 30 times a second.
	 * If the processor is not fast enough to maintain the specified rate, the
	 * frame rate will not be achieved. Setting the frame rate within setup() is
	 * recommended. The default rate is 60 frames per second. This is the same as
	 * setFrameRate(val).
	 * <br><br>
	 * Calling frameRate() with no arguments returns the current framerate. This
	 * is the same as getFrameRate().
	 * <br><br>
	 * Calling frameRate() with arguments that are not of the type numbers
	 * or are non positive also returns current framerate.
	 *
	 * @method frameRate
	 * @param  {Number} [fps] number of frames to be displayed every second
	 * @return {Number}       current frameRate
	 * @example
	 *
	 * <div><code>
	 * var rectX = 0;
	 * var fr = 30; //starting FPS
	 * var clr;
	 *
	 * function setup() {
	 *   background(200);
	 *   frameRate(fr); // Attempt to refresh at starting FPS
	 *   clr = color(255,0,0);
	 * }
	 *
	 * function draw() {
	 *   background(200);
	 *   rectX = rectX += 1; // Move Rectangle
	 *
	 *   if (rectX >= width) { // If you go off screen.
	 *     if (fr == 30) {
	 *       clr = color(0,0,255);
	 *       fr = 10;
	 *       frameRate(fr); // make frameRate 10 FPS
	 *     } else {
	 *       clr = color(255,0,0);
	 *       fr = 30;
	 *       frameRate(fr); // make frameRate 30 FPS
	 *     }
	 *     rectX = 0;
	 *   }
	 *   fill(clr);
	 *   rect(rectX, 40, 20,20);
	 * }
	 * </div></code>
	 *
	 * @alt
	 * blue rect moves left to right, followed by red rect moving faster. Loops.
	 *
	 */
	p5.prototype.frameRate = function(fps) {
	  if (typeof fps !== 'number' || fps <= 0) {
	    return this._frameRate;
	  } else {
	    this._setProperty('_targetFrameRate', fps);
	    this._runFrames();
	    return this;
	  }
	};
	/**
	 * Returns the current framerate.
	 *
	 * @return {Number} current frameRate
	 */
	p5.prototype.getFrameRate = function() {
	  return this.frameRate();
	};

	/**
	 * Specifies the number of frames to be displayed every second. For example,
	 * the function call frameRate(30) will attempt to refresh 30 times a second.
	 * If the processor is not fast enough to maintain the specified rate, the
	 * frame rate will not be achieved. Setting the frame rate within setup() is
	 * recommended. The default rate is 60 frames per second.
	 *
	 * Calling frameRate() with no arguments returns the current framerate.
	 *
	 * @param {Number} [fps] number of frames to be displayed every second
	 */
	p5.prototype.setFrameRate = function(fps) {
	  return this.frameRate(fps);
	};

	/**
	 * Hides the cursor from view.
	 *
	 * @method noCursor
	 * @example
	 * <div><code>
	 * function setup() {
	 *   noCursor();
	 * }
	 *
	 * function draw() {
	 *   background(200);
	 *   ellipse(mouseX, mouseY, 10, 10);
	 * }
	 * </code></div>
	 *
	 *
	 * @alt
	 * cursor becomes 10x 10 white ellipse the moves with mouse x and y.
	 *
	 */
	p5.prototype.noCursor = function() {
	  this._curElement.elt.style.cursor = 'none';
	};


	/**
	 * System variable that stores the width of the entire screen display. This
	 * is used to run a full-screen program on any display size.
	 *
	 * @property displayWidth
	 * @example
	 * <div class="norender"><code>
	 * createCanvas(displayWidth, displayHeight);
	 * </code></div>
	 *
	 * @alt
	 * cursor becomes 10x 10 white ellipse the moves with mouse x and y.
	 *
	 */
	p5.prototype.displayWidth = screen.width;

	/**
	 * System variable that stores the height of the entire screen display. This
	 * is used to run a full-screen program on any display size.
	 *
	 * @property displayHeight
	 * @example
	 * <div class="norender"><code>
	 * createCanvas(displayWidth, displayHeight);
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.prototype.displayHeight = screen.height;

	/**
	 * System variable that stores the width of the inner window, it maps to
	 * window.innerWidth.
	 *
	 * @property windowWidth
	 * @example
	 * <div class="norender"><code>
	 * createCanvas(windowWidth, windowHeight);
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.prototype.windowWidth = getWindowWidth();
	/**
	 * System variable that stores the height of the inner window, it maps to
	 * window.innerHeight.
	 *
	 * @property windowHeight
	 * @example
	 * <div class="norender"><code>
	 * createCanvas(windowWidth, windowHeight);
	 * </code></div>
	*@alt
	 * no display.
	 *
	*/
	p5.prototype.windowHeight = getWindowHeight();

	/**
	 * The windowResized() function is called once every time the browser window
	 * is resized. This is a good place to resize the canvas or do any other
	 * adjustments to accommodate the new window size.
	 *
	 * @method windowResized
	 * @example
	 * <div class="norender"><code>
	 * function setup() {
	 *   createCanvas(windowWidth, windowHeight);
	 * }
	 *
	 * function draw() {
	 *  background(0, 100, 200);
	 * }
	 *
	 * function windowResized() {
	 *   resizeCanvas(windowWidth, windowHeight);
	 * }
	 * </code></div>
	 * @alt
	 * no display.
	 */
	p5.prototype._onresize = function(e){
	  this._setProperty('windowWidth', getWindowWidth());
	  this._setProperty('windowHeight', getWindowHeight());
	  var context = this._isGlobal ? window : this;
	  var executeDefault;
	  if (typeof context.windowResized === 'function') {
	    executeDefault = context.windowResized(e);
	    if (executeDefault !== undefined && !executeDefault) {
	      e.preventDefault();
	    }
	  }
	};

	function getWindowWidth() {
	  return window.innerWidth ||
	         document.documentElement && document.documentElement.clientWidth ||
	         document.body && document.body.clientWidth ||
	         0;
	}

	function getWindowHeight() {
	  return window.innerHeight ||
	         document.documentElement && document.documentElement.clientHeight ||
	         document.body && document.body.clientHeight ||
	         0;
	}

	/**
	 * System variable that stores the width of the drawing canvas. This value
	 * is set by the first parameter of the createCanvas() function.
	 * For example, the function call createCanvas(320, 240) sets the width
	 * variable to the value 320. The value of width defaults to 100 if
	 * createCanvas() is not used in a program.
	 *
	 * @property width
	 */
	p5.prototype.width = 0;

	/**
	 * System variable that stores the height of the drawing canvas. This value
	 * is set by the second parameter of the createCanvas() function. For
	 * example, the function call createCanvas(320, 240) sets the height
	 * variable to the value 240. The value of height defaults to 100 if
	 * createCanvas() is not used in a program.
	 *
	 * @property height
	 */
	p5.prototype.height = 0;

	/**
	 * If argument is given, sets the sketch to fullscreen or not based on the
	 * value of the argument. If no argument is given, returns the current
	 * fullscreen state. Note that due to browser restrictions this can only
	 * be called on user input, for example, on mouse press like the example
	 * below.
	 *
	 * @method fullscreen
	 * @param  {Boolean} [val] whether the sketch should be in fullscreen mode
	 * or not
	 * @return {Boolean} current fullscreen state
	 * @example
	 * <div>
	 * <code>
	 * // Clicking in the box toggles fullscreen on and off.
	 * function setup() {
	 *   background(200);
	 * }
	 * function mousePressed() {
	 *   if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {
	 *     var fs = fullscreen();
	 *     fullscreen(!fs);
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.prototype.fullscreen = function(val) {
	  // no arguments, return fullscreen or not
	  if (typeof val === 'undefined') {
	    return document.fullscreenElement ||
	           document.webkitFullscreenElement ||
	           document.mozFullScreenElement ||
	           document.msFullscreenElement;
	  } else { // otherwise set to fullscreen or not
	    if (val) {
	      launchFullscreen(document.documentElement);
	    } else {
	      exitFullscreen();
	    }
	  }
	};

	/**
	 * Sets the pixel scaling for high pixel density displays. By default
	 * pixel density is set to match display density, call pixelDensity(1)
	 * to turn this off. Calling pixelDensity() with no arguments returns
	 * the current pixel density of the sketch.
	 *
	 *
	 * @method pixelDensity
	 * @param  {Number} [val] whether or how much the sketch should scale
	 * @returns {Number} current pixel density of the sketch
	 * @example
	 * <div>
	 * <code>
	 * function setup() {
	 *   pixelDensity(1);
	 *   createCanvas(100, 100);
	 *   background(200);
	 *   ellipse(width/2, height/2, 50, 50);
	 * }
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * function setup() {
	 *   pixelDensity(3.0);
	 *   createCanvas(100, 100);
	 *   background(200);
	 *   ellipse(width/2, height/2, 50, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * fuzzy 50x50 white ellipse with black outline in center of canvas.
	 * sharp 50x50 white ellipse with black outline in center of canvas.
	 */
	p5.prototype.pixelDensity = function(val) {
	  if (typeof val === 'number') {
	    this._pixelDensity = val;
	  } else {
	    return this._pixelDensity;
	  }
	  this.resizeCanvas(this.width, this.height, true);
	};

	/**
	 * Returns the pixel density of the current display the sketch is running on.
	 *
	 * @method displayDensity
	 * @returns {Number} current pixel density of the display
	 * @example
	 * <div>
	 * <code>
	 * function setup() {
	 *   var density = displayDensity();
	 *   pixelDensity(density);
	 *   createCanvas(100, 100);
	 *   background(200);
	 *   ellipse(width/2, height/2, 50, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 white ellipse with black outline in center of canvas.
	 */
	p5.prototype.displayDensity = function() {
	  return window.devicePixelRatio;
	};

	function launchFullscreen(element) {
	  var enabled = document.fullscreenEnabled ||
	                document.webkitFullscreenEnabled ||
	                document.mozFullScreenEnabled ||
	                document.msFullscreenEnabled;
	  if (!enabled) {
	    throw new Error('Fullscreen not enabled in this browser.');
	  }
	  if(element.requestFullscreen) {
	    element.requestFullscreen();
	  } else if(element.mozRequestFullScreen) {
	    element.mozRequestFullScreen();
	  } else if(element.webkitRequestFullscreen) {
	    element.webkitRequestFullscreen();
	  } else if(element.msRequestFullscreen) {
	    element.msRequestFullscreen();
	  }
	}

	function exitFullscreen() {
	  if(document.exitFullscreen) {
	    document.exitFullscreen();
	  } else if(document.mozCancelFullScreen) {
	    document.mozCancelFullScreen();
	  } else if(document.webkitExitFullscreen) {
	    document.webkitExitFullscreen();
	  } else if (document.msExitFullscreen) {
	    document.msExitFullscreen();
	  }
	}


	/**
	 * Gets the current URL.
	 * @method getURL
	 * @return {String} url
	 * @example
	 * <div>
	 * <code>
	 * var url;
	 * var x = 100;
	 *
	 * function setup() {
	 *   fill(0);
	 *   noStroke();
	 *   url = getURL();
	 * }
	 *
	 * function draw() {
	 *   background(200);
	 *   text(url, x, height/2);
	 *   x--;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * current url (http://p5js.org/reference/#/p5/getURL) moves right to left.
	 *
	 */
	p5.prototype.getURL = function() {
	  return location.href;
	};
	/**
	 * Gets the current URL path as an array.
	 * @method getURLPath
	 * @return {Array} path components
	 * @example
	 * <div class='norender'><code>
	 * function setup() {
	 *   var urlPath = getURLPath();
	 *   for (var i=0; i&lt;urlPath.length; i++) {
	 *     text(urlPath[i], 10, i*20+20);
	 *   }
	 * }
	 * </code></div>
	 *
	 * @alt
	 *no display
	 *
	 */
	p5.prototype.getURLPath = function() {
	  return location.pathname.split('/').filter(function(v){return v!=='';});
	};
	/**
	 * Gets the current URL params as an Object.
	 * @method getURLParams
	 * @return {Object} URL params
	 * @example
	 * <div class='norender'>
	 * <code>
	 * // Example: http://p5js.org?year=2014&month=May&day=15
	 *
	 * function setup() {
	 *   var params = getURLParams();
	 *   text(params.day, 10, 20);
	 *   text(params.month, 10, 40);
	 *   text(params.year, 10, 60);
	 * }
	 * </code>
	 * </div>
	 * @alt
	 * no display.
	 *
	 */
	p5.prototype.getURLParams = function() {
	  var re = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim;
	  var m;
	  var v={};
	  while ((m = re.exec(location.search)) != null) {
	    if (m.index === re.lastIndex) {
	      re.lastIndex++;
	    }
	    v[m[1]]=m[2];
	  }
	  return v;
	};

	module.exports = p5;

	},{"./constants":36,"./core":37}],40:[function(_dereq_,module,exports){
	/**
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('./core');
	var doFriendlyWelcome = false; // TEMP until we get it all working LM

	// -- Borrowed from jQuery 1.11.3 --
	var class2type = {};
	var toString = class2type.toString;
	var names = ['Boolean', 'Number', 'String', 'Function',
	             'Array', 'Date', 'RegExp', 'Object', 'Error'];
	for (var n=0; n<names.length; n++) {
	  class2type[ '[object ' + names[n] + ']' ] = names[n].toLowerCase();
	}
	var getType = function( obj ) {
	  if ( obj == null ) {
	    return obj + '';
	  }
	  return typeof obj === 'object' || typeof obj === 'function' ?
	    class2type[ toString.call(obj) ] || 'object' :
	    typeof obj;
	};

	// -- End borrow --


	/**
	 * Prints out a fancy, colorful message to the console log
	 *
	 * @param  {String}               message the words to be said
	 * @param  {String}               func    the name of the function to link
	 * @param  {Integer/Color String} color   CSS color string or error type
	 *
	 * @return console logs
	 */
	// Wrong number of params, undefined param, wrong type
	var FILE_LOAD = 3;
	// p5.js blue, p5.js orange, auto dark green; fallback p5.js darkened magenta
	// See testColors below for all the color codes and names
	var typeColors = ['#2D7BB6', '#EE9900', '#4DB200', '#C83C00'];
	function report(message, func, color) {
	  if(doFriendlyWelcome){
	    friendlyWelcome();
	    doFriendlyWelcome =false;
	  }
	  if ('undefined' === getType(color)) {
	    color   = '#B40033'; // dark magenta
	  } else if (getType(color) === 'number') { // Type to color
	    color = typeColors[color];
	  }
	  // LM TEMP commenting this out until we get the whole system working
	  // if (func.substring(0,4) === 'load'){
	  //   console.log(
	  //     '%c> p5.js says: '+message+'%c'+
	  //     '[https://github.com/processing/p5.js/wiki/Local-server]',
	  //     'background-color:' + color + ';color:#FFF;',
	  //     'background-color:transparent;color:' + color +';',
	  //     'background-color:' + color + ';color:#FFF;',
	  //     'background-color:transparent;color:' + color +';'
	  //   );
	  // }
	  // else{
	  //   console.log(
	  //     '%c> p5.js says: '+message+'%c [http://p5js.org/reference/#p5/'+func+
	  //     ']', 'background-color:' + color + ';color:#FFF;',
	  //     'background-color:transparent;color:' + color +';'
	  //   );
	  // }
	}

	var errorCases = {
	  '0': {
	    fileType: 'image',
	    method: 'loadImage',
	    message: ' hosting the image online,'
	  },
	  '1': {
	    fileType: 'XML file',
	    method: 'loadXML'
	  },
	  '2': {
	    fileType: 'table file',
	    method: 'loadTable'
	  },
	  '3': {
	    fileType: 'text file',
	    method: 'loadStrings'
	  },
	  '4': {
	    fileType: 'font',
	    method: 'loadFont',
	    message: ' hosting the font online,'
	  },
	};
	p5._friendlyFileLoadError = function (errorType, filePath) {
	  var errorInfo = errorCases[ errorType ];
	  var message = 'It looks like there was a problem' +
	  ' loading your ' + errorInfo.fileType + '.' +
	  ' Try checking if the file path%c [' + filePath + '] %cis correct,' +
	  (errorInfo.message || '') + ' or running a local server.';
	  report(message, errorInfo.method, FILE_LOAD);
	};

	function friendlyWelcome() {
	  // p5.js brand - magenta: #ED225D
	  var astrixBgColor = 'transparent';
	  var astrixTxtColor = '#ED225D';
	  var welcomeBgColor = '#ED225D';
	  var welcomeTextColor = 'white';
	  console.log(
	  '%c    _ \n'+
	  ' /\\| |/\\ \n'+
	  ' \\ ` \' /  \n'+
	  ' / , . \\  \n'+
	  ' \\/|_|\\/ '+
	  '\n\n%c> p5.js says: Welcome! '+
	  'This is your friendly debugger. ' +
	  'To turn me off switch to using âp5.min.jsâ.',
	  'background-color:'+astrixBgColor+';color:' + astrixTxtColor +';',
	  'background-color:'+welcomeBgColor+';color:' + welcomeTextColor +';'
	  );
	}

	/**
	 * Prints out all the colors in the color pallete with white text.
	 * For color blindness testing.
	 */
	/* function testColors() {
	  var str = 'A box of biscuits, a box of mixed biscuits and a biscuit mixer';
	  report(str, 'print', '#ED225D'); // p5.js magenta
	  report(str, 'print', '#2D7BB6'); // p5.js blue
	  report(str, 'print', '#EE9900'); // p5.js orange
	  report(str, 'print', '#A67F59'); // p5.js light brown
	  report(str, 'print', '#704F21'); // p5.js gold
	  report(str, 'print', '#1CC581'); // auto cyan
	  report(str, 'print', '#FF6625'); // auto orange
	  report(str, 'print', '#79EB22'); // auto green
	  report(str, 'print', '#B40033'); // p5.js darkened magenta
	  report(str, 'print', '#084B7F'); // p5.js darkened blue
	  report(str, 'print', '#945F00'); // p5.js darkened orange
	  report(str, 'print', '#6B441D'); // p5.js darkened brown
	  report(str, 'print', '#2E1B00'); // p5.js darkened gold
	  report(str, 'print', '#008851'); // auto dark cyan
	  report(str, 'print', '#C83C00'); // auto dark orange
	  report(str, 'print', '#4DB200'); // auto dark green
	} */

	// This is a lazily-defined list of p5 symbols that may be
	// misused by beginners at top-level code, outside of setup/draw. We'd like
	// to detect these errors and help the user by suggesting they move them
	// into setup/draw.
	//
	// For more details, see https://github.com/processing/p5.js/issues/1121.
	var misusedAtTopLevelCode = null;
	var FAQ_URL = 'https://github.com/processing/p5.js/wiki/' +
	              'Frequently-Asked-Questions' +
	              '#why-cant-i-assign-variables-using-p5-functions-and-' +
	              'variables-before-setup';

	function defineMisusedAtTopLevelCode() {
	  var uniqueNamesFound = {};

	  var getSymbols = function(obj) {
	    return Object.getOwnPropertyNames(obj).filter(function(name) {
	      if (name[0] === '_') {
	        return false;
	      }
	      if (name in uniqueNamesFound) {
	        return false;
	      }

	      uniqueNamesFound[name] = true;

	      return true;
	    }).map(function(name) {
	      var type;

	      if (typeof(obj[name]) === 'function') {
	        type = 'function';
	      } else if (name === name.toUpperCase()) {
	        type = 'constant';
	      } else {
	        type = 'variable';
	      }

	      return {name: name, type: type};
	    });
	  };

	  misusedAtTopLevelCode = [].concat(
	    getSymbols(p5.prototype),
	    // At present, p5 only adds its constants to p5.prototype during
	    // construction, which may not have happened at the time a
	    // ReferenceError is thrown, so we'll manually add them to our list.
	    getSymbols(_dereq_('./constants'))
	  );

	  // This will ultimately ensure that we report the most specific error
	  // possible to the user, e.g. advising them about HALF_PI instead of PI
	  // when their code misuses the former.
	  misusedAtTopLevelCode.sort(function(a, b) {
	    return b.name.length - a.name.length;
	  });
	}

	function helpForMisusedAtTopLevelCode(e, log) {
	  if (!log) {
	    log = console.log.bind(console);
	  }

	  if (!misusedAtTopLevelCode) {
	    defineMisusedAtTopLevelCode();
	  }

	  // If we find that we're logging lots of false positives, we can
	  // uncomment the following code to avoid displaying anything if the
	  // user's code isn't likely to be using p5's global mode. (Note that
	  // setup/draw are more likely to be defined due to JS function hoisting.)
	  //
	  //if (!('setup' in window || 'draw' in window)) {
	  //  return;
	  //}

	  misusedAtTopLevelCode.some(function(symbol) {
	    // Note that while just checking for the occurrence of the
	    // symbol name in the error message could result in false positives,
	    // a more rigorous test is difficult because different browsers
	    // log different messages, and the format of those messages may
	    // change over time.
	    //
	    // For example, if the user uses 'PI' in their code, it may result
	    // in any one of the following messages:
	    //
	    //   * 'PI' is undefined                           (Microsoft Edge)
	    //   * ReferenceError: PI is undefined             (Firefox)
	    //   * Uncaught ReferenceError: PI is not defined  (Chrome)

	    if (e.message && e.message.match('\\W?'+symbol.name+'\\W') !== null) {
	      log('%cDid you just try to use p5.js\'s ' + symbol.name +
	          (symbol.type === 'function' ? '() ' : ' ') + symbol.type +
	          '? If so, you may want to ' +
	          'move it into your sketch\'s setup() function.\n\n' +
	          'For more details, see: ' + FAQ_URL,
	          'color: #B40033' /* Dark magenta */);
	      return true;
	    }
	  });
	}

	// Exposing this primarily for unit testing.
	p5.prototype._helpForMisusedAtTopLevelCode = helpForMisusedAtTopLevelCode;

	if (document.readyState !== 'complete') {
	  window.addEventListener('error', helpForMisusedAtTopLevelCode, false);

	  // Our job is only to catch ReferenceErrors that are thrown when
	  // global (non-instance mode) p5 APIs are used at the top-level
	  // scope of a file, so we'll unbind our error listener now to make
	  // sure we don't log false positives later.
	  window.addEventListener('load', function() {
	    window.removeEventListener('error', helpForMisusedAtTopLevelCode, false);
	  });
	}

	module.exports = p5;

	},{"./constants":36,"./core":37}],41:[function(_dereq_,module,exports){
	/**
	 * @module DOM
	 * @submodule DOM
	 * @for p5.Element
	 */

	var p5 = _dereq_('./core');

	/**
	 * Base class for all elements added to a sketch, including canvas,
	 * graphics buffers, and other HTML elements. Methods in blue are
	 * included in the core functionality, methods in brown are added
	 * with the <a href="http://p5js.org/reference/#/libraries/p5.dom">p5.dom
	 * library</a>.
	 * It is not called directly, but p5.Element
	 * objects are created by calling createCanvas, createGraphics,
	 * or in the p5.dom library, createDiv, createImg, createInput, etc.
	 *
	 * @class p5.Element
	 * @constructor
	 * @param {String} elt DOM node that is wrapped
	 * @param {Object} [pInst] pointer to p5 instance
	 */
	p5.Element = function(elt, pInst) {
	  /**
	   * Underlying HTML element. All normal HTML methods can be called on this.
	   *
	   * @property elt
	   */
	  this.elt = elt;
	  this._pInst = pInst;
	  this._events = {};
	  this.width = this.elt.offsetWidth;
	  this.height = this.elt.offsetHeight;
	};

	/**
	 *
	 * Attaches the element to the parent specified. A way of setting
	 * the container for the element. Accepts either a string ID, DOM
	 * node, or p5.Element. If no arguments given, parent node is returned.
	 * For more ways to position the canvas, see the
	 * <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>
	 * positioning the canvas</a> wiki page.
	 *
	 * @method parent
	 * @param  {String|Object} parent the ID, DOM node, or p5.Element
	 *                         of desired parent element
	 * @return {p5.Element}
	 * @example
	 * <div class="norender"><code>
	 * // in the html file:
	 * &lt;div id="myContainer">&lt;/div>
	 * // in the js file:
	 * var cnv = createCanvas(100, 100);
	 * cnv.parent("myContainer");
	 * </code></div>
	 * <div class='norender'><code>
	 * var div0 = createDiv('this is the parent');
	 * var div1 = createDiv('this is the child');
	 * div1.parent(div0); // use p5.Element
	 * </code></div>
	 * <div class='norender'><code>
	 * var div0 = createDiv('this is the parent');
	 * div0.id('apples');
	 * var div1 = createDiv('this is the child');
	 * div1.parent('apples'); // use id
	 * </code></div>
	 * <div class='norender'><code>
	 * var elt = document.getElementById('myParentDiv');
	 * var div1 = createDiv('this is the child');
	 * div1.parent(elt); // use element from page
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.parent = function(p) {
	  if (arguments.length === 0){
	    return this.elt.parentNode;
	  } else {
	    if (typeof p === 'string') {
	      if (p[0] === '#') {
	        p = p.substring(1);
	      }
	      p = document.getElementById(p);
	    } else if (p instanceof p5.Element) {
	      p = p.elt;
	    }
	    p.appendChild(this.elt);
	    return this;
	  }
	};

	/**
	 *
	 * Sets the ID of the element. If no ID argument is passed in, it instead
	 * returns the current ID of the element.
	 *
	 * @method id
	 * @param  {String} [id] ID of the element
	 * @return {p5.Element|String}
	 * @example
	 * <div><code class='norender'>
	 * function setup() {
	 *   var cnv = createCanvas(100, 100);
	 *   // Assigns a CSS selector ID to
	 *   // the canvas element.
	 *   cnv.id("mycanvas");
	 * }
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.id = function(id) {
	  if (arguments.length === 0) {
	    return this.elt.id;
	  } else {
	    this.elt.id = id;
	    this.width = this.elt.offsetWidth;
	    this.height = this.elt.offsetHeight;
	    return this;
	  }
	};

	/**
	 *
	 * Adds given class to the element. If no class argument is passed in, it
	 * instead returns a string containing the current class(es) of the element.
	 *
	 * @method class
	 * @param  {String} [class] class to add
	 * @return {p5.Element|String}
	 */
	p5.Element.prototype.class = function(c) {
	  if (arguments.length === 0) {
	    return this.elt.className;
	  } else {
	    this.elt.className = c;
	    return this;
	  }
	};

	/**
	 * The .mousePressed() function is called once after every time a
	 * mouse button is pressed over the element. This can be used to
	 * attach element specific event listeners.
	 *
	 * @method mousePressed
	 * @param  {Function} fxn function to be fired when mouse is
	 *                    pressed over the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var d;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.mousePressed(changeGray); // attach listener for
	 *                                 // canvas click only
	 *   d = 10;
	 *   g = 100;
	 * }
	 *
	 * function draw() {
	 *   background(g);
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * // this function fires with any click anywhere
	 * function mousePressed() {
	 *   d = d + 10;
	 * }
	 *
	 * // this function fires only when cnv is clicked
	 * function changeGray() {
	 *   g = random(0, 255);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.mousePressed = function (fxn) {
	  attachListener('mousedown', fxn, this);
	  attachListener('touchstart', fxn, this);
	  return this;
	};

	/**
	 * The .mouseWheel() function is called once after every time a
	 * mouse wheel is scrolled over the element. This can be used to
	 * attach element specific event listeners.
	 * <br><br>
	 * The function accepts a callback function as argument which will be executed
	 * when the `wheel` event is triggered on the element, the callabck function is
	 * passed one argument `event`. The `event.deltaY` property returns negative
	 * values if the mouse wheel is rotated up or away from the user and positive
	 * in the other direction. The `event.deltaX` does the same as `event.deltaY`
	 * except it reads the horizontal wheel scroll of the mouse wheel.
	 * <br><br>
	 * On OS X with "natural" scrolling enabled, the `event.deltaY` values are
	 * reversed.
	 *
	 * @method mouseWheel
	 * @param  {Function} fxn function to be fired when mouse wheel is
	 *                    scrolled over the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var d;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.mouseWheel(changeSize); // attach listener for
	 *                               // activity on canvas only
	 *   d = 10;
	 *   g = 100;
	 * }
	 *
	 * function draw() {
	 *   background(g);
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * // this function fires with mousewheel movement
	 * // anywhere on screen
	 * function mouseWheel() {
	 *   g = g + 10;
	 * }
	 *
	 * // this function fires with mousewheel movement
	 * // over canvas only
	 * function changeSize(event) {
	 *   if (event.deltaY > 0) {
	 *     d = d + 10;
	 *   } else {
	 *     d = d - 10;
	 *   }
	 * }
	 * </code></div>
	 *
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.mouseWheel = function (fxn) {
	  attachListener('wheel', fxn, this);
	  return this;
	};

	/**
	 * The .mouseReleased() function is called once after every time a
	 * mouse button is released over the element. This can be used to
	 * attach element specific event listeners.
	 *
	 * @method mouseReleased
	 * @param  {Function} fxn function to be fired when mouse is
	 *                    released over the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var d;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.mouseReleased(changeGray); // attach listener for
	 *                                  // activity on canvas only
	 *   d = 10;
	 *   g = 100;
	 * }
	 *
	 * function draw() {
	 *   background(g);
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * // this function fires after the mouse has been
	 * // released
	 * function mouseReleased() {
	 *   d = d + 10;
	 * }
	 *
	 * // this function fires after the mouse has been
	 * // released while on canvas
	 * function changeGray() {
	 *   g = random(0, 255);
	 * }
	 * </code></div>
	 *
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.mouseReleased = function (fxn) {
	  attachListener('mouseup', fxn, this);
	  attachListener('touchend', fxn, this);
	  return this;
	};


	/**
	 * The .mouseClicked() function is called once after a mouse button is
	 * pressed and released over the element. This can be used to
	 * attach element specific event listeners.
	 *
	 * @method mouseClicked
	 * @param  {Function} fxn function to be fired when mouse is
	 *                    clicked over the element.
	 * @return {p5.Element}
	 * @example
	 * var cnv;
	 * var d;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.mouseClicked(changeGray); // attach listener for
	 *                                 // activity on canvas only
	 *   d = 10;
	 *   g = 100;
	 * }
	 *
	 * function draw() {
	 *   background(g);
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * // this function fires after the mouse has been
	 * // clicked anywhere
	 * function mouseClicked() {
	 *   d = d + 10;
	 * }
	 *
	 * // this function fires after the mouse has been
	 * // clicked on canvas
	 * function changeGray() {
	 *   g = random(0, 255);
	 * }
	 * </code></div>
	 *
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.mouseClicked = function (fxn) {
	  attachListener('click', fxn, this);
	  return this;
	};

	/**
	 * The .mouseMoved() function is called once every time a
	 * mouse moves over the element. This can be used to attach an
	 * element specific event listener.
	 *
	 * @method mouseMoved
	 * @param  {Function} fxn function to be fired when mouse is
	 *                    moved over the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var d = 30;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.mouseMoved(changeSize); // attach listener for
	 *                               // activity on canvas only
	 *   d = 10;
	 *   g = 100;
	 * }
	 *
	 * function draw() {
	 *   background(g);
	 *   fill(200);
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * // this function fires when mouse moves anywhere on
	 * // page
	 * function mouseMoved() {
	 *   g = g + 5;
	 *   if (g > 255) {
	 *     g = 0;
	 *   }
	 * }
	 *
	 * // this function fires when mouse moves over canvas
	 * function changeSize() {
	 *   d = d + 2;
	 *   if (d > 100) {
	 *     d = 0;
	 *   }
	 * }
	 * </code></div>
	 *
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.mouseMoved = function (fxn) {
	  attachListener('mousemove', fxn, this);
	  attachListener('touchmove', fxn, this);
	  return this;
	};

	/**
	 * The .mouseOver() function is called once after every time a
	 * mouse moves onto the element. This can be used to attach an
	 * element specific event listener.
	 *
	 * @method mouseOver
	 * @param  {Function} fxn function to be fired when mouse is
	 *                    moved over the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var d;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.mouseOver(changeGray);
	 *   d = 10;
	 * }
	 *
	 * function draw() {
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * function changeGray() {
	 *   d = d + 10;
	 *   if (d > 100) {
	 *     d = 0;
	 *   }
	 * }
	 * </code></div>
	 *
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.mouseOver = function (fxn) {
	  attachListener('mouseover', fxn, this);
	  return this;
	};


	/**
	 * The .changed() function is called when the value of an
	 * element is changed.
	 * This can be used to attach an element specific event listener.
	 *
	 * @method changed
	 * @param  {Function} fxn function to be fired when the value of an
	 * element changes.
	 * @return {p5.Element}
	 * @example
	 * <div><code>
	 * var sel;
	 *
	 * function setup() {
	 *   textAlign(CENTER);
	 *   background(200);
	 *   sel = createSelect();
	 *   sel.position(10, 10);
	 *   sel.option('pear');
	 *   sel.option('kiwi');
	 *   sel.option('grape');
	 *   sel.changed(mySelectEvent);
	 * }
	 *
	 * function mySelectEvent() {
	 *   var item = sel.value();
	 *   background(200);
	 *   text("it's a "+item+"!", 50, 50);
	 * }
	 * </code></div>
	 * <div><code>
	 * var checkbox;
	 * var cnv;
	 *
	 * function setup() {
	 *   checkbox = createCheckbox(" fill");
	 *   checkbox.changed(changeFill);
	 *   cnv = createCanvas(100, 100);
	 *   cnv.position(0, 30);
	 *   noFill();
	 * }
	 *
	 * function draw() {
	 *   background(200);
	 *   ellipse(50, 50, 50, 50);
	 * }
	 *
	 * function changeFill() {
	 *   if (checkbox.checked()) {
	 *     fill(0);
	 *   } else {
	 *     noFill();
	 *   }
	 * }
	 * </code></div>
	 *
	 * @alt
	 * dropdown: pear, kiwi, grape. When selected text "its a" + selection shown.
	 *
	 */
	p5.Element.prototype.changed = function (fxn) {
	  attachListener('change', fxn, this);
	  return this;
	};

	/**
	 * The .input() function is called when any user input is
	 * detected with an element. The input event is often used
	 * to detect keystrokes in a input element, or changes on a
	 * slider element. This can be used to attach an element specific
	 * event listener.
	 *
	 * @method input
	 * @param  {Function} fxn function to be fired on user input.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * // Open your console to see the output
	 * function setup() {
	 *   var inp = createInput('');
	 *   inp.input(myInputEvent);
	 * }
	 *
	 * function myInputEvent() {
	 *   console.log('you are typing: ', this.value());
	 * }
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.input = function (fxn) {
	  attachListener('input', fxn, this);
	  return this;
	};

	/**
	 * The .mouseOut() function is called once after every time a
	 * mouse moves off the element. This can be used to attach an
	 * element specific event listener.
	 *
	 * @method mouseOut
	 * @param  {Function} fxn function to be fired when mouse is
	 *                    moved off the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var d;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.mouseOut(changeGray);
	 *   d = 10;
	 * }
	 *
	 * function draw() {
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * function changeGray() {
	 *   d = d + 10;
	 *   if (d > 100) {
	 *     d = 0;
	 *   }
	 * }
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.mouseOut = function (fxn) {
	  attachListener('mouseout', fxn, this);
	  return this;
	};

	/**
	 * The .touchStarted() function is called once after every time a touch is
	 * registered. This can be used to attach element specific event listeners.
	 *
	 * @method touchStarted
	 * @param  {Function} fxn function to be fired when touch is
	 *                    started over the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var d;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.touchStarted(changeGray); // attach listener for
	 *                                 // canvas click only
	 *   d = 10;
	 *   g = 100;
	 * }
	 *
	 * function draw() {
	 *   background(g);
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * // this function fires with any touch anywhere
	 * function touchStarted() {
	 *   d = d + 10;
	 * }
	 *
	 * // this function fires only when cnv is clicked
	 * function changeGray() {
	 *   g = random(0, 255);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.touchStarted = function (fxn) {
	  attachListener('touchstart', fxn, this);
	  attachListener('mousedown', fxn, this);
	  return this;
	};

	/**
	 * The .touchMoved() function is called once after every time a touch move is
	 * registered. This can be used to attach element specific event listeners.
	 *
	 * @method touchMoved
	 * @param  {Function} fxn function to be fired when touch is moved
	 *                    over the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.touchMoved(changeGray); // attach listener for
	 *                               // canvas click only
	 *   g = 100;
	 * }
	 *
	 * function draw() {
	 *   background(g);
	 * }
	 *
	 * // this function fires only when cnv is clicked
	 * function changeGray() {
	 *   g = random(0, 255);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.touchMoved = function (fxn) {
	  attachListener('touchmove', fxn, this);
	  attachListener('mousemove', fxn, this);
	  return this;
	};

	/**
	 * The .touchEnded() function is called once after every time a touch is
	 * registered. This can be used to attach element specific event listeners.
	 *
	 * @method touchEnded
	 * @param  {Function} fxn function to be fired when touch is
	 *                    ended over the element.
	 * @return {p5.Element}
	 * @example
	 * <div class='norender'><code>
	 * var cnv;
	 * var d;
	 * var g;
	 * function setup() {
	 *   cnv = createCanvas(100, 100);
	 *   cnv.touchEnded(changeGray);   // attach listener for
	 *                                 // canvas click only
	 *   d = 10;
	 *   g = 100;
	 * }
	 *
	 * function draw() {
	 *   background(g);
	 *   ellipse(width/2, height/2, d, d);
	 * }
	 *
	 * // this function fires with any touch anywhere
	 * function touchEnded() {
	 *   d = d + 10;
	 * }
	 *
	 * // this function fires only when cnv is clicked
	 * function changeGray() {
	 *   g = random(0, 255);
	 * }
	 * </code></div>
	 *
	 *
	 * @alt
	 * no display.
	 *
	 */
	p5.Element.prototype.touchEnded = function (fxn) {
	  attachListener('touchend', fxn, this);
	  attachListener('mouseup', fxn, this);
	  return this;
	};



	/**
	 * The .dragOver() function is called once after every time a
	 * file is dragged over the element. This can be used to attach an
	 * element specific event listener.
	 *
	 * @method dragOver
	 * @param  {Function} fxn function to be fired when mouse is
	 *                    dragged over the element.
	 * @return {p5.Element}
	 */
	p5.Element.prototype.dragOver = function (fxn) {
	  attachListener('dragover', fxn, this);
	  return this;
	};

	/**
	 * The .dragLeave() function is called once after every time a
	 * dragged file leaves the element area. This can be used to attach an
	 * element specific event listener.
	 *
	 * @method dragLeave
	 * @param  {Function} fxn function to be fired when mouse is
	 *                    dragged over the element.
	 * @return {p5.Element}
	 */
	p5.Element.prototype.dragLeave = function (fxn) {
	  attachListener('dragleave', fxn, this);
	  return this;
	};

	/**
	 * The .drop() function is called for each file dropped on the element.
	 * It requires a callback that is passed a p5.File object.  You can
	 * optionally pass two callbacks, the first one (required) is triggered
	 * for each file dropped when the file is loaded.  The second (optional)
	 * is triggered just once when a file (or files) are dropped.
	 *
	 * @method drop
	 * @param  {Function} callback triggered when files are dropped.
	 * @param  {Function} callback to receive loaded file.
	 * @return {p5.Element}
	 * @example
	 * <div><code>
	 * function setup() {
	 *   var c = createCanvas(100, 100);
	 *   background(200);
	 *   textAlign(CENTER);
	 *   text('drop image', width/2, height/2);
	 *   c.drop(gotFile);
	 * }
	 *
	 * function gotFile(file) {
	 *   var img = createImg(file.data).hide();
	 *   // Draw the image onto the canvas
	 *   image(img, 0, 0, width, height);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * Canvas turns into whatever image is dragged/dropped onto it.
	 *
	 */
	p5.Element.prototype.drop = function (callback, fxn) {
	  // Make a file loader callback and trigger user's callback
	  function makeLoader(theFile) {
	    // Making a p5.File object
	    var p5file = new p5.File(theFile);
	    return function(e) {
	      p5file.data = e.target.result;
	      callback(p5file);
	    };
	  }

	  // Is the file stuff supported?
	  if (window.File && window.FileReader && window.FileList && window.Blob) {

	    // If you want to be able to drop you've got to turn off
	    // a lot of default behavior
	    attachListener('dragover',function(evt) {
	      evt.stopPropagation();
	      evt.preventDefault();
	    },this);

	    // If this is a drag area we need to turn off the default behavior
	    attachListener('dragleave',function(evt) {
	      evt.stopPropagation();
	      evt.preventDefault();
	    },this);

	    // If just one argument it's the callback for the files
	    if (arguments.length > 1) {
	      attachListener('drop', fxn, this);
	    }

	    // Deal with the files
	    attachListener('drop', function(evt) {

	      evt.stopPropagation();
	      evt.preventDefault();

	      // A FileList
	      var files = evt.dataTransfer.files;

	      // Load each one and trigger the callback
	      for (var i = 0; i < files.length; i++) {
	        var f = files[i];
	        var reader = new FileReader();
	        reader.onload = makeLoader(f);


	        // Text or data?
	        // This should likely be improved
	        if (f.type.indexOf('text') > -1) {
	          reader.readAsText(f);
	        } else {
	          reader.readAsDataURL(f);
	        }
	      }
	    }, this);
	  } else {
	    console.log('The File APIs are not fully supported in this browser.');
	  }

	  return this;
	};




	function attachListener(ev, fxn, ctx) {
	  // LM removing, not sure why we had this?
	  // var _this = ctx;
	  // var f = function (e) { fxn(e, _this); };
	  var f = fxn.bind(ctx);
	  ctx.elt.addEventListener(ev, f, false);
	  ctx._events[ev] = f;
	}

	/**
	 * Helper fxn for sharing pixel methods
	 *
	 */
	p5.Element.prototype._setProperty = function (prop, value) {
	  this[prop] = value;
	};


	module.exports = p5.Element;

	},{"./core":37}],42:[function(_dereq_,module,exports){
	/**
	 * @module Rendering
	 * @submodule Rendering
	 * @for p5
	 */

	var p5 = _dereq_('./core');
	var constants = _dereq_('./constants');

	/**
	 * Thin wrapper around a renderer, to be used for creating a
	 * graphics buffer object. Use this class if you need
	 * to draw into an off-screen graphics buffer. The two parameters define the
	 * width and height in pixels. The fields and methods for this class are
	 * extensive, but mirror the normal drawing API for p5.
	 *
	 * @class p5.Graphics
	 * @constructor
	 * @extends p5.Element
	 * @param {String} elt DOM node that is wrapped
	 * @param {Object} [pInst] pointer to p5 instance
	 * @param {Boolean} whether we're using it as main canvas
	 */
	p5.Graphics = function(w, h, renderer, pInst) {

	  var r = renderer || constants.P2D;

	  var c = document.createElement('canvas');
	  var node = this._userNode || document.body;
	  node.appendChild(c);

	  p5.Element.call(this, c, pInst, false);
	  this._styles = [];
	  this.width = w;
	  this.height = h;
	  this._pixelDensity = pInst._pixelDensity;

	  if (r === constants.WEBGL) {
	    this._renderer = new p5.RendererGL(c, this, false);
	  } else {
	    this._renderer = new p5.Renderer2D(c, this, false);
	  }

	  this._renderer.resize(w, h);
	  this._renderer._applyDefaults();

	  pInst._elements.push(this);

	  // bind methods and props of p5 to the new object
	  for (var p in p5.prototype) {
	    if (!this[p]) {
	      if (typeof p5.prototype[p] === 'function') {
	        this[p] = p5.prototype[p].bind(this);
	      } else {
	        this[p] = p5.prototype[p];
	      }
	    }
	  }

	  return this;
	};

	p5.Graphics.prototype = Object.create(p5.Element.prototype);

	module.exports = p5.Graphics;

	},{"./constants":36,"./core":37}],43:[function(_dereq_,module,exports){
	/**
	 * @module Rendering
	 * @submodule Rendering
	 * @for p5
	 */

	var p5 = _dereq_('./core');
	var constants = _dereq_('../core/constants');

	/**
	 * Main graphics and rendering context, as well as the base API
	 * implementation for p5.js "core". To be used as the superclass for
	 * Renderer2D and Renderer3D classes, respecitvely.
	 *
	 * @class p5.Renderer
	 * @constructor
	 * @extends p5.Element
	 * @param {String} elt DOM node that is wrapped
	 * @param {Object} [pInst] pointer to p5 instance
	 * @param {Boolean} whether we're using it as main canvas
	 */
	p5.Renderer = function(elt, pInst, isMainCanvas) {
	  p5.Element.call(this, elt, pInst);
	  this.canvas = elt;
	  this._pInst = pInst;
	  if (isMainCanvas) {
	    this._isMainCanvas = true;
	    // for pixel method sharing with pimage
	    this._pInst._setProperty('_curElement', this);
	    this._pInst._setProperty('canvas', this.canvas);
	    this._pInst._setProperty('width', this.width);
	    this._pInst._setProperty('height', this.height);
	  } else { // hide if offscreen buffer by default
	    this.canvas.style.display = 'none';
	    this._styles = []; // non-main elt styles stored in p5.Renderer
	  }


	  this._textSize = 12;
	  this._textLeading = 15;
	  this._textFont = 'sans-serif';
	  this._textStyle = constants.NORMAL;
	  this._textAscent = null;
	  this._textDescent = null;


	  this._rectMode = constants.CORNER;
	  this._ellipseMode = constants.CENTER;
	  this._curveTightness = 0;
	  this._imageMode = constants.CORNER;

	  this._tint = null;
	  this._doStroke = true;
	  this._doFill = true;
	  this._strokeSet = false;
	  this._fillSet = false;
	  this._colorMode = constants.RGB;
	  this._colorMaxes = {
	    rgb: [255, 255, 255, 255],
	    hsb: [360, 100, 100, 1],
	    hsl: [360, 100, 100, 1]
	  };

	};

	p5.Renderer.prototype = Object.create(p5.Element.prototype);




	/**
	 * Resize our canvas element.
	 */
	p5.Renderer.prototype.resize = function(w, h) {
	  this.width = w;
	  this.height = h;
	  this.elt.width = w * this._pInst._pixelDensity;
	  this.elt.height = h * this._pInst._pixelDensity;
	  this.elt.style.width = w +'px';
	  this.elt.style.height = h + 'px';
	  if (this._isMainCanvas) {
	    this._pInst._setProperty('width', this.width);
	    this._pInst._setProperty('height', this.height);
	  }
	};

	p5.Renderer.prototype.textLeading = function(l) {

	  if (arguments.length && arguments[0]) {

	    this._setProperty('_textLeading', l);
	    return this;
	  }

	  return this._textLeading;
	};

	p5.Renderer.prototype.textSize = function(s) {

	  if (arguments.length && arguments[0]) {

	    this._setProperty('_textSize', s);
	    this._setProperty('_textLeading', s * constants._DEFAULT_LEADMULT);
	    return this._applyTextProperties();
	  }

	  return this._textSize;
	};

	p5.Renderer.prototype.textStyle = function(s) {

	  if (arguments.length && arguments[0]) {

	    if (s === constants.NORMAL ||
	      s === constants.ITALIC ||
	      s === constants.BOLD) {
	      this._setProperty('_textStyle', s);
	    }

	    return this._applyTextProperties();
	  }

	  return this._textStyle;
	};

	p5.Renderer.prototype.textAscent = function() {
	  if (this._textAscent === null) {
	    this._updateTextMetrics();
	  }
	  return this._textAscent;
	};

	p5.Renderer.prototype.textDescent = function() {

	  if (this._textDescent === null) {
	    this._updateTextMetrics();
	  }
	  return this._textDescent;
	};

	p5.Renderer.prototype._applyDefaults = function(){
	  return this;
	};

	/**
	 * Helper fxn to check font type (system or otf)
	 */
	p5.Renderer.prototype._isOpenType = function(f) {

	  f = f || this._textFont;
	  return (typeof f === 'object' && f.font && f.font.supported);
	};

	p5.Renderer.prototype._updateTextMetrics = function() {

	  if (this._isOpenType()) {

	    this._setProperty('_textAscent', this._textFont._textAscent());
	    this._setProperty('_textDescent', this._textFont._textDescent());
	    return this;
	  }

	  // Adapted from http://stackoverflow.com/a/25355178
	  var text = document.createElement('span');
	  text.style.fontFamily = this._textFont;
	  text.style.fontSize = this._textSize + 'px';
	  text.innerHTML = 'ABCjgq|';

	  var block = document.createElement('div');
	  block.style.display = 'inline-block';
	  block.style.width = '1px';
	  block.style.height = '0px';

	  var container = document.createElement('div');
	  container.appendChild(text);
	  container.appendChild(block);

	  container.style.height = '0px';
	  container.style.overflow = 'hidden';
	  document.body.appendChild(container);

	  block.style.verticalAlign = 'baseline';
	  var blockOffset = calculateOffset(block);
	  var textOffset = calculateOffset(text);
	  var ascent = blockOffset[1] - textOffset[1];

	  block.style.verticalAlign = 'bottom';
	  blockOffset = calculateOffset(block);
	  textOffset = calculateOffset(text);
	  var height = blockOffset[1] - textOffset[1];
	  var descent = height - ascent;

	  document.body.removeChild(container);

	  this._setProperty('_textAscent', ascent);
	  this._setProperty('_textDescent', descent);

	  return this;
	};

	/**
	 * Helper fxn to measure ascent and descent.
	 * Adapted from http://stackoverflow.com/a/25355178
	 */
	function calculateOffset(object) {
	  var currentLeft = 0,
	    currentTop = 0;
	  if (object.offsetParent) {
	    do {
	      currentLeft += object.offsetLeft;
	      currentTop += object.offsetTop;
	    } while (object = object.offsetParent);
	  } else {
	    currentLeft += object.offsetLeft;
	    currentTop += object.offsetTop;
	  }
	  return [currentLeft, currentTop];
	}

	module.exports = p5.Renderer;

	},{"../core/constants":36,"./core":37}],44:[function(_dereq_,module,exports){

	var p5 = _dereq_('./core');
	var canvas = _dereq_('./canvas');
	var constants = _dereq_('./constants');
	var filters = _dereq_('../image/filters');

	_dereq_('./p5.Renderer');

	/**
	 * p5.Renderer2D
	 * The 2D graphics canvas renderer class.
	 * extends p5.Renderer
	 */
	var styleEmpty = 'rgba(0,0,0,0)';
	// var alphaThreshold = 0.00125; // minimum visible

	p5.Renderer2D = function(elt, pInst, isMainCanvas){
	  p5.Renderer.call(this, elt, pInst, isMainCanvas);
	  this.drawingContext = this.canvas.getContext('2d');
	  this._pInst._setProperty('drawingContext', this.drawingContext);
	  return this;
	};

	p5.Renderer2D.prototype = Object.create(p5.Renderer.prototype);

	p5.Renderer2D.prototype._applyDefaults = function() {
	  this.drawingContext.fillStyle = constants._DEFAULT_FILL;
	  this.drawingContext.strokeStyle = constants._DEFAULT_STROKE;
	  this.drawingContext.lineCap = constants.ROUND;
	  this.drawingContext.font = 'normal 12px sans-serif';
	};

	p5.Renderer2D.prototype.resize = function(w,h) {
	  p5.Renderer.prototype.resize.call(this, w,h);
	  this.drawingContext.scale(this._pInst._pixelDensity,
	                            this._pInst._pixelDensity);
	};

	//////////////////////////////////////////////
	// COLOR | Setting
	//////////////////////////////////////////////

	p5.Renderer2D.prototype.background = function() {
	  this.drawingContext.save();
	  this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);
	  this.drawingContext.scale(this._pInst._pixelDensity,
	                            this._pInst._pixelDensity);

	  if (arguments[0] instanceof p5.Image) {
	    this._pInst.image(arguments[0], 0, 0, this.width, this.height);
	  } else {
	    var curFill = this.drawingContext.fillStyle;
	    // create background rect
	    var color = this._pInst.color.apply(this, arguments);
	    var newFill = color.toString();
	    this.drawingContext.fillStyle = newFill;
	    this.drawingContext.fillRect(0, 0, this.width, this.height);
	    // reset fill
	    this.drawingContext.fillStyle = curFill;
	  }
	  this.drawingContext.restore();
	};

	p5.Renderer2D.prototype.clear = function() {
	  this.drawingContext.clearRect(0, 0, this.width, this.height);
	};

	p5.Renderer2D.prototype.fill = function() {

	  var ctx = this.drawingContext;
	  var color = this._pInst.color.apply(this, arguments);
	  ctx.fillStyle = color.toString();
	};

	p5.Renderer2D.prototype.stroke = function() {
	  var ctx = this.drawingContext;
	  var color = this._pInst.color.apply(this, arguments);
	  ctx.strokeStyle = color.toString();
	};

	//////////////////////////////////////////////
	// IMAGE | Loading & Displaying
	//////////////////////////////////////////////

	p5.Renderer2D.prototype.image =
	  function (img, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
	  var cnv;
	  try {
	    if (this._tint) {
	      if (p5.MediaElement && img instanceof p5.MediaElement) {
	        img.loadPixels();
	      }
	      if (img.canvas) {
	        cnv = this._getTintedImageCanvas(img);
	      }
	    }
	    if (!cnv) {
	      cnv = img.canvas || img.elt;
	    }
	    this.drawingContext.drawImage(cnv, sx, sy, sWidth, sHeight, dx, dy,
	      dWidth, dHeight);
	  } catch (e) {
	    if (e.name !== 'NS_ERROR_NOT_AVAILABLE') {
	      throw e;
	    }
	  }
	};

	p5.Renderer2D.prototype._getTintedImageCanvas = function (img) {
	  if (!img.canvas) {
	    return img;
	  }
	  var pixels = filters._toPixels(img.canvas);
	  var tmpCanvas = document.createElement('canvas');
	  tmpCanvas.width = img.canvas.width;
	  tmpCanvas.height = img.canvas.height;
	  var tmpCtx = tmpCanvas.getContext('2d');
	  var id = tmpCtx.createImageData(img.canvas.width, img.canvas.height);
	  var newPixels = id.data;
	  for (var i = 0; i < pixels.length; i += 4) {
	    var r = pixels[i];
	    var g = pixels[i + 1];
	    var b = pixels[i + 2];
	    var a = pixels[i + 3];
	    newPixels[i] = r * this._tint[0] / 255;
	    newPixels[i + 1] = g * this._tint[1] / 255;
	    newPixels[i + 2] = b * this._tint[2] / 255;
	    newPixels[i + 3] = a * this._tint[3] / 255;
	  }
	  tmpCtx.putImageData(id, 0, 0);
	  return tmpCanvas;
	};


	//////////////////////////////////////////////
	// IMAGE | Pixels
	//////////////////////////////////////////////

	p5.Renderer2D.prototype.blendMode = function(mode) {
	  this.drawingContext.globalCompositeOperation = mode;
	};
	p5.Renderer2D.prototype.blend = function() {
	  var currBlend = this.drawingContext.globalCompositeOperation;
	  var blendMode = arguments[arguments.length - 1];

	  var copyArgs = Array.prototype.slice.call(
	    arguments,
	    0,
	    arguments.length - 1
	  );

	  this.drawingContext.globalCompositeOperation = blendMode;
	  if (this._pInst) {
	    this._pInst.copy.apply(this._pInst, copyArgs);
	  } else {
	    this.copy.apply(this, copyArgs);
	  }
	  this.drawingContext.globalCompositeOperation = currBlend;
	};

	p5.Renderer2D.prototype.copy = function () {
	  var srcImage, sx, sy, sw, sh, dx, dy, dw, dh;
	  if (arguments.length === 9) {
	    srcImage = arguments[0];
	    sx = arguments[1];
	    sy = arguments[2];
	    sw = arguments[3];
	    sh = arguments[4];
	    dx = arguments[5];
	    dy = arguments[6];
	    dw = arguments[7];
	    dh = arguments[8];
	  } else if (arguments.length === 8) {
	    srcImage = this._pInst;
	    sx = arguments[0];
	    sy = arguments[1];
	    sw = arguments[2];
	    sh = arguments[3];
	    dx = arguments[4];
	    dy = arguments[5];
	    dw = arguments[6];
	    dh = arguments[7];
	  } else {
	    throw new Error('Signature not supported');
	  }
	  p5.Renderer2D._copyHelper(srcImage, sx, sy, sw, sh, dx, dy, dw, dh);
	};

	p5.Renderer2D._copyHelper =
	function (srcImage, sx, sy, sw, sh, dx, dy, dw, dh) {
	  srcImage.loadPixels();
	  var s = srcImage.canvas.width / srcImage.width;
	  this.drawingContext.drawImage(srcImage.canvas,
	    s * sx, s * sy, s * sw, s * sh, dx, dy, dw, dh);
	};

	p5.Renderer2D.prototype.get = function(x, y, w, h) {
	  if (x === undefined && y === undefined &&
	      w === undefined && h === undefined){
	    x = 0;
	    y = 0;
	    w = this.width;
	    h = this.height;
	  } else if (w === undefined && h === undefined) {
	    w = 1;
	    h = 1;
	  }

	  // if the section does not overlap the canvas
	  if(x + w < 0 || y + h < 0 || x > this.width || y > this.height){
	    return [0, 0, 0, 255];
	  }

	  var ctx = this._pInst || this;
	  ctx.loadPixels();

	  var pd = ctx._pixelDensity;

	  // round down to get integer numbers
	  x = Math.floor(x);
	  y = Math.floor(y);
	  w = Math.floor(w);
	  h = Math.floor(h);

	  var sx = x * pd;
	  var sy = y * pd;
	  if (w === 1 && h === 1){
	    var imageData = this.drawingContext.getImageData(sx, sy, 1, 1).data;
	    //imageData = [0,0,0,0];
	    return [
	      imageData[0],
	      imageData[1],
	      imageData[2],
	      imageData[3]
	    ];
	  } else {
	    //auto constrain the width and height to
	    //dimensions of the source image
	    var dw = Math.min(w, ctx.width);
	    var dh = Math.min(h, ctx.height);
	    var sw = dw * pd;
	    var sh = dh * pd;

	    var region = new p5.Image(dw, dh);
	    region.canvas.getContext('2d').drawImage(this.canvas, sx, sy, sw, sh,
	      0, 0, dw, dh);

	    return region;
	  }
	};

	p5.Renderer2D.prototype.loadPixels = function () {
	  var pd = this._pixelDensity || this._pInst._pixelDensity;
	  var w = this.width * pd;
	  var h = this.height * pd;
	  var imageData = this.drawingContext.getImageData(0, 0, w, h);
	  // @todo this should actually set pixels per object, so diff buffers can
	  // have diff pixel arrays.
	  if (this._pInst) {
	    this._pInst._setProperty('imageData', imageData);
	    this._pInst._setProperty('pixels', imageData.data);
	  } else { // if called by p5.Image
	    this._setProperty('imageData', imageData);
	    this._setProperty('pixels', imageData.data);
	  }
	};

	p5.Renderer2D.prototype.set = function (x, y, imgOrCol) {
	  // round down to get integer numbers
	  x = Math.floor(x);
	  y = Math.floor(y);
	  if (imgOrCol instanceof p5.Image) {
	    this.drawingContext.save();
	    this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);
	    this.drawingContext.scale(this._pInst._pixelDensity,
	      this._pInst._pixelDensity);
	    this.drawingContext.drawImage(imgOrCol.canvas, x, y);
	    this.loadPixels.call(this._pInst);
	    this.drawingContext.restore();
	  } else {
	    var ctx = this._pInst || this;
	    var r = 0, g = 0, b = 0, a = 0;
	    var idx = 4*((y * ctx._pixelDensity) *
	      (this.width * ctx._pixelDensity) + (x * ctx._pixelDensity));
	    if (!ctx.imageData) {
	      ctx.loadPixels.call(ctx);
	    }
	    if (typeof imgOrCol === 'number') {
	      if (idx < ctx.pixels.length) {
	        r = imgOrCol;
	        g = imgOrCol;
	        b = imgOrCol;
	        a = 255;
	        //this.updatePixels.call(this);
	      }
	    }
	    else if (imgOrCol instanceof Array) {
	      if (imgOrCol.length < 4) {
	        throw new Error('pixel array must be of the form [R, G, B, A]');
	      }
	      if (idx < ctx.pixels.length) {
	        r = imgOrCol[0];
	        g = imgOrCol[1];
	        b = imgOrCol[2];
	        a = imgOrCol[3];
	        //this.updatePixels.call(this);
	      }
	    } else if (imgOrCol instanceof p5.Color) {
	      if (idx < ctx.pixels.length) {
	        r = imgOrCol.levels[0];
	        g = imgOrCol.levels[1];
	        b = imgOrCol.levels[2];
	        a = imgOrCol.levels[3];
	        //this.updatePixels.call(this);
	      }
	    }
	    // loop over pixelDensity * pixelDensity
	    for (var i = 0; i < ctx._pixelDensity; i++) {
	      for (var j = 0; j < ctx._pixelDensity; j++) {
	        // loop over
	        idx = 4*((y * ctx._pixelDensity + j) * this.width *
	          ctx._pixelDensity + (x * ctx._pixelDensity + i));
	        ctx.pixels[idx] = r;
	        ctx.pixels[idx+1] = g;
	        ctx.pixels[idx+2] = b;
	        ctx.pixels[idx+3] = a;
	      }
	    }
	  }
	};

	p5.Renderer2D.prototype.updatePixels = function (x, y, w, h) {
	  var pd = this._pixelDensity || this._pInst._pixelDensity;
	  if (x === undefined &&
	      y === undefined &&
	      w === undefined &&
	      h === undefined) {
	    x = 0;
	    y = 0;
	    w = this.width;
	    h = this.height;
	  }
	  w *= pd;
	  h *= pd;

	  if (this._pInst) {
	    this.drawingContext.putImageData(this._pInst.imageData, x, y, 0, 0, w, h);
	  } else {
	    this.drawingContext.putImageData(this.imageData, x, y, 0, 0, w, h);
	  }
	};

	//////////////////////////////////////////////
	// SHAPE | 2D Primitives
	//////////////////////////////////////////////

	/**
	 * Generate a cubic Bezier representing an arc on the unit circle of total
	 * angle `size` radians, beginning `start` radians above the x-axis. Up to
	 * four of these curves are combined to make a full arc.
	 *
	 * See www.joecridge.me/bezier.pdf for an explanation of the method.
	 */
	p5.Renderer2D.prototype._acuteArcToBezier =
	  function _acuteArcToBezier(start, size) {
	  // Evauate constants.
	  var alpha = size / 2.0,
	    cos_alpha = Math.cos(alpha),
	    sin_alpha = Math.sin(alpha),
	    cot_alpha = 1.0 / Math.tan(alpha),
	    phi = start + alpha,  // This is how far the arc needs to be rotated.
	    cos_phi = Math.cos(phi),
	    sin_phi = Math.sin(phi),
	    lambda = (4.0 - cos_alpha) / 3.0,
	    mu = sin_alpha + (cos_alpha - lambda) * cot_alpha;

	  // Return rotated waypoints.
	  return {
	    ax: Math.cos(start),
	    ay: Math.sin(start),
	    bx: lambda * cos_phi + mu * sin_phi,
	    by: lambda * sin_phi - mu * cos_phi,
	    cx: lambda * cos_phi - mu * sin_phi,
	    cy: lambda * sin_phi + mu * cos_phi,
	    dx: Math.cos(start + size),
	    dy: Math.sin(start + size)
	  };
	};

	p5.Renderer2D.prototype.arc =
	  function(x, y, w, h, start, stop, mode) {
	  var ctx = this.drawingContext;
	  var vals = canvas.arcModeAdjust(x, y, w, h, this._ellipseMode);
	  var rx = vals.w / 2.0;
	  var ry = vals.h / 2.0;
	  var epsilon = 0.00001;  // Smallest visible angle on displays up to 4K.
	  var arcToDraw = 0;
	  var curves = [];

	  // Create curves
	  while(stop - start > epsilon) {
	    arcToDraw = Math.min(stop - start, constants.HALF_PI);
	    curves.push(this._acuteArcToBezier(start, arcToDraw));
	    start += arcToDraw;
	  }

	  // Fill curves
	  if (this._doFill) {
	    ctx.beginPath();
	    curves.forEach(function (curve, index) {
	      if (index === 0) {
	        ctx.moveTo(vals.x + curve.ax * rx, vals.y + curve.ay * ry);
	      }
	      ctx.bezierCurveTo(vals.x + curve.bx * rx, vals.y + curve.by * ry,
	                        vals.x + curve.cx * rx, vals.y + curve.cy * ry,
	                        vals.x + curve.dx * rx, vals.y + curve.dy * ry);
	    });
	    if (mode === constants.PIE || mode == null) {
	      ctx.lineTo(vals.x, vals.y);
	    }
	    ctx.closePath();
	    ctx.fill();
	  }

	  // Stroke curves
	  if (this._doStroke) {
	    ctx.beginPath();
	    curves.forEach(function (curve, index) {
	      if (index === 0) {
	        ctx.moveTo(vals.x + curve.ax * rx, vals.y + curve.ay * ry);
	      }
	      ctx.bezierCurveTo(vals.x + curve.bx * rx, vals.y + curve.by * ry,
	                        vals.x + curve.cx * rx, vals.y + curve.cy * ry,
	                        vals.x + curve.dx * rx, vals.y + curve.dy * ry);
	    });
	    if (mode === constants.PIE) {
	      ctx.lineTo(vals.x, vals.y);
	      ctx.closePath();
	    } else if (mode === constants.CHORD) {
	      ctx.closePath();
	    }
	    ctx.stroke();
	  }
	  return this;
	};

	p5.Renderer2D.prototype.ellipse = function(args) {
	  var ctx = this.drawingContext;
	  var doFill = this._doFill, doStroke = this._doStroke;
	  var x = args[0],
	    y = args[1],
	    w = args[2],
	    h = args[3];
	  if (doFill && !doStroke) {
	    if(ctx.fillStyle === styleEmpty) {
	      return this;
	    }
	  } else if (!doFill && doStroke) {
	    if(ctx.strokeStyle === styleEmpty) {
	      return this;
	    }
	  }
	  var kappa = 0.5522847498,
	    ox = (w / 2) * kappa, // control point offset horizontal
	    oy = (h / 2) * kappa, // control point offset vertical
	    xe = x + w,      // x-end
	    ye = y + h,      // y-end
	    xm = x + w / 2,  // x-middle
	    ym = y + h / 2;  // y-middle
	  ctx.beginPath();
	  ctx.moveTo(x, ym);
	  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
	  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
	  ctx.closePath();
	  if (doFill) {
	    ctx.fill();
	  }
	  if (doStroke) {
	    ctx.stroke();
	  }
	};

	p5.Renderer2D.prototype.line = function(x1, y1, x2, y2) {
	  var ctx = this.drawingContext;
	  if (!this._doStroke) {
	    return this;
	  } else if(ctx.strokeStyle === styleEmpty){
	    return this;
	  }
	  // Translate the line by (0.5, 0.5) to draw it crisp
	  if (ctx.lineWidth % 2 === 1) {
	    ctx.translate(0.5, 0.5);
	  }
	  ctx.beginPath();
	  ctx.moveTo(x1, y1);
	  ctx.lineTo(x2, y2);
	  ctx.stroke();
	  if (ctx.lineWidth % 2 === 1) {
	    ctx.translate(-0.5, -0.5);
	  }
	  return this;
	};

	p5.Renderer2D.prototype.point = function(x, y) {
	  var ctx = this.drawingContext;
	  var s = ctx.strokeStyle;
	  var f = ctx.fillStyle;
	  if (!this._doStroke) {
	    return this;
	  } else if(ctx.strokeStyle === styleEmpty){
	    return this;
	  }
	  x = Math.round(x);
	  y = Math.round(y);
	  ctx.fillStyle = s;
	  if (ctx.lineWidth > 1) {
	    ctx.beginPath();
	    ctx.arc(
	      x,
	      y,
	      ctx.lineWidth / 2,
	      0,
	      constants.TWO_PI,
	      false
	    );
	    ctx.fill();
	  } else {
	    ctx.fillRect(x, y, 1, 1);
	  }
	  ctx.fillStyle = f;
	};

	p5.Renderer2D.prototype.quad =
	  function(x1, y1, x2, y2, x3, y3, x4, y4) {
	  var ctx = this.drawingContext;
	  var doFill = this._doFill, doStroke = this._doStroke;
	  if (doFill && !doStroke) {
	    if(ctx.fillStyle === styleEmpty) {
	      return this;
	    }
	  } else if (!doFill && doStroke) {
	    if(ctx.strokeStyle === styleEmpty) {
	      return this;
	    }
	  }
	  ctx.beginPath();
	  ctx.moveTo(x1, y1);
	  ctx.lineTo(x2, y2);
	  ctx.lineTo(x3, y3);
	  ctx.lineTo(x4, y4);
	  ctx.closePath();
	  if (doFill) {
	    ctx.fill();
	  }
	  if (doStroke) {
	    ctx.stroke();
	  }
	  return this;
	};

	p5.Renderer2D.prototype.rect = function(args) {
	  var x = args[0],
	    y = args[1],
	    w = args[2],
	    h = args[3],
	    tl = args[4],
	    tr = args[5],
	    br = args[6],
	    bl = args[7];
	  var ctx = this.drawingContext;
	  var doFill = this._doFill, doStroke = this._doStroke;
	  if (doFill && !doStroke) {
	    if(ctx.fillStyle === styleEmpty) {
	      return this;
	    }
	  } else if (!doFill && doStroke) {
	    if(ctx.strokeStyle === styleEmpty) {
	      return this;
	    }
	  }
	  // Translate the line by (0.5, 0.5) to draw a crisp rectangle border
	  if (this._doStroke && ctx.lineWidth % 2 === 1) {
	    ctx.translate(0.5, 0.5);
	  }
	  ctx.beginPath();

	  if (typeof tl === 'undefined') {
	    // No rounded corners
	    ctx.rect(x, y, w, h);
	  } else {
	    // At least one rounded corner
	    // Set defaults when not specified
	    if (typeof tr === 'undefined') { tr = tl; }
	    if (typeof br === 'undefined') { br = tr; }
	    if (typeof bl === 'undefined') { bl = br; }

	    var hw = w / 2;
	    var hh = h / 2;

	    // Clip radii
	    if (w < 2 * tl) { tl = hw; }
	    if (h < 2 * tl) { tl = hh; }
	    if (w < 2 * tr) { tr = hw; }
	    if (h < 2 * tr) { tr = hh; }
	    if (w < 2 * br) { br = hw; }
	    if (h < 2 * br) { br = hh; }
	    if (w < 2 * bl) { bl = hw; }
	    if (h < 2 * bl) { bl = hh; }

	    // Draw shape
	    ctx.beginPath();
	    ctx.moveTo(x + tl, y);
	    ctx.arcTo(x + w, y, x + w, y + h, tr);
	    ctx.arcTo(x + w, y + h, x, y + h, br);
	    ctx.arcTo(x, y + h, x, y, bl);
	    ctx.arcTo(x, y, x + w, y, tl);
	    ctx.closePath();
	  }
	  if (this._doFill) {
	    ctx.fill();
	  }
	  if (this._doStroke) {
	    ctx.stroke();
	  }
	  if (this._doStroke && ctx.lineWidth % 2 === 1) {
	    ctx.translate(-0.5, -0.5);
	  }
	  return this;
	};

	p5.Renderer2D.prototype.triangle = function(args) {
	  var ctx = this.drawingContext;
	  var doFill = this._doFill, doStroke = this._doStroke;
	  var x1=args[0], y1=args[1];
	  var x2=args[2], y2=args[3];
	  var x3=args[4], y3=args[5];
	  if (doFill && !doStroke) {
	    if(ctx.fillStyle === styleEmpty) {
	      return this;
	    }
	  } else if (!doFill && doStroke) {
	    if(ctx.strokeStyle === styleEmpty) {
	      return this;
	    }
	  }
	  ctx.beginPath();
	  ctx.moveTo(x1, y1);
	  ctx.lineTo(x2, y2);
	  ctx.lineTo(x3, y3);
	  ctx.closePath();
	  if (doFill) {
	    ctx.fill();
	  }
	  if (doStroke) {
	    ctx.stroke();
	  }
	};

	p5.Renderer2D.prototype.endShape =
	function (mode, vertices, isCurve, isBezier,
	    isQuadratic, isContour, shapeKind) {
	  if (vertices.length === 0) {
	    return this;
	  }
	  if (!this._doStroke && !this._doFill) {
	    return this;
	  }
	  var closeShape = mode === constants.CLOSE;
	  var v;
	  if (closeShape && !isContour) {
	    vertices.push(vertices[0]);
	  }
	  var i, j;
	  var numVerts = vertices.length;
	  if (isCurve && (shapeKind === constants.POLYGON || shapeKind === null)) {
	    if (numVerts > 3) {
	      var b = [], s = 1 - this._curveTightness;
	      this.drawingContext.beginPath();
	      this.drawingContext.moveTo(vertices[1][0], vertices[1][1]);
	      for (i = 1; i + 2 < numVerts; i++) {
	        v = vertices[i];
	        b[0] = [
	          v[0],
	          v[1]
	        ];
	        b[1] = [
	          v[0] + (s * vertices[i + 1][0] - s * vertices[i - 1][0]) / 6,
	          v[1] + (s * vertices[i + 1][1] - s * vertices[i - 1][1]) / 6
	        ];
	        b[2] = [
	          vertices[i + 1][0] +
	          (s * vertices[i][0]-s * vertices[i + 2][0]) / 6,
	          vertices[i + 1][1]+(s * vertices[i][1] - s*vertices[i + 2][1]) / 6
	        ];
	        b[3] = [
	          vertices[i + 1][0],
	          vertices[i + 1][1]
	        ];
	        this.drawingContext.bezierCurveTo(b[1][0],b[1][1],
	          b[2][0],b[2][1],b[3][0],b[3][1]);
	      }
	      if (closeShape) {
	        this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);
	      }
	      this._doFillStrokeClose();
	    }
	  } else if (isBezier&&(shapeKind===constants.POLYGON ||shapeKind === null)) {
	    this.drawingContext.beginPath();
	    for (i = 0; i < numVerts; i++) {
	      if (vertices[i].isVert) {
	        if (vertices[i].moveTo) {
	          this.drawingContext.moveTo(vertices[i][0], vertices[i][1]);
	        } else {
	          this.drawingContext.lineTo(vertices[i][0], vertices[i][1]);
	        }
	      } else {
	        this.drawingContext.bezierCurveTo(vertices[i][0], vertices[i][1],
	          vertices[i][2], vertices[i][3], vertices[i][4], vertices[i][5]);
	      }
	    }
	    this._doFillStrokeClose();
	  } else if (isQuadratic &&
	    (shapeKind === constants.POLYGON || shapeKind === null)) {
	    this.drawingContext.beginPath();
	    for (i = 0; i < numVerts; i++) {
	      if (vertices[i].isVert) {
	        if (vertices[i].moveTo) {
	          this.drawingContext.moveTo([0], vertices[i][1]);
	        } else {
	          this.drawingContext.lineTo(vertices[i][0], vertices[i][1]);
	        }
	      } else {
	        this.drawingContext.quadraticCurveTo(vertices[i][0], vertices[i][1],
	          vertices[i][2], vertices[i][3]);
	      }
	    }
	    this._doFillStrokeClose();
	  } else {
	    if (shapeKind === constants.POINTS) {
	      for (i = 0; i < numVerts; i++) {
	        v = vertices[i];
	        if (this._doStroke) {
	          this._pInst.stroke(v[6]);
	        }
	        this._pInst.point(v[0], v[1]);
	      }
	    } else if (shapeKind === constants.LINES) {
	      for (i = 0; i + 1 < numVerts; i += 2) {
	        v = vertices[i];
	        if (this._doStroke) {
	          this._pInst.stroke(vertices[i + 1][6]);
	        }
	        this._pInst.line(v[0], v[1], vertices[i + 1][0], vertices[i + 1][1]);
	      }
	    } else if (shapeKind === constants.TRIANGLES) {
	      for (i = 0; i + 2 < numVerts; i += 3) {
	        v = vertices[i];
	        this.drawingContext.beginPath();
	        this.drawingContext.moveTo(v[0], v[1]);
	        this.drawingContext.lineTo(vertices[i + 1][0], vertices[i + 1][1]);
	        this.drawingContext.lineTo(vertices[i + 2][0], vertices[i + 2][1]);
	        this.drawingContext.lineTo(v[0], v[1]);
	        if (this._doFill) {
	          this._pInst.fill(vertices[i + 2][5]);
	          this.drawingContext.fill();
	        }
	        if (this._doStroke) {
	          this._pInst.stroke(vertices[i + 2][6]);
	          this.drawingContext.stroke();
	        }
	        this.drawingContext.closePath();
	      }
	    } else if (shapeKind === constants.TRIANGLE_STRIP) {
	      for (i = 0; i + 1 < numVerts; i++) {
	        v = vertices[i];
	        this.drawingContext.beginPath();
	        this.drawingContext.moveTo(vertices[i + 1][0], vertices[i + 1][1]);
	        this.drawingContext.lineTo(v[0], v[1]);
	        if (this._doStroke) {
	          this._pInst.stroke(vertices[i + 1][6]);
	        }
	        if (this._doFill) {
	          this._pInst.fill(vertices[i + 1][5]);
	        }
	        if (i + 2 < numVerts) {
	          this.drawingContext.lineTo(vertices[i + 2][0], vertices[i + 2][1]);
	          if (this._doStroke) {
	            this._pInst.stroke(vertices[i + 2][6]);
	          }
	          if (this._doFill) {
	            this._pInst.fill(vertices[i + 2][5]);
	          }
	        }
	        this._doFillStrokeClose();
	      }
	    } else if (shapeKind === constants.TRIANGLE_FAN) {
	      if (numVerts > 2) {
	        this.drawingContext.beginPath();
	        this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);
	        this.drawingContext.lineTo(vertices[1][0], vertices[1][1]);
	        this.drawingContext.lineTo(vertices[2][0], vertices[2][1]);
	        if (this._doFill) {
	          this._pInst.fill(vertices[2][5]);
	        }
	        if (this._doStroke) {
	          this._pInst.stroke(vertices[2][6]);
	        }
	        this._doFillStrokeClose();
	        for (i = 3; i < numVerts; i++) {
	          v = vertices[i];
	          this.drawingContext.beginPath();
	          this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);
	          this.drawingContext.lineTo(vertices[i - 1][0], vertices[i - 1][1]);
	          this.drawingContext.lineTo(v[0], v[1]);
	          if (this._doFill) {
	            this._pInst.fill(v[5]);
	          }
	          if (this._doStroke) {
	            this._pInst.stroke(v[6]);
	          }
	          this._doFillStrokeClose();
	        }
	      }
	    } else if (shapeKind === constants.QUADS) {
	      for (i = 0; i + 3 < numVerts; i += 4) {
	        v = vertices[i];
	        this.drawingContext.beginPath();
	        this.drawingContext.moveTo(v[0], v[1]);
	        for (j = 1; j < 4; j++) {
	          this.drawingContext.lineTo(vertices[i + j][0], vertices[i + j][1]);
	        }
	        this.drawingContext.lineTo(v[0], v[1]);
	        if (this._doFill) {
	          this._pInst.fill(vertices[i + 3][5]);
	        }
	        if (this._doStroke) {
	          this._pInst.stroke(vertices[i + 3][6]);
	        }
	        this._doFillStrokeClose();
	      }
	    } else if (shapeKind === constants.QUAD_STRIP) {
	      if (numVerts > 3) {
	        for (i = 0; i + 1 < numVerts; i += 2) {
	          v = vertices[i];
	          this.drawingContext.beginPath();
	          if (i + 3 < numVerts) {
	            this.drawingContext.moveTo(vertices[i + 2][0], vertices[i+2][1]);
	            this.drawingContext.lineTo(v[0], v[1]);
	            this.drawingContext.lineTo(vertices[i + 1][0], vertices[i+1][1]);
	            this.drawingContext.lineTo(vertices[i + 3][0], vertices[i+3][1]);
	            if (this._doFill) {
	              this._pInst.fill(vertices[i + 3][5]);
	            }
	            if (this._doStroke) {
	              this._pInst.stroke(vertices[i + 3][6]);
	            }
	          } else {
	            this.drawingContext.moveTo(v[0], v[1]);
	            this.drawingContext.lineTo(vertices[i + 1][0], vertices[i+1][1]);
	          }
	          this._doFillStrokeClose();
	        }
	      }
	    } else {
	      this.drawingContext.beginPath();
	      this.drawingContext.moveTo(vertices[0][0], vertices[0][1]);
	      for (i = 1; i < numVerts; i++) {
	        v = vertices[i];
	        if (v.isVert) {
	          if (v.moveTo) {
	            this.drawingContext.moveTo(v[0], v[1]);
	          } else {
	            this.drawingContext.lineTo(v[0], v[1]);
	          }
	        }
	      }
	      this._doFillStrokeClose();
	    }
	  }
	  isCurve = false;
	  isBezier = false;
	  isQuadratic = false;
	  isContour = false;
	  if (closeShape) {
	    vertices.pop();
	  }
	  return this;
	};
	//////////////////////////////////////////////
	// SHAPE | Attributes
	//////////////////////////////////////////////

	p5.Renderer2D.prototype.noSmooth = function() {
	  if ('imageSmoothingEnabled' in this.drawingContext) {
	    this.drawingContext.imageSmoothingEnabled = false;
	  }
	  else if ('mozImageSmoothingEnabled' in this.drawingContext) {
	    this.drawingContext.mozImageSmoothingEnabled = false;
	  }
	  else if ('webkitImageSmoothingEnabled' in this.drawingContext) {
	    this.drawingContext.webkitImageSmoothingEnabled = false;
	  }
	  else if ('msImageSmoothingEnabled' in this.drawingContext) {
	    this.drawingContext.msImageSmoothingEnabled = false;
	  }
	  return this;
	};

	p5.Renderer2D.prototype.smooth = function() {
	  if ('imageSmoothingEnabled' in this.drawingContext) {
	    this.drawingContext.imageSmoothingEnabled = true;
	  }
	  else if ('mozImageSmoothingEnabled' in this.drawingContext) {
	    this.drawingContext.mozImageSmoothingEnabled = true;
	  }
	  else if ('webkitImageSmoothingEnabled' in this.drawingContext) {
	    this.drawingContext.webkitImageSmoothingEnabled = true;
	  }
	  else if ('msImageSmoothingEnabled' in this.drawingContext) {
	    this.drawingContext.msImageSmoothingEnabled = true;
	  }
	  return this;
	};

	p5.Renderer2D.prototype.strokeCap = function(cap) {
	  if (cap === constants.ROUND ||
	    cap === constants.SQUARE ||
	    cap === constants.PROJECT) {
	    this.drawingContext.lineCap = cap;
	  }
	  return this;
	};

	p5.Renderer2D.prototype.strokeJoin = function(join) {
	  if (join === constants.ROUND ||
	    join === constants.BEVEL ||
	    join === constants.MITER) {
	    this.drawingContext.lineJoin = join;
	  }
	  return this;
	};

	p5.Renderer2D.prototype.strokeWeight = function(w) {
	  if (typeof w === 'undefined' || w === 0) {
	    // hack because lineWidth 0 doesn't work
	    this.drawingContext.lineWidth = 0.0001;
	  } else {
	    this.drawingContext.lineWidth = w;
	  }
	  return this;
	};

	p5.Renderer2D.prototype._getFill = function(){
	  return this.drawingContext.fillStyle;
	};

	p5.Renderer2D.prototype._getStroke = function(){
	  return this.drawingContext.strokeStyle;
	};

	//////////////////////////////////////////////
	// SHAPE | Curves
	//////////////////////////////////////////////
	p5.Renderer2D.prototype.bezier = function (x1, y1, x2, y2, x3, y3, x4, y4) {
	  this._pInst.beginShape();
	  this._pInst.vertex(x1, y1);
	  this._pInst.bezierVertex(x2, y2, x3, y3, x4, y4);
	  this._pInst.endShape();
	  return this;
	};

	p5.Renderer2D.prototype.curve = function (x1, y1, x2, y2, x3, y3, x4, y4) {
	  this._pInst.beginShape();
	  this._pInst.curveVertex(x1, y1);
	  this._pInst.curveVertex(x2, y2);
	  this._pInst.curveVertex(x3, y3);
	  this._pInst.curveVertex(x4, y4);
	  this._pInst.endShape();
	  return this;
	};

	//////////////////////////////////////////////
	// SHAPE | Vertex
	//////////////////////////////////////////////

	p5.Renderer2D.prototype._doFillStrokeClose = function () {
	  if (this._doFill) {
	    this.drawingContext.fill();
	  }
	  if (this._doStroke) {
	    this.drawingContext.stroke();
	  }
	  this.drawingContext.closePath();
	};

	//////////////////////////////////////////////
	// TRANSFORM
	//////////////////////////////////////////////

	p5.Renderer2D.prototype.applyMatrix =
	function(n00, n01, n02, n10, n11, n12) {
	  this.drawingContext.transform(n00, n01, n02, n10, n11, n12);
	};

	p5.Renderer2D.prototype.resetMatrix = function() {
	  this.drawingContext.setTransform(1, 0, 0, 1, 0, 0);
	  this.drawingContext.scale(this._pInst._pixelDensity,
	                            this._pInst._pixelDensity);
	  return this;
	};

	p5.Renderer2D.prototype.rotate = function(r) {
	  this.drawingContext.rotate(r);
	};

	p5.Renderer2D.prototype.scale = function(x,y) {
	  this.drawingContext.scale(x, y);
	  return this;
	};

	p5.Renderer2D.prototype.shearX = function(angle) {
	  if (this._pInst._angleMode === constants.DEGREES) {
	    // undoing here, because it gets redone in tan()
	    angle = this._pInst.degrees(angle);
	  }
	  this.drawingContext.transform(1, 0, this._pInst.tan(angle), 1, 0, 0);
	  return this;
	};

	p5.Renderer2D.prototype.shearY = function(angle) {
	  if (this._pInst._angleMode === constants.DEGREES) {
	    // undoing here, because it gets redone in tan()
	    angle = this._pInst.degrees(angle);
	  }
	  this.drawingContext.transform(1, this._pInst.tan(angle), 0, 1, 0, 0);
	  return this;
	};

	p5.Renderer2D.prototype.translate = function(x, y) {
	  this.drawingContext.translate(x, y);
	  return this;
	};

	//////////////////////////////////////////////
	// TYPOGRAPHY
	//
	//////////////////////////////////////////////

	p5.Renderer2D.prototype.text = function (str, x, y, maxWidth, maxHeight) {

	  var p = this._pInst, cars, n, ii, jj, line, testLine,
	    testWidth, words, totalHeight, baselineHacked,
	    finalMaxHeight = Number.MAX_VALUE;

	  // baselineHacked: (HACK)
	  // A temporary fix to conform to Processing's implementation
	  // of BASELINE vertical alignment in a bounding box

	  if (!(this._doFill || this._doStroke)) {
	    return;
	  }

	  if (typeof str !== 'string') {
	    str = str.toString();
	  }

	  str = str.replace(/(\t)/g, '  ');
	  cars = str.split('\n');

	  if (typeof maxWidth !== 'undefined') {

	    totalHeight = 0;
	    for (ii = 0; ii < cars.length; ii++) {
	      line = '';
	      words = cars[ii].split(' ');
	      for (n = 0; n < words.length; n++) {
	        testLine = line + words[n] + ' ';
	        testWidth = this.textWidth(testLine);
	        if (testWidth > maxWidth) {
	          line = words[n] + ' ';
	          totalHeight += p.textLeading();
	        } else {
	          line = testLine;
	        }
	      }
	    }

	    if (this._rectMode === constants.CENTER) {

	      x -= maxWidth / 2;
	      y -= maxHeight / 2;
	    }

	    switch (this.drawingContext.textAlign) {

	      case constants.CENTER:
	        x += maxWidth / 2;
	        break;
	      case constants.RIGHT:
	        x += maxWidth;
	        break;
	    }

	    if (typeof maxHeight !== 'undefined') {

	      switch (this.drawingContext.textBaseline) {
	        case constants.BOTTOM:
	          y += (maxHeight - totalHeight);
	          break;
	        case constants._CTX_MIDDLE: // CENTER?
	          y += (maxHeight - totalHeight) / 2;
	          break;
	        case constants.BASELINE:
	          baselineHacked = true;
	          this.drawingContext.textBaseline = constants.TOP;
	          break;
	      }

	      // remember the max-allowed y-position for any line (fix to #928)
	      finalMaxHeight = (y + maxHeight) - p.textAscent();
	    }

	    for (ii = 0; ii < cars.length; ii++) {

	      line = '';
	      words = cars[ii].split(' ');
	      for (n = 0; n < words.length; n++) {
	        testLine = line + words[n] + ' ';
	        testWidth = this.textWidth(testLine);
	        if (testWidth > maxWidth && line.length > 0) {
	          this._renderText(p, line, x, y, finalMaxHeight);
	          line = words[n] + ' ';
	          y += p.textLeading();
	        } else {
	          line = testLine;
	        }
	      }

	      this._renderText(p, line, x, y, finalMaxHeight);
	      y += p.textLeading();
	    }
	  }
	  else {
	    // Offset to account for vertically centering multiple lines of text - no
	    // need to adjust anything for vertical align top or baseline
	    var offset = 0,
	      vAlign = p.textAlign().vertical;
	    if (vAlign === constants.CENTER) {
	      offset = ((cars.length - 1) * p.textLeading()) / 2;
	    } else if (vAlign === constants.BOTTOM) {
	      offset = (cars.length - 1) * p.textLeading();
	    }

	    for (jj = 0; jj < cars.length; jj++) {

	      this._renderText(p, cars[jj], x, y-offset, finalMaxHeight);
	      y += p.textLeading();
	    }
	  }

	  if (baselineHacked) {
	    this.drawingContext.textBaseline = constants.BASELINE;
	  }

	  return p;
	};

	p5.Renderer2D.prototype._renderText = function(p, line, x, y, maxY) {

	  if (y >= maxY) {
	    return; // don't render lines beyond our maxY position
	  }

	  p.push(); // fix to #803

	  if (!this._isOpenType()) {  // a system/browser font

	    // no stroke unless specified by user
	    if (this._doStroke && this._strokeSet) {

	      this.drawingContext.strokeText(line, x, y);
	    }

	    if (this._doFill) {

	      // if fill hasn't been set by user, use default text fill
	      this.drawingContext.fillStyle =  this._fillSet ?
	        this.drawingContext.fillStyle : constants._DEFAULT_TEXT_FILL;

	      this.drawingContext.fillText(line, x, y);
	    }
	  }
	  else { // an opentype font, let it handle the rendering

	    this._textFont._renderPath(line, x, y, { renderer: this });
	  }

	  p.pop();

	  return p;
	};

	p5.Renderer2D.prototype.textWidth = function(s) {

	  if (this._isOpenType()) {

	    return this._textFont._textWidth(s, this._textSize);
	  }

	  return this.drawingContext.measureText(s).width;
	};

	p5.Renderer2D.prototype.textAlign = function(h, v) {

	  if (arguments.length) {

	    if (h === constants.LEFT ||
	      h === constants.RIGHT ||
	      h === constants.CENTER) {

	      this.drawingContext.textAlign = h;
	    }

	    if (v === constants.TOP ||
	      v === constants.BOTTOM ||
	      v === constants.CENTER ||
	      v === constants.BASELINE) {

	      if (v === constants.CENTER) {
	        this.drawingContext.textBaseline = constants._CTX_MIDDLE;
	      } else {
	        this.drawingContext.textBaseline = v;
	      }
	    }

	    return this._pInst;

	  } else {

	    var valign = this.drawingContext.textBaseline;

	    if (valign === constants._CTX_MIDDLE) {

	      valign = constants.CENTER;
	    }

	    return {

	      horizontal: this.drawingContext.textAlign,
	      vertical: valign
	    };
	  }
	};

	p5.Renderer2D.prototype._applyTextProperties = function() {

	  var font, p = this._pInst;

	  this._setProperty('_textAscent', null);
	  this._setProperty('_textDescent', null);

	  font = this._textFont;

	  if (this._isOpenType()) {

	    font = this._textFont.font.familyName;
	    this._setProperty('_textStyle', this._textFont.font.styleName);
	  }

	  this.drawingContext.font = this._textStyle + ' ' +
	  this._textSize + 'px ' + font;

	  return p;
	};


	//////////////////////////////////////////////
	// STRUCTURE
	//////////////////////////////////////////////

	p5.Renderer2D.prototype.push = function() {
	  this.drawingContext.save();
	};

	p5.Renderer2D.prototype.pop = function() {
	  this.drawingContext.restore();
	};

	module.exports = p5.Renderer2D;

	},{"../image/filters":54,"./canvas":35,"./constants":36,"./core":37,"./p5.Renderer":43}],45:[function(_dereq_,module,exports){
	/**
	 * @module Rendering
	 * @submodule Rendering
	 * @for p5
	 */

	var p5 = _dereq_('./core');
	var constants = _dereq_('./constants');
	_dereq_('./p5.Graphics');
	_dereq_('./p5.Renderer2D');
	_dereq_('../webgl/p5.RendererGL');
	var defaultId = 'defaultCanvas0'; // this gets set again in createCanvas

	/**
	 * Creates a canvas element in the document, and sets the dimensions of it
	 * in pixels. This method should be called only once at the start of setup.
	 * Calling createCanvas more than once in a sketch will result in very
	 * unpredicable behavior. If you want more than one drawing canvas
	 * you could use createGraphics (hidden by default but it can be shown).
	 * <br><br>
	 * The system variables width and height are set by the parameters passed
	 * to this function. If createCanvas() is not used, the window will be
	 * given a default size of 100x100 pixels.
	 * <br><br>
	 * For more ways to position the canvas, see the
	 * <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>
	 * positioning the canvas</a> wiki page.
	 *
	 * @method createCanvas
	 * @param  {Number} w width of the canvas
	 * @param  {Number} h height of the canvas
	 * @param  {Constant} [renderer] P2D or WEBGL
	 * @return {Object} canvas generated
	 * @example
	 * <div>
	 * <code>
	 * function setup() {
	 *   createCanvas(100, 50);
	 *   background(153);
	 *   line(0, 0, width, height);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Black line extending from top-left of canvas to bottom right.
	 *
	 */

	p5.prototype.createCanvas = function(w, h, renderer) {
	  //optional: renderer, otherwise defaults to p2d
	  var r = renderer || constants.P2D;
	  var isDefault, c;

	  //4th arg (isDefault) used when called onLoad,
	  //otherwise hidden to the public api
	  if(arguments[3]){
	    isDefault =
	    (typeof arguments[3] === 'boolean') ? arguments[3] : false;
	  }

	  if(r === constants.WEBGL){
	    c = document.getElementById(defaultId);
	    if(c){ //if defaultCanvas already exists
	      c.parentNode.removeChild(c); //replace the existing defaultCanvas
	    }
	    c = document.createElement('canvas');
	    c.id = defaultId;
	  }
	  else {
	    if (isDefault) {
	      c = document.createElement('canvas');
	      var i = 0;
	      while (document.getElementById('defaultCanvas'+i)) {
	        i++;
	      }
	      defaultId = 'defaultCanvas'+i;
	      c.id = defaultId;
	    } else { // resize the default canvas if new one is created
	      c = this.canvas;
	    }
	  }

	  // set to invisible if still in setup (to prevent flashing with manipulate)
	  if (!this._setupDone) {
	    c.dataset.hidden = true; // tag to show later
	    c.style.visibility='hidden';
	  }

	  if (this._userNode) { // user input node case
	    this._userNode.appendChild(c);
	  } else {
	    document.body.appendChild(c);
	  }



	  // Init our graphics renderer
	  //webgl mode
	  if (r === constants.WEBGL) {
	    this._setProperty('_renderer', new p5.RendererGL(c, this, true));
	    this._isdefaultGraphics = true;
	  }
	  //P2D mode
	  else {
	    if (!this._isdefaultGraphics) {
	      this._setProperty('_renderer', new p5.Renderer2D(c, this, true));
	      this._isdefaultGraphics = true;
	    }
	  }
	  this._renderer.resize(w, h);
	  this._renderer._applyDefaults();
	  if (isDefault) { // only push once
	    this._elements.push(this._renderer);
	  }
	  return this._renderer;
	};

	/**
	 * Resizes the canvas to given width and height. The canvas will be cleared
	 * and draw will be called immediately, allowing the sketch to re-render itself
	 * in the resized canvas.
	 * @method resizeCanvas
	 * @example
	 * <div class="norender"><code>
	 * function setup() {
	 *   createCanvas(windowWidth, windowHeight);
	 * }
	 *
	 * function draw() {
	 *  background(0, 100, 200);
	 * }
	 *
	 * function windowResized() {
	 *   resizeCanvas(windowWidth, windowHeight);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * No image displayed.
	 *
	 */
	p5.prototype.resizeCanvas = function (w, h, noRedraw) {
	  if (this._renderer) {

	    // save canvas properties
	    var props = {};
	    for (var key in this.drawingContext) {
	      var val = this.drawingContext[key];
	      if (typeof val !== 'object' && typeof val !== 'function') {
	        props[key] = val;
	      }
	    }
	    this._renderer.resize(w, h);
	    // reset canvas properties
	    for (var savedKey in props) {
	      this.drawingContext[savedKey] = props[savedKey];
	    }
	    if (!noRedraw) {
	      this.redraw();
	    }
	  }
	};


	/**
	 * Removes the default canvas for a p5 sketch that doesn't
	 * require a canvas
	 * @method noCanvas
	 * @example
	 * <div>
	 * <code>
	 * function setup() {
	 *   noCanvas();
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * no image displayed
	 *
	 */
	p5.prototype.noCanvas = function() {
	  if (this.canvas) {
	    this.canvas.parentNode.removeChild(this.canvas);
	  }
	};

	/**
	 * Creates and returns a new p5.Renderer object. Use this class if you need
	 * to draw into an off-screen graphics buffer. The two parameters define the
	 * width and height in pixels.
	 *
	 * @method createGraphics
	 * @param  {Number} w width of the offscreen graphics buffer
	 * @param  {Number} h height of the offscreen graphics buffer
	 * @param  {Constant} [renderer] P2D or WEBGL
	 * undefined defaults to p2d
	 * @return {Object} offscreen graphics buffer
	 * @example
	 * <div>
	 * <code>
	 * var pg;
	 * function setup() {
	 *   createCanvas(100, 100);
	 *   pg = createGraphics(100, 100);
	 * }
	 * function draw() {
	 *   background(200);
	 *   pg.background(100);
	 *   pg.noStroke();
	 *   pg.ellipse(pg.width/2, pg.height/2, 50, 50);
	 *   image(pg, 50, 50);
	 *   image(pg, 0, 0, 50, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 4 grey squares alternating light and dark grey. White quarter circle mid-left.
	 *
	 */
	p5.prototype.createGraphics = function(w, h, renderer){
	  return new p5.Graphics(w, h, renderer, this);
	};

	/**
	 * Blends the pixels in the display window according to the defined mode.
	 * There is a choice of the following modes to blend the source pixels (A)
	 * with the ones of pixels already in the display window (B):
	 * <ul>
	 * <li><code>BLEND</code> - linear interpolation of colours: C =
	 * A*factor + B. This is the default blending mode.</li>
	 * <li><code>ADD</code> - sum of A and B</li>
	 * <li><code>DARKEST</code> - only the darkest colour succeeds: C =
	 * min(A*factor, B).</li>
	 * <li><code>LIGHTEST</code> - only the lightest colour succeeds: C =
	 * max(A*factor, B).</li>
	 * <li><code>DIFFERENCE</code> - subtract colors from underlying image.</li>
	 * <li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less
	 * extreme.</li>
	 * <li><code>MULTIPLY</code> - multiply the colors, result will always be
	 * darker.</li>
	 * <li><code>SCREEN</code> - opposite multiply, uses inverse values of the
	 * colors.</li>
	 * <li><code>REPLACE</code> - the pixels entirely replace the others and
	 * don't utilize alpha (transparency) values.</li>
	 * <li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN
	 * </code>. Multiplies dark values, and screens light values.</li>
	 * <li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%
	 * gray, <code>MULTIPLY</code> when lower.</li>
	 * <li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and
	 * <code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh.
	 * </li>
	 * <li><code>DODGE</code> - lightens light tones and increases contrast,
	 * ignores darks.</li>
	 * <li><code>BURN</code> - darker areas are applied, increasing contrast,
	 * ignores lights.</li>
	 * </ul>
	 *
	 * @method blendMode
	 * @param  {Constant} mode blend mode to set for canvas
	 * @example
	 * <div>
	 * <code>
	 * blendMode(LIGHTEST);
	 * strokeWeight(30);
	 * stroke(80, 150, 255);
	 * line(25, 25, 75, 75);
	 * stroke(255, 50, 50);
	 * line(75, 25, 25, 75);
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * blendMode(MULTIPLY);
	 * strokeWeight(30);
	 * stroke(80, 150, 255);
	 * line(25, 25, 75, 75);
	 * stroke(255, 50, 50);
	 * line(75, 25, 25, 75);
	 * </code>
	 * </div>
	 * @alt
	 * translucent image thick red & blue diagonal rounded lines intersecting center
	 * Thick red & blue diagonal rounded lines intersecting center. dark at overlap
	 *
	 */
	p5.prototype.blendMode = function(mode) {
	  if (mode === constants.BLEND || mode === constants.DARKEST ||
	    mode === constants.LIGHTEST || mode === constants.DIFFERENCE ||
	    mode === constants.MULTIPLY || mode === constants.EXCLUSION ||
	    mode === constants.SCREEN || mode === constants.REPLACE ||
	    mode === constants.OVERLAY || mode === constants.HARD_LIGHT ||
	    mode === constants.SOFT_LIGHT || mode === constants.DODGE ||
	    mode === constants.BURN || mode === constants.ADD ||
	    mode === constants.NORMAL) {
	    this._renderer.blendMode(mode);
	  } else {
	    throw new Error('Mode '+mode+' not recognized.');
	  }
	};

	module.exports = p5;

	},{"../webgl/p5.RendererGL":86,"./constants":36,"./core":37,"./p5.Graphics":42,"./p5.Renderer2D":44}],46:[function(_dereq_,module,exports){

	// requestAnim shim layer by Paul Irish
	window.requestAnimationFrame = (function(){
	  return window.requestAnimationFrame      ||
	        window.webkitRequestAnimationFrame ||
	        window.mozRequestAnimationFrame    ||
	        window.oRequestAnimationFrame      ||
	        window.msRequestAnimationFrame     ||
	        function(callback, element){
	          // should '60' here be framerate?
	          window.setTimeout(callback, 1000 / 60);
	        };
	})();

	// use window.performance() to get max fast and accurate time in milliseconds
	window.performance = window.performance || {};
	window.performance.now = (function(){
	  var load_date = Date.now();
	  return window.performance.now        ||
	        window.performance.mozNow      ||
	        window.performance.msNow       ||
	        window.performance.oNow        ||
	        window.performance.webkitNow   ||
	        function () {
	          return Date.now() - load_date;
	        };
	})();

	/*
	// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	// http://my.opera.com/emoller/blog/2011/12/20/
	// requestanimationframe-for-smart-er-animating
	// requestAnimationFrame polyfill by Erik MÃ¶ller
	// fixes from Paul Irish and Tino Zijdel
	(function() {
	  var lastTime = 0;
	  var vendors = ['ms', 'moz', 'webkit', 'o'];
	  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
	    window.requestAnimationFrame =
	      window[vendors[x]+'RequestAnimationFrame'];
	    window.cancelAnimationFrame =
	      window[vendors[x]+'CancelAnimationFrame'] ||
	      window[vendors[x]+'CancelRequestAnimationFrame'];
	  }

	  if (!window.requestAnimationFrame) {
	    window.requestAnimationFrame = function(callback, element) {
	      var currTime = new Date().getTime();
	      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	      var id = window.setTimeout(function()
	        { callback(currTime + timeToCall); }, timeToCall);
	      lastTime = currTime + timeToCall;
	      return id;
	    };
	  }

	  if (!window.cancelAnimationFrame) {
	    window.cancelAnimationFrame = function(id) {
	      clearTimeout(id);
	    };
	  }
	}());
	*/

	/**
	 * shim for Uint8ClampedArray.slice
	 * (allows arrayCopy to work with pixels[])
	 * with thanks to http://halfpapstudios.com/blog/tag/html5-canvas/
	 * Enumerable set to false to protect for...in from
	 * Uint8ClampedArray.prototype pollution.
	 */
	(function () {
	  'use strict';
	  if (typeof Uint8ClampedArray !== 'undefined' &&
	      !Uint8ClampedArray.prototype.slice) {
	    Object.defineProperty(Uint8ClampedArray.prototype, 'slice', {
	      value: Array.prototype.slice,
	      writable: true, configurable: true, enumerable: false
	    });
	  }
	}());

	},{}],47:[function(_dereq_,module,exports){
	/**
	 * @module Structure
	 * @submodule Structure
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('./core');

	p5.prototype.exit = function() {
	  throw 'exit() not implemented, see remove()';
	};
	/**
	 * Stops p5.js from continuously executing the code within draw().
	 * If loop() is called, the code in draw() begins to run continuously again.
	 * If using noLoop() in setup(), it should be the last line inside the block.
	 * <br><br>
	 * When noLoop() is used, it's not possible to manipulate or access the
	 * screen inside event handling functions such as mousePressed() or
	 * keyPressed(). Instead, use those functions to call redraw() or loop(),
	 * which will run draw(), which can update the screen properly. This means
	 * that when noLoop() has been called, no drawing can happen, and functions
	 * like saveFrame() or loadPixels() may not be used.
	 * <br><br>
	 * Note that if the sketch is resized, redraw() will be called to update
	 * the sketch, even after noLoop() has been specified. Otherwise, the sketch
	 * would enter an odd state until loop() was called.
	 *
	 * @method noLoop
	 * @example
	 * <div><code>
	 * function setup() {
	 *   createCanvas(100, 100);
	 *   background(200);
	 *   noLoop();
	 * }

	 * function draw() {
	 *   line(10, 10, 90, 90);
	 * }
	 * </code></div>
	 *
	 * <div><code>
	 * var x = 0;
	 * function setup() {
	 *   createCanvas(100, 100);
	 * }
	 *
	 * function draw() {
	 *   background(204);
	 *   x = x + 0.1;
	 *   if (x > width) {
	 *     x = 0;
	 *   }
	 *   line(x, 0, x, height);
	 * }
	 *
	 * function mousePressed() {
	 *   noLoop();
	 * }
	 *
	 * function mouseReleased() {
	 *   loop();
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 113 pixel long line extending from top-left to bottom right of canvas.
	 * horizontal line moves slowly from left. Loops but stops on mouse press.
	 *
	 */
	p5.prototype.noLoop = function() {
	  this._loop = false;
	};
	/**
	 * By default, p5.js loops through draw() continuously, executing the code
	 * within it. However, the draw() loop may be stopped by calling noLoop().
	 * In that case, the draw() loop can be resumed with loop().
	 *
	 * @method loop
	 * @example
	 * <div><code>
	 * var x = 0;
	 * function setup() {
	 *   createCanvas(100, 100);
	 *   noLoop();
	 * }
	 *
	 * function draw() {
	 *   background(204);
	 *   x = x + 0.1;
	 *   if (x > width) {
	 *     x = 0;
	 *   }
	 *   line(x, 0, x, height);
	 * }
	 *
	 * function mousePressed() {
	 *   loop();
	 * }
	 *
	 * function mouseReleased() {
	 *   noLoop();
	 * }
	 * </code></div>
	 *
	 * @alt
	 * horizontal line moves slowly from left. Loops but stops on mouse press.
	 *
	 */

	p5.prototype.loop = function() {
	  this._loop = true;
	  this._draw();
	};

	/**
	 * The push() function saves the current drawing style settings and
	 * transformations, while pop() restores these settings. Note that these
	 * functions are always used together. They allow you to change the style
	 * and transformation settings and later return to what you had. When a new
	 * state is started with push(), it builds on the current style and transform
	 * information. The push() and pop() functions can be embedded to provide
	 * more control. (See the second example for a demonstration.)
	 * <br><br>
	 * push() stores information related to the current transformation state
	 * and style settings controlled by the following functions: fill(),
	 * stroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(),
	 * imageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(),
	 * textFont(), textMode(), textSize(), textLeading().
	 *
	 * @method push
	 * @example
	 * <div>
	 * <code>
	 * ellipse(0, 50, 33, 33);  // Left circle
	 *
	 * push();  // Start a new drawing state
	 * strokeWeight(10);
	 * fill(204, 153, 0);
	 * translate(50, 0);
	 * ellipse(0, 50, 33, 33);  // Middle circle
	 * pop();  // Restore original state
	 *
	 * ellipse(100, 50, 33, 33);  // Right circle
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * ellipse(0, 50, 33, 33);  // Left circle
	 *
	 * push();  // Start a new drawing state
	 * strokeWeight(10);
	 * fill(204, 153, 0);
	 * ellipse(33, 50, 33, 33);  // Left-middle circle
	 *
	 * push();  // Start another new drawing state
	 * stroke(0, 102, 153);
	 * ellipse(66, 50, 33, 33);  // Right-middle circle
	 * pop();  // Restore previous state
	 *
	 * pop();  // Restore original state
	 *
	 * ellipse(100, 50, 33, 33);  // Right circle
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Gold ellipse + thick black outline @center 2 white ellipses on left and right.
	 * 2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.
	 *
	 */
	p5.prototype.push = function () {
	  this._renderer.push();
	  this._styles.push({
	    _doStroke: this._renderer._doStroke,
	    _strokeSet: this._renderer._strokeSet,
	    _doFill: this._renderer._doFill,
	    _fillSet: this._renderer._fillSet,
	    _tint: this._renderer._tint,
	    _imageMode: this._renderer._imageMode,
	    _rectMode: this._renderer._rectMode,
	    _ellipseMode: this._renderer._ellipseMode,
	    _colorMode: this._renderer._colorMode,
	    _textFont: this._renderer._textFont,
	    _textLeading: this._renderer._textLeading,
	    _textSize: this._renderer._textSize,
	    _textStyle: this._renderer._textStyle
	  });
	};

	/**
	 * The push() function saves the current drawing style settings and
	 * transformations, while pop() restores these settings. Note that these
	 * functions are always used together. They allow you to change the style
	 * and transformation settings and later return to what you had. When a new
	 * state is started with push(), it builds on the current style and transform
	 * information. The push() and pop() functions can be embedded to provide
	 * more control. (See the second example for a demonstration.)
	 * <br><br>
	 * push() stores information related to the current transformation state
	 * and style settings controlled by the following functions: fill(),
	 * stroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(),
	 * imageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(),
	 * textFont(), textMode(), textSize(), textLeading().
	 *
	 * @method pop
	 * @example
	 * <div>
	 * <code>
	 * ellipse(0, 50, 33, 33);  // Left circle
	 *
	 * push();  // Start a new drawing state
	 * translate(50, 0);
	 * strokeWeight(10);
	 * fill(204, 153, 0);
	 * ellipse(0, 50, 33, 33);  // Middle circle
	 * pop();  // Restore original state
	 *
	 * ellipse(100, 50, 33, 33);  // Right circle
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * ellipse(0, 50, 33, 33);  // Left circle
	 *
	 * push();  // Start a new drawing state
	 * strokeWeight(10);
	 * fill(204, 153, 0);
	 * ellipse(33, 50, 33, 33);  // Left-middle circle
	 *
	 * push();  // Start another new drawing state
	 * stroke(0, 102, 153);
	 * ellipse(66, 50, 33, 33);  // Right-middle circle
	 * pop();  // Restore previous state
	 *
	 * pop();  // Restore original state
	 *
	 * ellipse(100, 50, 33, 33);  // Right circle
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Gold ellipse + thick black outline @center 2 white ellipses on left and right.
	 * 2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.
	 *
	 */
	p5.prototype.pop = function () {
	  this._renderer.pop();
	  var lastS = this._styles.pop();
	  for(var prop in lastS){
	    this._renderer[prop] = lastS[prop];
	  }
	};

	p5.prototype.pushStyle = function() {
	  throw new Error('pushStyle() not used, see push()');
	};

	p5.prototype.popStyle = function() {
	  throw new Error('popStyle() not used, see pop()');
	};

	/**
	 *
	 * Executes the code within draw() one time. This functions allows the
	 * program to update the display window only when necessary, for example
	 * when an event registered by mousePressed() or keyPressed() occurs.
	 * <br><br>
	 * In structuring a program, it only makes sense to call redraw() within
	 * events such as mousePressed(). This is because redraw() does not run
	 * draw() immediately (it only sets a flag that indicates an update is
	 * needed).
	 * <br><br>
	 * The redraw() function does not work properly when called inside draw().
	 * To enable/disable animations, use loop() and noLoop().
	 * <br><br>
	 * In addition you can set the number of redraws per method call. Just
	 * add an integer as single parameter for the number of redraws.
	 *
	 * @method redraw
	 * @param  {Integer} [n] Redraw for n-times. The default value is 1.
	 * @example
	 * <div><code>
	 * var x = 0;
	 *
	 * function setup() {
	 *   createCanvas(100, 100);
	 *   noLoop();
	 * }
	 *
	 * function draw() {
	 *   background(204);
	 *   line(x, 0, x, height);
	 * }
	 *
	 * function mousePressed() {
	 *   x += 1;
	 *   redraw();
	 * }
	 * </code></div>
	 *
	 * <div class='norender'><code>
	 * var x = 0;
	 *
	 * function setup() {
	 *   createCanvas(100, 100);
	 *   noLoop();
	 * }
	 *
	 * function draw() {
	 *   background(204);
	 *   x += 1;
	 *   line(x, 0, x, height);
	 * }
	 *
	 * function mousePressed() {
	 *   redraw(5);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * black line on far left of canvas
	 * black line on far left of canvas
	 *
	 */
	p5.prototype.redraw = function () {
	  this.resetMatrix();
	  if(this._renderer.isP3D){
	    this._renderer._update();
	  }

	  var numberOfRedraws = 1;
	  if (arguments.length === 1) {
	    try {
	      if (parseInt(arguments[0]) > 1) {
	        numberOfRedraws = parseInt(arguments[0]);
	      }
	    } catch (error) {
	      // Do nothing, because the default value didn't be changed.
	    }
	  }
	  var userSetup = this.setup || window.setup;
	  var userDraw = this.draw || window.draw;
	  if (typeof userDraw === 'function') {
	    if (typeof userSetup === 'undefined') {
	      this.scale(this._pixelDensity, this._pixelDensity);
	    }
	    var self = this;
	    var callMethod = function (f) {
	      f.call(self);
	    };
	    for (var idxRedraw = 0; idxRedraw < numberOfRedraws; idxRedraw++) {
	      this._registeredMethods.pre.forEach(callMethod);
	      userDraw();
	      this._registeredMethods.post.forEach(callMethod);
	    }
	  }
	};

	p5.prototype.size = function() {
	  var s = 'size() is not a valid p5 function, to set the size of the ';
	  s += 'drawing canvas, please use createCanvas() instead';
	  throw s;
	};


	module.exports = p5;

	},{"./core":37}],48:[function(_dereq_,module,exports){
	/**
	 * @module Transform
	 * @submodule Transform
	 * @for p5
	 * @requires core
	 * @requires constants
	 */


	'use strict';

	var p5 = _dereq_('./core');
	var constants = _dereq_('./constants');

	/**
	 * Multiplies the current matrix by the one specified through the parameters.
	 * This is very slow because it will try to calculate the inverse of the
	 * transform, so avoid it whenever possible.
	 *
	 * @method applyMatrix
	 * @param  {Number} n00 numbers which define the 3x2 matrix to be multiplied
	 * @param  {Number} n01 numbers which define the 3x2 matrix to be multiplied
	 * @param  {Number} n02 numbers which define the 3x2 matrix to be multiplied
	 * @param  {Number} n10 numbers which define the 3x2 matrix to be multiplied
	 * @param  {Number} n11 numbers which define the 3x2 matrix to be multiplied
	 * @param  {Number} n12 numbers which define the 3x2 matrix to be multiplied
	 * @return {p5}         the p5 object
	 * @example
	 * <div>
	 * <code>
	 * // Example in the works.
	 * </code>
	 * </div>
	 *
	 * @alt
	 * no image diplayed
	 *
	 */
	p5.prototype.applyMatrix = function(n00, n01, n02, n10, n11, n12) {
	  this._renderer.applyMatrix(n00, n01, n02, n10, n11, n12);
	  return this;
	};

	p5.prototype.popMatrix = function() {
	  throw new Error('popMatrix() not used, see pop()');
	};

	p5.prototype.printMatrix = function() {
	  throw new Error('printMatrix() not implemented');
	};

	p5.prototype.pushMatrix = function() {
	  throw new Error('pushMatrix() not used, see push()');
	};

	/**
	 * Replaces the current matrix with the identity matrix.
	 *
	 * @method resetMatrix
	 * @return {p5} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * // Example in the works.
	 * </code>
	 * </div>
	 *
	 * @alt
	 * no image diplayed
	 *
	 */
	p5.prototype.resetMatrix = function() {
	  this._renderer.resetMatrix();
	  return this;
	};

	/**
	 * Rotates a shape the amount specified by the angle parameter. This
	 * function accounts for angleMode, so angles can be entered in either
	 * RADIANS or DEGREES.
	 * <br><br>
	 * Objects are always rotated around their relative position to the
	 * origin and positive numbers rotate objects in a clockwise direction.
	 * Transformations apply to everything that happens after and subsequent
	 * calls to the function accumulates the effect. For example, calling
	 * rotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).
	 * All tranformations are reset when draw() begins again.
	 * <br><br>
	 * Technically, rotate() multiplies the current transformation matrix
	 * by a rotation matrix. This function can be further controlled by
	 * the push() and pop().
	 *
	 * @method rotate
	 * @param  {Number} angle the angle of rotation, specified in radians
	 *                        or degrees, depending on current angleMode
	 * @return {p5}           the p5 object
	 * @example
	 * <div>
	 * <code>
	 * translate(width/2, height/2);
	 * rotate(PI/3.0);
	 * rect(-26, -26, 52, 52);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * white 52x52 rect with black outline at center rotated counter 45 degrees
	 *
	 */
	/**
	 * @method rotate
	 * @param  {Number} rad  angle in radians
	 * @param  {p5.Vector | Array} axis axis to rotate around
	 * @return {p5.RendererGL}      [description]
	 */
	p5.prototype.rotate = function() {
	  var args = new Array(arguments.length);
	  var r;
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  if (this._angleMode === constants.DEGREES) {
	    r = this.radians(args[0]);
	  } else if (this._angleMode === constants.RADIANS){
	    r = args[0];
	  }
	  //in webgl mode
	  if(args.length > 1){
	    this._renderer.rotate(r, args[1]);
	  }
	  else {
	    this._renderer.rotate(r);
	  }
	  return this;
	};

	/**
	 * Rotates around X axis.
	 * @method  rotateX
	 * @param  {Number} rad angles in radians
	 * @return {[type]}     [description]
	 */
	p5.prototype.rotateX = function(rad) {
	  if (this._renderer.isP3D) {
	    this._renderer.rotateX(rad);
	  } else {
	    throw 'not supported in p2d. Please use webgl mode';
	  }
	  return this;
	};

	/**
	 * Rotates around Y axis.
	 * @method rotateY
	 * @param  {Number} rad angles in radians
	 * @return {[type]}     [description]
	 */
	p5.prototype.rotateY = function(rad) {
	  if (this._renderer.isP3D) {
	    this._renderer.rotateY(rad);
	  } else {
	    throw 'not supported in p2d. Please use webgl mode';
	  }
	  return this;
	};

	/**
	 * Rotates around Z axis.  Webgl mode only.
	 * @method rotateZ
	 * @param  {Number} rad angles in radians
	 * @return {[type]}     [description]
	 */
	p5.prototype.rotateZ = function(rad) {
	  if (this._renderer.isP3D) {
	    this._renderer.rotateZ(rad);
	  } else {
	    throw 'not supported in p2d. Please use webgl mode';
	  }
	  return this;
	};

	/**
	 * Increases or decreases the size of a shape by expanding and contracting
	 * vertices. Objects always scale from their relative origin to the
	 * coordinate system. Scale values are specified as decimal percentages.
	 * For example, the function call scale(2.0) increases the dimension of a
	 * shape by 200%.
	 * <br><br>
	 * Transformations apply to everything that happens after and subsequent
	 * calls to the function multiply the effect. For example, calling scale(2.0)
	 * and then scale(1.5) is the same as scale(3.0). If scale() is called
	 * within draw(), the transformation is reset when the loop begins again.
	 * <br><br>
	 * Using this function with the z parameter is only available in WEBGL mode.
	 * This function can be further controlled with push() and pop().
	 *
	 * @method scale
	 * @param  {Number | p5.Vector | Array} s
	 *                      percent to scale the object, or percentage to
	 *                      scale the object in the x-axis if multiple arguments
	 *                      are given
	 * @param  {Number} [y] percent to scale the object in the y-axis
	 * @param  {Number} [z] percent to scale the object in the z-axis (webgl only)
	 * @return {p5}         the p5 object
	 * @example
	 * <div>
	 * <code>
	 * translate(width/2, height/2);
	 * rotate(PI/3.0);
	 * rect(-26, -26, 52, 52);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * rect(30, 20, 50, 50);
	 * scale(0.5, 1.3);
	 * rect(30, 20, 50, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * white 52x52 rect with black outline at center rotated counter 45 degrees
	 * 2 white rects with black outline- 1 50x50 at center. other 25x65 bottom left
	 *
	 */
	p5.prototype.scale = function() {
	  var x,y,z;
	  var args = new Array(arguments.length);
	  for(var i = 0; i < args.length; i++) {
	    args[i] = arguments[i];
	  }
	  if(args[0] instanceof p5.Vector){
	    x = args[0].x;
	    y = args[0].y;
	    z = args[0].z;
	  }
	  else if(args[0] instanceof Array){
	    x = args[0][0];
	    y = args[0][1];
	    z = args[0][2] || 1;
	  }
	  else {
	    if(args.length === 1){
	      x = y = z = args[0];
	    }
	    else {
	      x = args[0];
	      y = args[1];
	      z = args[2] || 1;
	    }
	  }

	  if(this._renderer.isP3D){
	    this._renderer.scale.call(this._renderer, x,y,z);
	  }
	  else {
	    this._renderer.scale.call(this._renderer, x,y);
	  }
	  return this;
	};

	/**
	 * Shears a shape around the x-axis the amount specified by the angle
	 * parameter. Angles should be specified in the current angleMode.
	 * Objects are always sheared around their relative position to the origin
	 * and positive numbers shear objects in a clockwise direction.
	 * <br><br>
	 * Transformations apply to everything that happens after and subsequent
	 * calls to the function accumulates the effect. For example, calling
	 * shearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).
	 * If shearX() is called within the draw(), the transformation is reset when
	 * the loop begins again.
	 * <br><br>
	 * Technically, shearX() multiplies the current transformation matrix by a
	 * rotation matrix. This function can be further controlled by the
	 * push() and pop() functions.
	 *
	 * @method shearX
	 * @param  {Number} angle angle of shear specified in radians or degrees,
	 *                        depending on current angleMode
	 * @return {p5}           the p5 object
	 * @example
	 * <div>
	 * <code>
	 * translate(width/4, height/4);
	 * shearX(PI/4.0);
	 * rect(0, 0, 30, 30);
	 * </code>
	 * </div>
	 *
	 * @alt
	  * white irregular quadrilateral with black outline at top middle.
	 *
	 */
	p5.prototype.shearX = function(angle) {
	  if (this._angleMode === constants.DEGREES) {
	    angle = this.radians(angle);
	  }
	  this._renderer.shearX(angle);
	  return this;
	};

	/**
	 * Shears a shape around the y-axis the amount specified by the angle
	 * parameter. Angles should be specified in the current angleMode. Objects
	 * are always sheared around their relative position to the origin and
	 * positive numbers shear objects in a clockwise direction.
	 * <br><br>
	 * Transformations apply to everything that happens after and subsequent
	 * calls to the function accumulates the effect. For example, calling
	 * shearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If
	 * shearY() is called within the draw(), the transformation is reset when
	 * the loop begins again.
	 * <br><br>
	 * Technically, shearY() multiplies the current transformation matrix by a
	 * rotation matrix. This function can be further controlled by the
	 * push() and pop() functions.
	 *
	 * @method shearY
	 * @param  {Number} angle angle of shear specified in radians or degrees,
	 *                        depending on current angleMode
	 * @return {p5}           the p5 object
	 * @example
	 * <div>
	 * <code>
	 * translate(width/4, height/4);
	 * shearY(PI/4.0);
	 * rect(0, 0, 30, 30);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * white irregular quadrilateral with black outline at middle bottom.
	 *
	 */
	p5.prototype.shearY = function(angle) {
	  if (this._angleMode === constants.DEGREES) {
	    angle = this.radians(angle);
	  }
	  this._renderer.shearY(angle);
	  return this;
	};

	/**
	 * Specifies an amount to displace objects within the display window.
	 * The x parameter specifies left/right translation, the y parameter
	 * specifies up/down translation.
	 * <br><br>
	 * Transformations are cumulative and apply to everything that happens after
	 * and subsequent calls to the function accumulates the effect. For example,
	 * calling translate(50, 0) and then translate(20, 0) is the same as
	 * translate(70, 0). If translate() is called within draw(), the
	 * transformation is reset when the loop begins again. This function can be
	 * further controlled by using push() and pop().
	 *
	 * @method translate
	 * @param  {Number} x left/right translation
	 * @param  {Number} y up/down translation
	 * @param  {Number} [z] forward/backward translation (webgl only)
	 * @return {p5}       the p5 object
	 * @example
	 * <div>
	 * <code>
	 * translate(30, 20);
	 * rect(0, 0, 55, 55);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * rect(0, 0, 55, 55);  // Draw rect at original 0,0
	 * translate(30, 20);
	 * rect(0, 0, 55, 55);  // Draw rect at new 0,0
	 * translate(14, 14);
	 * rect(0, 0, 55, 55);  // Draw rect at new 0,0
	 * </code>
	 * </div>
	 *
	 * @alt
	 * white 55x55 rect with black outline at center right.
	 * 3 white 55x55 rects with black outlines at top-l, center-r and bottom-r.
	 *
	 */
	p5.prototype.translate = function(x, y, z) {
	  if (this._renderer.isP3D) {
	    this._renderer.translate(x, y, z);
	  } else {
	    this._renderer.translate(x, y);
	  }
	  return this;
	};

	module.exports = p5;

	},{"./constants":36,"./core":37}],49:[function(_dereq_,module,exports){
	/**
	 * @module Shape
	 * @submodule Vertex
	 * @for p5
	 * @requires core
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('./core');
	var constants = _dereq_('./constants');
	var shapeKind = null;
	var vertices = [];
	var contourVertices = [];
	var isBezier = false;
	var isCurve = false;
	var isQuadratic = false;
	var isContour = false;
	var isFirstContour = true;

	/**
	 * Use the beginContour() and endContour() functions to create negative
	 * shapes within shapes such as the center of the letter 'O'. beginContour()
	 * begins recording vertices for the shape and endContour() stops recording.
	 * The vertices that define a negative shape must "wind" in the opposite
	 * direction from the exterior shape. First draw vertices for the exterior
	 * clockwise order, then for internal shapes, draw vertices
	 * shape in counter-clockwise.
	 * <br><br>
	 * These functions can only be used within a beginShape()/endShape() pair and
	 * transformations such as translate(), rotate(), and scale() do not work
	 * within a beginContour()/endContour() pair. It is also not possible to use
	 * other shapes, such as ellipse() or rect() within.
	 *
	 * @method beginContour
	 * @return {Object} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * translate(50, 50);
	 * stroke(255, 0, 0);
	 * beginShape();
	 * // Exterior part of shape, clockwise winding
	 * vertex(-40, -40);
	 * vertex(40, -40);
	 * vertex(40, 40);
	 * vertex(-40, 40);
	 * // Interior part of shape, counter-clockwise winding
	 * beginContour();
	 * vertex(-20, -20);
	 * vertex(-20, 20);
	 * vertex(20, 20);
	 * vertex(20, -20);
	 * endContour();
	 * endShape(CLOSE);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * white rect and smaller grey rect with red outlines in center of canvas.
	 *
	 */
	p5.prototype.beginContour = function() {
	  contourVertices = [];
	  isContour = true;
	  return this;
	};

	/**
	 * Using the beginShape() and endShape() functions allow creating more
	 * complex forms. beginShape() begins recording vertices for a shape and
	 * endShape() stops recording. The value of the kind parameter tells it which
	 * types of shapes to create from the provided vertices. With no mode
	 * specified, the shape can be any irregular polygon.
	 * <br><br>
	 * The parameters available for beginShape() are POINTS, LINES, TRIANGLES,
	 * TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the
	 * beginShape() function, a series of vertex() commands must follow. To stop
	 * drawing the shape, call endShape(). Each shape will be outlined with the
	 * current stroke color and filled with the fill color.
	 * <br><br>
	 * Transformations such as translate(), rotate(), and scale() do not work
	 * within beginShape(). It is also not possible to use other shapes, such as
	 * ellipse() or rect() within beginShape().
	 *
	 * @method beginShape
	 * @param  {Constant} kind either POINTS, LINES, TRIANGLES, TRIANGLE_FAN
	 *                                TRIANGLE_STRIP, QUADS, or QUAD_STRIP
	 * @return {Object}               the p5 object
	 * @example
	 * <div>
	 * <code>
	 * beginShape();
	 * vertex(30, 20);
	 * vertex(85, 20);
	 * vertex(85, 75);
	 * vertex(30, 75);
	 * endShape(CLOSE);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * // currently not working
	 * beginShape(POINTS);
	 * vertex(30, 20);
	 * vertex(85, 20);
	 * vertex(85, 75);
	 * vertex(30, 75);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * beginShape(LINES);
	 * vertex(30, 20);
	 * vertex(85, 20);
	 * vertex(85, 75);
	 * vertex(30, 75);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * noFill();
	 * beginShape();
	 * vertex(30, 20);
	 * vertex(85, 20);
	 * vertex(85, 75);
	 * vertex(30, 75);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * noFill();
	 * beginShape();
	 * vertex(30, 20);
	 * vertex(85, 20);
	 * vertex(85, 75);
	 * vertex(30, 75);
	 * endShape(CLOSE);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * beginShape(TRIANGLES);
	 * vertex(30, 75);
	 * vertex(40, 20);
	 * vertex(50, 75);
	 * vertex(60, 20);
	 * vertex(70, 75);
	 * vertex(80, 20);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * beginShape(TRIANGLE_STRIP);
	 * vertex(30, 75);
	 * vertex(40, 20);
	 * vertex(50, 75);
	 * vertex(60, 20);
	 * vertex(70, 75);
	 * vertex(80, 20);
	 * vertex(90, 75);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * beginShape(TRIANGLE_FAN);
	 * vertex(57.5, 50);
	 * vertex(57.5, 15);
	 * vertex(92, 50);
	 * vertex(57.5, 85);
	 * vertex(22, 50);
	 * vertex(57.5, 15);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * beginShape(QUADS);
	 * vertex(30, 20);
	 * vertex(30, 75);
	 * vertex(50, 75);
	 * vertex(50, 20);
	 * vertex(65, 20);
	 * vertex(65, 75);
	 * vertex(85, 75);
	 * vertex(85, 20);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * beginShape(QUAD_STRIP);
	 * vertex(30, 20);
	 * vertex(30, 75);
	 * vertex(50, 20);
	 * vertex(50, 75);
	 * vertex(65, 20);
	 * vertex(65, 75);
	 * vertex(85, 20);
	 * vertex(85, 75);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * beginShape();
	 * vertex(20, 20);
	 * vertex(40, 20);
	 * vertex(40, 40);
	 * vertex(60, 40);
	 * vertex(60, 60);
	 * vertex(20, 60);
	 * endShape(CLOSE);
	 * </code>
	 * </div>
	  * @alt
	 * white square-shape with black outline in middle-right of canvas.
	 * 4 black points in a square shape in middle-right of canvas.
	 * 2 horizontal black lines. In the top-right and bottom-right of canvas.
	 * 3 line shape with horizontal on top, vertical in middle and horizontal bottom.
	 * square line shape in middle-right of canvas.
	 * 2 white triangle shapes mid-right canvas. left one pointing up and right down.
	 * 5 horizontal interlocking and alternating white triangles in mid-right canvas.
	 * 4 interlocking white triangles in 45 degree rotated square-shape.
	 * 2 white rectangle shapes in mid-right canvas. Both 20x55.
	 * 3 side-by-side white rectangles center rect is smaller in mid-right canvas.
	 * Thick white l-shape with black outline mid-top-left of canvas.
	 *
	 */
	p5.prototype.beginShape = function(kind) {
	  if (kind === constants.POINTS ||
	    kind === constants.LINES ||
	    kind === constants.TRIANGLES ||
	    kind === constants.TRIANGLE_FAN ||
	    kind === constants.TRIANGLE_STRIP ||
	    kind === constants.QUADS ||
	    kind === constants.QUAD_STRIP) {
	    shapeKind = kind;
	  } else {
	    shapeKind = null;
	  }
	  if(this._renderer.isP3D){
	    this._renderer.beginShape(kind);
	  } else {
	    vertices = [];
	    contourVertices = [];
	  }
	  return this;
	};

	/**
	 * Specifies vertex coordinates for Bezier curves. Each call to
	 * bezierVertex() defines the position of two control points and
	 * one anchor point of a Bezier curve, adding a new segment to a
	 * line or shape.
	 * <br><br>
	 * The first time bezierVertex() is used within a
	 * beginShape() call, it must be prefaced with a call to vertex()
	 * to set the first anchor point. This function must be used between
	 * beginShape() and endShape() and only when there is no MODE
	 * parameter specified to beginShape().
	 *
	 * @method bezierVertex
	 * @param  {Number} x2 x-coordinate for the first control point
	 * @param  {Number} y2 y-coordinate for the first control point
	 * @param  {Number} x3 x-coordinate for the second control point
	 * @param  {Number} y3 y-coordinate for the second control point
	 * @param  {Number} x4 x-coordinate for the anchor point
	 * @param  {Number} y4 y-coordinate for the anchor point
	 * @return {Object}    the p5 object
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * beginShape();
	 * vertex(30, 20);
	 * bezierVertex(80, 0, 80, 75, 30, 75);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * beginShape();
	 * vertex(30, 20);
	 * bezierVertex(80, 0, 80, 75, 30, 75);
	 * bezierVertex(50, 80, 60, 25, 30, 20);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * @alt
	 * crescent-shaped line in middle of canvas. Points facing left.
	 * white crescent shape in middle of canvas. Points facing left.
	 *
	 */
	p5.prototype.bezierVertex = function(x2, y2, x3, y3, x4, y4) {
	  if (vertices.length === 0) {
	    throw 'vertex() must be used once before calling bezierVertex()';
	  } else {
	    isBezier = true;
	    var vert = [];
	    for (var i = 0; i < arguments.length; i++) {
	      vert[i] = arguments[i];
	    }
	    vert.isVert = false;
	    if (isContour) {
	      contourVertices.push(vert);
	    } else {
	      vertices.push(vert);
	    }
	  }
	  return this;
	};

	/**
	 * Specifies vertex coordinates for curves. This function may only
	 * be used between beginShape() and endShape() and only when there
	 * is no MODE parameter specified to beginShape().
	 * <br><br>
	 * The first and last points in a series of curveVertex() lines will be used to
	 * guide the beginning and end of a the curve. A minimum of four
	 * points is required to draw a tiny curve between the second and
	 * third points. Adding a fifth point with curveVertex() will draw
	 * the curve between the second, third, and fourth points. The
	 * curveVertex() function is an implementation of Catmull-Rom
	 * splines.
	 *
	 * @method curveVertex
	 * @param {Number} x x-coordinate of the vertex
	 * @param {Number} y y-coordinate of the vertex
	 * @return {Object} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * beginShape();
	 * curveVertex(84,  91);
	 * curveVertex(84,  91);
	 * curveVertex(68,  19);
	 * curveVertex(21,  17);
	 * curveVertex(32, 100);
	 * curveVertex(32, 100);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Upside-down u-shape line, mid canvas. left point extends beyond canvas view.
	 *
	 */
	p5.prototype.curveVertex = function(x,y) {
	  isCurve = true;
	  this.vertex(x, y);
	  return this;
	};

	/**
	 * Use the beginContour() and endContour() functions to create negative
	 * shapes within shapes such as the center of the letter 'O'. beginContour()
	 * begins recording vertices for the shape and endContour() stops recording.
	 * The vertices that define a negative shape must "wind" in the opposite
	 * direction from the exterior shape. First draw vertices for the exterior
	 * clockwise order, then for internal shapes, draw vertices
	 * shape in counter-clockwise.
	 * <br><br>
	 * These functions can only be used within a beginShape()/endShape() pair and
	 * transformations such as translate(), rotate(), and scale() do not work
	 * within a beginContour()/endContour() pair. It is also not possible to use
	 * other shapes, such as ellipse() or rect() within.
	 *
	 * @method endContour
	 * @return {Object} the p5 object
	 * @example
	 * <div>
	 * <code>
	 * translate(50, 50);
	 * stroke(255, 0, 0);
	 * beginShape();
	 * // Exterior part of shape, clockwise winding
	 * vertex(-40, -40);
	 * vertex(40, -40);
	 * vertex(40, 40);
	 * vertex(-40, 40);
	 * // Interior part of shape, counter-clockwise winding
	 * beginContour();
	 * vertex(-20, -20);
	 * vertex(-20, 20);
	 * vertex(20, 20);
	 * vertex(20, -20);
	 * endContour();
	 * endShape(CLOSE);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * white rect and smaller grey rect with red outlines in center of canvas.
	 *
	 */
	p5.prototype.endContour = function() {
	  var vert = contourVertices[0].slice(); // copy all data
	  vert.isVert = contourVertices[0].isVert;
	  vert.moveTo = false;
	  contourVertices.push(vert);

	  // prevent stray lines with multiple contours
	  if (isFirstContour) {
	    vertices.push(vertices[0]);
	    isFirstContour = false;
	  }

	  for (var i = 0; i < contourVertices.length; i++) {
	    vertices.push(contourVertices[i]);
	  }
	  return this;
	};

	/**
	 * The endShape() function is the companion to beginShape() and may only be
	 * called after beginShape(). When endshape() is called, all of image data
	 * defined since the previous call to beginShape() is written into the image
	 * buffer. The constant CLOSE as the value for the MODE parameter to close
	 * the shape (to connect the beginning and the end).
	 *
	 * @method endShape
	 * @param  {Constant} mode use CLOSE to close the shape
	 * @return {Object}               the p5 object
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 *
	 * beginShape();
	 * vertex(20, 20);
	 * vertex(45, 20);
	 * vertex(45, 80);
	 * endShape(CLOSE);
	 *
	 * beginShape();
	 * vertex(50, 20);
	 * vertex(75, 20);
	 * vertex(75, 80);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Triangle line shape with smallest interior angle on bottom and upside-down L.
	 *
	 */
	p5.prototype.endShape = function(mode) {
	  if(this._renderer.isP3D){
	    this._renderer.endShape(mode, isCurve, isBezier,
	      isQuadratic, isContour, shapeKind);
	  }else{
	    if (vertices.length === 0) { return this; }
	    if (!this._renderer._doStroke && !this._renderer._doFill) { return this; }

	    var closeShape = mode === constants.CLOSE;

	    // if the shape is closed, the first element is also the last element
	    if (closeShape && !isContour) {
	      vertices.push(vertices[0]);
	    }

	    this._renderer.endShape(mode, vertices, isCurve, isBezier,
	      isQuadratic, isContour, shapeKind);

	    // Reset some settings
	    isCurve = false;
	    isBezier = false;
	    isQuadratic = false;
	    isContour = false;
	    isFirstContour = true;

	    // If the shape is closed, the first element was added as last element.
	    // We must remove it again to prevent the list of vertices from growing
	    // over successive calls to endShape(CLOSE)
	    if (closeShape) {
	      vertices.pop();
	    }
	  }
	  return this;
	};

	/**
	 * Specifies vertex coordinates for quadratic Bezier curves. Each call to
	 * quadraticVertex() defines the position of one control points and one
	 * anchor point of a Bezier curve, adding a new segment to a line or shape.
	 * The first time quadraticVertex() is used within a beginShape() call, it
	 * must be prefaced with a call to vertex() to set the first anchor point.
	 * This function must be used between beginShape() and endShape() and only
	 * when there is no MODE parameter specified to beginShape().
	 *
	 * @method quadraticVertex
	 * @param  {Number} cx x-coordinate for the control point
	 * @param  {Number} cy y-coordinate for the control point
	 * @param  {Number} x3 x-coordinate for the anchor point
	 * @param  {Number} y3 y-coordinate for the anchor point
	 * @return {Object}    the p5 object
	 * @example
	 * <div>
	 * <code>
	 * noFill();
	 * strokeWeight(4);
	 * beginShape();
	 * vertex(20, 20);
	 * quadraticVertex(80, 20, 50, 50);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * noFill();
	 * strokeWeight(4);
	 * beginShape();
	 * vertex(20, 20);
	 * quadraticVertex(80, 20, 50, 50);
	 * quadraticVertex(20, 80, 80, 80);
	 * vertex(80, 60);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * @alt
	 * arched-shaped black line with 4 pixel thick stroke weight.
	 * backwards s-shaped black line with 4 pixel thick stroke weight.
	 *
	 */
	p5.prototype.quadraticVertex = function(cx, cy, x3, y3) {
	  //if we're drawing a contour, put the points into an
	  // array for inside drawing
	  if(this._contourInited) {
	    var pt = {};
	    pt.x = cx;
	    pt.y = cy;
	    pt.x3 = x3;
	    pt.y3 = y3;
	    pt.type = constants.QUADRATIC;
	    this._contourVertices.push(pt);

	    return this;
	  }
	  if (vertices.length > 0) {
	    isQuadratic = true;
	    var vert = [];
	    for (var i = 0; i < arguments.length; i++) {
	      vert[i] = arguments[i];
	    }
	    vert.isVert = false;
	    if (isContour) {
	      contourVertices.push(vert);
	    } else {
	      vertices.push(vert);
	    }
	  } else {
	    throw 'vertex() must be used once before calling quadraticVertex()';
	  }
	  return this;
	};

	/**
	 * All shapes are constructed by connecting a series of vertices. vertex()
	 * is used to specify the vertex coordinates for points, lines, triangles,
	 * quads, and polygons. It is used exclusively within the beginShape() and
	 * endShape() functions.
	 *
	 * @method vertex
	 * @param  {Number} x x-coordinate of the vertex
	 * @param  {Number} y y-coordinate of the vertex
	 * @return {Object}   the p5 object
	 * @example
	 * <div>
	 * <code>
	 * beginShape(POINTS);
	 * vertex(30, 20);
	 * vertex(85, 20);
	 * vertex(85, 75);
	 * vertex(30, 75);
	 * endShape();
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 4 black points in a square shape in middle-right of canvas.
	 *
	 */
	p5.prototype.vertex = function(x, y, moveTo) {
	  if(this._renderer.isP3D){
	    this._renderer.vertex(x, y, moveTo);
	  }else{
	    var vert = [];
	    vert.isVert = true;
	    vert[0] = x;
	    vert[1] = y;
	    vert[2] = 0;
	    vert[3] = 0;
	    vert[4] = 0;
	    vert[5] = this._renderer._getFill();
	    vert[6] = this._renderer._getStroke();

	    if (moveTo) {
	      vert.moveTo = moveTo;
	    }
	    if (isContour) {
	      if (contourVertices.length === 0) {
	        vert.moveTo = true;
	      }
	      contourVertices.push(vert);
	    } else {
	      vertices.push(vert);
	    }
	  }
	  return this;
	};

	module.exports = p5;

	},{"./constants":36,"./core":37}],50:[function(_dereq_,module,exports){
	/**
	 * @module Events
	 * @submodule Acceleration
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * The system variable deviceOrientation always contains the orientation of
	 * the device. The value of this variable will either be set 'landscape'
	 * or 'portrait'. If no data is available it will be set to 'undefined'.
	 *
	 * @property deviceOrientation
	 */
	p5.prototype.deviceOrientation = undefined;

	/**
	 * The system variable accelerationX always contains the acceleration of the
	 * device along the x axis. Value is represented as meters per second squared.
	 *
	 * @property accelerationX
	 */
	p5.prototype.accelerationX = 0;

	/**
	 * The system variable accelerationY always contains the acceleration of the
	 * device along the y axis. Value is represented as meters per second squared.
	 *
	 * @property accelerationY
	 */
	p5.prototype.accelerationY = 0;

	/**
	 * The system variable accelerationZ always contains the acceleration of the
	 * device along the z axis. Value is represented as meters per second squared.
	 *
	 * @property accelerationZ
	 */
	p5.prototype.accelerationZ = 0;

	/**
	 * The system variable pAccelerationX always contains the acceleration of the
	 * device along the x axis in the frame previous to the current frame. Value
	 * is represented as meters per second squared.
	 *
	 * @property pAccelerationX
	 */
	p5.prototype.pAccelerationX = 0;

	/**
	 * The system variable pAccelerationY always contains the acceleration of the
	 * device along the y axis in the frame previous to the current frame. Value
	 * is represented as meters per second squared.
	 *
	 * @property pAccelerationY
	 */
	p5.prototype.pAccelerationY = 0;

	/**
	 * The system variable pAccelerationZ always contains the acceleration of the
	 * device along the z axis in the frame previous to the current frame. Value
	 * is represented as meters per second squared.
	 *
	 * @property pAccelerationZ
	 */
	p5.prototype.pAccelerationZ = 0;

	/**
	 * _updatePAccelerations updates the pAcceleration values
	 *
	 * @private
	 */
	p5.prototype._updatePAccelerations = function(){
	  this._setProperty('pAccelerationX', this.accelerationX);
	  this._setProperty('pAccelerationY', this.accelerationY);
	  this._setProperty('pAccelerationZ', this.accelerationZ);
	};

	/**
	 * The system variable rotationX always contains the rotation of the
	 * device along the x axis. Value is represented as 0 to +/-180 degrees.
	 * <br><br>
	 * Note: The order the rotations are called is important, ie. if used
	 * together, it must be called in the order Z-X-Y or there might be
	 * unexpected behaviour.
	 *
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   //rotateZ(radians(rotationZ));
	 *   rotateX(radians(rotationX));
	 *   //rotateY(radians(rotationY));
	 *   box(200, 200, 200);
	 * }
	 * </code>
	 * </div>
	 *
	 * @property rotationX
	 *
	 * @alt
	 * red horizontal line right, green vertical line bottom. black background.
	 *
	 */
	p5.prototype.rotationX = 0;

	/**
	 * The system variable rotationY always contains the rotation of the
	 * device along the y axis. Value is represented as 0 to +/-90 degrees.
	 * <br><br>
	 * Note: The order the rotations are called is important, ie. if used
	 * together, it must be called in the order Z-X-Y or there might be
	 * unexpected behaviour.
	 *
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   //rotateZ(radians(rotationZ));
	 *   //rotateX(radians(rotationX));
	 *   rotateY(radians(rotationY));
	 *   box(200, 200, 200);
	 * }
	 * </code>
	 * </div>
	 *
	 * @property rotationY
	 *
	 * @alt
	 * red horizontal line right, green vertical line bottom. black background.
	 */
	p5.prototype.rotationY = 0;

	/**
	 * The system variable rotationZ always contains the rotation of the
	 * device along the z axis. Value is represented as 0 to 359 degrees.
	 * <br><br>
	 * Unlike rotationX and rotationY, this variable is available for devices
	 * with a built-in compass only.
	 * <br><br>
	 * Note: The order the rotations are called is important, ie. if used
	 * together, it must be called in the order Z-X-Y or there might be
	 * unexpected behaviour.
	 *
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   rotateZ(radians(rotationZ));
	 *   //rotateX(radians(rotationX));
	 *   //rotateY(radians(rotationY));
	 *   box(200, 200, 200);
	 * }
	 * </code>
	 * </div>
	 *
	 * @property rotationZ
	 *
	 * @alt
	 * red horizontal line right, green vertical line bottom. black background.
	 */
	p5.prototype.rotationZ = 0;

	/**
	 * The system variable pRotationX always contains the rotation of the
	 * device along the x axis in the frame previous to the current frame. Value
	 * is represented as 0 to +/-180 degrees.
	 * <br><br>
	 * pRotationX can also be used with rotationX to determine the rotate
	 * direction of the device along the X-axis.
	 * @example
	 * <div class='norender'>
	 * <code>
	 * // A simple if statement looking at whether
	 * // rotationX - pRotationX < 0 is true or not will be
	 * // sufficient for determining the rotate direction
	 * // in most cases.
	 *
	 * // Some extra logic is needed to account for cases where
	 * // the angles wrap around.
	 * var rotateDirection = 'clockwise';
	 *
	 * // Simple range conversion to make things simpler.
	 * // This is not absolutely neccessary but the logic
	 * // will be different in that case.
	 *
	 * var rX = rotationX + 180;
	 * var pRX = pRotationX + 180;
	 *
	 * if ((rX - pRX > 0 && rX - pRX < 270)|| rX - pRX < -270){
	 *   rotateDirection = 'clockwise';
	 * } else if (rX - pRX < 0 || rX - pRX > 270){
	 *   rotateDirection = 'counter-clockwise';
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * no image to display.
	 *
	 *
	 * @property pRotationX
	 */
	p5.prototype.pRotationX = 0;

	/**
	 * The system variable pRotationY always contains the rotation of the
	 * device along the y axis in the frame previous to the current frame. Value
	 * is represented as 0 to +/-90 degrees.
	 * <br><br>
	 * pRotationY can also be used with rotationY to determine the rotate
	 * direction of the device along the Y-axis.
	 * @example
	 * <div class='norender'>
	 * <code>
	 * // A simple if statement looking at whether
	 * // rotationY - pRotationY < 0 is true or not will be
	 * // sufficient for determining the rotate direction
	 * // in most cases.
	 *
	 * // Some extra logic is needed to account for cases where
	 * // the angles wrap around.
	 * var rotateDirection = 'clockwise';
	 *
	 * // Simple range conversion to make things simpler.
	 * // This is not absolutely neccessary but the logic
	 * // will be different in that case.
	 *
	 * var rY = rotationY + 180;
	 * var pRY = pRotationY + 180;
	 *
	 * if ((rY - pRY > 0 && rY - pRY < 270)|| rY - pRY < -270){
	 *   rotateDirection = 'clockwise';
	 * } else if (rY - pRY < 0 || rY - pRY > 270){
	 *   rotateDirection = 'counter-clockwise';
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * no image to display.
	 *
	 *
	 * @property pRotationY
	 */
	p5.prototype.pRotationY = 0;

	/**
	 * The system variable pRotationZ always contains the rotation of the
	 * device along the z axis in the frame previous to the current frame. Value
	 * is represented as 0 to 359 degrees.
	 * <br><br>
	 * pRotationZ can also be used with rotationZ to determine the rotate
	 * direction of the device along the Z-axis.
	 * @example
	 * <div class='norender'>
	 * <code>
	 * // A simple if statement looking at whether
	 * // rotationZ - pRotationZ < 0 is true or not will be
	 * // sufficient for determining the rotate direction
	 * // in most cases.
	 *
	 * // Some extra logic is needed to account for cases where
	 * // the angles wrap around.
	 * var rotateDirection = 'clockwise';
	 *
	 * if ((rotationZ - pRotationZ > 0 &&
	 *   rotationZ - pRotationZ < 270)||
	 *   rotationZ - pRotationZ < -270){
	 *
	 *   rotateDirection = 'clockwise';
	 *
	 * } else if (rotationZ - pRotationZ < 0 ||
	 *   rotationZ - pRotationZ > 270){
	 *
	 *   rotateDirection = 'counter-clockwise';
	 *
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * no image to display.
	 *
	 *
	 * @property pRotationZ
	 */
	p5.prototype.pRotationZ = 0;

	var startAngleX = 0;
	var startAngleY = 0;
	var startAngleZ = 0;

	var rotateDirectionX = 'clockwise';
	var rotateDirectionY = 'clockwise';
	var rotateDirectionZ = 'clockwise';

	var pRotateDirectionX;
	var pRotateDirectionY;
	var pRotateDirectionZ;

	p5.prototype._updatePRotations = function(){
	  this._setProperty('pRotationX', this.rotationX);
	  this._setProperty('pRotationY', this.rotationY);
	  this._setProperty('pRotationZ', this.rotationZ);
	};

	p5.prototype.turnAxis = undefined;

	var move_threshold = 0.5;
	var shake_threshold = 30;

	/**
	 * The setMoveThreshold() function is used to set the movement threshold for
	 * the deviceMoved() function. The default threshold is set to 0.5.
	 *
	 * @method setMoveThreshold
	 * @param {number} value The threshold value
	 */
	p5.prototype.setMoveThreshold = function(val){
	  if(typeof val === 'number'){
	    move_threshold = val;
	  }
	};

	/**
	 * The setShakeThreshold() function is used to set the movement threshold for
	 * the deviceShaken() function. The default threshold is set to 30.
	 *
	 * @method setShakeThreshold
	 * @param {number} value The threshold value
	 */
	p5.prototype.setShakeThreshold = function(val){
	  if(typeof val === 'number'){
	    shake_threshold = val;
	  }
	};

	/**
	 * The deviceMoved() function is called when the device is moved by more than
	 * the threshold value along X, Y or Z axis. The default threshold is set to
	 * 0.5.
	 * @method deviceMoved
	 * @example
	 * <div>
	 * <code>
	 * // Run this example on a mobile device
	 * // Move the device around
	 * // to change the value.
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function deviceMoved() {
	 *   value = value + 5;
	 *   if (value > 255) {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 black rect in center of canvas. turns white on mobile when device moves
	 *
	 */

	/**
	 * The deviceTurned() function is called when the device rotates by
	 * more than 90 degrees continuously.
	 * <br><br>
	 * The axis that triggers the deviceTurned() method is stored in the turnAxis
	 * variable. The deviceTurned() method can be locked to trigger on any axis:
	 * X, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'.
	 *
	 * @method deviceTurned
	 * @example
	 * <div>
	 * <code>
	 * // Run this example on a mobile device
	 * // Rotate the device by 90 degrees
	 * // to change the value.
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function deviceTurned() {
	 *   if (value == 0){
	 *     value = 255
	 *   } else if (value == 255) {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * // Run this example on a mobile device
	 * // Rotate the device by 90 degrees in the
	 * // X-axis to change the value.
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function deviceTurned() {
	 *   if (turnAxis == 'X'){
	 *     if (value == 0){
	 *       value = 255
	 *     } else if (value == 255) {
	 *       value = 0;
	 *     }
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 black rect in center of canvas. turns white on mobile when device turns
	 * 50x50 black rect in center of canvas. turns white on mobile when x-axis turns
	 *
	 */

	/**
	 * The deviceShaken() function is called when the device total acceleration
	 * changes of accelerationX and accelerationY values is more than
	 * the threshold value. The default threshold is set to 30.
	 * @method deviceShaken
	 * @example
	 * <div>
	 * <code>
	 * // Run this example on a mobile device
	 * // Shake the device to change the value.
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function deviceShaken() {
	 *   value = value + 5;
	 *   if (value > 255) {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 black rect in center of canvas. turns white on mobile when device shakes
	 *
	 */

	p5.prototype._ondeviceorientation = function (e) {
	  this._updatePRotations();
	  this._setProperty('rotationX', e.beta);
	  this._setProperty('rotationY', e.gamma);
	  this._setProperty('rotationZ', e.alpha);
	  this._handleMotion();
	};
	p5.prototype._ondevicemotion = function (e) {
	  this._updatePAccelerations();
	  this._setProperty('accelerationX', e.acceleration.x * 2);
	  this._setProperty('accelerationY', e.acceleration.y * 2);
	  this._setProperty('accelerationZ', e.acceleration.z * 2);
	  this._handleMotion();
	};
	p5.prototype._handleMotion = function() {
	  if (window.orientation === 90 || window.orientation === -90) {
	    this._setProperty('deviceOrientation', 'landscape');
	  } else if (window.orientation === 0) {
	    this._setProperty('deviceOrientation', 'portrait');
	  } else if (window.orientation === undefined) {
	    this._setProperty('deviceOrientation', 'undefined');
	  }
	  var deviceMoved = this.deviceMoved || window.deviceMoved;
	  if (typeof deviceMoved === 'function') {
	    if (Math.abs(this.accelerationX - this.pAccelerationX) > move_threshold ||
	      Math.abs(this.accelerationY - this.pAccelerationY) > move_threshold ||
	      Math.abs(this.accelerationZ - this.pAccelerationZ) > move_threshold) {
	      deviceMoved();
	    }
	  }
	  var deviceTurned = this.deviceTurned || window.deviceTurned;
	  if (typeof deviceTurned === 'function') {
	    // The angles given by rotationX etc is from range -180 to 180.
	    // The following will convert them to 0 to 360 for ease of calculation
	    // of cases when the angles wrapped around.
	    // _startAngleX will be converted back at the end and updated.
	    var wRX = this.rotationX + 180;
	    var wPRX = this.pRotationX + 180;
	    var wSAX = startAngleX + 180;
	    if ((wRX - wPRX > 0 && wRX - wPRX < 270)|| wRX - wPRX < -270){
	      rotateDirectionX = 'clockwise';
	    } else if (wRX - wPRX < 0 || wRX - wPRX > 270){
	      rotateDirectionX = 'counter-clockwise';
	    }
	    if (rotateDirectionX !== pRotateDirectionX){
	      wSAX = wRX;
	    }
	    if (Math.abs(wRX - wSAX) > 90 && Math.abs(wRX - wSAX) < 270){
	      wSAX = wRX;
	      this._setProperty('turnAxis', 'X');
	      deviceTurned();
	    }
	    pRotateDirectionX = rotateDirectionX;
	    startAngleX = wSAX - 180;

	    // Y-axis is identical to X-axis except for changing some names.
	    var wRY = this.rotationY + 180;
	    var wPRY = this.pRotationY + 180;
	    var wSAY = startAngleY + 180;
	    if ((wRY - wPRY > 0 && wRY - wPRY < 270)|| wRY - wPRY < -270){
	      rotateDirectionY = 'clockwise';
	    } else if (wRY - wPRY < 0 || wRY - this.pRotationY > 270){
	      rotateDirectionY = 'counter-clockwise';
	    }
	    if (rotateDirectionY !== pRotateDirectionY){
	      wSAY = wRY;
	    }
	    if (Math.abs(wRY - wSAY) > 90 && Math.abs(wRY - wSAY) < 270){
	      wSAY = wRY;
	      this._setProperty('turnAxis', 'Y');
	      deviceTurned();
	    }
	    pRotateDirectionY = rotateDirectionY;
	    startAngleY = wSAY - 180;

	    // Z-axis is already in the range 0 to 360
	    // so no conversion is needed.
	    if ((this.rotationZ - this.pRotationZ > 0 &&
	      this.rotationZ - this.pRotationZ < 270)||
	      this.rotationZ - this.pRotationZ < -270){
	      rotateDirectionZ = 'clockwise';
	    } else if (this.rotationZ - this.pRotationZ < 0 ||
	      this.rotationZ - this.pRotationZ > 270){
	      rotateDirectionZ = 'counter-clockwise';
	    }
	    if (rotateDirectionZ !== pRotateDirectionZ){
	      startAngleZ = this.rotationZ;
	    }
	    if (Math.abs(this.rotationZ - startAngleZ) > 90 &&
	      Math.abs(this.rotationZ - startAngleZ) < 270){
	      startAngleZ = this.rotationZ;
	      this._setProperty('turnAxis', 'Z');
	      deviceTurned();
	    }
	    pRotateDirectionZ = rotateDirectionZ;
	    this._setProperty('turnAxis', undefined);
	  }
	  var deviceShaken = this.deviceShaken || window.deviceShaken;
	  if (typeof deviceShaken === 'function') {
	    var accelerationChangeX;
	    var accelerationChangeY;
	    // Add accelerationChangeZ if acceleration change on Z is needed
	    if (this.pAccelerationX !== null) {
	      accelerationChangeX = Math.abs(this.accelerationX - this.pAccelerationX);
	      accelerationChangeY = Math.abs(this.accelerationY - this.pAccelerationY);
	    }
	    if (accelerationChangeX + accelerationChangeY > shake_threshold) {
	      deviceShaken();
	    }
	  }
	};


	module.exports = p5;

	},{"../core/core":37}],51:[function(_dereq_,module,exports){
	/**
	 * @module Events
	 * @submodule Keyboard
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * Holds the key codes of currently pressed keys.
	 * @private
	 */
	var downKeys = {};

	/**
	 * The boolean system variable keyIsPressed is true if any key is pressed
	 * and false if no keys are pressed.
	 *
	 * @property keyIsPressed
	 * @example
	 * <div>
	 * <code>
	 * var value = 0;
	 * function draw() {
	 *   if (keyIsPressed === true) {
	 *     fill(0);
	 *   } else {
	 *     fill(255);
	 *   }
	 *   rect(25, 25, 50, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 white rect that turns black on keypress.
	 *
	 */
	p5.prototype.isKeyPressed = false;
	p5.prototype.keyIsPressed = false; // khan

	/**
	 * The system variable key always contains the value of the most recent
	 * key on the keyboard that was typed. To get the proper capitalization, it
	 * is best to use it within keyTyped(). For non-ASCII keys, use the keyCode
	 * variable.
	 *
	 * @property key
	 * @example
	 * <div><code>
	 * // Click any key to display it!
	 * // (Not Guaranteed to be Case Sensitive)
	 * function setup() {
	 *   fill(245, 123, 158);
	 *   textSize(50);
	 * }
	 *
	 * function draw() {
	 *   background(200);
	 *   text(key, 33,65); // Display last key pressed.
	 * }
	 * </div></code>
	 *
	 * @alt
	 * canvas displays any key value that is pressed in pink font.
	 *
	 */
	p5.prototype.key = '';

	/**
	 * The variable keyCode is used to detect special keys such as BACKSPACE,
	 * DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,
	 * DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.
	 * You can also check for custom keys by looking up the keyCode of any key
	 * on a site like this: <a href="http://keycode.info/">keycode.info</a>.
	 *
	 * @property keyCode
	 * @example
	 * <div><code>
	 * var fillVal = 126;
	 * function draw() {
	 *   fill(fillVal);
	 *   rect(25, 25, 50, 50);
	 * }
	 *
	 * function keyPressed() {
	 *   if (keyCode == UP_ARROW) {
	 *     fillVal = 255;
	 *   } else if (keyCode == DOWN_ARROW) {
	 *     fillVal = 0;
	 *   }
	 *   return false; // prevent default
	 * }
	 * </code></div>
	 *
	 * @alt
	 * Grey rect center. turns white when up arrow pressed and black when down
	 *
	 */
	p5.prototype.keyCode = 0;

	/**
	 * The keyPressed() function is called once every time a key is pressed. The
	 * keyCode for the key that was pressed is stored in the keyCode variable.
	 * <br><br>
	 * For non-ASCII keys, use the keyCode variable. You can check if the keyCode
	 * equals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,
	 * OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.
	 * <br><br>
	 * For ASCII keys that was pressed is stored in the key variable. However, it
	 * does not distinguish between uppercase and lowercase. For this reason, it
	 * is recommended to use keyTyped() to read the key variable, in which the
	 * case of the variable will be distinguished.
	 * <br><br>
	 * Because of how operating systems handle key repeats, holding down a key
	 * may cause multiple calls to keyTyped() (and keyReleased() as well). The
	 * rate of repeat is set by the operating system and how each computer is
	 * configured.<br><br>
	 * Browsers may have different default
	 * behaviors attached to various key events. To prevent any default
	 * behavior for this event, add "return false" to the end of the method.
	 *
	 * @method keyPressed
	 * @example
	 * <div>
	 * <code>
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function keyPressed() {
	 *   if (value === 0) {
	 *     value = 255;
	 *   } else {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function keyPressed() {
	 *   if (keyCode === LEFT_ARROW) {
	 *     value = 255;
	 *   } else if (keyCode === RIGHT_ARROW) {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 * <div class="norender">
	 * <code>
	 * function keyPressed(){
	 *   // Do something
	 *   return false; // prevent any default behaviour
	 * }
	 * </code>
	 *
	 * @alt
	 * black rect center. turns white when key pressed and black when released
	 * black rect center. turns white when left arrow pressed and black when right.
	 *
	 * </div>
	 */
	p5.prototype._onkeydown = function (e) {
	  if (downKeys[e.which]) { // prevent multiple firings
	    return;
	  }
	  this._setProperty('isKeyPressed', true);
	  this._setProperty('keyIsPressed', true);
	  this._setProperty('keyCode', e.which);
	  downKeys[e.which] = true;
	  var key = String.fromCharCode(e.which);
	  if (!key) {
	    key = e.which;
	  }
	  this._setProperty('key', key);
	  var keyPressed = this.keyPressed || window.keyPressed;
	  if (typeof keyPressed === 'function' && !e.charCode) {
	    var executeDefault = keyPressed(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};
	/**
	 * The keyReleased() function is called once every time a key is released.
	 * See key and keyCode for more information.<br><br>
	 * Browsers may have different default
	 * behaviors attached to various key events. To prevent any default
	 * behavior for this event, add "return false" to the end of the method.
	 *
	 * @method keyReleased
	 * @example
	 * <div>
	 * <code>
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function keyReleased() {
	 *   if (value === 0) {
	 *     value = 255;
	 *   } else {
	 *     value = 0;
	 *   }
	 *   return false; // prevent any default behavior
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black rect center. turns white when key pressed and black when pressed again
	 *
	 */
	p5.prototype._onkeyup = function (e) {
	  var keyReleased = this.keyReleased || window.keyReleased;
	  this._setProperty('isKeyPressed', false);
	  this._setProperty('keyIsPressed', false);
	  this._setProperty('_lastKeyCodeTyped', null);
	  downKeys[e.which] = false;
	  //delete this._downKeys[e.which];
	  var key = String.fromCharCode(e.which);
	  if (!key) {
	    key = e.which;
	  }
	  this._setProperty('key', key);
	  this._setProperty('keyCode', e.which);
	  if (typeof keyReleased === 'function') {
	    var executeDefault = keyReleased(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};

	/**
	 * The keyTyped() function is called once every time a key is pressed, but
	 * action keys such as Ctrl, Shift, and Alt are ignored. The most recent
	 * key pressed will be stored in the key variable.
	 * <br><br>
	 * Because of how operating systems handle key repeats, holding down a key
	 * will cause multiple calls to keyTyped() (and keyReleased() as well). The
	 * rate of repeat is set by the operating system and how each computer is
	 * configured.<br><br>
	 * Browsers may have different default behaviors attached to various key
	 * events. To prevent any default behavior for this event, add "return false"
	 * to the end of the method.
	 *
	 * @method keyTyped
	 * @example
	 * <div>
	 * <code>
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function keyTyped() {
	 *   if (key === 'a') {
	 *     value = 255;
	 *   } else if (key === 'b') {
	 *     value = 0;
	 *   }
	 *   // uncomment to prevent any default behavior
	 *   // return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black rect center. turns white when 'a' key typed and black when 'b' pressed
	 *
	 */
	p5.prototype._onkeypress = function (e) {
	  if (e.which === this._lastKeyCodeTyped) { // prevent multiple firings
	    return;
	  }
	  this._setProperty('keyCode', e.which);
	  this._setProperty('_lastKeyCodeTyped', e.which); // track last keyCode
	  this._setProperty('key', String.fromCharCode(e.which));
	  var keyTyped = this.keyTyped || window.keyTyped;
	  if (typeof keyTyped === 'function') {
	    var executeDefault = keyTyped(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};
	/**
	 * The onblur function is called when the user is no longer focused
	 * on the p5 element. Because the keyup events will not fire if the user is
	 * not focused on the element we must assume all keys currently down have
	 * been released.
	 */
	p5.prototype._onblur = function (e) {
	  downKeys = {};
	};

	/**
	 * The keyIsDown() function checks if the key is currently down, i.e. pressed.
	 * It can be used if you have an object that moves, and you want several keys
	 * to be able to affect its behaviour simultaneously, such as moving a
	 * sprite diagonally. You can put in any number representing the keyCode of
	 * the key, or use any of the variable keyCode names listed
	 * <a href="http://p5js.org/reference/#p5/keyCode">here</a>.
	 *
	 * @method keyIsDown
	 * @param {Number}          code The key to check for.
	 * @return {Boolean}        whether key is down or not
	 * @example
	 * <div><code>
	 * var x = 100;
	 * var y = 100;
	 *
	 * function setup() {
	 *   createCanvas(512, 512);
	 * }
	 *
	 * function draw() {
	 *   if (keyIsDown(LEFT_ARROW))
	 *     x-=5;
	 *
	 *   if (keyIsDown(RIGHT_ARROW))
	 *     x+=5;
	 *
	 *   if (keyIsDown(UP_ARROW))
	 *     y-=5;
	 *
	 *   if (keyIsDown(DOWN_ARROW))
	 *     y+=5;
	 *
	 *   clear();
	 *   fill(255, 0, 0);
	 *   ellipse(x, y, 50, 50);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 50x50 red ellipse moves left, right, up and down with arrow presses.
	 *
	 */
	p5.prototype.keyIsDown = function(code) {
	  return downKeys[code];
	};

	module.exports = p5;

	},{"../core/core":37}],52:[function(_dereq_,module,exports){
	/**
	 * @module Events
	 * @submodule Mouse
	 * @for p5
	 * @requires core
	 * @requires constants
	 */


	'use strict';

	var p5 = _dereq_('../core/core');
	var constants = _dereq_('../core/constants');

	/*
	 * This is a flag which is false until the first time
	 * we receive a mouse event. The pmouseX and pmouseY
	 * values will match the mouseX and mouseY values until
	 * this interaction takes place.
	 */
	p5.prototype._hasMouseInteracted = false;

	/**
	 * The system variable mouseX always contains the current horizontal
	 * position of the mouse, relative to (0, 0) of the canvas. If touch is
	 * used instead of mouse input, mouseX will hold the x value of the most
	 * recent touch point.
	 *
	 * @property mouseX
	 *
	 * @example
	 * <div>
	 * <code>
	 * // Move the mouse across the canvas
	 * function draw() {
	 *   background(244, 248, 252);
	 *   line(mouseX, 0, mouseX, 100);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * horizontal black line moves left and right with mouse x-position
	 *
	 */
	p5.prototype.mouseX = 0;

	/**
	 * The system variable mouseY always contains the current vertical position
	 * of the mouse, relative to (0, 0) of the canvas. If touch is
	 * used instead of mouse input, mouseY will hold the y value of the most
	 * recent touch point.
	 *
	 * @property mouseY
	 *
	 * @example
	 * <div>
	 * <code>
	 * // Move the mouse across the canvas
	 * function draw() {
	 *   background(244, 248, 252);
	 *   line(0, mouseY, 100, mouseY);
	 *}
	 * </code>
	 * </div>
	 *
	 * @alt
	 * vertical black line moves up and down with mouse y-position
	 *
	 */
	p5.prototype.mouseY = 0;

	/**
	 * The system variable pmouseX always contains the horizontal position of
	 * the mouse or finger in the frame previous to the current frame, relative to
	 * (0, 0) of the canvas.
	 *
	 * @property pmouseX
	 *
	 * @example
	 * <div>
	 * <code>
	 * // Move the mouse across the canvas to leave a trail
	 * function setup() {
	 *   //slow down the frameRate to make it more visible
	 *   frameRate(10);
	 * }
	 *
	 * function draw() {
	 *   background(244, 248, 252);
	 *   line(mouseX, mouseY, pmouseX, pmouseY);
	 *   print(pmouseX + " -> " + mouseX);
	 * }
	 *
	 * </code>
	 * </div>
	 *
	 * @alt
	 * line trail is created from cursor movements. faster movement make longer line.
	 *
	 */
	p5.prototype.pmouseX = 0;

	/**
	 * The system variable pmouseY always contains the vertical position of the
	 * mouse or finger in the frame previous to the current frame, relative to
	 * (0, 0) of the canvas.
	 *
	 * @property pmouseY
	 *
	 * @example
	 * <div>
	 * <code>
	 * function draw() {
	 *   background(237, 34, 93);
	 *   fill(0);
	 *   //draw a square only if the mouse is not moving
	 *   if(mouseY == pmouseY && mouseX == pmouseX)
	 *     rect(20,20,60,60);
	 *
	 *   print(pmouseY + " -> " + mouseY);
	 * }
	 *
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 60x60 black rect center, fuschia background. rect flickers on mouse movement
	 *
	 */
	p5.prototype.pmouseY = 0;

	/**
	 * The system variable winMouseX always contains the current horizontal
	 * position of the mouse, relative to (0, 0) of the window.
	 *
	 * @property winMouseX
	 *
	 * @example
	 * <div>
	 * <code>
	 * var myCanvas;
	 *
	 * function setup() {
	 *   //use a variable to store a pointer to the canvas
	 *   myCanvas = createCanvas(100, 100);
	 * }
	 *
	 * function draw() {
	 *   background(237, 34, 93);
	 *   fill(0);
	 *
	 *   //move the canvas to the horizontal mouse position
	 *   //relative to the window
	 *   myCanvas.position(winMouseX+1, windowHeight/2);
	 *
	 *  //the y of the square is relative to the canvas
	 *  rect(20,mouseY,60,60);
	 * }
	 *
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 60x60 black rect y moves with mouse y and fuschia canvas moves with mouse x
	 *
	 */
	p5.prototype.winMouseX = 0;

	/**
	 * The system variable winMouseY always contains the current vertical
	 * position of the mouse, relative to (0, 0) of the window.
	 *
	 * @property winMouseY
	 *
	 * @example
	 * <div>
	 * <code>
	 *var myCanvas;
	 *
	 * function setup() {
	 *   //use a variable to store a pointer to the canvas
	 *   myCanvas = createCanvas(100, 100);
	 * }
	 *
	 * function draw() {
	 *   background(237, 34, 93);
	 *   fill(0);
	 *
	 *   //move the canvas to the vertical mouse position
	 *   //relative to the window
	 *   myCanvas.position(windowWidth/2, winMouseY+1);
	 *
	 *  //the x of the square is relative to the canvas
	 *  rect(mouseX,20,60,60);
	 * }
	 *
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 60x60 black rect x moves with mouse x and fuschia canvas y moves with mouse y
	 *
	 */
	p5.prototype.winMouseY = 0;

	/**
	 * The system variable pwinMouseX always contains the horizontal position
	 * of the mouse in the frame previous to the current frame, relative to
	 * (0, 0) of the window.
	 *
	 * @property pwinMouseX
	 *
	 * @example
	 * <div>
	 * <code>
	 *
	 * var myCanvas;
	 *
	 * function setup() {
	 *   //use a variable to store a pointer to the canvas
	 *   myCanvas = createCanvas(100, 100);
	 *   noStroke();
	 *   fill(237, 34, 93);
	 *   }
	 *
	 * function draw() {
	 *   clear();
	 *   //the difference between previous and
	 *   //current x position is the horizontal mouse speed
	 *   var speed = abs(winMouseX-pwinMouseX);
	 *   //change the size of the circle
	 *   //according to the horizontal speed
	 *   ellipse(50, 50, 10+speed*5, 10+speed*5);
	 *   //move the canvas to the mouse position
	 *   myCanvas.position( winMouseX+1, winMouseY+1);
	 * }
	 *
	 * </code>
	 * </div>
	 *
	 * @alt
	 * fuschia ellipse moves with mouse x and y. Grows and shrinks with mouse speed
	 *
	 */
	p5.prototype.pwinMouseX = 0;

	/**
	 * The system variable pwinMouseY always contains the vertical position of
	 * the mouse in the frame previous to the current frame, relative to (0, 0)
	 * of the window.
	 *
	 * @property pwinMouseY
	 *
	 *
	 * @example
	 * <div>
	 * <code>
	 *
	 * var myCanvas;
	 *
	 * function setup() {
	 *   //use a variable to store a pointer to the canvas
	 *   myCanvas = createCanvas(100, 100);
	 *   noStroke();
	 *   fill(237, 34, 93);
	 *   }
	 *
	 * function draw() {
	 *   clear();
	 *   //the difference between previous and
	 *   //current y position is the vertical mouse speed
	 *   var speed = abs(winMouseY-pwinMouseY);
	 *   //change the size of the circle
	 *   //according to the vertical speed
	 *   ellipse(50, 50, 10+speed*5, 10+speed*5);
	 *   //move the canvas to the mouse position
	 *   myCanvas.position( winMouseX+1, winMouseY+1);
	 * }
	 *
	 * </code>
	 * </div>
	 *
	 * @alt
	 * fuschia ellipse moves with mouse x and y. Grows and shrinks with mouse speed
	 *
	 */
	p5.prototype.pwinMouseY = 0;

	/**
	 * Processing automatically tracks if the mouse button is pressed and which
	 * button is pressed. The value of the system variable mouseButton is either
	 * LEFT, RIGHT, or CENTER depending on which button was pressed last.
	 * Warning: different browsers may track mouseButton differently.
	 *
	 * @property mouseButton
	 *
	 * @example
		* <div>
		* <code>
		* function draw() {
		*   background(237, 34, 93);
		*   fill(0);
		*
		*   if (mouseIsPressed) {
		*     if (mouseButton == LEFT)
		*       ellipse(50, 50, 50, 50);
		*     if (mouseButton == RIGHT)
		*       rect(25, 25, 50, 50);
		*     if (mouseButton == CENTER)
		*       triangle(23, 75, 50, 20, 78, 75);
		*   }
		*
		*   print(mouseButton);
		* }
		* </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 black ellipse appears on center of fuschia canvas on mouse click/press.
	 *
	 */
	p5.prototype.mouseButton = 0;

	/**
	 * The boolean system variable mouseIsPressed is true if the mouse is pressed
	 * and false if not.
	 *
	 * @property mouseIsPressed
	 *
	 * @example
		* <div>
		* <code>
		* function draw() {
		*   background(237, 34, 93);
		*   fill(0);
		*
		*   if (mouseIsPressed)
		*     ellipse(50, 50, 50, 50);
		*   else
		*     rect(25, 25, 50, 50);
		*
		*   print(mouseIsPressed);
		* }
		* </code>
		* </div>
	  *
	 * @alt
	 * black 50x50 rect becomes ellipse with mouse click/press. fuschia background.
	 *
	 */
	p5.prototype.mouseIsPressed = false;
	p5.prototype.isMousePressed = false; // both are supported

	p5.prototype._updateNextMouseCoords = function(e) {
	  if(this._curElement !== null) {
	    var mousePos = getMousePos(this._curElement.elt, this.width, this.height, e);
	    this._setProperty('mouseX', mousePos.x);
	    this._setProperty('mouseY', mousePos.y);
	    this._setProperty('winMouseX', mousePos.winX);
	    this._setProperty('winMouseY', mousePos.winY);
	  }
	  if (!this._hasMouseInteracted) {
	    // For first draw, make previous and next equal
	    this._updateMouseCoords();
	    this._setProperty('_hasMouseInteracted', true);
	  }
	};

	p5.prototype._updateMouseCoords = function() {
	  this._setProperty('pmouseX', this.mouseX);
	  this._setProperty('pmouseY', this.mouseY);
	  this._setProperty('pwinMouseX', this.winMouseX);
	  this._setProperty('pwinMouseY', this.winMouseY);
	};

	function getMousePos(canvas, w, h, evt) {
	  var rect = canvas.getBoundingClientRect();
	  var sx = canvas.scrollWidth / w;
	  var sy = canvas.scrollHeight / h;
	  return {
	    x: (evt.clientX - rect.left) / sx,
	    y: (evt.clientY - rect.top) / sy,
	    winX: evt.clientX,
	    winY: evt.clientY
	  };
	}

	p5.prototype._setMouseButton = function(e) {
	  if (e.button === 1) {
	    this._setProperty('mouseButton', constants.CENTER);
	  } else if (e.button === 2) {
	    this._setProperty('mouseButton', constants.RIGHT);
	  } else {
	    this._setProperty('mouseButton', constants.LEFT);
	  }
	};

	/**
	 * The mouseMoved() function is called every time the mouse moves and a mouse
	 * button is not pressed.<br><br>
	 * Browsers may have different default
	 * behaviors attached to various mouse events. To prevent any default
	 * behavior for this event, add "return false" to the end of the method.
	 *
	 * @method mouseMoved
	 * @example
	 * <div>
	 * <code>
	 * // Move the mouse across the page
	 * // to change its value
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function mouseMoved() {
	 *   value = value + 5;
	 *   if (value > 255) {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * function mouseMoved() {
	 *   ellipse(mouseX, mouseY, 5, 5);
	 *   // prevent default
	 *   return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black 50x50 rect becomes lighter with mouse movements until white then resets
	 * no image displayed
	 *
	 */

	/**
	 * The mouseDragged() function is called once every time the mouse moves and
	 * a mouse button is pressed. If no mouseDragged() function is defined, the
	 * touchMoved() function will be called instead if it is defined.<br><br>
	 * Browsers may have different default
	 * behaviors attached to various mouse events. To prevent any default
	 * behavior for this event, add "return false" to the end of the method.
	 *
	 * @method mouseDragged
	 * @example
	 * <div>
	 * <code>
	 * // Drag the mouse across the page
	 * // to change its value
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function mouseDragged() {
	 *   value = value + 5;
	 *   if (value > 255) {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * function mouseDragged() {
	 *   ellipse(mouseX, mouseY, 5, 5);
	 *   // prevent default
	 *   return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black 50x50 rect turns lighter with mouse click and drag until white, resets
	 * no image displayed
	 *
	 */
	p5.prototype._onmousemove = function(e){
	  var context = this._isGlobal ? window : this;
	  var executeDefault;
	  this._updateNextMouseCoords(e);
	  if (!this.isMousePressed) {
	    if (typeof context.mouseMoved === 'function') {
	      executeDefault = context.mouseMoved(e);
	      if(executeDefault === false) {
	        e.preventDefault();
	      }
	    }
	  }
	  else {
	    if (typeof context.mouseDragged === 'function') {
	      executeDefault = context.mouseDragged(e);
	      if(executeDefault === false) {
	        e.preventDefault();
	      }
	    } else if (typeof context.touchMoved === 'function') {
	      executeDefault = context.touchMoved(e);
	      if(executeDefault === false) {
	        e.preventDefault();
	      }
	    }
	  }
	};

	/**
	 * The mousePressed() function is called once after every time a mouse button
	 * is pressed. The mouseButton variable (see the related reference entry)
	 * can be used to determine which button has been pressed. If no
	 * mousePressed() function is defined, the touchStarted() function will be
	 * called instead if it is defined.<br><br>
	 * Browsers may have different default
	 * behaviors attached to various mouse events. To prevent any default
	 * behavior for this event, add "return false" to the end of the method.
	 *
	 * @method mousePressed
	 * @example
	 * <div>
	 * <code>
	 * // Click within the image to change
	 * // the value of the rectangle
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function mousePressed() {
	 *   if (value == 0) {
	 *     value = 255;
	 *   } else {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * function mousePressed() {
	 *   ellipse(mouseX, mouseY, 5, 5);
	 *   // prevent default
	 *   return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black 50x50 rect turns white with mouse click/press.
	 * no image displayed
	 *
	 */
	p5.prototype._onmousedown = function(e) {
	  var context = this._isGlobal ? window : this;
	  var executeDefault;
	  this._setProperty('isMousePressed', true);
	  this._setProperty('mouseIsPressed', true);
	  this._setMouseButton(e);
	  this._updateNextMouseCoords(e);
	  if (typeof context.mousePressed === 'function') {
	    executeDefault = context.mousePressed(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  } else if (typeof context.touchStarted === 'function') {
	    executeDefault = context.touchStarted(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};

	/**
	 * The mouseReleased() function is called every time a mouse button is
	 * released. If no mouseReleased() function is defined, the touchEnded()
	 * function will be called instead if it is defined.<br><br>
	 * Browsers may have different default
	 * behaviors attached to various mouse events. To prevent any default
	 * behavior for this event, add "return false" to the end of the method.
	 *
	 *
	 * @method mouseReleased
	 * @example
	 * <div>
	 * <code>
	 * // Click within the image to change
	 * // the value of the rectangle
	 * // after the mouse has been clicked
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function mouseReleased() {
	 *   if (value == 0) {
	 *     value = 255;
	 *   } else {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * function mouseReleased() {
	 *   ellipse(mouseX, mouseY, 5, 5);
	 *   // prevent default
	 *   return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black 50x50 rect turns white with mouse click/press.
	 * no image displayed
	 *
	 */
	p5.prototype._onmouseup = function(e) {
	  var context = this._isGlobal ? window : this;
	  var executeDefault;
	  this._setProperty('isMousePressed', false);
	  this._setProperty('mouseIsPressed', false);
	  if (typeof context.mouseReleased === 'function') {
	    executeDefault = context.mouseReleased(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  } else if (typeof context.touchEnded === 'function') {
	    executeDefault = context.touchEnded(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};

	p5.prototype._ondragend = p5.prototype._onmouseup;
	p5.prototype._ondragover = p5.prototype._onmousemove;

	/**
	 * The mouseClicked() function is called once after a mouse button has been
	 * pressed and then released.<br><br>
	 * Browsers may have different default
	 * behaviors attached to various mouse events. To prevent any default
	 * behavior for this event, add "return false" to the end of the method.
	 *
	 * @method mouseClicked
	 * @example
	 * <div>
	 * <code>
	 * // Click within the image to change
	 * // the value of the rectangle
	 * // after the mouse has been clicked
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function mouseClicked() {
	 *   if (value == 0) {
	 *     value = 255;
	 *   } else {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * function mouseClicked() {
	 *   ellipse(mouseX, mouseY, 5, 5);
	 *   // prevent default
	 *   return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black 50x50 rect turns white with mouse click/press.
	 * no image displayed
	 *
	 */
	p5.prototype._onclick = function(e) {
	  var context = this._isGlobal ? window : this;
	  if (typeof context.mouseClicked === 'function') {
	    var executeDefault = context.mouseClicked(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};

	/**
	 * The function mouseWheel() is executed every time a vertical mouse wheel
	 * event is detected either triggered by an actual mouse wheel or by a
	 * touchpad.<br><br>
	 * The event.delta property returns the amount the mouse wheel
	 * have scrolled. The values can be positive or negative depending on the
	 * scroll direction (on OS X with "natural" scrolling enabled, the signs
	 * are inverted).<br><br>
	 * Browsers may have different default behaviors attached to various
	 * mouse events. To prevent any default behavior for this event, add
	 * "return false" to the end of the method.<br><br>
	 * Due to the current support of the "wheel" event on Safari, the function
	 * may only work as expected if "return false" is included while using Safari.
	 *
	 * @method mouseWheel
	 *
	 * @example
	 * <div>
	 * <code>
	 * var pos = 25;
	 *
	 * function draw() {
	 *   background(237, 34, 93);
	 *   fill(0);
	 *   rect(25, pos, 50, 50);
	 * }
	 *
	 * function mouseWheel(event) {
	 *   print(event.delta);
	 *   //move the square according to the vertical scroll amount
	 *   pos += event.delta;
	 *   //uncomment to block page scrolling
	 *   //return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black 50x50 rect moves up and down with vertical scroll. fuschia background
	 *
	 */
	p5.prototype._onwheel = function(e) {
	  var context = this._isGlobal ? window : this;
	  if (typeof context.mouseWheel === 'function') {
	    e.delta = e.deltaY;
	    var executeDefault = context.mouseWheel(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};

	module.exports = p5;

	},{"../core/constants":36,"../core/core":37}],53:[function(_dereq_,module,exports){
	/**
	 * @module Events
	 * @submodule Touch
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * The system variable touches[] contains an array of the positions of all
	 * current touch points, relative to (0, 0) of the canvas, and IDs identifying a
	 * unique touch as it moves. Each element in the array is an object with x, y,
	 * and id properties.
	 *
	 * @property touches[]
	 */
	p5.prototype.touches = [];

	p5.prototype._updateTouchCoords = function(e) {
	  if (this._curElement !== null) {
	    var touches = [];
	    for(var i = 0; i < e.touches.length; i++){
	      touches[i] = getTouchInfo(this._curElement.elt,
	        this.width, this.height, e, i);
	    }
	    this._setProperty('touches', touches);
	  }
	};


	function getTouchInfo(canvas, w, h, e, i) {
	  i = i || 0;
	  var rect = canvas.getBoundingClientRect();
	  var sx = canvas.scrollWidth / w;
	  var sy = canvas.scrollHeight / h;
	  var touch = e.touches[i] || e.changedTouches[i];
	  return {
	    x: (touch.clientX - rect.left) / sx,
	    y: (touch.clientY - rect.top) / sy,
	    winX: touch.clientX,
	    winY: touch.clientY,
	    id: touch.identifier
	  };
	}

	/**
	 * The touchStarted() function is called once after every time a touch is
	 * registered. If no touchStarted() function is defined, the mousePressed()
	 * function will be called instead if it is defined.<br><br>
	 * Browsers may have different default behaviors attached to various touch
	 * events. To prevent any default behavior for this event, add "return false"
	 * to the end of the method.
	 *
	 * @method touchStarted
	 * @example
	 * <div>
	 * <code>
	 * // Touch within the image to change
	 * // the value of the rectangle
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function touchStarted() {
	 *   if (value == 0) {
	 *     value = 255;
	 *   } else {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * function touchStarted() {
	 *   ellipse(mouseX, mouseY, 5, 5);
	 *   // prevent default
	 *   return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 black rect turns white with touch event.
	 * no image displayed
	 */
	p5.prototype._ontouchstart = function(e) {
	  var context = this._isGlobal ? window : this;
	  var executeDefault;
	  this._updateTouchCoords(e);
	  this._updateNextMouseCoords(e);
	  if(typeof context.touchStarted === 'function') {
	    executeDefault = context.touchStarted(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  } else if (typeof context.mousePressed === 'function') {
	    executeDefault = context.mousePressed(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	    //this._setMouseButton(e);
	  }
	};

	/**
	 * The touchMoved() function is called every time a touch move is registered.
	 * If no touchMoved() function is defined, the mouseDragged() function will
	 * be called instead if it is defined.<br><br>
	 * Browsers may have different default behaviors attached to various touch
	 * events. To prevent any default behavior for this event, add "return false"
	 * to the end of the method.
	 *
	 * @method touchMoved
	 * @example
	 * <div>
	 * <code>
	 * // Move your finger across the page
	 * // to change its value
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function touchMoved() {
	 *   value = value + 5;
	 *   if (value > 255) {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * function touchMoved() {
	 *   ellipse(mouseX, mouseY, 5, 5);
	 *   // prevent default
	 *   return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 black rect turns lighter with touch until white. resets
	 * no image displayed
	 *
	 */
	p5.prototype._ontouchmove = function(e) {
	  var context = this._isGlobal ? window : this;
	  var executeDefault;
	  this._updateTouchCoords(e);
	  this._updateNextMouseCoords(e);
	  if (typeof context.touchMoved === 'function') {
	    executeDefault = context.touchMoved(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  } else if (typeof context.mouseDragged === 'function') {
	    executeDefault = context.mouseDragged(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};

	/**
	 * The touchEnded() function is called every time a touch ends. If no
	 * touchEnded() function is defined, the mouseReleased() function will be
	 * called instead if it is defined.<br><br>
	 * Browsers may have different default behaviors attached to various touch
	 * events. To prevent any default behavior for this event, add "return false"
	 * to the end of the method.
	 *
	 * @method touchEnded
	 * @example
	 * <div>
	 * <code>
	 * // Release touch within the image to
	 * // change the value of the rectangle
	 *
	 * var value = 0;
	 * function draw() {
	 *   fill(value);
	 *   rect(25, 25, 50, 50);
	 * }
	 * function touchEnded() {
	 *   if (value == 0) {
	 *     value = 255;
	 *   } else {
	 *     value = 0;
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * function touchEnded() {
	 *   ellipse(mouseX, mouseY, 5, 5);
	 *   // prevent default
	 *   return false;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 50x50 black rect turns white with touch.
	 * no image displayed
	 *
	 */
	p5.prototype._ontouchend = function(e) {
	  this._updateTouchCoords(e);
	  this._updateNextMouseCoords(e);
	  if (this.touches.length === 0) {
	    this._setProperty('touchIsDown', false);
	  }
	  var context = this._isGlobal ? window : this;
	  var executeDefault;
	  if (typeof context.touchEnded === 'function') {
	    executeDefault = context.touchEnded(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  } else if (typeof context.mouseReleased === 'function') {
	    executeDefault = context.mouseReleased(e);
	    if(executeDefault === false) {
	      e.preventDefault();
	    }
	  }
	};

	module.exports = p5;

	},{"../core/core":37}],54:[function(_dereq_,module,exports){
	/*global ImageData:false */

	/**
	 * This module defines the filters for use with image buffers.
	 *
	 * This module is basically a collection of functions stored in an object
	 * as opposed to modules. The functions are destructive, modifying
	 * the passed in canvas rather than creating a copy.
	 *
	 * Generally speaking users of this module will use the Filters.apply method
	 * on a canvas to create an effect.
	 *
	 * A number of functions are borrowed/adapted from
	 * http://www.html5rocks.com/en/tutorials/canvas/imagefilters/
	 * or the java processing implementation.
	 */

	'use strict';

	var Filters = {};


	/*
	 * Helper functions
	 */


	/**
	 * Returns the pixel buffer for a canvas
	 *
	 * @private
	 *
	 * @param  {Canvas|ImageData} canvas the canvas to get pixels from
	 * @return {Uint8ClampedArray}       a one-dimensional array containing
	 *                                   the data in thc RGBA order, with integer
	 *                                   values between 0 and 255
	 */
	Filters._toPixels = function (canvas) {
	  if (canvas instanceof ImageData) {
	    return canvas.data;
	  } else {
	    return canvas.getContext('2d').getImageData(
	      0,
	      0,
	      canvas.width,
	      canvas.height
	    ).data;
	  }
	};

	/**
	 * Returns a 32 bit number containing ARGB data at ith pixel in the
	 * 1D array containing pixels data.
	 *
	 * @private
	 *
	 * @param  {Uint8ClampedArray} data array returned by _toPixels()
	 * @param  {Integer}           i    index of a 1D Image Array
	 * @return {Integer}                32 bit integer value representing
	 *                                  ARGB value.
	 */
	Filters._getARGB = function (data, i) {
	  var offset = i * 4;
	  return (data[offset+3] << 24) & 0xff000000 |
	    (data[offset] << 16) & 0x00ff0000 |
	    (data[offset+1] << 8) & 0x0000ff00 |
	    data[offset+2] & 0x000000ff;
	};

	/**
	 * Modifies pixels RGBA values to values contained in the data object.
	 *
	 * @private
	 *
	 * @param {Uint8ClampedArray} pixels array returned by _toPixels()
	 * @param {Int32Array}        data   source 1D array where each value
	 *                                   represents ARGB values
	 */
	Filters._setPixels = function (pixels, data) {
	  var offset = 0;
	  for( var i = 0, al = pixels.length; i < al; i++) {
	    offset = i*4;
	    pixels[offset + 0] = (data[i] & 0x00ff0000)>>>16;
	    pixels[offset + 1] = (data[i] & 0x0000ff00)>>>8;
	    pixels[offset + 2] = (data[i] & 0x000000ff);
	    pixels[offset + 3] = (data[i] & 0xff000000)>>>24;
	  }
	};

	/**
	 * Returns the ImageData object for a canvas
	 * https://developer.mozilla.org/en-US/docs/Web/API/ImageData
	 *
	 * @private
	 *
	 * @param  {Canvas|ImageData} canvas canvas to get image data from
	 * @return {ImageData}               Holder of pixel data (and width and
	 *                                   height) for a canvas
	 */
	Filters._toImageData = function (canvas) {
	  if (canvas instanceof ImageData) {
	    return canvas;
	  } else {
	    return canvas.getContext('2d').getImageData(
	      0,
	      0,
	      canvas.width,
	      canvas.height
	    );
	  }
	};

	/**
	 * Returns a blank ImageData object.
	 *
	 * @private
	 *
	 * @param  {Integer} width
	 * @param  {Integer} height
	 * @return {ImageData}
	 */
	Filters._createImageData = function (width, height) {
	  Filters._tmpCanvas = document.createElement('canvas');
	  Filters._tmpCtx = Filters._tmpCanvas.getContext('2d');
	  return this._tmpCtx.createImageData(width, height);
	};


	/**
	 * Applys a filter function to a canvas.
	 *
	 * The difference between this and the actual filter functions defined below
	 * is that the filter functions generally modify the pixel buffer but do
	 * not actually put that data back to the canvas (where it would actually
	 * update what is visible). By contrast this method does make the changes
	 * actually visible in the canvas.
	 *
	 * The apply method is the method that callers of this module would generally
	 * use. It has been separated from the actual filters to support an advanced
	 * use case of creating a filter chain that executes without actually updating
	 * the canvas in between everystep.
	 *
	 * @param  {[type]} func   [description]
	 * @param  {[type]} canvas [description]
	 * @param  {[type]} level  [description]
	 * @return {[type]}        [description]
	 */
	Filters.apply = function (canvas, func, filterParam) {
	  var ctx = canvas.getContext('2d');
	  var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

	  //Filters can either return a new ImageData object, or just modify
	  //the one they received.
	  var newImageData = func(imageData, filterParam);
	  if (newImageData instanceof ImageData) {
	    ctx.putImageData(newImageData, 0, 0, 0, 0, canvas.width, canvas.height);
	  } else {
	    ctx.putImageData(imageData, 0, 0, 0, 0, canvas.width, canvas.height);
	  }
	};


	/*
	 * Filters
	 */


	/**
	 * Converts the image to black and white pixels depending if they are above or
	 * below the threshold defined by the level parameter. The parameter must be
	 * between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.
	 *
	 * Borrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/
	 *
	 * @param  {Canvas} canvas
	 * @param  {Float} level
	 */
	Filters.threshold = function (canvas, level) {
	  var pixels = Filters._toPixels(canvas);

	  if (level === undefined) {
	    level = 0.5;
	  }
	  var thresh = Math.floor(level * 255);

	  for (var i = 0; i < pixels.length; i += 4) {
	    var r = pixels[i];
	    var g = pixels[i + 1];
	    var b = pixels[i + 2];
	    var gray = (0.2126 * r + 0.7152 * g + 0.0722 * b);
	    var val;
	    if (gray >= thresh) {
	      val = 255;
	    } else {
	      val = 0;
	    }
	    pixels[i] = pixels[i + 1] = pixels[i + 2] = val;
	  }

	};


	/**
	 * Converts any colors in the image to grayscale equivalents.
	 * No parameter is used.
	 *
	 * Borrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/
	 *
	 * @param {Canvas} canvas
	 */
	Filters.gray = function (canvas) {
	  var pixels = Filters._toPixels(canvas);

	  for (var i = 0; i < pixels.length; i += 4) {
	    var r = pixels[i];
	    var g = pixels[i + 1];
	    var b = pixels[i + 2];

	    // CIE luminance for RGB
	    var gray = (0.2126 * r + 0.7152 * g + 0.0722 * b);
	    pixels[i] = pixels[i + 1] = pixels[i + 2] = gray;
	  }
	};

	/**
	 * Sets the alpha channel to entirely opaque. No parameter is used.
	 *
	 * @param {Canvas} canvas
	 */
	Filters.opaque = function (canvas) {
	  var pixels = Filters._toPixels(canvas);

	  for (var i = 0; i < pixels.length; i += 4) {
	    pixels[i + 3] = 255;
	  }

	  return pixels;
	};

	/**
	 * Sets each pixel to its inverse value. No parameter is used.
	 * @param {Invert}
	 */
	Filters.invert = function (canvas) {
	  var pixels = Filters._toPixels(canvas);

	  for (var i = 0; i < pixels.length; i += 4) {
	    pixels[i] = 255 - pixels[i];
	    pixels[i + 1] = 255 - pixels[i + 1];
	    pixels[i + 2] = 255 - pixels[i + 2];
	  }

	};


	/**
	 * Limits each channel of the image to the number of colors specified as
	 * the parameter. The parameter can be set to values between 2 and 255, but
	 * results are most noticeable in the lower ranges.
	 *
	 * Adapted from java based processing implementation
	 *
	 * @param  {Canvas} canvas
	 * @param  {Integer} level
	 */
	Filters.posterize = function (canvas, level) {
	  var pixels = Filters._toPixels(canvas);

	  if ((level < 2) || (level > 255)) {
	    throw new Error(
	      'Level must be greater than 2 and less than 255 for posterize'
	    );
	  }

	  var levels1 = level - 1;
	  for (var i = 0; i < pixels.length; i+=4) {
	    var rlevel = pixels[i];
	    var glevel = pixels[i + 1];
	    var blevel = pixels[i + 2];

	    pixels[i] = (((rlevel * level) >> 8) * 255) / levels1;
	    pixels[i + 1] = (((glevel * level) >> 8) * 255) / levels1;
	    pixels[i + 2] = (((blevel * level) >> 8) * 255) / levels1;
	  }
	};

	/**
	 * reduces the bright areas in an image
	 * @param  {Canvas} canvas
	 *
	 */
	Filters.dilate = function (canvas) {
	  var pixels = Filters._toPixels(canvas);
	  var currIdx = 0;
	  var maxIdx = pixels.length ? pixels.length/4 : 0;
	  var out = new Int32Array(maxIdx);
	  var currRowIdx, maxRowIdx, colOrig, colOut, currLum;
	  var idxRight, idxLeft, idxUp, idxDown,
	      colRight, colLeft, colUp, colDown,
	      lumRight, lumLeft, lumUp, lumDown;

	  while(currIdx < maxIdx) {
	    currRowIdx = currIdx;
	    maxRowIdx = currIdx + canvas.width;
	    while (currIdx < maxRowIdx) {
	      colOrig = colOut = Filters._getARGB(pixels, currIdx);
	      idxLeft = currIdx - 1;
	      idxRight = currIdx + 1;
	      idxUp = currIdx - canvas.width;
	      idxDown = currIdx + canvas.width;

	      if (idxLeft < currRowIdx) {
	        idxLeft = currIdx;
	      }
	      if (idxRight >= maxRowIdx) {
	        idxRight = currIdx;
	      }
	      if (idxUp < 0){
	        idxUp = 0;
	      }
	      if (idxDown >= maxIdx) {
	        idxDown = currIdx;
	      }
	      colUp = Filters._getARGB(pixels, idxUp);
	      colLeft = Filters._getARGB(pixels, idxLeft);
	      colDown = Filters._getARGB(pixels, idxDown);
	      colRight = Filters._getARGB(pixels, idxRight);

	      //compute luminance
	      currLum = 77*(colOrig>>16&0xff) +
	        151*(colOrig>>8&0xff) +
	        28*(colOrig&0xff);
	      lumLeft = 77*(colLeft>>16&0xff) +
	        151*(colLeft>>8&0xff) +
	        28*(colLeft&0xff);
	      lumRight = 77*(colRight>>16&0xff) +
	        151*(colRight>>8&0xff) +
	        28*(colRight&0xff);
	      lumUp = 77*(colUp>>16&0xff) +
	        151*(colUp>>8&0xff) +
	        28*(colUp&0xff);
	      lumDown = 77*(colDown>>16&0xff) +
	        151*(colDown>>8&0xff) +
	        28*(colDown&0xff);

	      if (lumLeft > currLum) {
	        colOut = colLeft;
	        currLum = lumLeft;
	      }
	      if (lumRight > currLum) {
	        colOut = colRight;
	        currLum = lumRight;
	      }
	      if (lumUp > currLum) {
	        colOut = colUp;
	        currLum = lumUp;
	      }
	      if (lumDown > currLum) {
	        colOut = colDown;
	        currLum = lumDown;
	      }
	      out[currIdx++]=colOut;
	    }
	  }
	  Filters._setPixels(pixels, out);
	};

	/**
	 * increases the bright areas in an image
	 * @param  {Canvas} canvas
	 *
	 */
	Filters.erode = function(canvas) {
	  var pixels = Filters._toPixels(canvas);
	  var currIdx = 0;
	  var maxIdx = pixels.length ? pixels.length/4 : 0;
	  var out = new Int32Array(maxIdx);
	  var currRowIdx, maxRowIdx, colOrig, colOut, currLum;
	  var idxRight, idxLeft, idxUp, idxDown,
	      colRight, colLeft, colUp, colDown,
	      lumRight, lumLeft, lumUp, lumDown;

	  while(currIdx < maxIdx) {
	    currRowIdx = currIdx;
	    maxRowIdx = currIdx + canvas.width;
	    while (currIdx < maxRowIdx) {
	      colOrig = colOut = Filters._getARGB(pixels, currIdx);
	      idxLeft = currIdx - 1;
	      idxRight = currIdx + 1;
	      idxUp = currIdx - canvas.width;
	      idxDown = currIdx + canvas.width;

	      if (idxLeft < currRowIdx) {
	        idxLeft = currIdx;
	      }
	      if (idxRight >= maxRowIdx) {
	        idxRight = currIdx;
	      }
	      if (idxUp < 0) {
	        idxUp = 0;
	      }
	      if (idxDown >= maxIdx) {
	        idxDown = currIdx;
	      }
	      colUp = Filters._getARGB(pixels, idxUp);
	      colLeft = Filters._getARGB(pixels, idxLeft);
	      colDown = Filters._getARGB(pixels, idxDown);
	      colRight = Filters._getARGB(pixels, idxRight);

	      //compute luminance
	      currLum = 77*(colOrig>>16&0xff) +
	        151*(colOrig>>8&0xff) +
	        28*(colOrig&0xff);
	      lumLeft = 77*(colLeft>>16&0xff) +
	        151*(colLeft>>8&0xff) +
	        28*(colLeft&0xff);
	      lumRight = 77*(colRight>>16&0xff) +
	        151*(colRight>>8&0xff) +
	        28*(colRight&0xff);
	      lumUp = 77*(colUp>>16&0xff) +
	        151*(colUp>>8&0xff) +
	        28*(colUp&0xff);
	      lumDown = 77*(colDown>>16&0xff) +
	        151*(colDown>>8&0xff) +
	        28*(colDown&0xff);

	      if (lumLeft < currLum) {
	        colOut = colLeft;
	        currLum = lumLeft;
	      }
	      if (lumRight < currLum) {
	        colOut = colRight;
	        currLum = lumRight;
	      }
	      if (lumUp < currLum) {
	        colOut = colUp;
	        currLum = lumUp;
	      }
	      if (lumDown < currLum) {
	        colOut = colDown;
	        currLum = lumDown;
	      }

	      out[currIdx++]=colOut;
	    }
	  }
	  Filters._setPixels(pixels, out);
	};

	// BLUR

	// internal kernel stuff for the gaussian blur filter
	var blurRadius;
	var blurKernelSize;
	var blurKernel;
	var blurMult;

	/*
	 * Port of https://github.com/processing/processing/blob/
	 * master/core/src/processing/core/PImage.java#L1250
	 *
	 * Optimized code for building the blur kernel.
	 * further optimized blur code (approx. 15% for radius=20)
	 * bigger speed gains for larger radii (~30%)
	 * added support for various image types (ALPHA, RGB, ARGB)
	 * [toxi 050728]
	 */
	function buildBlurKernel(r) {
	  var radius = (r * 3.5)|0;
	  radius = (radius < 1) ? 1 : ((radius < 248) ? radius : 248);

	  if (blurRadius !== radius) {
	    blurRadius = radius;
	    blurKernelSize = 1 + blurRadius<<1;
	    blurKernel = new Int32Array(blurKernelSize);
	    blurMult = new Array(blurKernelSize);
	    for(var l = 0; l < blurKernelSize; l++){
	      blurMult[l] = new Int32Array(256);
	    }

	    var bk,bki;
	    var bm,bmi;

	    for (var i = 1, radiusi = radius - 1; i < radius; i++) {
	      blurKernel[radius+i] = blurKernel[radiusi] = bki = radiusi * radiusi;
	      bm = blurMult[radius+i];
	      bmi = blurMult[radiusi--];
	      for (var j = 0; j < 256; j++){
	        bm[j] = bmi[j] = bki * j;
	      }
	    }
	    bk = blurKernel[radius] = radius * radius;
	    bm = blurMult[radius];

	    for (var k = 0; k < 256; k++){
	      bm[k] = bk * k;
	    }
	  }

	}

	// Port of https://github.com/processing/processing/blob/
	// master/core/src/processing/core/PImage.java#L1433
	function blurARGB(canvas, radius) {
	  var pixels = Filters._toPixels(canvas);
	  var width = canvas.width;
	  var height = canvas.height;
	  var numPackedPixels = width * height;
	  var argb = new Int32Array(numPackedPixels);
	  for (var j = 0; j < numPackedPixels; j++) {
	    argb[j] = Filters._getARGB(pixels, j);
	  }
	  var sum, cr, cg, cb, ca;
	  var read, ri, ym, ymi, bk0;
	  var a2 = new Int32Array(numPackedPixels);
	  var r2 = new Int32Array(numPackedPixels);
	  var g2 = new Int32Array(numPackedPixels);
	  var b2 = new Int32Array(numPackedPixels);
	  var yi = 0;
	  buildBlurKernel(radius);
	  var x, y, i;
	  var bm;
	  for (y = 0; y < height; y++) {
	    for (x = 0; x < width; x++) {
	      cb = cg = cr = ca = sum = 0;
	      read = x - blurRadius;
	      if (read < 0) {
	        bk0 = -read;
	        read = 0;
	      } else {
	        if (read >= width) {
	          break;
	        }
	        bk0 = 0;
	      }
	      for (i = bk0; i < blurKernelSize; i++) {
	        if (read >= width) {
	          break;
	        }
	        var c = argb[read + yi];
	        bm = blurMult[i];
	        ca += bm[(c & -16777216) >>> 24];
	        cr += bm[(c & 16711680) >> 16];
	        cg += bm[(c & 65280) >> 8];
	        cb += bm[c & 255];
	        sum += blurKernel[i];
	        read++;
	      }
	      ri = yi + x;
	      a2[ri] = ca / sum;
	      r2[ri] = cr / sum;
	      g2[ri] = cg / sum;
	      b2[ri] = cb / sum;
	    }
	    yi += width;
	  }
	  yi = 0;
	  ym = -blurRadius;
	  ymi = ym * width;
	  for (y = 0; y < height; y++) {
	    for (x = 0; x < width; x++) {
	      cb = cg = cr = ca = sum = 0;
	      if (ym < 0) {
	        bk0 = ri = -ym;
	        read = x;
	      } else {
	        if (ym >= height) {
	          break;
	        }
	        bk0 = 0;
	        ri = ym;
	        read = x + ymi;
	      }
	      for (i = bk0; i < blurKernelSize; i++) {
	        if (ri >= height) {
	          break;
	        }
	        bm = blurMult[i];
	        ca += bm[a2[read]];
	        cr += bm[r2[read]];
	        cg += bm[g2[read]];
	        cb += bm[b2[read]];
	        sum += blurKernel[i];
	        ri++;
	        read += width;
	      }
	      argb[x + yi] = (ca/sum)<<24 | (cr/sum)<<16 | (cg/sum)<<8 | (cb/sum);
	    }
	    yi += width;
	    ymi += width;
	    ym++;
	  }
	  Filters._setPixels(pixels, argb);
	}

	Filters.blur = function(canvas, radius){
	  blurARGB(canvas, radius);
	};


	module.exports = Filters;

	},{}],55:[function(_dereq_,module,exports){
	/**
	 * @module Image
	 * @submodule Image
	 * @for p5
	 * @requires core
	 */

	/**
	 * This module defines the p5 methods for the p5.Image class
	 * for drawing images to the main display canvas.
	 */
	'use strict';


	var p5 = _dereq_('../core/core');

	/* global frames:true */// This is not global, but JSHint is not aware that
	// this module is implicitly enclosed with Browserify: this overrides the
	// redefined-global error and permits using the name "frames" for the array
	// of saved animation frames.
	var frames = [];


	/**
	 * Creates a new p5.Image (the datatype for storing images). This provides a
	 * fresh buffer of pixels to play with. Set the size of the buffer with the
	 * width and height parameters.
	 * <br><br>
	 * .pixels gives access to an array containing the values for all the pixels
	 * in the display window.
	 * These values are numbers. This array is the size (including an appropriate
	 * factor for the pixelDensity) of the display window x4,
	 * representing the R, G, B, A values in order for each pixel, moving from
	 * left to right across each row, then down each column. See .pixels for
	 * more info. It may also be simpler to use set() or get().
	 * <br><br>
	 * Before accessing the pixels of an image, the data must loaded with the
	 * loadPixels() function. After the array data has been modified, the
	 * updatePixels() function must be run to update the changes.
	 *
	 * @method createImage
	 * @param  {Integer} width  width in pixels
	 * @param  {Integer} height height in pixels
	 * @return {p5.Image}       the p5.Image object
	 * @example
	 * <div>
	 * <code>
	 * img = createImage(66, 66);
	 * img.loadPixels();
	 * for (i = 0; i < img.width; i++) {
	 *   for (j = 0; j < img.height; j++) {
	 *     img.set(i, j, color(0, 90, 102));
	 *   }
	 * }
	 * img.updatePixels();
	 * image(img, 17, 17);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * img = createImage(66, 66);
	 * img.loadPixels();
	 * for (i = 0; i < img.width; i++) {
	 *   for (j = 0; j < img.height; j++) {
	 *     img.set(i, j, color(0, 90, 102, i % img.width * 2));
	 *   }
	 * }
	 * img.updatePixels();
	 * image(img, 17, 17);
	 * image(img, 34, 34);
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var pink = color(255, 102, 204);
	 * img = createImage(66, 66);
	 * img.loadPixels();
	 * var d = pixelDensity;
	 * var halfImage = 4 * (width * d) * (height/2 * d);
	 * for (var i = 0; i < halfImage; i+=4) {
	 *   img.pixels[i] = red(pink);
	 *   img.pixels[i+1] = green(pink);
	 *   img.pixels[i+2] = blue(pink);
	 *   img.pixels[i+3] = alpha(pink);
	 * }
	 * img.updatePixels();
	 * image(img, 17, 17);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 66x66 dark turquoise rect in center of canvas.
	 * 2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas
	 * no image displayed
	 *
	 */
	p5.prototype.createImage = function(width, height) {
	  return new p5.Image(width, height);
	};

	/**
	 *  Save the current canvas as an image. In Safari, this will open the
	 *  image in the window and the user must provide their own
	 *  filename on save-as. Other browsers will either save the
	 *  file immediately, or prompt the user with a dialogue window.
	 *
	 *  @method saveCanvas
	 *  @param  {[selectedCanvas]} canvas a variable representing a
	 *                             specific html5 canvas (optional)
	 *  @param  {[String]} filename
	 *  @param  {[String]} extension 'jpg' or 'png'
	 *  @example
	 *  <div class='norender'><code>
	 *  function setup() {
	 *    var c = createCanvas(100, 100);
	 *    background(255, 0, 0);
	 *    saveCanvas(c, 'myCanvas', 'jpg');
	 *  }
	 *  </code></div>
	 *  <div class='norender'><code>
	 *  // note that this example has the same result as above
	 *  // if no canvas is specified, defaults to main canvas
	 *  function setup() {
	 *    createCanvas(100, 100);
	 *    background(255, 0, 0);
	 *    saveCanvas('myCanvas', 'jpg');
	 *  }
	 *  </code></div>
	 *  <div class='norender'><code>
	 *  // all of the following are valid
	 *  saveCanvas(c, 'myCanvas', 'jpg');
	 *  saveCanvas(c, 'myCanvas');
	 *  saveCanvas(c);
	 *  saveCanvas('myCanvas', 'png');
	 *  saveCanvas('myCanvas');
	 *  saveCanvas();
	 *  </code></div>
	 *
	 * @alt
	 * no image displayed
	 * no image displayed
	 * no image displayed
	 *
	 */
	p5.prototype.saveCanvas = function() {

	  var cnv, filename, extension;
	  if (arguments.length === 3) {
	    cnv = arguments[0];
	    filename = arguments[1];
	    extension = arguments[2];
	  } else if (arguments.length === 2) {
	    if (typeof arguments[0] === 'object') {
	      cnv = arguments[0];
	      filename = arguments[1];
	    } else {
	      filename = arguments[0];
	      extension = arguments[1];
	    }
	  } else if (arguments.length === 1) {
	    if (typeof arguments[0] === 'object') {
	      cnv = arguments[0];
	    } else {
	      filename = arguments[0];
	    }
	  }

	  if (cnv instanceof p5.Element) {
	    cnv = cnv.elt;
	  }
	  if (!(cnv instanceof HTMLCanvasElement)) {
	    cnv = null;
	  }

	  if (!extension) {
	    extension = p5.prototype._checkFileExtension(filename, extension)[1];
	    if (extension === '') {
	      extension = 'png';
	    }
	  }

	  if (!cnv) {
	    if (this._curElement && this._curElement.elt) {
	      cnv = this._curElement.elt;
	    }
	  }

	  if ( p5.prototype._isSafari() ) {
	    var aText = 'Hello, Safari user!\n';
	    aText += 'Now capturing a screenshot...\n';
	    aText += 'To save this image,\n';
	    aText += 'go to File --> Save As.\n';
	    alert(aText);
	    window.location.href = cnv.toDataURL();
	  } else {
	    var mimeType;
	    if (typeof(extension) === 'undefined') {
	      extension = 'png';
	      mimeType = 'image/png';
	    }
	    else {
	      switch(extension){
	        case 'png':
	          mimeType = 'image/png';
	          break;
	        case 'jpeg':
	          mimeType = 'image/jpeg';
	          break;
	        case 'jpg':
	          mimeType = 'image/jpeg';
	          break;
	        default:
	          mimeType = 'image/png';
	          break;
	      }
	    }
	    var downloadMime = 'image/octet-stream';
	    var imageData = cnv.toDataURL(mimeType);
	    imageData = imageData.replace(mimeType, downloadMime);

	    p5.prototype.downloadFile(imageData, filename, extension);
	  }
	};

	/**
	 *  Capture a sequence of frames that can be used to create a movie.
	 *  Accepts a callback. For example, you may wish to send the frames
	 *  to a server where they can be stored or converted into a movie.
	 *  If no callback is provided, the browser will pop up save dialogues in an
	 *  attempt to download all of the images that have just been created. With the
	 *  callback provided the image data isn't saved by default but instead passed
	 *  as an argument to the callback function as an array of objects, with the
	 *  size of array equal to the total number of frames.
	 *
	 *  @method saveFrames
	 *  @param  {String}   filename
	 *  @param  {String}   extension 'jpg' or 'png'
	 *  @param  {Number}   duration  Duration in seconds to save the frames for.
	 *  @param  {Number}   framerate  Framerate to save the frames in.
	 *  @param  {Function} [callback] A callback function that will be executed
	                                  to handle the image data. This function
	                                  should accept an array as argument. The
	                                  array will contain the specified number of
	                                  frames of objects. Each object has three
	                                  properties: imageData - an
	                                  image/octet-stream, filename and extension.
	 *  @example
	 *  <div><code>
	 *  function draw() {
	 *    background(mouseX);
	 *  }
	 *
	 *  function mousePressed() {
	 *    saveFrames("out", "png", 1, 25, function(data){
	 *      print(data);
	 *    });
	 *  }
	 *  </code></div>
	 *
	 * @alt
	 * canvas background goes from light to dark with mouse x.
	 *
	 */
	p5.prototype.saveFrames = function(fName, ext, _duration, _fps, callback) {
	  var duration = _duration || 3;
	  duration = p5.prototype.constrain(duration, 0, 15);
	  duration = duration * 1000;
	  var fps = _fps || 15;
	  fps = p5.prototype.constrain(fps, 0, 22);
	  var count = 0;

	  var makeFrame = p5.prototype._makeFrame;
	  var cnv = this._curElement.elt;
	  var frameFactory = setInterval(function(){
	    makeFrame(fName + count, ext, cnv);
	    count++;
	  },1000/fps);

	  setTimeout(function(){
	    clearInterval(frameFactory);
	    if (callback) {
	      callback(frames);
	    }
	    else {
	      for (var i = 0; i < frames.length; i++) {
	        var f = frames[i];
	        p5.prototype.downloadFile(f.imageData, f.filename, f.ext);
	      }
	    }
	    frames = []; // clear frames
	  }, duration + 0.01);
	};

	p5.prototype._makeFrame = function(filename, extension, _cnv) {
	  var cnv;
	  if (this) {
	    cnv = this._curElement.elt;
	  } else {
	    cnv = _cnv;
	  }
	  var mimeType;
	  if (!extension) {
	    extension = 'png';
	    mimeType = 'image/png';
	  }
	  else {
	    switch(extension.toLowerCase()){
	      case 'png':
	        mimeType = 'image/png';
	        break;
	      case 'jpeg':
	        mimeType = 'image/jpeg';
	        break;
	      case 'jpg':
	        mimeType = 'image/jpeg';
	        break;
	      default:
	        mimeType = 'image/png';
	        break;
	    }
	  }
	  var downloadMime = 'image/octet-stream';
	  var imageData = cnv.toDataURL(mimeType);
	  imageData = imageData.replace(mimeType, downloadMime);

	  var thisFrame = {};
	  thisFrame.imageData = imageData;
	  thisFrame.filename = filename;
	  thisFrame.ext = extension;
	  frames.push(thisFrame);
	};

	module.exports = p5;

	},{"../core/core":37}],56:[function(_dereq_,module,exports){
	/**
	 * @module Image
	 * @submodule Loading & Displaying
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var Filters = _dereq_('./filters');
	var canvas = _dereq_('../core/canvas');
	var constants = _dereq_('../core/constants');

	_dereq_('../core/error_helpers');

	/**
	 * Loads an image from a path and creates a p5.Image from it.
	 * <br><br>
	 * The image may not be immediately available for rendering
	 * If you want to ensure that the image is ready before doing
	 * anything with it, place the loadImage() call in preload().
	 * You may also supply a callback function to handle the image when it's ready.
	 * <br><br>
	 * The path to the image should be relative to the HTML file
	 * that links in your sketch. Loading an from a URL or other
	 * remote location may be blocked due to your browser's built-in
	 * security.
	 *
	 * @method loadImage
	 * @param  {String} path Path of the image to be loaded
	 * @param  {Function(p5.Image)} [successCallback] Function to be called once
	 *                                the image is loaded. Will be passed the
	 *                                p5.Image.
	 * @param  {Function(Event)}    [failureCallback] called with event error if
	 *                                the image fails to load.
	 * @return {p5.Image}             the p5.Image object
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/laDefense.jpg");
	 * }
	 * function setup() {
	 *   image(img, 0, 0);
	 * }
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * function setup() {
	 *   // here we use a callback to display the image after loading
	 *   loadImage("assets/laDefense.jpg", function(img) {
	 *     image(img, 0, 0);
	 *   });
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * image of the underside of a white umbrella and grided ceililng above
	 * image of the underside of a white umbrella and grided ceililng above
	 *
	 */
	p5.prototype.loadImage = function(path, successCallback, failureCallback) {
	  var img = new Image();
	  var pImg = new p5.Image(1, 1, this);
	  var decrementPreload = p5._getDecrementPreload.apply(this, arguments);

	  img.onload = function() {
	    pImg.width = pImg.canvas.width = img.width;
	    pImg.height = pImg.canvas.height = img.height;

	    // Draw the image into the backing canvas of the p5.Image
	    pImg.drawingContext.drawImage(img, 0, 0);

	    if (typeof successCallback === 'function') {
	      successCallback(pImg);
	    }
	    if (decrementPreload && (successCallback !== decrementPreload)) {
	      decrementPreload();
	    }
	  };
	  img.onerror = function(e) {
	    p5._friendlyFileLoadError(0,img.src);
	    // don't get failure callback mixed up with decrementPreload
	    if ((typeof failureCallback === 'function') &&
	      (failureCallback !== decrementPreload)) {
	      failureCallback(e);
	    }
	  };

	  //set crossOrigin in case image is served which CORS headers
	  //this will let us draw to canvas without tainting it.
	  //see https://developer.mozilla.org/en-US/docs/HTML/CORS_Enabled_Image
	  // When using data-uris the file will be loaded locally
	  // so we don't need to worry about crossOrigin with base64 file types
	  if(path.indexOf('data:image/') !== 0) {
	    img.crossOrigin = 'Anonymous';
	  }

	  //start loading the image
	  img.src = path;

	  return pImg;
	};

	/**
	 * Validates clipping params. Per drawImage spec sWidth and sHight cannot be
	 * negative or greater than image intrinsic width and height
	 * @private
	 * @param {Number} sVal
	 * @param {Number} iVal
	 * @returns {Number}
	 * @private
	 */
	function _sAssign(sVal, iVal) {
	  if (sVal > 0 && sVal < iVal) {
	    return sVal;
	  }
	  else {
	    return iVal;
	  }
	}

	/**
	 * Draw an image to the main canvas of the p5js sketch
	 *
	 * @method image
	 * @param  {p5.Image} img    the image to display
	 * @param  {Number}   x      the x-coordinate at which to place the top-left
	 *                           corner of the source image
	 * @param  {Number}   y      the y-coordinate at which to place the top-left
	 *                           corner of the source image
	 * @param  {Number}   width  the width to draw the image
	 * @param  {Number}   height the height to draw the image
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/laDefense.jpg");
	 * }
	 * function setup() {
	 *   image(img, 0, 0);
	 *   image(img, 0, 0, 100, 100);
	 *   image(img, 0, 0, 100, 100, 0, 0, 100, 100);
	 * }
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * function setup() {
	 *   // here we use a callback to display the image after loading
	 *   loadImage("assets/laDefense.jpg", function(img) {
	 *     image(img, 0, 0);
	 *   });
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * image of the underside of a white umbrella and grided ceiling above
	 * image of the underside of a white umbrella and grided ceiling above
	 *
	 */
	/**
	 * @method image
	 * @param  {p5.Image} img
	 * @param  {Number}   dx     the -xcoordinate in the destination canvas at
	 *                           which to place the top-left corner of the
	 *                           source image
	 * @param  {Number}   dy     the y-coordinate in the destination canvas at
	 *                           which to place the top-left corner of the
	 *                           source image
	 * @param  {Number}   dWidth the width to draw the image in the destination
	 *                           canvas
	 * @param  {Number}   dHeight the height to draw the image in the destination
	 *                            canvas
	 * @param  {Number}   sx     the x-coordinate of the top left corner of the
	 *                           sub-rectangle of the source image to draw into
	 *                           the destination canvas
	 * @param  {Number}   sy     the y-coordinate of the top left corner of the
	 *                           sub-rectangle of the source image to draw into
	 *                           the destination canvas
	 * @param {Number}    [sWidth] the width of the sub-rectangle of the
	 *                           source image to draw into the destination
	 *                           canvas
	 * @param {Number}    [sHeight] the height of the sub-rectangle of the
	 *                            source image to draw into the destination context
	 */
	p5.prototype.image =
	  function(img, dx, dy, dWidth, dHeight, sx, sy, sWidth, sHeight) {
	  // set defaults per spec: https://goo.gl/3ykfOq

	  var defW = img.width;
	  var defH = img.height;

	  if (img.elt && img.elt.videoWidth && !img.canvas) { // video no canvas
	    var actualW = img.elt.videoWidth;
	    var actualH = img.elt.videoHeight;
	    defW = img.elt.videoWidth;
	    defH = img.elt.width*actualH/actualW;
	  }

	  var _dx = dx;
	  var _dy = dy;
	  var _dw = dWidth || defW;
	  var _dh = dHeight || defH;
	  var _sx = sx || 0;
	  var _sy = sy || 0;
	  var _sw = sWidth || defW;
	  var _sh = sHeight || defH;

	  _sw = _sAssign(_sw, defW);
	  _sh = _sAssign(_sh, defH);

	  var pd = 1;
	  if (img.elt && img.elt.width) {
	    pd = img.elt.width / parseInt(img.elt.style.width, 10);
	  }

	  _sx *= pd;
	  _sy *= pd;
	  _sh *= pd;
	  _sw *= pd;

	  var vals = canvas.modeAdjust(_dx, _dy, _dw, _dh,
	    this._renderer._imageMode);

	  // tint the image if there is a tint
	  this._renderer.image(img, _sx, _sy, _sw, _sh, vals.x, vals.y, vals.w,
	    vals.h);
	};


	/**
	 * Sets the fill value for displaying images. Images can be tinted to
	 * specified colors or made transparent by including an alpha value.
	 * <br><br>
	 * To apply transparency to an image without affecting its color, use
	 * white as the tint color and specify an alpha value. For instance,
	 * tint(255, 128) will make an image 50% transparent (assuming the default
	 * alpha range of 0-255, which can be changed with colorMode()).
	 * <br><br>
	 * The value for the gray parameter must be less than or equal to the current
	 * maximum value as specified by colorMode(). The default maximum value is
	 * 255.
	 *
	 * @method tint
	 * @param {Number|Array} v1   gray value, red or hue value (depending on the
	 *                            current color mode), or color Array
	 * @param {Number|Array} [v2] green or saturation value (depending on the
	 *                            current color mode)
	 * @param {Number|Array} [v3] blue or brightness value (depending on the
	 *                            current color mode)
	 * @param {Number|Array} [a]  opacity of the background
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/laDefense.jpg");
	 * }
	 * function setup() {
	 *   image(img, 0, 0);
	 *   tint(0, 153, 204);  // Tint blue
	 *   image(img, 50, 0);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/laDefense.jpg");
	 * }
	 * function setup() {
	 *   image(img, 0, 0);
	 *   tint(0, 153, 204, 126);  // Tint blue and set transparency
	 *   image(img, 50, 0);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/laDefense.jpg");
	 * }
	 * function setup() {
	 *   image(img, 0, 0);
	 *   tint(255, 126);  // Apply transparency without changing color
	 *   image(img, 50, 0);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 2 side by side images of umbrella and ceiling, one image with blue tint
	 * Images of umbrella and ceiling, one half of image with blue tint
	 * 2 side by side images of umbrella and ceiling, one image translucent
	 *
	 */
	p5.prototype.tint = function () {
	  var c = this.color.apply(this, arguments);
	  this._renderer._tint = c.levels;
	};

	/**
	 * Removes the current fill value for displaying images and reverts to
	 * displaying images with their original hues.
	 *
	 * @method noTint
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *   tint(0, 153, 204);  // Tint blue
	 *   image(img, 0, 0);
	 *   noTint();  // Disable tint
	 *   image(img, 50, 0);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 2 side by side images of bricks, left image with blue tint
	 *
	 */
	p5.prototype.noTint = function() {
	  this._renderer._tint = null;
	};

	/**
	 * Apply the current tint color to the input image, return the resulting
	 * canvas.
	 *
	 * @param {p5.Image} The image to be tinted
	 * @return {canvas} The resulting tinted canvas
	 *
	 */
	p5.prototype._getTintedImageCanvas = function(img) {
	  if (!img.canvas) {
	    return img;
	  }
	  var pixels = Filters._toPixels(img.canvas);
	  var tmpCanvas = document.createElement('canvas');
	  tmpCanvas.width = img.canvas.width;
	  tmpCanvas.height = img.canvas.height;
	  var tmpCtx = tmpCanvas.getContext('2d');
	  var id = tmpCtx.createImageData(img.canvas.width, img.canvas.height);
	  var newPixels = id.data;

	  for(var i = 0; i < pixels.length; i += 4) {
	    var r = pixels[i];
	    var g = pixels[i+1];
	    var b = pixels[i+2];
	    var a = pixels[i+3];

	    newPixels[i] = r*this._renderer._tint[0]/255;
	    newPixels[i+1] = g*this._renderer._tint[1]/255;
	    newPixels[i+2] = b*this._renderer._tint[2]/255;
	    newPixels[i+3] = a*this._renderer._tint[3]/255;
	  }

	  tmpCtx.putImageData(id, 0, 0);
	  return tmpCanvas;
	};

	/**
	 * Set image mode. Modifies the location from which images are drawn by
	 * changing the way in which parameters given to image() are interpreted.
	 * The default mode is imageMode(CORNER), which interprets the second and
	 * third parameters of image() as the upper-left corner of the image. If
	 * two additional parameters are specified, they are used to set the image's
	 * width and height.
	 * <br><br>
	 * imageMode(CORNERS) interprets the second and third parameters of image()
	 * as the location of one corner, and the fourth and fifth parameters as the
	 * opposite corner.
	 * <br><br>
	 * imageMode(CENTER) interprets the second and third parameters of image()
	 * as the image's center point. If two additional parameters are specified,
	 * they are used to set the image's width and height.
	 *
	 * @method imageMode
	 * @param {Constant} mode either CORNER, CORNERS, or CENTER
	 * @example
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *   imageMode(CORNER);
	 *   image(img, 10, 10, 50, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *   imageMode(CORNERS);
	 *   image(img, 10, 10, 90, 40);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *   imageMode(CENTER);
	 *   image(img, 50, 50, 80, 80);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * small square image of bricks
	 * horizontal rectangle image of bricks
	 * large square image of bricks
	 *
	 */
	p5.prototype.imageMode = function(m) {
	  if (m === constants.CORNER ||
	    m === constants.CORNERS ||
	    m === constants.CENTER) {
	    this._renderer._imageMode = m;
	  }
	};


	module.exports = p5;

	},{"../core/canvas":35,"../core/constants":36,"../core/core":37,"../core/error_helpers":40,"./filters":54}],57:[function(_dereq_,module,exports){
	/**
	 * @module Image
	 * @submodule Image
	 * @requires core
	 * @requires constants
	 * @requires filters
	 */

	/**
	 * This module defines the p5.Image class and P5 methods for
	 * drawing images to the main display canvas.
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var Filters = _dereq_('./filters');

	/*
	 * Class methods
	 */

	/**
	 * Creates a new p5.Image. A p5.Image is a canvas backed representation of an
	 * image.
	 * <br><br>
	 * p5 can display .gif, .jpg and .png images. Images may be displayed
	 * in 2D and 3D space. Before an image is used, it must be loaded with the
	 * loadImage() function. The p5.Image class contains fields for the width and
	 * height of the image, as well as an array called pixels[] that contains the
	 * values for every pixel in the image.
	 * <br><br>
	 * The methods described below allow easy access to the image's pixels and
	 * alpha channel and simplify the process of compositing.
	 * <br><br>
	 * Before using the pixels[] array, be sure to use the loadPixels() method on
	 * the image to make sure that the pixel data is properly loaded.
	 *
	 * @class p5.Image
	 * @constructor
	 * @param {Number} width
	 * @param {Number} height
	 * @param {Object} pInst An instance of a p5 sketch.
	 */
	p5.Image = function(width, height){
	  /**
	   * Image width.
	   * @property width
	   * @example
	   * <div><code>
	   * var img;
	   * function preload() {
	   *   img = loadImage("assets/rockies.jpg");
	   * }
	   *
	   * function setup() {
	   *   createCanvas(100, 100);
	   *   image(img, 0, 0);
	   *   for (var i=0; i < img.width; i++) {
	   *     var c = img.get(i, img.height/2);
	   *     stroke(c);
	   *     line(i, height/2, i, height);
	   *   }
	   * }
	   * </code></div>
	   *
	   * @alt
	   * rocky mountains in top and horizontal lines in corresponding colors in bottom.
	   *
	   */
	  this.width = width;
	  /**
	   * Image height.
	   * @property height
	   * @example
	   * <div><code>
	   * var img;
	   * function preload() {
	   *   img = loadImage("assets/rockies.jpg");
	   * }
	   *
	   * function setup() {
	   *   createCanvas(100, 100);
	   *   image(img, 0, 0);
	   *   for (var i=0; i < img.height; i++) {
	   *     var c = img.get(img.width/2, i);
	   *     stroke(c);
	   *     line(0, i, width/2, i);
	   *   }
	   * }
	   * </code></div>
	   *
	   * @alt
	   * rocky mountains on right and vertical lines in corresponding colors on left.
	   *
	   */
	  this.height = height;
	  this.canvas = document.createElement('canvas');
	  this.canvas.width = this.width;
	  this.canvas.height = this.height;
	  this.drawingContext = this.canvas.getContext('2d');
	  this._pixelDensity = 1;
	  //used for webgl texturing only
	  this.isTexture = false;
	  /**
	   * Array containing the values for all the pixels in the display window.
	   * These values are numbers. This array is the size (include an appropriate
	   * factor for pixelDensity) of the display window x4,
	   * representing the R, G, B, A values in order for each pixel, moving from
	   * left to right across each row, then down each column. Retina and other
	   * high denisty displays may have more pixels[] (by a factor of
	   * pixelDensity^2).
	   * For example, if the image is 100x100 pixels, there will be 40,000. With
	   * pixelDensity = 2, there will be 160,000. The first four values
	   * (indices 0-3) in the array will be the R, G, B, A values of the pixel at
	   * (0, 0). The second four values (indices 4-7) will contain the R, G, B, A
	   * values of the pixel at (1, 0). More generally, to set values for a pixel
	   * at (x, y):
	   * <code><pre>var d = pixelDensity;
	   * for (var i = 0; i < d; i++) {
	   *   for (var j = 0; j < d; j++) {
	   *     // loop over
	   *     idx = 4*((y * d + j) * width * d + (x * d + i));
	   *     pixels[idx] = r;
	   *     pixels[idx+1] = g;
	   *     pixels[idx+2] = b;
	   *     pixels[idx+3] = a;
	   *   }
	   * }
	   * </pre></code>
	   * <br><br>
	   * Before accessing this array, the data must loaded with the loadPixels()
	   * function. After the array data has been modified, the updatePixels()
	   * function must be run to update the changes.
	   * @property pixels[]
	   * @example
	   * <div>
	   * <code>
	   * img = createImage(66, 66);
	   * img.loadPixels();
	   * for (i = 0; i < img.width; i++) {
	   *   for (j = 0; j < img.height; j++) {
	   *     img.set(i, j, color(0, 90, 102));
	   *   }
	   * }
	   * img.updatePixels();
	   * image(img, 17, 17);
	   * </code>
	   * </div>
	   * <div>
	   * <code>
	   * var pink = color(255, 102, 204);
	   * img = createImage(66, 66);
	   * img.loadPixels();
	   * for (var i = 0; i < 4*(width*height/2); i+=4) {
	   *   img.pixels[i] = red(pink);
	   *   img.pixels[i+1] = green(pink);
	   *   img.pixels[i+2] = blue(pink);
	   *   img.pixels[i+3] = alpha(pink);
	   * }
	   * img.updatePixels();
	   * image(img, 17, 17);
	   * </code>
	   * </div>
	   *
	   * @alt
	   * 66x66 turquoise rect in center of canvas
	   * 66x66 pink rect in center of canvas
	   *
	   */
	  this.pixels = [];
	};

	/**
	 * Helper fxn for sharing pixel methods
	 *
	 */
	p5.Image.prototype._setProperty = function (prop, value) {
	  this[prop] = value;
	};

	/**
	 * Loads the pixels data for this image into the [pixels] attribute.
	 *
	 * @method loadPixels
	 * @example
	 * <div><code>
	 * var myImage;
	 * var halfImage;
	 *
	 * function preload() {
	 *   myImage = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function setup() {
	 *   myImage.loadPixels();
	 *   halfImage = 4 * width * height/2;
	 *   for(var i = 0; i < halfImage; i++){
	 *     myImage.pixels[i+halfImage] = myImage.pixels[i];
	 *   }
	 *   myImage.updatePixels();
	 * }
	 *
	 * function draw() {
	 *   image(myImage, 0, 0);
	 * }
	 * </code></div>
	 *
	   * @alt
	   * 2 images of rocky mountains vertically stacked
	   *
	 */
	p5.Image.prototype.loadPixels = function(){
	  p5.Renderer2D.prototype.loadPixels.call(this);
	};

	/**
	 * Updates the backing canvas for this image with the contents of
	 * the [pixels] array.
	 *
	 * @method updatePixels
	 * @param {Integer|undefined} x x-offset of the target update area for the
	 *                              underlying canvas
	 * @param {Integer|undefined} y y-offset of the target update area for the
	 *                              underlying canvas
	 * @param {Integer|undefined} w height of the target update area for the
	 *                              underlying canvas
	 * @param {Integer|undefined} h height of the target update area for the
	 *                              underlying canvas
	 * @example
	 * <div><code>
	 * var myImage;
	 * var halfImage;
	 *
	 * function preload() {
	 *   myImage = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function setup() {
	 *   myImage.loadPixels();
	 *   halfImage = 4 * width * height/2;
	 *   for(var i = 0; i < halfImage; i++){
	 *     myImage.pixels[i+halfImage] = myImage.pixels[i];
	 *   }
	 *   myImage.updatePixels();
	 * }
	 *
	 * function draw() {
	 *   image(myImage, 0, 0);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 2 images of rocky mountains vertically stacked
	 *
	 */
	p5.Image.prototype.updatePixels = function(x, y, w, h){
	  p5.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);
	};

	/**
	 * Get a region of pixels from an image.
	 *
	 * If no params are passed, those whole image is returned,
	 * if x and y are the only params passed a single pixel is extracted
	 * if all params are passed a rectangle region is extracted and a p5.Image
	 * is returned.
	 *
	 * Returns undefined if the region is outside the bounds of the image
	 *
	 * @method get
	 * @param  {Number}               [x] x-coordinate of the pixel
	 * @param  {Number}               [y] y-coordinate of the pixel
	 * @param  {Number}               [w] width
	 * @param  {Number}               [h] height
	 * @return {Array/Color | p5.Image}     color of pixel at x,y in array format
	 *                                    [R, G, B, A] or p5.Image
	 * @example
	 * <div><code>
	 * var myImage;
	 * var c;
	 *
	 * function preload() {
	 *   myImage = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function setup() {
	 *   background(myImage);
	 *   noStroke();
	 *   c = myImage.get(60, 90);
	 *   fill(c);
	 *   rect(25, 25, 50, 50);
	 * }
	 *
	 * //get() returns color here
	 * </code></div>
	 *
	 * @alt
	 * image of rocky mountains with 50x50 green rect in front
	 *
	 */
	p5.Image.prototype.get = function(x, y, w, h){
	  return p5.Renderer2D.prototype.get.call(this, x, y, w, h);
	};

	/**
	 * Set the color of a single pixel or write an image into
	 * this p5.Image.
	 *
	 * Note that for a large number of pixels this will
	 * be slower than directly manipulating the pixels array
	 * and then calling updatePixels().
	 *
	 * @method set
	 * @param {Number}              x x-coordinate of the pixel
	 * @param {Number}              y y-coordinate of the pixel
	 * @param {Number|Array|Object}   a grayscale value | pixel array |
	 *                                a p5.Color | image to copy
	 * @example
	 * <div>
	 * <code>
	 * img = createImage(66, 66);
	 * img.loadPixels();
	 * for (i = 0; i < img.width; i++) {
	 *   for (j = 0; j < img.height; j++) {
	 *     img.set(i, j, color(0, 90, 102, i % img.width * 2));
	 *   }
	 * }
	 * img.updatePixels();
	 * image(img, 17, 17);
	 * image(img, 34, 34);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas
	 *
	 */
	p5.Image.prototype.set = function(x, y, imgOrCol){
	  p5.Renderer2D.prototype.set.call(this, x, y, imgOrCol);
	};

	/**
	 * Resize the image to a new width and height. To make the image scale
	 * proportionally, use 0 as the value for the wide or high parameter.
	 * For instance, to make the width of an image 150 pixels, and change
	 * the height using the same proportion, use resize(150, 0).
	 *
	 * @method resize
	 * @param {Number} width the resized image width
	 * @param {Number} height the resized image height
	 * @example
	 * <div><code>
	 * var img;
	 *
	 * function setup() {
	 *   img = loadImage("assets/rockies.jpg");
	 * }

	 * function draw() {
	 *   image(img, 0, 0);
	 * }
	 *
	 * function mousePressed() {
	 *   img.resize(50, 100);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * image of rocky mountains. zoomed in
	 *
	 */
	p5.Image.prototype.resize = function(width, height){

	  // Copy contents to a temporary canvas, resize the original
	  // and then copy back.
	  //
	  // There is a faster approach that involves just one copy and swapping the
	  // this.canvas reference. We could switch to that approach if (as i think
	  // is the case) there an expectation that the user would not hold a
	  // reference to the backing canvas of a p5.Image. But since we do not
	  // enforce that at the moment, I am leaving in the slower, but safer
	  // implementation.

	  // auto-resize
	  if (width === 0 && height === 0) {
	    width = this.canvas.width;
	    height = this.canvas.height;
	  } else if (width === 0) {
	    width = this.canvas.width * height / this.canvas.height;
	  } else if (height === 0) {
	    height = this.canvas.height * width / this.canvas.width;
	  }

	  width = Math.floor(width);
	  height = Math.floor(height);

	  var tempCanvas = document.createElement('canvas');
	  tempCanvas.width = width;
	  tempCanvas.height = height;
	  tempCanvas.getContext('2d').drawImage(this.canvas,
	    0, 0, this.canvas.width, this.canvas.height,
	    0, 0, tempCanvas.width, tempCanvas.height
	  );


	  // Resize the original canvas, which will clear its contents
	  this.canvas.width = this.width = width;
	  this.canvas.height = this.height = height;

	  //Copy the image back

	  this.drawingContext.drawImage(tempCanvas,
	    0, 0, width, height,
	    0, 0, width, height
	  );

	  if(this.pixels.length > 0){
	    this.loadPixels();
	  }
	};

	/**
	 * Copies a region of pixels from one image to another. If no
	 * srcImage is specified this is used as the source. If the source
	 * and destination regions aren't the same size, it will
	 * automatically resize source pixels to fit the specified
	 * target region.
	 *
	 * @method copy
	 * @param  {p5.Image|undefined} srcImage source image
	 * @param  {Integer} sx X coordinate of the source's upper left corner
	 * @param  {Integer} sy Y coordinate of the source's upper left corner
	 * @param  {Integer} sw source image width
	 * @param  {Integer} sh source image height
	 * @param  {Integer} dx X coordinate of the destination's upper left corner
	 * @param  {Integer} dy Y coordinate of the destination's upper left corner
	 * @param  {Integer} dw destination image width
	 * @param  {Integer} dh destination image height
	 * @example
	 * <div><code>
	 * var photo;
	 * var bricks;
	 * var x;
	 * var y;
	 *
	 * function preload() {
	 *   photo = loadImage("assets/rockies.jpg");
	 *   bricks = loadImage("assets/bricks.jpg");
	 * }
	 *
	 * function setup() {
	 *   x = bricks.width/2;
	 *   y = bricks.height/2;
	 *   photo.copy(bricks, 0, 0, x, y, 0, 0, x, y);
	 *   image(photo, 0, 0);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * image of rocky mountains and smaller image on top of bricks at top left
	 *
	 */
	p5.Image.prototype.copy = function () {
	  p5.prototype.copy.apply(this, arguments);
	};

	/**
	 * Masks part of an image from displaying by loading another
	 * image and using it's blue channel as an alpha channel for
	 * this image.
	 *
	 * @method mask
	 * @param {p5.Image} srcImage source image
	 * @example
	 * <div><code>
	 * var photo, maskImage;
	 * function preload() {
	 *   photo = loadImage("assets/rockies.jpg");
	 *   maskImage = loadImage("assets/mask2.png");
	 * }
	 *
	 * function setup() {
	 *   createCanvas(100, 100);
	 *   photo.mask(maskImage);
	 *   image(photo, 0, 0);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * image of rocky mountains with white at right
	 *
	 *
	 * http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/
	 *
	 */
	// TODO: - Accept an array of alpha values.
	//       - Use other channels of an image. p5 uses the
	//       blue channel (which feels kind of arbitrary). Note: at the
	//       moment this method does not match native processings original
	//       functionality exactly.
	p5.Image.prototype.mask = function(p5Image) {
	  if(p5Image === undefined){
	    p5Image = this;
	  }
	  var currBlend = this.drawingContext.globalCompositeOperation;

	  var scaleFactor = 1;
	  if (p5Image instanceof p5.Renderer) {
	    scaleFactor = p5Image._pInst._pixelDensity;
	  }

	  var copyArgs = [
	    p5Image,
	    0,
	    0,
	    scaleFactor*p5Image.width,
	    scaleFactor*p5Image.height,
	    0,
	    0,
	    this.width,
	    this.height
	  ];

	  this.drawingContext.globalCompositeOperation = 'destination-in';
	  p5.Image.prototype.copy.apply(this, copyArgs);
	  this.drawingContext.globalCompositeOperation = currBlend;
	};

	/**
	 * Applies an image filter to a p5.Image
	 *
	 * @method filter
	 * @param {String} operation one of threshold, gray, invert, posterize and
	 *                           opaque see Filters.js for docs on each available
	 *                           filter
	 * @param {Number|undefined} value
	 * @example
	 * <div><code>
	 * var photo1;
	 * var photo2;
	 *
	 * function preload() {
	 *   photo1 = loadImage("assets/rockies.jpg");
	 *   photo2 = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function setup() {
	 *   photo2.filter("gray");
	 *   image(photo1, 0, 0);
	 *   image(photo2, width/2, 0);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 2 images of rocky mountains left one in color, right in black and white
	 *
	 */
	p5.Image.prototype.filter = function(operation, value) {
	  Filters.apply(this.canvas, Filters[operation.toLowerCase()], value);
	};

	/**
	 * Copies a region of pixels from one image to another, using a specified
	 * blend mode to do the operation.
	 *
	 * @method blend
	 * @param  {p5.Image|undefined} srcImage source image
	 * @param  {Integer} sx X coordinate of the source's upper left corner
	 * @param  {Integer} sy Y coordinate of the source's upper left corner
	 * @param  {Integer} sw source image width
	 * @param  {Integer} sh source image height
	 * @param  {Integer} dx X coordinate of the destination's upper left corner
	 * @param  {Integer} dy Y coordinate of the destination's upper left corner
	 * @param  {Integer} dw destination image width
	 * @param  {Integer} dh destination image height
	 * @param  {Integer} blendMode the blend mode
	 *
	 * Available blend modes are: normal | multiply | screen | overlay |
	 *            darken | lighten | color-dodge | color-burn | hard-light |
	 *            soft-light | difference | exclusion | hue | saturation |
	 *            color | luminosity
	 *
	 *
	 * http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/
	 * @example
	 * <div><code>
	 * var mountains;
	 * var bricks;
	 *
	 * function preload() {
	 *   mountains = loadImage("assets/rockies.jpg");
	 *   bricks = loadImage("assets/bricks_third.jpg");
	 * }
	 *
	 * function setup() {
	 *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, ADD);
	 *   image(mountains, 0, 0);
	 *   image(bricks, 0, 0);
	 * }
	 * </code></div>
	 * <div><code>
	 * var mountains;
	 * var bricks;
	 *
	 * function preload() {
	 *   mountains = loadImage("assets/rockies.jpg");
	 *   bricks = loadImage("assets/bricks_third.jpg");
	 * }
	 *
	 * function setup() {
	 *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);
	 *   image(mountains, 0, 0);
	 *   image(bricks, 0, 0);
	 * }
	 * </code></div>
	 * <div><code>
	 * var mountains;
	 * var bricks;
	 *
	 * function preload() {
	 *   mountains = loadImage("assets/rockies.jpg");
	 *   bricks = loadImage("assets/bricks_third.jpg");
	 * }
	 *
	 * function setup() {
	 *   mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);
	 *   image(mountains, 0, 0);
	 *   image(bricks, 0, 0);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * image of rocky mountains. Brick images on left and right. Right overexposed
	 * image of rockies. Brickwall images on left and right. Right mortar transparent
	 * image of rockies. Brickwall images on left and right. Right translucent
	 *
	 */
	p5.Image.prototype.blend = function() {
	  p5.prototype.blend.apply(this, arguments);
	};

	/**
	 * Saves the image to a file and force the browser to download it.
	 * Accepts two strings for filename and file extension
	 * Supports png (default) and jpg.
	 *
	 * @method save
	 * @param {String} filename give your file a name
	 * @param  {String} extension 'png' or 'jpg'
	 * @example
	 * <div><code>
	 * var photo;
	 *
	 * function preload() {
	 *   photo = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function draw() {
	 *   image(photo, 0, 0);
	 * }
	 *
	 * function keyTyped() {
	 *   if (key == 's') {
	 *     photo.save("photo", "png");
	 *   }
	 * }
	 * </code></div>
	 *
	 * @alt
	 * image of rocky mountains.
	 *
	 */
	p5.Image.prototype.save = function(filename, extension) {
	  var mimeType;
	  if (!extension) {
	    extension = 'png';
	    mimeType = 'image/png';
	  }
	  else {
	    // en.wikipedia.org/wiki/Comparison_of_web_browsers#Image_format_support
	    switch(extension.toLowerCase()){
	      case 'png':
	        mimeType = 'image/png';
	        break;
	      case 'jpeg':
	        mimeType = 'image/jpeg';
	        break;
	      case 'jpg':
	        mimeType = 'image/jpeg';
	        break;
	      default:
	        mimeType = 'image/png';
	        break;
	    }
	  }
	  var downloadMime = 'image/octet-stream';
	  var imageData = this.canvas.toDataURL(mimeType);
	  imageData = imageData.replace(mimeType, downloadMime);

	  //Make the browser download the file
	  p5.prototype.downloadFile(imageData, filename, extension);
	};

	module.exports = p5.Image;
	},{"../core/core":37,"./filters":54}],58:[function(_dereq_,module,exports){
	/**
	 * @module Image
	 * @submodule Pixels
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var Filters = _dereq_('./filters');
	_dereq_('../color/p5.Color');

	/**
	 * <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference
	 * /Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a>
	 * containing the values for all the pixels in the display window.
	 * These values are numbers. This array is the size (include an appropriate
	 * factor for pixelDensity) of the display window x4,
	 * representing the R, G, B, A values in order for each pixel, moving from
	 * left to right across each row, then down each column. Retina and other
	 * high denisty displays will have more pixels[] (by a factor of
	 * pixelDensity^2).
	 * For example, if the image is 100x100 pixels, there will be 40,000. On a
	 * retina display, there will be 160,000.
	 * <br><br>
	 * The first four values (indices 0-3) in the array will be the R, G, B, A
	 * values of the pixel at (0, 0). The second four values (indices 4-7) will
	 * contain the R, G, B, A values of the pixel at (1, 0). More generally, to
	 * set values for a pixel at (x, y):
	 * <code><pre>
	 * var d = pixelDensity;
	 * for (var i = 0; i < d; i++) {
	 *   for (var j = 0; j < d; j++) {
	 *     // loop over
	 *     idx = 4 * ((y * d + j) * width * d + (x * d + i));
	 *     pixels[idx] = r;
	 *     pixels[idx+1] = g;
	 *     pixels[idx+2] = b;
	 *     pixels[idx+3] = a;
	 *   }
	 * }
	 * </pre></code>
	 *
	 * <p>While the above method is complex, it is flexible enough to work with
	 * any pixelDensity. Note that set() will automatically take care of
	 * setting all the appropriate values in pixels[] for a given (x, y) at
	 * any pixelDensity, but the performance may not be as fast when lots of
	 * modifications are made to the pixel array.
	 * <br><br>
	 * Before accessing this array, the data must loaded with the loadPixels()
	 * function. After the array data has been modified, the updatePixels()
	 * function must be run to update the changes.
	 * <br><br>
	 * Note that this is not a standard javascript array.  This means that
	 * standard javascript functions such as <code>slice()</code> or
	 * <code>arrayCopy()</code> do not
	 * work.</p>
	 *
	 * @property pixels[]
	 * @example
	 * <div>
	 * <code>
	 * var pink = color(255, 102, 204);
	 * loadPixels();
	 * var d = pixelDensity();
	 * var halfImage = 4 * (width * d) * (height/2 * d);
	 * for (var i = 0; i < halfImage; i+=4) {
	 *   pixels[i] = red(pink);
	 *   pixels[i+1] = green(pink);
	 *   pixels[i+2] = blue(pink);
	 *   pixels[i+3] = alpha(pink);
	 * }
	 * updatePixels();
	 * </code>
	 * </div>
	 *
	 * @alt
	 * top half of canvas pink, bottom grey
	 *
	 */
	p5.prototype.pixels = [];

	/**
	 * Copies a region of pixels from one image to another, using a specified
	 * blend mode to do the operation.<br><br>
	 * Available blend modes are: BLEND | DARKEST | LIGHTEST | DIFFERENCE |
	 * MULTIPLY| EXCLUSION | SCREEN | REPLACE | OVERLAY | HARD_LIGHT |
	 * SOFT_LIGHT | DODGE | BURN | ADD | NORMAL
	 *
	 *
	 * @method blend
	 * @param  {p5.Image|undefined} srcImage source image
	 * @param  {Integer} sx X coordinate of the source's upper left corner
	 * @param  {Integer} sy Y coordinate of the source's upper left corner
	 * @param  {Integer} sw source image width
	 * @param  {Integer} sh source image height
	 * @param  {Integer} dx X coordinate of the destination's upper left corner
	 * @param  {Integer} dy Y coordinate of the destination's upper left corner
	 * @param  {Integer} dw destination image width
	 * @param  {Integer} dh destination image height
	 * @param  {Integer} blendMode the blend mode
	 *
	 * @example
	 * <div><code>
	 * var img0;
	 * var img1;
	 *
	 * function preload() {
	 *   img0 = loadImage("assets/rockies.jpg");
	 *   img1 = loadImage("assets/bricks_third.jpg");
	 * }
	 *
	 * function setup() {
	 *   background(img0);
	 *   image(img1, 0, 0);
	 *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);
	 * }
	 * </code></div>
	 * <div><code>
	 * var img0;
	 * var img1;
	 *
	 * function preload() {
	 *   img0 = loadImage("assets/rockies.jpg");
	 *   img1 = loadImage("assets/bricks_third.jpg");
	 * }
	 *
	 * function setup() {
	 *   background(img0);
	 *   image(img1, 0, 0);
	 *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);
	 * }
	 * </code></div>
	 * <div><code>
	 * var img0;
	 * var img1;
	 *
	 * function preload() {
	 *   img0 = loadImage("assets/rockies.jpg");
	 *   img1 = loadImage("assets/bricks_third.jpg");
	 * }
	 *
	 * function setup() {
	 *   background(img0);
	 *   image(img1, 0, 0);
	 *   blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * image of rocky mountains. Brick images on left and right. Right overexposed
	 * image of rockies. Brickwall images on left and right. Right mortar transparent
	 * image of rockies. Brickwall images on left and right. Right translucent
	 *
	 *
	 */
	p5.prototype.blend = function() {
	  if (this._renderer) {
	    this._renderer.blend.apply(this._renderer, arguments);
	  } else {
	    p5.Renderer2D.prototype.blend.apply(this, arguments);
	  }
	};

	/**
	 * Copies a region of the canvas to another region of the canvas
	 * and copies a region of pixels from an image used as the srcImg parameter
	 * into the canvas srcImage is specified this is used as the source. If
	 * the source and destination regions aren't the same size, it will
	 * automatically resize source pixels to fit the specified
	 * target region.
	 *
	 * @method copy
	 * @param  {p5.Image|undefined} srcImage source image
	 * @param  {Integer} sx X coordinate of the source's upper left corner
	 * @param  {Integer} sy Y coordinate of the source's upper left corner
	 * @param  {Integer} sw source image width
	 * @param  {Integer} sh source image height
	 * @param  {Integer} dx X coordinate of the destination's upper left corner
	 * @param  {Integer} dy Y coordinate of the destination's upper left corner
	 * @param  {Integer} dw destination image width
	 * @param  {Integer} dh destination image height
	 *
	 * @example
	 * <div><code>
	 * var img;
	 *
	 * function preload() {
	 *   img = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function setup() {
	 *   background(img);
	 *   copy(img, 7, 22, 10, 10, 35, 25, 50, 50);
	 *   stroke(255);
	 *   noFill();
	 *   // Rectangle shows area being copied
	 *   rect(7, 22, 10, 10);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * image of rocky mountains. Brick images on left and right. Right overexposed
	 * image of rockies. Brickwall images on left and right. Right mortar transparent
	 * image of rockies. Brickwall images on left and right. Right translucent
	 *
	 */
	p5.prototype.copy = function () {
	  p5.Renderer2D._copyHelper.apply(this, arguments);
	};

	/**
	 * Applies a filter to the canvas.
	 * <br><br>
	 *
	 * The presets options are:
	 * <br><br>
	 *
	 * THRESHOLD
	 * Converts the image to black and white pixels depending if they are above or
	 * below the threshold defined by the level parameter. The parameter must be
	 * between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.
	 * <br><br>
	 *
	 * GRAY
	 * Converts any colors in the image to grayscale equivalents. No parameter
	 * is used.
	 * <br><br>
	 *
	 * OPAQUE
	 * Sets the alpha channel to entirely opaque. No parameter is used.
	 * <br><br>
	 *
	 * INVERT
	 * Sets each pixel to its inverse value. No parameter is used.
	 * <br><br>
	 *
	 * POSTERIZE
	 * Limits each channel of the image to the number of colors specified as the
	 * parameter. The parameter can be set to values between 2 and 255, but
	 * results are most noticeable in the lower ranges.
	 * <br><br>
	 *
	 * BLUR
	 * Executes a Guassian blur with the level parameter specifying the extent
	 * of the blurring. If no parameter is used, the blur is equivalent to
	 * Guassian blur of radius 1. Larger values increase the blur.
	 * <br><br>
	 *
	 * ERODE
	 * Reduces the light areas. No parameter is used.
	 * <br><br>
	 *
	 * DILATE
	 * Increases the light areas. No parameter is used.
	 *
	 * @method filter
	 * @param  {Constant} filterType
	 * @param  {Number} filterParam an optional parameter unique
	 *  to each filter, see above
	 *
	 *
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *  image(img, 0, 0);
	 *  filter(THRESHOLD);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *  image(img, 0, 0);
	 *  filter(GRAY);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *  image(img, 0, 0);
	 *  filter(OPAQUE);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *  image(img, 0, 0);
	 *  filter(INVERT);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *  image(img, 0, 0);
	 *  filter(POSTERIZE,3);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *  image(img, 0, 0);
	 *  filter(DILATE);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *  image(img, 0, 0);
	 *  filter(BLUR,3);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/bricks.jpg");
	 * }
	 * function setup() {
	 *  image(img, 0, 0);
	 *  filter(ERODE);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * black and white image of a brick wall.
	 * greyscale image of a brickwall
	 * image of a brickwall
	 * jade colored image of a brickwall
	 * red and pink image of a brickwall
	 * image of a brickwall
	 * blurry image of a brickwall
	 * image of a brickwall
	 * image of a brickwall with less detail
	 *
	 */
	p5.prototype.filter = function(operation, value) {
	  Filters.apply(this.canvas, Filters[operation.toLowerCase()], value);
	};

	/**
	 * Returns an array of [R,G,B,A] values for any pixel or grabs a section of
	 * an image. If no parameters are specified, the entire image is returned.
	 * Use the x and y parameters to get the value of one pixel. Get a section of
	 * the display window by specifying additional w and h parameters. When
	 * getting an image, the x and y parameters define the coordinates for the
	 * upper-left corner of the image, regardless of the current imageMode().
	 * <br><br>
	 * If the pixel requested is outside of the image window, [0,0,0,255] is
	 * returned. To get the numbers scaled according to the current color ranges
	 * and taking into account colorMode, use getColor instead of get.
	 * <br><br>
	 * Getting the color of a single pixel with get(x, y) is easy, but not as fast
	 * as grabbing the data directly from pixels[]. The equivalent statement to
	 * get(x, y) using pixels[] with pixel density d is
	 * <code>
	 * var off = (y * width + x) * d * 4;
	 * [pixels[off],
	 * pixels[off+1],
	 * pixels[off+2],
	 * pixels[off+3]]</code>
	 * <br><br>
	 * See the reference for pixels[] for more information.
	 *
	 * @method get
	 * @param  {Number}         [x] x-coordinate of the pixel
	 * @param  {Number}         [y] y-coordinate of the pixel
	 * @param  {Number}         [w] width
	 * @param  {Number}         [h] height
	 * @return {Array|p5.Image}     values of pixel at x,y in array format
	 *                              [R, G, B, A] or p5.Image
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/rockies.jpg");
	 * }
	 * function setup() {
	 *   image(img, 0, 0);
	 *   var c = get();
	 *   image(c, width/2, 0);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/rockies.jpg");
	 * }
	 * function setup() {
	 *   image(img, 0, 0);
	 *   var c = get(50, 90);
	 *   fill(c);
	 *   noStroke();
	 *   rect(25, 25, 50, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 2 images of the rocky mountains, side-by-side
	 * Image of the rocky mountains with 50x50 green rect in center of canvas
	 *
	 */
	p5.prototype.get = function(x, y, w, h){
	  return this._renderer.get(x, y, w, h);
	};

	/**
	 * Loads the pixel data for the display window into the pixels[] array. This
	 * function must always be called before reading from or writing to pixels[].
	 *
	 * @method loadPixels
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function setup() {
	 *   image(img, 0, 0);
	 *   var d = pixelDensity();
	 *   var halfImage = 4 * (img.width * d) *
	       (img.height/2 * d);
	 *   loadPixels();
	 *   for (var i = 0; i < halfImage; i++) {
	 *     pixels[i+halfImage] = pixels[i];
	 *   }
	 *   updatePixels();
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * two images of the rocky mountains. one on top, one on bottom of canvas.
	 *
	 */
	p5.prototype.loadPixels = function() {
	  this._renderer.loadPixels();
	};

	/**
	 * <p>Changes the color of any pixel, or writes an image directly to the
	 * display window.</p>
	 * <p>The x and y parameters specify the pixel to change and the c parameter
	 * specifies the color value. This can be a p5.Color object, or [R, G, B, A]
	 * pixel array. It can also be a single grayscale value.
	 * When setting an image, the x and y parameters define the coordinates for
	 * the upper-left corner of the image, regardless of the current imageMode().
	 * </p>
	 * <p>
	 * After using set(), you must call updatePixels() for your changes to
	 * appear.  This should be called once all pixels have been set.
	 * </p>
	 * <p>Setting the color of a single pixel with set(x, y) is easy, but not as
	 * fast as putting the data directly into pixels[]. Setting the pixels[]
	 * values directly may be complicated when working with a retina display,
	 * but will perform better when lots of pixels need to be set directly on
	 * every loop.</p>
	 * <p>See the reference for pixels[] for more information.</p>
	 *
	 * @method set
	 * @param {Number}              x x-coordinate of the pixel
	 * @param {Number}              y y-coordinate of the pixel
	 * @param {Number|Array|Object} c insert a grayscale value | a pixel array |
	 *                                a p5.Color object | a p5.Image to copy
	 * @example
	 * <div>
	 * <code>
	 * var black = color(0);
	 * set(30, 20, black);
	 * set(85, 20, black);
	 * set(85, 75, black);
	 * set(30, 75, black);
	 * updatePixels();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * for (var i = 30; i < width-15; i++) {
	 *   for (var j = 20; j < height-25; j++) {
	 *     var c = color(204-j, 153-i, 0);
	 *     set(i, j, c);
	 *   }
	 * }
	 * updatePixels();
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function setup() {
	 *   set(0, 0, img);
	 *   updatePixels();
	 *   line(0, 0, width, height);
	 *   line(0, height, width, 0);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 4 black points in the shape of a square middle-right of canvas.
	 * square with orangey-brown gradient lightening at bottom right.
	 * image of the rocky mountains. with lines like an 'x' through the center.
	 */
	p5.prototype.set = function (x, y, imgOrCol) {
	  this._renderer.set(x, y, imgOrCol);
	};
	/**
	 * Updates the display window with the data in the pixels[] array.
	 * Use in conjunction with loadPixels(). If you're only reading pixels from
	 * the array, there's no need to call updatePixels() â updating is only
	 * necessary to apply changes. updatePixels() should be called anytime the
	 * pixels array is manipulated or set() is called.
	 *
	 * @method updatePixels
	 * @param  {Number} [x]    x-coordinate of the upper-left corner of region
	 *                         to update
	 * @param  {Number} [y]    y-coordinate of the upper-left corner of region
	 *                         to update
	 * @param  {Number} [w]    width of region to update
	 * @param  {Number} [w]    height of region to update
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function preload() {
	 *   img = loadImage("assets/rockies.jpg");
	 * }
	 *
	 * function setup() {
	 *   image(img, 0, 0);
	 *   var halfImage = 4 * (img.width * pixelDensity()) *
	 *     (img.height * pixelDensity()/2);
	 *   loadPixels();
	 *   for (var i = 0; i < halfImage; i++) {
	 *     pixels[i+halfImage] = pixels[i];
	 *   }
	 *   updatePixels();
	 * }
	 * </code>
	 * </div>
	 * @alt
	 * two images of the rocky mountains. one on top, one on bottom of canvas.
	 */
	p5.prototype.updatePixels = function (x, y, w, h) {
	  // graceful fail - if loadPixels() or set() has not been called, pixel
	  // array will be empty, ignore call to updatePixels()
	  if (this.pixels.length === 0) {
	    return;
	  }
	  this._renderer.updatePixels(x, y, w, h);
	};

	module.exports = p5;

	},{"../color/p5.Color":31,"../core/core":37,"./filters":54}],59:[function(_dereq_,module,exports){
	/**
	 * @module IO
	 * @submodule Input
	 * @for p5
	 * @requires core
	 * @requires reqwest
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var reqwest = _dereq_('reqwest');
	var opentype = _dereq_('opentype.js');
	_dereq_('../core/error_helpers');

	/**
	 * Checks if we are in preload and returns the last arg which will be the
	 * _decrementPreload function if called from a loadX() function.  Should
	 * only be used in loadX() functions.
	 * @private
	 */
	p5._getDecrementPreload = function () {
	  var decrementPreload = arguments[arguments.length - 1];

	  // when in preload decrementPreload will always be the last arg as it is set
	  // with args.push() before invocation in _wrapPreload
	  if ((window.preload || (this && this.preload)) &&
	    typeof decrementPreload === 'function') {
	    return decrementPreload;
	  } else {
	    return null;
	  }
	};

	/**
	 * Loads an opentype font file (.otf, .ttf) from a file or a URL,
	 * and returns a PFont Object. This method is asynchronous,
	 * meaning it may not finish before the next line in your sketch
	 * is executed.
	 * <br><br>
	 * The path to the font should be relative to the HTML file
	 * that links in your sketch. Loading an from a URL or other
	 * remote location may be blocked due to your browser's built-in
	 * security.
	 *
	 * @method loadFont
	 * @param  {String}        path       name of the file or url to load
	 * @param  {Function}      [callback] function to be executed after
	 *                                    loadFont()
	 *                                    completes
	 * @return {Object}                   p5.Font object
	 * @example
	 *
	 * <p>Calling loadFont() inside preload() guarantees that the load
	 * operation will have completed before setup() and draw() are called.</p>
	 *
	 * <div><code>
	 * var myFont;
	 * function preload() {
	 *   myFont = loadFont('assets/AvenirNextLTPro-Demi.otf');
	 * }
	 *
	 * function setup() {
	 *   fill('#ED225D');
	 *   textFont(myFont);
	 *   textSize(36);
	 *   text('p5*js', 10, 50);
	 * }
	 * </code></div>
	 *
	 * Outside of preload(), you may supply a callback function to handle the
	 * object:
	 *
	 * <div><code>
	 * function setup() {
	 *   loadFont('assets/AvenirNextLTPro-Demi.otf', drawText);
	 * }
	 *
	 * function drawText(font) {
	 *   fill('#ED225D');
	 *   textFont(font, 36);
	 *   text('p5*js', 10, 50);
	 * }
	 *
	 * </code></div>
	 *
	 * <p>You can also use the string name of the font to style other HTML
	 * elements.</p>
	 *
	 * <div><code>
	 * var myFont;
	 *
	 * function preload() {
	 *   myFont = loadFont('assets/Avenir.otf');
	 * }
	 *
	 * function setup() {
	 *   var myDiv = createDiv('hello there');
	 *   myDiv.style('font-family', 'Avenir');
	 * }
	 * </code></div>
	 *
	 * @alt
	 * p5*js in p5's theme dark pink
	 * p5*js in p5's theme dark pink
	 *
	 */
	p5.prototype.loadFont = function (path, onSuccess, onError) {

	  var p5Font = new p5.Font(this);
	  var decrementPreload = p5._getDecrementPreload.apply(this, arguments);

	  opentype.load(path, function (err, font) {

	    if (err) {

	      if ((typeof onError !== 'undefined') && (onError !== decrementPreload)) {
	        return onError(err);
	      }
	      p5._friendlyFileLoadError(4, path);
	      console.error(err, path);
	      return;
	    }

	    p5Font.font = font;

	    if (typeof onSuccess !== 'undefined') {
	      onSuccess(p5Font);
	    }

	    if (decrementPreload && (onSuccess !== decrementPreload)) {
	      decrementPreload();
	    }

	    // check that we have an acceptable font type
	    var validFontTypes = [ 'ttf', 'otf', 'woff', 'woff2' ],
	      fileNoPath = path.split('\\').pop().split('/').pop(),
	      lastDotIdx = fileNoPath.lastIndexOf('.'), fontFamily, newStyle,
	      fileExt = lastDotIdx < 1 ? null : fileNoPath.substr(lastDotIdx + 1);

	    // if so, add it to the DOM (name-only) for use with p5.dom
	    if (validFontTypes.indexOf(fileExt) > -1) {

	      fontFamily = fileNoPath.substr(0, lastDotIdx);
	      newStyle = document.createElement('style');
	      newStyle.appendChild(document.createTextNode('\n@font-face {' +
	        '\nfont-family: ' + fontFamily + ';\nsrc: url(' + path + ');\n}\n'));
	      document.head.appendChild(newStyle);
	    }

	  });

	  return p5Font;
	};

	//BufferedReader
	p5.prototype.createInput = function () {
	  // TODO
	  throw 'not yet implemented';
	};

	p5.prototype.createReader = function () {
	  // TODO
	  throw 'not yet implemented';
	};

	p5.prototype.loadBytes = function () {
	  // TODO
	  throw 'not yet implemented';
	};

	/**
	 * Loads a JSON file from a file or a URL, and returns an Object or Array.
	 * This method is asynchronous, meaning it may not finish before the next
	 * line in your sketch is executed.
	 *
	 * @method loadJSON
	 * @param  {String}        path       name of the file or url to load
	 * @param  {Function}      [callback] function to be executed after
	 *                                    loadJSON() completes, data is passed
	 *                                    in as first argument
	 * @param  {Function}      [errorCallback] function to be executed if
	 *                                    there is an error, response is passed
	 *                                    in as first argument
	 * @param  {String}        [datatype] "json" or "jsonp"
	 * @return {Object|Array}             JSON data
	 * @example
	 *
	 * <p>Calling loadJSON() inside preload() guarantees to complete the
	 * operation before setup() and draw() are called.</p>
	 *
	 * <div><code>
	 * var weather;
	 * function preload() {
	 *   var url = 'http://api.openweathermap.org/data/2.5/weather?q=London,UK'+
	 *    '&APPID=7bbbb47522848e8b9c26ba35c226c734';
	 *   weather = loadJSON(url);
	 * }
	 *
	 * function setup() {
	 *   noLoop();
	 * }
	 *
	 * function draw() {
	 *   background(200);
	 *   // get the humidity value out of the loaded JSON
	 *   var humidity = weather.main.humidity;
	 *   fill(0, humidity); // use the humidity value to set the alpha
	 *   ellipse(width/2, height/2, 50, 50);
	 * }
	 * </code></div>
	 *
	 *
	 * <p>Outside of preload(), you may supply a callback function to handle the
	 * object:</p>
	 * <div><code>
	 * function setup() {
	 *   noLoop();
	 *   var url = 'http://api.openweathermap.org/data/2.5/weather?q=NewYork'+
	 *    '&APPID=7bbbb47522848e8b9c26ba35c226c734';
	 *   loadJSON(url, drawWeather);
	 * }
	 *
	 * function draw() {
	 *   background(200);
	 * }
	 *
	 * function drawWeather(weather) {
	 *   // get the humidity value out of the loaded JSON
	 *   var humidity = weather.main.humidity;
	 *   fill(0, humidity); // use the humidity value to set the alpha
	 *   ellipse(width/2, height/2, 50, 50);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 50x50 ellipse that changes from black to white depending on the current humidity
	 * 50x50 ellipse that changes from black to white depending on the current humidity
	 *
	 */
	p5.prototype.loadJSON = function () {
	  var path = arguments[0];
	  var callback = arguments[1];
	  var errorCallback;
	  var decrementPreload = p5._getDecrementPreload.apply(this, arguments);

	  var ret = {}; // object needed for preload
	  // assume jsonp for URLs
	  var t = 'json'; //= path.indexOf('http') === -1 ? 'json' : 'jsonp';

	  // check for explicit data type argument
	  for (var i = 2; i < arguments.length; i++) {
	    var arg = arguments[i];
	    if (typeof arg === 'string') {
	      if (arg === 'jsonp' || arg === 'json') {
	        t = arg;
	      }
	    } else if (typeof arg === 'function') {
	      errorCallback = arg;
	    }
	  }

	  reqwest({
	    url: path,
	    type: t,
	    crossOrigin: true,
	    error: function (resp) {
	      // pass to error callback if defined
	      if (errorCallback) {
	        errorCallback(resp);
	      } else { // otherwise log error msg
	        console.log(resp.statusText);
	      }
	    },
	    success: function (resp) {
	      for (var k in resp) {
	        ret[k] = resp[k];
	      }
	      if (typeof callback !== 'undefined') {
	        callback(resp);
	      }
	      if (decrementPreload && (callback !== decrementPreload)) {
	        decrementPreload();
	      }
	    }
	  });

	  return ret;
	};

	/**
	 * Reads the contents of a file and creates a String array of its individual
	 * lines. If the name of the file is used as the parameter, as in the above
	 * example, the file must be located in the sketch directory/folder.
	 * <br><br>
	 * Alternatively, the file maybe be loaded from anywhere on the local
	 * computer using an absolute path (something that starts with / on Unix and
	 * Linux, or a drive letter on Windows), or the filename parameter can be a
	 * URL for a file found on a network.
	 * <br><br>
	 * This method is asynchronous, meaning it may not finish before the next
	 * line in your sketch is executed.
	 *
	 * @method loadStrings
	 * @param  {String}   filename   name of the file or url to load
	 * @param  {Function} [callback] function to be executed after loadStrings()
	 *                               completes, Array is passed in as first
	 *                               argument
	 * @param  {Function} [errorCallback] function to be executed if
	 *                               there is an error, response is passed
	 *                               in as first argument
	 * @return {Array}               Array of Strings
	 * @example
	 *
	 * <p>Calling loadStrings() inside preload() guarantees to complete the
	 * operation before setup() and draw() are called.</p>
	 *
	 * <div><code>
	 * var result;
	 * function preload() {
	 *   result = loadStrings('assets/test.txt');
	 * }

	 * function setup() {
	 *   background(200);
	 *   var ind = floor(random(result.length));
	 *   text(result[ind], 10, 10, 80, 80);
	 * }
	 * </code></div>
	 *
	 * <p>Outside of preload(), you may supply a callback function to handle the
	 * object:</p>
	 *
	 * <div><code>
	 * function setup() {
	 *   loadStrings('assets/test.txt', pickString);
	 * }
	 *
	 * function pickString(result) {
	 *   background(200);
	 *   var ind = floor(random(result.length));
	 *   text(result[ind], 10, 10, 80, 80);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * randomly generated text from a file, for example "i smell like butter"
	 * randomly generated text from a file, for example "i have three feet"
	 *
	 */
	p5.prototype.loadStrings = function (path, callback, errorCallback) {
	  var ret = [];
	  var req = new XMLHttpRequest();
	  var decrementPreload = p5._getDecrementPreload.apply(this, arguments);

	  req.addEventListener('error', function (resp) {
	    if (errorCallback) {
	      errorCallback(resp);
	    } else {
	      console.log(resp.responseText);
	    }
	  });

	  req.open('GET', path, true);
	  req.onreadystatechange = function () {
	    if (req.readyState === 4) {
	      if (req.status === 200) {
	        var arr = req.responseText.match(/[^\r\n]+/g);
	        for (var k in arr) {
	          ret[k] = arr[k];
	        }
	        if (typeof callback !== 'undefined') {
	          callback(ret);
	        }
	        if (decrementPreload && (callback !== decrementPreload)) {
	          decrementPreload();
	        }
	      } else {
	        if (errorCallback) {
	          errorCallback(req);
	        } else {
	          console.log(req.statusText);
	        }
	        //p5._friendlyFileLoadError(3, path);
	      }
	    }
	  };
	  req.send(null);
	  return ret;
	};

	/**
	 * <p>Reads the contents of a file or URL and creates a p5.Table object with
	 * its values. If a file is specified, it must be located in the sketch's
	 * "data" folder. The filename parameter can also be a URL to a file found
	 * online. By default, the file is assumed to be comma-separated (in CSV
	 * format). Table only looks for a header row if the 'header' option is
	 * included.</p>
	 *
	 * <p>Possible options include:
	 * <ul>
	 * <li>csv - parse the table as comma-separated values</li>
	 * <li>tsv - parse the table as tab-separated values</li>
	 * <li>header - this table has a header (title) row</li>
	 * </ul>
	 * </p>
	 *
	 * <p>When passing in multiple options, pass them in as separate parameters,
	 * seperated by commas. For example:
	 * <br><br>
	 * <code>
	 *   loadTable("my_csv_file.csv", "csv", "header")
	 * </code>
	 * </p>
	 *
	 * <p> All files loaded and saved use UTF-8 encoding.</p>
	 *
	 * <p>This method is asynchronous, meaning it may not finish before the next
	 * line in your sketch is executed. Calling loadTable() inside preload()
	 * guarantees to complete the operation before setup() and draw() are called.
	 * <p>Outside of preload(), you may supply a callback function to handle the
	 * object:</p>
	 * </p>
	 *
	 * @method loadTable
	 * @param  {String}         filename   name of the file or URL to load
	 * @param  {String|Strings} [options]  "header" "csv" "tsv"
	 * @param  {Function}       [callback] function to be executed after
	 *                                     loadTable() completes. On success, the
	 *                                     Table object is passed in as the
	 *                                     first argument; otherwise, false
	 *                                     is passed in.
	 * @return {Object}                    Table object containing data
	 *
	 * @example
	 * <div class="norender">
	 * <code>
	 * // Given the following CSV file called "mammals.csv"
	 * // located in the project's "assets" folder:
	 * //
	 * // id,species,name
	 * // 0,Capra hircus,Goat
	 * // 1,Panthera pardus,Leopard
	 * // 2,Equus zebra,Zebra
	 *
	 * var table;
	 *
	 * function preload() {
	 *   //my table is comma separated value "csv"
	 *   //and has a header specifying the columns labels
	 *   table = loadTable("assets/mammals.csv", "csv", "header");
	 *   //the file can be remote
	 *   //table = loadTable("http://p5js.org/reference/assets/mammals.csv",
	 *   //                  "csv", "header");
	 * }
	 *
	 * function setup() {
	 *   //count the columns
	 *   print(table.getRowCount() + " total rows in table");
	 *   print(table.getColumnCount() + " total columns in table");
	 *
	 *   print(table.getColumn("name"));
	 *   //["Goat", "Leopard", "Zebra"]
	 *
	 *   //cycle through the table
	 *   for (var r = 0; r < table.getRowCount(); r++)
	 *     for (var c = 0; c < table.getColumnCount(); c++) {
	 *       print(table.getString(r, c));
	 *     }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * randomly generated text from a file, for example "i smell like butter"
	 * randomly generated text from a file, for example "i have three feet"
	 *
	 */
	p5.prototype.loadTable = function (path) {
	  var callback = null;
	  var options = [];
	  var header = false;
	  var sep = ',';
	  var separatorSet = false;
	  var decrementPreload = p5._getDecrementPreload.apply(this, arguments);

	  for (var i = 1; i < arguments.length; i++) {
	    if ((typeof (arguments[i]) === 'function') &&
	      (arguments[i] !== decrementPreload)) {
	      callback = arguments[i];
	    } else if (typeof (arguments[i]) === 'string') {
	      options.push(arguments[i]);
	      if (arguments[i] === 'header') {
	        header = true;
	      }
	      if (arguments[i] === 'csv') {
	        if (separatorSet) {
	          throw new Error('Cannot set multiple separator types.');
	        } else {
	          sep = ',';
	          separatorSet = true;
	        }
	      } else if (arguments[i] === 'tsv') {
	        if (separatorSet) {
	          throw new Error('Cannot set multiple separator types.');
	        } else {
	          sep = '\t';
	          separatorSet = true;
	        }
	      }
	    }
	  }

	  var t = new p5.Table();
	  reqwest({
	      url: path,
	      crossOrigin: true,
	      type: 'csv'
	    })
	    .then(function (resp) {
	      resp = resp.responseText;

	      var state = {};

	      // define constants
	      var PRE_TOKEN = 0,
	        MID_TOKEN = 1,
	        POST_TOKEN = 2,
	        POST_RECORD = 4;

	      var QUOTE = '\"',
	        CR = '\r',
	        LF = '\n';

	      var records = [];
	      var offset = 0;
	      var currentRecord = null;
	      var currentChar;

	      var recordBegin = function () {
	        state.escaped = false;
	        currentRecord = [];
	        tokenBegin();
	      };

	      var recordEnd = function () {
	        state.currentState = POST_RECORD;
	        records.push(currentRecord);
	        currentRecord = null;
	      };

	      var tokenBegin = function () {
	        state.currentState = PRE_TOKEN;
	        state.token = '';
	      };

	      var tokenEnd = function () {
	        currentRecord.push(state.token);
	        tokenBegin();
	      };

	      while (true) {
	        currentChar = resp[offset++];

	        // EOF
	        if (currentChar == null) {
	          if (state.escaped) {
	            throw new Error('Unclosed quote in file.');
	          }
	          if (currentRecord) {
	            tokenEnd();
	            recordEnd();
	            break;
	          }
	        }
	        if (currentRecord === null) {
	          recordBegin();
	        }

	        // Handle opening quote
	        if (state.currentState === PRE_TOKEN) {
	          if (currentChar === QUOTE) {
	            state.escaped = true;
	            state.currentState = MID_TOKEN;
	            continue;
	          }
	          state.currentState = MID_TOKEN;
	        }

	        // mid-token and escaped, look for sequences and end quote
	        if (state.currentState === MID_TOKEN && state.escaped) {
	          if (currentChar === QUOTE) {
	            if (resp[offset] === QUOTE) {
	              state.token += QUOTE;
	              offset++;
	            } else {
	              state.escaped = false;
	              state.currentState = POST_TOKEN;
	            }
	          } else {
	            state.token += currentChar;
	          }
	          continue;
	        }

	        // fall-through: mid-token or post-token, not escaped
	        if (currentChar === CR) {
	          if (resp[offset] === LF) {
	            offset++;
	          }
	          tokenEnd();
	          recordEnd();
	        } else if (currentChar === LF) {
	          tokenEnd();
	          recordEnd();
	        } else if (currentChar === sep) {
	          tokenEnd();
	        } else if (state.currentState === MID_TOKEN) {
	          state.token += currentChar;
	        }
	      }

	      // set up column names
	      if (header) {
	        t.columns = records.shift();
	      } else {
	        for (i = 0; i < records[0].length; i++) {
	          t.columns[i] = 'null';
	        }
	      }
	      var row;
	      for (i = 0; i < records.length; i++) {
	        //Handles row of 'undefined' at end of some CSVs
	        if (i === records.length - 1 && records[i].length === 1) {
	          if (records[i][0] === 'undefined') {
	            break;
	          }
	        }
	        row = new p5.TableRow();
	        row.arr = records[i];
	        row.obj = makeObject(records[i], t.columns);
	        t.addRow(row);
	      }
	      if (callback !== null) {
	        callback(t);
	      }
	      if (decrementPreload && (callback !== decrementPreload)) {
	        decrementPreload();
	      }
	    })
	    .fail(function (err, msg) {
	      p5._friendlyFileLoadError(2, path);
	      // don't get error callback mixed up with decrementPreload
	      if ((typeof callback === 'function') &&
	        (callback !== decrementPreload)) {
	        callback(false);
	      }
	    });

	  return t;
	};

	// helper function to turn a row into a JSON object
	function makeObject(row, headers) {
	  var ret = {};
	  headers = headers || [];
	  if (typeof (headers) === 'undefined') {
	    for (var j = 0; j < row.length; j++) {
	      headers[j.toString()] = j;
	    }
	  }
	  for (var i = 0; i < headers.length; i++) {
	    var key = headers[i];
	    var val = row[i];
	    ret[key] = val;
	  }
	  return ret;
	}

	/*global parseXML */
	p5.prototype.parseXML = function (two) {
	  var one = new p5.XML();
	  var i;
	  if (two.children.length) {
	    for ( i = 0; i < two.children.length; i++ ) {
	      var node = parseXML(two.children[i]);
	      one.addChild(node);
	    }
	    one.setName(two.nodeName);
	    one._setCont(two.textContent);
	    one._setAttributes(two);
	    for (var j = 0; j < one.children.length; j++) {
	      one.children[j].parent = one;
	    }
	    return one;
	  }
	  else {
	    one.setName(two.nodeName);
	    one._setCont(two.textContent);
	    one._setAttributes(two);
	    return one;
	  }
	};

	/**
	 * Reads the contents of a file and creates an XML object with its values.
	 * If the name of the file is used as the parameter, as in the above example,
	 * the file must be located in the sketch directory/folder.
	 *
	 * Alternatively, the file maybe be loaded from anywhere on the local
	 * computer using an absolute path (something that starts with / on Unix and
	 * Linux, or a drive letter on Windows), or the filename parameter can be a
	 * URL for a file found on a network.
	 *
	 * This method is asynchronous, meaning it may not finish before the next
	 * line in your sketch is executed. Calling loadXML() inside preload()
	 * guarantees to complete the operation before setup() and draw() are called.
	 *
	 * <p>Outside of preload(), you may supply a callback function to handle the
	 * object:</p>
	 *
	 * @method loadXML
	 * @param  {String}   filename   name of the file or URL to load
	 * @param  {Function} [callback] function to be executed after loadXML()
	 *                               completes, XML object is passed in as
	 *                               first argument
	 * @param  {Function} [errorCallback] function to be executed if
	 *                               there is an error, response is passed
	 *                               in as first argument
	 * @return {Object}              XML object containing data
	 */
	p5.prototype.loadXML = function (path, callback, errorCallback) {
	  var ret = {};
	  var decrementPreload = p5._getDecrementPreload.apply(this, arguments);
	  reqwest({
	      url: path,
	      type: 'xml',
	      crossOrigin: true,
	      error: function (resp) {
	        // pass to error callback if defined
	        if (errorCallback) {
	          errorCallback(resp);
	        } else { // otherwise log error msg
	          console.log(resp.statusText);
	        }
	        //p5._friendlyFileLoadError(1,path);
	      }
	    })
	    .then(function (resp) {
	      var xml = parseXML(resp.documentElement);
	      for(var key in xml) {
	        ret[key] = xml[key];
	      }
	      if (typeof callback !== 'undefined') {
	        callback(ret);
	      }
	      if (decrementPreload && (callback !== decrementPreload)) {
	        decrementPreload();
	      }
	    });
	  return ret;
	};

	// name clash with window.open
	// p5.prototype.open = function() {
	//   // TODO

	// };

	p5.prototype.selectFolder = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	p5.prototype.selectInput = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	/**
	 * Method for executing an HTTP GET request. If data type is not specified,
	 * p5 will try to guess based on the URL, defaulting to text.
	 *
	 * @method httpGet
	 * @param  {String}        path       name of the file or url to load
	 * @param  {Object}        [data]     param data passed sent with request
	 * @param  {String}        [datatype] "json", "jsonp", "xml", or "text"
	 * @param  {Function}      [callback] function to be executed after
	 *                                    httpGet() completes, data is passed in
	 *                                    as first argument
	 * @param  {Function}      [errorCallback] function to be executed if
	 *                                    there is an error, response is passed
	 *                                    in as first argument
	 */
	p5.prototype.httpGet = function () {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  args.push('GET');
	  p5.prototype.httpDo.apply(this, args);
	};

	/**
	 * Method for executing an HTTP POST request. If data type is not specified,
	 * p5 will try to guess based on the URL, defaulting to text.
	 *
	 * @method httpPost
	 * @param  {String}        path       name of the file or url to load
	 * @param  {Object}        [data]     param data passed sent with request
	 * @param  {String}        [datatype] "json", "jsonp", "xml", or "text"
	 * @param  {Function}      [callback] function to be executed after
	 *                                    httpGet() completes, data is passed in
	 *                                    as first argument
	 * @param  {Function}      [errorCallback] function to be executed if
	 *                                    there is an error, response is passed
	 *                                    in as first argument
	 */
	p5.prototype.httpPost = function () {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  args.push('POST');
	  p5.prototype.httpDo.apply(this, args);
	};

	/**
	 * Method for executing an HTTP request. If data type is not specified,
	 * p5 will try to guess based on the URL, defaulting to text.<br><br>
	 * You may also pass a single object specifying all parameters for the
	 * request following the examples inside the reqwest() calls here:
	 * <a href='https://github.com/ded/reqwest#api'>
	 * https://github.com/ded/reqwest#api</a>
	 *
	 * @method httpDo
	 * @param  {String}        path       name of the file or url to load
	 * @param  {String}        [method]   either "GET", "POST", or "PUT",
	 *                                    defaults to "GET"
	 * @param  {Object}        [data]     param data passed sent with request
	 * @param  {String}        [datatype] "json", "jsonp", "xml", or "text"
	 * @param  {Function}      [callback] function to be executed after
	 *                                    httpGet() completes, data is passed in
	 *                                    as first argument
	 * @param  {Function}      [errorCallback] function to be executed if
	 *                                    there is an error, response is passed
	 *                                    in as first argument
	 */
	p5.prototype.httpDo = function () {
	  if (typeof arguments[0] === 'object') {
	    reqwest(arguments[0]);
	  } else {
	    var method = 'GET';
	    var path = arguments[0];
	    var data = {};
	    var type = '';
	    var callback;
	    var errorCallback;

	    for (var i = 1; i < arguments.length; i++) {
	      var a = arguments[i];
	      if (typeof a === 'string') {
	        if (a === 'GET' || a === 'POST' || a === 'PUT' || a === 'DELETE') {
	          method = a;
	        } else {
	          type = a;
	        }
	      } else if (typeof a === 'object') {
	        data = a;
	      } else if (typeof a === 'function') {
	        if (!callback) {
	          callback = a;
	        } else {
	          errorCallback = a;
	        }
	      }
	    }

	    // do some sort of smart type checking
	    if (type === '') {
	      if (path.indexOf('json') !== -1) {
	        type = 'json';
	      } else if (path.indexOf('xml') !== -1) {
	        type = 'xml';
	      } else {
	        type = 'text';
	      }
	    }

	    reqwest({
	      url: path,
	      method: method,
	      data: data,
	      type: type,
	      crossOrigin: true,
	      success: function (resp) {
	        if (typeof callback !== 'undefined') {
	          if (type === 'text') {
	            callback(resp.response);
	          } else {
	            callback(resp);
	          }
	        }
	      },
	      error: function (resp) {
	        if (errorCallback) {
	          errorCallback(resp);
	        } else {
	          console.log(resp.statusText);
	        }
	      }
	    });
	  }
	};

	/**
	 * @module IO
	 * @submodule Output
	 * @for p5
	 */

	window.URL = window.URL || window.webkitURL;

	// private array of p5.PrintWriter objects
	p5.prototype._pWriters = [];

	p5.prototype.beginRaw = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	p5.prototype.beginRecord = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	p5.prototype.createOutput = function () {
	  // TODO

	  throw 'not yet implemented';
	};

	p5.prototype.createWriter = function (name, extension) {
	  var newPW;
	  // check that it doesn't already exist
	  for (var i in p5.prototype._pWriters) {
	    if (p5.prototype._pWriters[i].name === name) {
	      // if a p5.PrintWriter w/ this name already exists...
	      // return p5.prototype._pWriters[i]; // return it w/ contents intact.
	      // or, could return a new, empty one with a unique name:
	      newPW = new p5.PrintWriter(name + window.millis(), extension);
	      p5.prototype._pWriters.push(newPW);
	      return newPW;
	    }
	  }
	  newPW = new p5.PrintWriter(name, extension);
	  p5.prototype._pWriters.push(newPW);
	  return newPW;
	};

	p5.prototype.endRaw = function () {
	  // TODO

	  throw 'not yet implemented';
	};

	p5.prototype.endRecord = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	p5.PrintWriter = function (filename, extension) {
	  var self = this;
	  this.name = filename;
	  this.content = '';
	  this.print = function (data) {
	    this.content += data;
	  };
	  this.print = function (data) {
	    this.content += data + '\n';
	  };
	  this.flush = function () {
	    this.content = '';
	  };
	  this.close = function () {
	    // convert String to Array for the writeFile Blob
	    var arr = [];
	    arr.push(this.content);
	    p5.prototype.writeFile(arr, filename, extension);
	    // remove from _pWriters array and delete self
	    for (var i in p5.prototype._pWriters) {
	      if (p5.prototype._pWriters[i].name === this.name) {
	        // remove from _pWriters array
	        p5.prototype._pWriters.splice(i, 1);
	      }
	    }
	    self.flush();
	    self = {};
	  };
	};

	p5.prototype.saveBytes = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	// object, filename, options --> saveJSON, saveStrings, saveTable
	// filename, [extension] [canvas] --> saveImage

	/**
	 *  <p>Save an image, text, json, csv, wav, or html. Prompts download to
	 *  the client's computer. <b>Note that it is not recommended to call save()
	 *  within draw if it's looping, as the save() function will open a new save
	 *  dialog every frame.</b></p>
	 *  <p>The default behavior is to save the canvas as an image. You can
	 *  optionally specify a filename.
	 *  For example:</p>
	 *  <pre class='language-javascript'><code>
	 *  save();
	 *  save('myCanvas.jpg'); // save a specific canvas with a filename
	 *  </code></pre>
	 *
	 *  <p>Alternately, the first parameter can be a pointer to a canvas
	 *  p5.Element, an Array of Strings,
	 *  an Array of JSON, a JSON object, a p5.Table, a p5.Image, or a
	 *  p5.SoundFile (requires p5.sound). The second parameter is a filename
	 *  (including extension). The third parameter is for options specific
	 *  to this type of object. This method will save a file that fits the
	 *  given paramaters. For example:</p>
	 *
	 *  <pre class='language-javascript'><code>
	 *
	 *  save('myCanvas.jpg');           // Saves canvas as an image
	 *
	 *  var cnv = createCanvas(100, 100);
	 *  save(cnv, 'myCanvas.jpg');      // Saves canvas as an image
	 *
	 *  var gb = createGraphics(100, 100);
	 *  save(gb, 'myGraphics.jpg');      // Saves p5.Renderer object as an image
	 *
	 *  save(myTable, 'myTable.html');  // Saves table as html file
	 *  save(myTable, 'myTable.csv',);  // Comma Separated Values
	 *  save(myTable, 'myTable.tsv');   // Tab Separated Values
	 *
	 *  save(myJSON, 'my.json');        // Saves pretty JSON
	 *  save(myJSON, 'my.json', true);  // Optimizes JSON filesize
	 *
	 *  save(img, 'my.png');            // Saves pImage as a png image
	 *
	 *  save(arrayOfStrings, 'my.txt'); // Saves strings to a text file with line
	 *                                  // breaks after each item in the array
	 *  </code></pre>
	 *
	 *  @method save
	 *  @param  {[Object|String]} objectOrFilename  If filename is provided, will
	 *                                             save canvas as an image with
	 *                                             either png or jpg extension
	 *                                             depending on the filename.
	 *                                             If object is provided, will
	 *                                             save depending on the object
	 *                                             and filename (see examples
	 *                                             above).
	 *  @param  {[String]} filename If an object is provided as the first
	 *                               parameter, then the second parameter
	 *                               indicates the filename,
	 *                               and should include an appropriate
	 *                               file extension (see examples above).
	 *  @param  {[Boolean/String]} options  Additional options depend on
	 *                            filetype. For example, when saving JSON,
	 *                            <code>true</code> indicates that the
	 *                            output will be optimized for filesize,
	 *                            rather than readability.
	 */
	p5.prototype.save = function (object, _filename, _options) {
	  // parse the arguments and figure out which things we are saving
	  var args = arguments;
	  // =================================================
	  // OPTION 1: saveCanvas...

	  // if no arguments are provided, save canvas
	  var cnv = this._curElement.elt;
	  if (args.length === 0) {
	    p5.prototype.saveCanvas(cnv);
	    return;
	  }
	  // otherwise, parse the arguments

	  // if first param is a p5Graphics, then saveCanvas
	  else if (args[0] instanceof p5.Renderer ||
	    args[0] instanceof p5.Graphics) {
	    p5.prototype.saveCanvas(args[0].elt, args[1], args[2]);
	    return;
	  }

	  // if 1st param is String and only one arg, assume it is canvas filename
	  else if (args.length === 1 && typeof (args[0]) === 'string') {
	    p5.prototype.saveCanvas(cnv, args[0]);
	  }

	  // =================================================
	  // OPTION 2: extension clarifies saveStrings vs. saveJSON
	  else {
	    var extension = _checkFileExtension(args[1], args[2])[1];
	    switch (extension) {
	      case 'json':
	        p5.prototype.saveJSON(args[0], args[1], args[2]);
	        return;
	      case 'txt':
	        p5.prototype.saveStrings(args[0], args[1], args[2]);
	        return;
	        // =================================================
	        // OPTION 3: decide based on object...
	      default:
	        if (args[0] instanceof Array) {
	          p5.prototype.saveStrings(args[0], args[1], args[2]);
	        } else if (args[0] instanceof p5.Table) {
	          p5.prototype.saveTable(args[0], args[1], args[2], args[3]);
	        } else if (args[0] instanceof p5.Image) {
	          p5.prototype.saveCanvas(args[0].canvas, args[1]);
	        } else if (args[0] instanceof p5.SoundFile) {
	          p5.prototype.saveSound(args[0], args[1], args[2], args[3]);
	        }
	    }
	  }
	};

	/**
	 *  Writes the contents of an Array or a JSON object to a .json file.
	 *  The file saving process and location of the saved file will
	 *  vary between web browsers.
	 *
	 *  @method saveJSON
	 *  @param  {Array|Object} json
	 *  @param  {String} filename
	 *  @param  {Boolean} [optimize]   If true, removes line breaks
	 *                                 and spaces from the output
	 *                                 file to optimize filesize
	 *                                 (but not readability).
	 *  @example
	 *  <div><code>
	 *  var json;
	 *
	 *  function setup() {
	 *
	 *    json = {}; // new JSON Object
	 *
	 *    json.id = 0;
	 *    json.species = 'Panthera leo';
	 *    json.name = 'Lion';
	 *
	 *  // To save, un-comment the line below, then click 'run'
	 *  // saveJSON(json, 'lion.json');
	 *  }
	 *
	 *  // Saves the following to a file called "lion.json":
	 *  // {
	 *  //   "id": 0,
	 *  //   "species": "Panthera leo",
	 *  //   "name": "Lion"
	 *  // }
	 *  </div></code>
	 *
	 * @alt
	 * no image displayed
	 *
	 */
	p5.prototype.saveJSON = function (json, filename, opt) {
	  var stringify;
	  if (opt) {
	    stringify = JSON.stringify(json);
	  } else {
	    stringify = JSON.stringify(json, undefined, 2);
	  }
	  console.log(stringify);
	  this.saveStrings(stringify.split('\n'), filename, 'json');
	};

	p5.prototype.saveJSONObject = p5.prototype.saveJSON;
	p5.prototype.saveJSONArray = p5.prototype.saveJSON;

	p5.prototype.saveStream = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	/**
	 *  Writes an array of Strings to a text file, one line per String.
	 *  The file saving process and location of the saved file will
	 *  vary between web browsers.
	 *
	 *  @method saveStrings
	 *  @param  {Array} list      string array to be written
	 *  @param  {String} filename filename for output
	 *  @example
	 *  <div><code>
	 *  var words = 'apple bear cat dog';
	 *
	 *  // .split() outputs an Array
	 *  var list = split(words, ' ');
	 *
	 *  // To save the file, un-comment next line and click 'run'
	 *  // saveStrings(list, 'nouns.txt');
	 *
	 *  // Saves the following to a file called 'nouns.txt':
	 *  //
	 *  // apple
	 *  // bear
	 *  // cat
	 *  // dog
	 *  </code></div>
	 *
	 * @alt
	 * no image displayed
	 *
	 */
	p5.prototype.saveStrings = function (list, filename, extension) {
	  var ext = extension || 'txt';
	  var pWriter = this.createWriter(filename, ext);
	  for (var i = 0; i < list.length; i++) {
	    if (i < list.length - 1) {
	      pWriter.print(list[i]);
	    } else {
	      pWriter.print(list[i]);
	    }
	  }
	  pWriter.close();
	  pWriter.flush();
	};

	p5.prototype.saveXML = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	p5.prototype.selectOutput = function () {
	  // TODO
	  throw 'not yet implemented';

	};

	// =======
	// HELPERS
	// =======

	function escapeHelper(content) {
	  return content
	    .replace(/&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#039;');
	}

	/**
	 *  Writes the contents of a Table object to a file. Defaults to a
	 *  text file with comma-separated-values ('csv') but can also
	 *  use tab separation ('tsv'), or generate an HTML table ('html').
	 *  The file saving process and location of the saved file will
	 *  vary between web browsers.
	 *
	 *  @method saveTable
	 *  @param  {p5.Table} Table  the Table object to save to a file
	 *  @param  {String} filename the filename to which the Table should be saved
	 *  @param  {String} [options]  can be one of "tsv", "csv", or "html"
	 *  @example
	 *  <div><code>
	 *  var table;
	 *
	 *  function setup() {
	 *    table = new p5.Table();
	 *
	 *    table.addColumn('id');
	 *    table.addColumn('species');
	 *    table.addColumn('name');
	 *
	 *    var newRow = table.addRow();
	 *    newRow.setNum('id', table.getRowCount() - 1);
	 *    newRow.setString('species', 'Panthera leo');
	 *    newRow.setString('name', 'Lion');
	 *
	 *    // To save, un-comment next line then click 'run'
	 *    // saveTable(table, 'new.csv');
	 *    }
	 *
	 *    // Saves the following to a file called 'new.csv':
	 *    // id,species,name
	 *    // 0,Panthera leo,Lion
	 *  </code></div>
	 *
	 * @alt
	 * no image displayed
	 *
	 */
	p5.prototype.saveTable = function (table, filename, options) {
	  var pWriter = this.createWriter(filename, options);

	  var header = table.columns;

	  var sep = ','; // default to CSV
	  if (options === 'tsv') {
	    sep = '\t';
	  }
	  if (options !== 'html') {
	    // make header if it has values
	    if (header[0] !== '0') {
	      for (var h = 0; h < header.length; h++) {
	        if (h < header.length - 1) {
	          pWriter.print(header[h] + sep);
	        } else {
	          pWriter.print(header[h]);
	        }
	      }
	    }

	    // make rows
	    for (var i = 0; i < table.rows.length; i++) {
	      var j;
	      for (j = 0; j < table.rows[i].arr.length; j++) {
	        if (j < table.rows[i].arr.length - 1) {
	          pWriter.print(table.rows[i].arr[j] + sep);
	        } else if (i < table.rows.length - 1) {
	          pWriter.print(table.rows[i].arr[j]);
	        } else {
	          pWriter.print(table.rows[i].arr[j]); // no line break
	        }
	      }
	    }
	  }

	  // otherwise, make HTML
	  else {
	    pWriter.print('<html>');
	    pWriter.print('<head>');
	    var str = '  <meta http-equiv=\"content-type\" content';
	    str += '=\"text/html;charset=utf-8\" />';
	    pWriter.print(str);
	    pWriter.print('</head>');

	    pWriter.print('<body>');
	    pWriter.print('  <table>');

	    // make header if it has values
	    if (header[0] !== '0') {
	      pWriter.print('    <tr>');
	      for (var k = 0; k < header.length; k++) {
	        var e = escapeHelper(header[k]);
	        pWriter.print('      <td>' + e);
	        pWriter.print('      </td>');
	      }
	      pWriter.print('    </tr>');
	    }

	    // make rows
	    for (var row = 0; row < table.rows.length; row++) {
	      pWriter.print('    <tr>');
	      for (var col = 0; col < table.columns.length; col++) {
	        var entry = table.rows[row].getString(col);
	        var htmlEntry = escapeHelper(entry);
	        pWriter.print('      <td>' + htmlEntry);
	        pWriter.print('      </td>');
	      }
	      pWriter.print('    </tr>');
	    }
	    pWriter.print('  </table>');
	    pWriter.print('</body>');
	    pWriter.print('</html>');
	  }
	  // close and flush the pWriter
	  pWriter.close();
	  pWriter.flush();
	}; // end saveTable()

	/**
	 *  Generate a blob of file data as a url to prepare for download.
	 *  Accepts an array of data, a filename, and an extension (optional).
	 *  This is a private function because it does not do any formatting,
	 *  but it is used by saveStrings, saveJSON, saveTable etc.
	 *
	 *  @param  {Array} dataToDownload
	 *  @param  {String} filename
	 *  @param  {[String]} extension
	 *  @private
	 */
	p5.prototype.writeFile = function (dataToDownload, filename, extension) {
	  var type = 'application\/octet-stream';
	  if (p5.prototype._isSafari()) {
	    type = 'text\/plain';
	  }
	  var blob = new Blob(dataToDownload, {
	    'type': type
	  });
	  var href = window.URL.createObjectURL(blob);
	  p5.prototype.downloadFile(href, filename, extension);
	};

	/**
	 *  Forces download. Accepts a url to filedata/blob, a filename,
	 *  and an extension (optional).
	 *  This is a private function because it does not do any formatting,
	 *  but it is used by saveStrings, saveJSON, saveTable etc.
	 *
	 *  @param  {String} href      i.e. an href generated by createObjectURL
	 *  @param  {[String]} filename
	 *  @param  {[String]} extension
	 */
	p5.prototype.downloadFile = function (href, fName, extension) {
	  var fx = _checkFileExtension(fName, extension);
	  var filename = fx[0];
	  var ext = fx[1];

	  var a = document.createElement('a');
	  a.href = href;
	  a.download = filename;

	  // Firefox requires the link to be added to the DOM before click()
	  a.onclick = destroyClickedElement;
	  a.style.display = 'none';
	  document.body.appendChild(a);

	  // Safari will open this file in the same page as a confusing Blob.
	  if (p5.prototype._isSafari()) {
	    var aText = 'Hello, Safari user! To download this file...\n';
	    aText += '1. Go to File --> Save As.\n';
	    aText += '2. Choose "Page Source" as the Format.\n';
	    aText += '3. Name it with this extension: .\"' + ext + '\"';
	    alert(aText);
	  }
	  a.click();
	  href = null;
	};

	/**
	 *  Returns a file extension, or another string
	 *  if the provided parameter has no extension.
	 *
	 *  @param   {String} filename
	 *  @return  {Array} [fileName, fileExtension]
	 *
	 *  @private
	 */
	function _checkFileExtension(filename, extension) {
	  if (!extension || extension === true || extension === 'true') {
	    extension = '';
	  }
	  if (!filename) {
	    filename = 'untitled';
	  }
	  var ext = '';
	  // make sure the file will have a name, see if filename needs extension
	  if (filename && filename.indexOf('.') > -1) {
	    ext = filename.split('.').pop();
	  }
	  // append extension if it doesn't exist
	  if (extension) {
	    if (ext !== extension) {
	      ext = extension;
	      filename = filename + '.' + ext;
	    }
	  }
	  return [filename, ext];
	}
	p5.prototype._checkFileExtension = _checkFileExtension;

	/**
	 *  Returns true if the browser is Safari, false if not.
	 *  Safari makes trouble for downloading files.
	 *
	 *  @return  {Boolean} [description]
	 *  @private
	 */
	p5.prototype._isSafari = function () {
	  var x = Object.prototype.toString.call(window.HTMLElement);
	  return x.indexOf('Constructor') > 0;
	};

	/**
	 *  Helper function, a callback for download that deletes
	 *  an invisible anchor element from the DOM once the file
	 *  has been automatically downloaded.
	 *
	 *  @private
	 */
	function destroyClickedElement(event) {
	  document.body.removeChild(event.target);
	}

	module.exports = p5;

	},{"../core/core":37,"../core/error_helpers":40,"opentype.js":8,"reqwest":27}],60:[function(_dereq_,module,exports){
	/**
	 * @module IO
	 * @submodule Table
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');


	/**
	 *  Table Options
	 *  <p>Generic class for handling tabular data, typically from a
	 *  CSV, TSV, or other sort of spreadsheet file.</p>
	 *  <p>CSV files are
	 *  <a href="http://en.wikipedia.org/wiki/Comma-separated_values">
	 *  comma separated values</a>, often with the data in quotes. TSV
	 *  files use tabs as separators, and usually don't bother with the
	 *  quotes.</p>
	 *  <p>File names should end with .csv if they're comma separated.</p>
	 *  <p>A rough "spec" for CSV can be found
	 *  <a href="http://tools.ietf.org/html/rfc4180">here</a>.</p>
	 *  <p>To load files, use the loadTable method.</p>
	 *  <p>To save tables to your computer, use the save method
	 *   or the saveTable method.</p>
	 *
	 *  Possible options include:
	 *  <ul>
	 *  <li>csv - parse the table as comma-separated values
	 *  <li>tsv - parse the table as tab-separated values
	 *  <li>header - this table has a header (title) row
	 *  </ul>
	 */

	/**
	 *  Table objects store data with multiple rows and columns, much
	 *  like in a traditional spreadsheet. Tables can be generated from
	 *  scratch, dynamically, or using data from an existing file.
	 *
	 *  @class p5.Table
	 *  @constructor
	 *  @param  {Array}     [rows] An array of p5.TableRow objects
	 *  @return {p5.Table}         p5.Table generated
	 */
	p5.Table = function (rows) {
	  /**
	   *  @property columns
	   *  @type {Array}
	   */
	  this.columns = [];

	  /**
	   *  @property rows
	   *  @type {Array}
	   */
	  this.rows = [];
	};

	/**
	 *  Use addRow() to add a new row of data to a p5.Table object. By default,
	 *  an empty row is created. Typically, you would store a reference to
	 *  the new row in a TableRow object (see newRow in the example above),
	 *  and then set individual values using set().
	 *
	 *  If a p5.TableRow object is included as a parameter, then that row is
	 *  duplicated and added to the table.
	 *
	 *  @method  addRow
	 *  @param   {p5.TableRow} [row] row to be added to the table
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   //add a row
		*   var newRow = table.addRow();
		*   newRow.setString("id", table.getRowCount() - 1);
		*   newRow.setString("species", "Canis Lupus");
		*   newRow.setString("name", "Wolf");
		*
		*   //print the results
		*   for (var r = 0; r < table.getRowCount(); r++)
		*     for (var c = 0; c < table.getColumnCount(); c++)
		*       print(table.getString(r, c));
		* }
		* </code>
		* </div>
		*
	 * @alt
	 * no image displayed
	 *
	 */
	p5.Table.prototype.addRow = function(row) {
	  // make sure it is a valid TableRow
	  var r = row || new p5.TableRow();

	  if (typeof(r.arr) === 'undefined' || typeof(r.obj) === 'undefined') {
	    //r = new p5.prototype.TableRow(r);
	    throw 'invalid TableRow: ' + r;
	  }
	  r.table = this;
	  this.rows.push(r);
	  return r;
	};

	/**
	 * Removes a row from the table object.
	 *
	 * @method  removeRow
	 * @param   {Number} id ID number of the row to remove
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   //remove the first row
		*   var r = table.removeRow(0);
		*
		*   //print the results
		*   for (var r = 0; r < table.getRowCount(); r++)
		*     for (var c = 0; c < table.getColumnCount(); c++)
		*       print(table.getString(r, c));
		* }
		* </code>
		* </div>
		*
	    * @alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.removeRow = function(id) {
	  this.rows[id].table = null; // remove reference to table
	  var chunk = this.rows.splice(id+1, this.rows.length);
	  this.rows.pop();
	  this.rows = this.rows.concat(chunk);
	};


	/**
	 * Returns a reference to the specified p5.TableRow. The reference
	 * can then be used to get and set values of the selected row.
	 *
	 * @method  getRow
	 * @param  {Number}   rowID ID number of the row to get
	 * @return {TableRow} p5.TableRow object
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   var row = table.getRow(1);
		*   //print it column by column
		*   //note: a row is an object, not an array
		*   for (var c = 0; c < table.getColumnCount(); c++)
		*     print(row.getString(c));
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.getRow = function(r) {
	  return this.rows[r];
	};

	/**
	 *  Gets all rows from the table. Returns an array of p5.TableRows.
	 *
	 *  @method  getRows
	 *  @return {Array}   Array of p5.TableRows
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   var rows = table.getRows();
		*
		*   //warning: rows is an array of objects
		*   for (var r = 0; r < rows.length; r++)
		*     rows[r].set("name", "Unicorn");
		*
		*   //print the results
		*   for (var r = 0; r < table.getRowCount(); r++)
		*     for (var c = 0; c < table.getColumnCount(); c++)
		*       print(table.getString(r, c));
		* }
		* </code>
		* </div>
		*
	    * @alt
	    * no image displayed
	    *
	 */
	p5.Table.prototype.getRows = function() {
	  return this.rows;
	};

	/**
	 *  Finds the first row in the Table that contains the value
	 *  provided, and returns a reference to that row. Even if
	 *  multiple rows are possible matches, only the first matching
	 *  row is returned. The column to search may be specified by
	 *  either its ID or title.
	 *
	 *  @method  findRow
	 *  @param  {String} value  The value to match
	 *  @param  {Number|String} column ID number or title of the
	 *                                 column to search
	 *  @return {TableRow}
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   //find the animal named zebra
		*   var row = table.findRow("Zebra", "name");
		*   //find the corresponding species
		*   print(row.getString("species"));
		* }
		* </code>
		* </div>
		*
	 * @alt
	 * no image displayed
	 *
	 */
	p5.Table.prototype.findRow = function(value, column) {
	  // try the Object
	  if (typeof(column) === 'string') {
	    for (var i = 0; i < this.rows.length; i++){
	      if (this.rows[i].obj[column] === value) {
	        return this.rows[i];
	      }
	    }
	  }
	  // try the Array
	  else {
	    for (var j = 0; j < this.rows.length; j++){
	      if (this.rows[j].arr[column] === value) {
	        return this.rows[j];
	      }
	    }
	  }
	  // otherwise...
	  return null;
	};

	/**
	 *  Finds the rows in the Table that contain the value
	 *  provided, and returns references to those rows. Returns an
	 *  Array, so for must be used to iterate through all the rows,
	 *  as shown in the example above. The column to search may be
	 *  specified by either its ID or title.
	 *
	 *  @method  findRows
	 *  @param  {String} value  The value to match
	 *  @param  {Number|String} column ID number or title of the
	 *                                 column to search
	 *  @return {Array}        An Array of TableRow objects
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   //add another goat
		*   var newRow = table.addRow();
		*   newRow.setString("id", table.getRowCount() - 1);
		*   newRow.setString("species", "Scape Goat");
		*   newRow.setString("name", "Goat");
		*
		*   //find the rows containing animals named Goat
		*   var rows = table.findRows("Goat", "name");
		*   print(rows.length + " Goats found");
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.findRows = function(value, column) {
	  var ret = [];
	  if (typeof(column) === 'string') {
	    for (var i = 0; i < this.rows.length; i++){
	      if (this.rows[i].obj[column] === value) {
	        ret.push( this.rows[i] );
	      }
	    }
	  }
	  // try the Array
	  else {
	    for (var j = 0; j < this.rows.length; j++){
	      if (this.rows[j].arr[column] === value) {
	        ret.push( this.rows[j] );
	      }
	    }
	  }
	  return ret;
	};

	/**
	 *  Finds the first row in the Table that matches the regular
	 *  expression provided, and returns a reference to that row.
	 *  Even if multiple rows are possible matches, only the first
	 *  matching row is returned. The column to search may be
	 *  specified by either its ID or title.
	 *
	 *  @method  matchRow
	 *  @param  {String} regexp The regular expression to match
	 *  @param  {String|Number} column The column ID (number) or
	 *                                   title (string)
	 *  @return {TableRow}        TableRow object
	 */
	p5.Table.prototype.matchRow = function(regexp, column) {
	  if (typeof(column) === 'number') {
	    for (var j = 0; j < this.rows.length; j++) {
	      if ( this.rows[j].arr[column].match(regexp) ) {
	        return this.rows[j];
	      }
	    }
	  }

	  else {
	    for (var i = 0; i < this.rows.length; i++) {
	      if ( this.rows[i].obj[column].match(regexp) ) {
	        return this.rows[i];
	      }
	    }
	  }
	  return null;
	};

	/**
	 *  Finds the rows in the Table that match the regular expression provided,
	 *  and returns references to those rows. Returns an array, so for must be
	 *  used to iterate through all the rows, as shown in the example. The
	 *  column to search may be specified by either its ID or title.
	 *
	 *  @method  matchRows
	 *  @param  {String} regexp The regular expression to match
	 *  @param  {String|Number} [column] The column ID (number) or
	 *                                   title (string)
	 *  @return {Array}        An Array of TableRow objects
	 *  @example
	 *  var table;
	 *
	 *  function setup() {
	 *
	 *    table = new p5.Table();
	 *
	 *    table.addColumn('name');
	 *    table.addColumn('type');
	 *
	 *    var newRow = table.addRow();
	 *    newRow.setString('name', 'Lion');
	 *    newRow.setString('type', 'Mammal');
	 *
	 *    newRow = table.addRow();
	 *    newRow.setString('name', 'Snake');
	 *    newRow.setString('type', 'Reptile');
	 *
	 *    newRow = table.addRow();
	 *    newRow.setString('name', 'Mosquito');
	 *    newRow.setString('type', 'Insect');
	 *
	 *    newRow = table.addRow();
	 *    newRow.setString('name', 'Lizard');
	 *    newRow.setString('type', 'Reptile');
	 *
	 *    var rows = table.matchRows('R.*', 'type');
	 *    for (var i = 0; i < rows.length; i++) {
	 *      print(rows[i].getString('name') + ': ' + rows[i].getString('type'));
	 *    }
	 *  }
	 *  // Sketch prints:
	 *  // Snake: Reptile
	 *  // Lizard: Reptile
	 */
	p5.Table.prototype.matchRows = function(regexp, column) {
	  var ret = [];
	  if (typeof(column) === 'number') {
	    for (var j = 0; j < this.rows.length; j++) {
	      if ( this.rows[j].arr[column].match(regexp) ) {
	        ret.push( this.rows[j] );
	      }
	    }
	  }

	  else {
	    for (var i = 0; i < this.rows.length; i++) {
	      if ( this.rows[i].obj[column].match(regexp) ) {
	        ret.push( this.rows[i] );
	      }
	    }
	  }
	  return ret;
	};


	/**
	 *  Retrieves all values in the specified column, and returns them
	 *  as an array. The column may be specified by either its ID or title.
	 *
	 *  @method  getColumn
	 *  @param  {String|Number} column String or Number of the column to return
	 *  @return {Array}       Array of column values
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   //getColumn returns an array that can be printed directly
		*   print(table.getColumn("species"));
		*   //outputs ["Capra hircus", "Panthera pardus", "Equus zebra"]
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.getColumn = function(value) {
	  var ret = [];
	  if (typeof(value) === 'string'){
	    for (var i = 0; i < this.rows.length; i++){
	      ret.push (this.rows[i].obj[value]);
	    }
	  } else {
	    for (var j = 0; j < this.rows.length; j++){
	      ret.push (this.rows[j].arr[value]);
	    }
	  }
	  return ret;
	};

	/**
	 *  Removes all rows from a Table. While all rows are removed,
	 *  columns and column titles are maintained.
	 *
	 *  @method  clearRows
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   table.clearRows();
		*   print(table.getRowCount() + " total rows in table");
		*   print(table.getColumnCount() + " total columns in table");
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.clearRows = function() {
	  delete this.rows;
	  this.rows = [];
	};

	/**
	 *  Use addColumn() to add a new column to a Table object.
	 *  Typically, you will want to specify a title, so the column
	 *  may be easily referenced later by name. (If no title is
	 *  specified, the new column's title will be null.)
	 *
	 *  @method  addColumn
	 *  @param {String} [title] title of the given column
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   table.addColumn("carnivore");
		*   table.set(0, "carnivore", "no");
		*   table.set(1, "carnivore", "yes");
		*   table.set(2, "carnivore", "no");
		*
		*   //print the results
		*   for (var r = 0; r < table.getRowCount(); r++)
		*     for (var c = 0; c < table.getColumnCount(); c++)
		*       print(table.getString(r, c));
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.addColumn = function(title) {
	  var t = title || null;
	  this.columns.push(t);
	};

	/**
	 *  Returns the total number of columns in a Table.
	 *
	 *  @return {Number} Number of columns in this table
	 */
	p5.Table.prototype.getColumnCount = function() {
	  return this.columns.length;
	};

	/**
	 *  Returns the total number of rows in a Table.
	 *
	 *  @method  getRowCount
	 *  @return {Number} Number of rows in this table

	 */
	p5.Table.prototype.getRowCount = function() {
	  return this.rows.length;
	};

	/**
	 *  <p>Removes any of the specified characters (or "tokens").</p>
	 *
	 *  <p>If no column is specified, then the values in all columns and
	 *  rows are processed. A specific column may be referenced by
	 *  either its ID or title.</p>
	 *
	 *  @method  removeTokens
	 *  @param  {String} chars  String listing characters to be removed
	 *  @param  {String|Number} [column] Column ID (number)
	 *                                   or name (string)
	 */
	p5.Table.prototype.removeTokens = function(chars, column) {
	  var escape= function(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	  };
	  var charArray = [];
	  for (var i = 0; i < chars.length; i++) {
	    charArray.push( escape( chars.charAt(i) ) );
	  }
	  var regex = new RegExp(charArray.join('|'), 'g');

	  if (typeof(column) === 'undefined'){
	    for (var c = 0; c < this.columns.length; c++) {
	      for (var d = 0; d < this.rows.length; d++) {
	        var s = this.rows[d].arr[c];
	        s = s.replace(regex, '');
	        this.rows[d].arr[c] = s;
	        this.rows[d].obj[this.columns[c]] = s;
	      }
	    }
	  }
	  else if (typeof(column) === 'string'){
	    for (var j = 0; j < this.rows.length; j++) {
	      var val = this.rows[j].obj[column];
	      val = val.replace(regex, '');
	      this.rows[j].obj[column] = val;
	      var pos = this.columns.indexOf(column);
	      this.rows[j].arr[pos] = val;
	    }
	  }
	  else {
	    for (var k = 0; k < this.rows.length; k++) {
	      var str = this.rows[k].arr[column];
	      str = str.replace(regex, '');
	      this.rows[k].arr[column] = str;
	      this.rows[k].obj[this.columns[column]] = str;
	    }
	  }
	};

	/**
	 *  Trims leading and trailing whitespace, such as spaces and tabs,
	 *  from String table values. If no column is specified, then the
	 *  values in all columns and rows are trimmed. A specific column
	 *  may be referenced by either its ID or title.
	 *
	 *  @method  trim
	 *  @param  {String|Number} column Column ID (number)
	 *                                   or name (string)
	 */
	p5.Table.prototype.trim = function(column) {
	  var regex = new RegExp( (' '), 'g');

	  if (typeof(column) === 'undefined'){
	    for (var c = 0; c < this.columns.length; c++) {
	      for (var d = 0; d < this.rows.length; d++) {
	        var s = this.rows[d].arr[c];
	        s = s.replace(regex, '');
	        this.rows[d].arr[c] = s;
	        this.rows[d].obj[this.columns[c]] = s;
	      }
	    }
	  }
	  else if (typeof(column) === 'string'){
	    for (var j = 0; j < this.rows.length; j++) {
	      var val = this.rows[j].obj[column];
	      val = val.replace(regex, '');
	      this.rows[j].obj[column] = val;
	      var pos = this.columns.indexOf(column);
	      this.rows[j].arr[pos] = val;
	    }
	  }
	  else {
	    for (var k = 0; k < this.rows.length; k++) {
	      var str = this.rows[k].arr[column];
	      str = str.replace(regex, '');
	      this.rows[k].arr[column] = str;
	      this.rows[k].obj[this.columns[column]] = str;
	    }
	  }
	};

	/**
	 *  Use removeColumn() to remove an existing column from a Table
	 *  object. The column to be removed may be identified by either
	 *  its title (a String) or its index value (an int).
	 *  removeColumn(0) would remove the first column, removeColumn(1)
	 *  would remove the second column, and so on.
	 *
	 *  @method  removeColumn
	 *  @param  {String|Number} column columnName (string) or ID (number)
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   table.removeColumn("id");
		*   print(table.getColumnCount());
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.removeColumn = function(c) {
	  var cString;
	  var cNumber;
	  if (typeof(c) === 'string') {
	    // find the position of c in the columns
	    cString = c;
	    cNumber = this.columns.indexOf(c);
	    console.log('string');
	  }
	  else{
	    cNumber = c;
	    cString = this.columns[c];
	  }

	  var chunk = this.columns.splice(cNumber+1, this.columns.length);
	  this.columns.pop();
	  this.columns = this.columns.concat(chunk);

	  for (var i = 0; i < this.rows.length; i++){
	    var tempR = this.rows[i].arr;
	    var chip = tempR.splice(cNumber+1, tempR.length);
	    tempR.pop();
	    this.rows[i].arr = tempR.concat(chip);
	    delete this.rows[i].obj[cString];
	  }

	};


	/**
	 * Stores a value in the Table's specified row and column.
	 * The row is specified by its ID, while the column may be specified
	 * by either its ID or title.
	 *
	 * @method  set
	 * @param {String|Number} column column ID (Number)
	 *                               or title (String)
	 * @param {String|Number} value  value to assign
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   table.set(0, "species", "Canis Lupus");
		*   table.set(0, "name", "Wolf");
		*
		*   //print the results
		*   for (var r = 0; r < table.getRowCount(); r++)
		*     for (var c = 0; c < table.getColumnCount(); c++)
		*       print(table.getString(r, c));
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.set = function(row, column, value) {
	  this.rows[row].set(column, value);
	};

	/**
	 * Stores a Float value in the Table's specified row and column.
	 * The row is specified by its ID, while the column may be specified
	 * by either its ID or title.
	 *
	 * @method setNum
	 * @param {Number} row row ID
	 * @param {String|Number} column column ID (Number)
	 *                               or title (String)
	 * @param {Number} value  value to assign
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   table.setNum(1, "id", 1);
		*
		*   print(table.getColumn(0));
		*   //["0", 1, "2"]
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 */
	p5.Table.prototype.setNum = function(row, column, value){
	  this.rows[row].setNum(column, value);
	};


	/**
	 * Stores a String value in the Table's specified row and column.
	 * The row is specified by its ID, while the column may be specified
	 * by either its ID or title.
	 *
	 * @method  setString
	 * @param {Number} row row ID
	 * @param {String|Number} column column ID (Number)
	 *                               or title (String)
	 * @param {String} value  value to assign
	 */
	p5.Table.prototype.setString = function(row, column, value){
	  this.rows[row].setString(column, value);
	};

	/**
	 * Retrieves a value from the Table's specified row and column.
	 * The row is specified by its ID, while the column may be specified by
	 * either its ID or title.
	 *
	 * @method  get
	 * @param {Number} row row ID
	 * @param  {String|Number} column columnName (string) or
	 *                                   ID (number)
	 * @return {String|Number}
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   print(table.get(0, 1));
		*   //Capra hircus
		*   print(table.get(0, "species"));
		*   //Capra hircus
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.get = function(row, column) {
	  return this.rows[row].get(column);
	};

	/**
	 * Retrieves a Float value from the Table's specified row and column.
	 * The row is specified by its ID, while the column may be specified by
	 * either its ID or title.
	 *
	 * @method  getNum
	 * @param {Number} row row ID
	 * @param  {String|Number} column columnName (string) or
	 *                                   ID (number)
	 * @return {Number}
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   print(table.getNum(1, 0) + 100);
		*   //id 1 + 100 = 101
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.getNum = function(row, column) {
	  return this.rows[row].getNum(column);
	};

	/**
	 * Retrieves a String value from the Table's specified row and column.
	 * The row is specified by its ID, while the column may be specified by
	 * either its ID or title.
	 *
	 * @method  getString
	 * @param {Number} row row ID
	 * @param  {String|Number} column columnName (string) or
	 *                                   ID (number)
	 * @return {String}
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   var tableArray = table.getArray();
		*
		*   //output each row as array
		*   for (var i = 0; i < tableArray.length; i++)
		*     print(tableArray[i]);
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.getString = function(row, column) {
	  return this.rows[row].getString(column);
	};

	/**
	 * Retrieves all table data and returns as an object. If a column name is
	 * passed in, each row object will be stored with that attribute as its
	 * title.
	 *
	 * @method  getObject
	 * @param {String} headerColumn Name of the column which should be used to
	 *                              title each row object (optional)
	 * @return {Object}
	 *
	 * @example
		* <div class="norender">
		* <code>
		* // Given the CSV file "mammals.csv"
		* // in the project's "assets" folder:
		* //
		* // id,species,name
		* // 0,Capra hircus,Goat
		* // 1,Panthera pardus,Leopard
		* // 2,Equus zebra,Zebra
		*
		* var table;
		*
		* function preload() {
		*   //my table is comma separated value "csv"
		*   //and has a header specifying the columns labels
		*   table = loadTable("assets/mammals.csv", "csv", "header");
		* }
		*
		* function setup() {
		*   var tableObject = table.getObject();
		*
		*   print(tableObject);
		*   //outputs an object
		* }
		* </code>
		* </div>
		*
	 	*@alt
	 	* no image displayed
	 	*
	 */
	p5.Table.prototype.getObject = function (headerColumn) {
	  var tableObject = {};
	  var obj, cPos, index;

	  for(var i = 0; i < this.rows.length; i++) {
	    obj = this.rows[i].obj;

	    if (typeof(headerColumn) === 'string'){
	      cPos = this.columns.indexOf(headerColumn); // index of columnID
	      if (cPos >= 0) {
	        index = obj[headerColumn];
	        tableObject[index] = obj;
	      } else {
	        throw 'This table has no column named "' + headerColumn +'"';
	      }
	    } else {
	      tableObject[i] = this.rows[i].obj;
	    }
	  }
	  return tableObject;
	};

	/**
	 * Retrieves all table data and returns it as a multidimensional array.
	 *
	 * @method  getArray
	 * @return {Array}
	 */
	p5.Table.prototype.getArray = function () {
	  var tableArray = [];
	  for(var i = 0; i < this.rows.length; i++) {
	    tableArray.push(this.rows[i].arr);
	  }
	  return tableArray;
	};

	module.exports = p5.Table;

	},{"../core/core":37}],61:[function(_dereq_,module,exports){
	/**
	 * @module IO
	 * @submodule Table
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 *  A TableRow object represents a single row of data values,
	 *  stored in columns, from a table.
	 *
	 *  A Table Row contains both an ordered array, and an unordered
	 *  JSON object.
	 *
	 *  @class p5.TableRow
	 *  @constructor
	 *  @param {String} [str]       optional: populate the row with a
	 *                              string of values, separated by the
	 *                              separator
	 *  @param {String} [separator] comma separated values (csv) by default
	 */
	p5.TableRow = function (str, separator) {
	  var arr = [];
	  var obj = {};
	  if (str){
	    separator = separator || ',';
	    arr = str.split(separator);
	  }
	  for (var i = 0; i < arr.length; i++){
	    var key = i;
	    var val = arr[i];
	    obj[key] = val;
	  }
	  this.arr = arr;
	  this.obj = obj;
	  this.table = null;
	};

	/**
	 *  Stores a value in the TableRow's specified column.
	 *  The column may be specified by either its ID or title.
	 *
	 *  @method  set
	 *  @param {String|Number} column Column ID (Number)
	 *                                or Title (String)
	 *  @param {String|Number} value  The value to be stored
	 */
	p5.TableRow.prototype.set = function(column, value) {
	  // if typeof column is string, use .obj
	  if (typeof(column) === 'string'){
	    var cPos = this.table.columns.indexOf(column); // index of columnID
	    if (cPos >= 0) {
	      this.obj[column] = value;
	      this.arr[cPos] = value;
	    }
	    else {
	      throw 'This table has no column named "' + column +'"';
	    }
	  }

	  // if typeof column is number, use .arr
	  else {
	    if (column < this.table.columns.length) {
	      this.arr[column] = value;
	      var cTitle = this.table.columns[column];
	      this.obj[cTitle] = value;
	    }
	    else {
	      throw 'Column #' + column + ' is out of the range of this table';
	    }
	  }
	};


	/**
	 *  Stores a Float value in the TableRow's specified column.
	 *  The column may be specified by either its ID or title.
	 *
	 *  @method  setNum
	 *  @param {String|Number} column Column ID (Number)
	 *                                or Title (String)
	 *  @param {Number} value  The value to be stored
	 *                                as a Float
	 */
	p5.TableRow.prototype.setNum = function(column, value){
	  var floatVal = parseFloat(value, 10);
	  this.set(column, floatVal);
	};


	/**
	 *  Stores a String value in the TableRow's specified column.
	 *  The column may be specified by either its ID or title.
	 *
	 *  @method  setString
	 *  @param {String|Number} column Column ID (Number)
	 *                                or Title (String)
	 *  @param {String} value  The value to be stored
	 *                                as a String
	 */
	p5.TableRow.prototype.setString = function(column, value){
	  var stringVal = value.toString();
	  this.set(column, stringVal);
	};

	/**
	 *  Retrieves a value from the TableRow's specified column.
	 *  The column may be specified by either its ID or title.
	 *
	 *  @method  get
	 *  @param  {String|Number} column columnName (string) or
	 *                                   ID (number)
	 *  @return {String|Number}
	 */
	p5.TableRow.prototype.get = function(column) {
	  if (typeof(column) === 'string'){
	    return this.obj[column];
	  } else {
	    return this.arr[column];
	  }
	};

	/**
	 *  Retrieves a Float value from the TableRow's specified
	 *  column. The column may be specified by either its ID or
	 *  title.
	 *
	 *  @method  getNum
	 *  @param  {String|Number} column columnName (string) or
	 *                                   ID (number)
	 *  @return {Number}  Float Floating point number
	 */
	p5.TableRow.prototype.getNum = function(column) {
	  var ret;
	  if (typeof(column) === 'string'){
	    ret = parseFloat(this.obj[column], 10);
	  } else {
	    ret = parseFloat(this.arr[column], 10);
	  }

	  if (ret.toString() === 'NaN') {
	    throw 'Error: ' + this.obj[column]+ ' is NaN (Not a Number)';
	  }
	  return ret;
	};

	/**
	 *  Retrieves an String value from the TableRow's specified
	 *  column. The column may be specified by either its ID or
	 *  title.
	 *
	 *  @method  getString
	 *  @param  {String|Number} column columnName (string) or
	 *                                   ID (number)
	 *  @return {String}  String
	 */
	p5.TableRow.prototype.getString = function(column) {
	  if (typeof(column) === 'string'){
	    return this.obj[column].toString();
	  } else {
	    return this.arr[column].toString();
	  }
	};

	module.exports = p5.TableRow;

	},{"../core/core":37}],62:[function(_dereq_,module,exports){
	/**
	 * @module IO
	 * @submodule XML
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * XML is a representation of an XML object, able to parse XML code. Use
	 * loadXML() to load external XML files and create XML objects.
	 *
	 * @class p5.XML
	 * @constructor
	 * @return {p5.XML}    p5.XML object generated
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var children = xml.getChildren("animal");
	 *
	 *   for (var i = 0; i < children.length; i++) {
	 *     var id = children[i].getNumber("id");
	 *     var coloring = children[i].getString("species");
	 *     var name = children[i].getContent();
	 *     print(id + ", " + coloring + ", " + name);
	 *   }
	 * }
	 *
	 * // Sketch prints:
	 * // 0, Capra hircus, Goat
	 * // 1, Panthera pardus, Leopard
	 * // 2, Equus zebra, Zebra
	 * </code></div>
	  *
	  * @alt
	  * no image displayed
	  *
	 */
	p5.XML = function () {
	  this.name = null; //done
	  this.attributes = {}; //done
	  this.children = [];
	  this.parent = null;
	  this.content = null; //done
	};


	/**
	 * Gets a copy of the element's parent. Returns the parent as another
	 * p5.XML object.
	 *
	 * @method getParent
	 * @return {Object}   element parent
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var children = xml.getChildren("animal");
	 *   var parent = children[1].getParent();
	 *   print(parent.getName());
	 * }
	 *
	 * // Sketch prints:
	 * // mammals
	 * </code></div>
	 */
	p5.XML.prototype.getParent = function() {
	  return this.parent;
	};

	/**
	 *  Gets the element's full name, which is returned as a String.
	 *
	 * @method getName
	 * @return {String} the name of the node
	 * @example&lt;animal
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   print(xml.getName());
	 * }
	 *
	 * // Sketch prints:
	 * // mammals
	 * </code></div>
	 */
	p5.XML.prototype.getName = function() {
	  return this.name;
	};

	/**
	 * Sets the element's name, which is specified as a String.
	 *
	 * @method setName
	 * @param {String} the new name of the node
	 * @example&lt;animal
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   print(xml.getName());
	 *   xml.setName("fish");
	 *   print(xml.getName());
	 * }
	 *
	 * // Sketch prints:
	 * // mammals
	 * // fish
	 * </code></div>
	 */
	p5.XML.prototype.setName = function(name) {
	  this.name = name;
	};

	/**
	 * Checks whether or not the element has any children, and returns the result
	 * as a boolean.
	 *
	 * @method hasChildren
	 * @return {boolean}
	 * @example&lt;animal
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   print(xml.hasChildren());
	 * }
	 *
	 * // Sketch prints:
	 * // true
	 * </code></div>
	 */
	p5.XML.prototype.hasChildren = function() {
	  return this.children.length > 0;
	};

	/**
	 * Get the names of all of the element's children, and returns the names as an
	 * array of Strings. This is the same as looping through and calling getName()
	 * on each child element individually.
	 *
	 * @method listChildren
	 * @return {Array} names of the children of the element
	 * @example&lt;animal
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   print(xml.listChildren());
	 * }
	 *
	 * // Sketch prints:
	 * // ["animal", "animal", "animal"]
	 * </code></div>
	 */
	p5.XML.prototype.listChildren = function() {
	  return this.children.map(function(c) { return c.name; });
	};

	/**
	 * Returns all of the element's children as an array of p5.XML objects. When
	 * the name parameter is specified, then it will return all children that match
	 * that name.
	 *
	 * @method getChildren
	 * @param {String} [name] element name
	 * @return {Array} children of the element
	 * @example&lt;animal
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var animals = xml.getChildren("animal");
	 *
	 *   for (var i = 0; i < animals.length; i++) {
	 *     print(animals[i].getContent());
	 *   }
	 * }
	 *
	 * // Sketch prints:
	 * // "Goat"
	 * // "Leopard"
	 * // "Zebra"
	 * </code></div>
	 */
	p5.XML.prototype.getChildren = function(param) {
	  if (param) {
	    return this.children.filter(function(c) { return c.name === param; });
	  }
	  else {
	    return this.children;
	  }
	};

	/**
	 * Returns the first of the element's children that matches the name parameter
	 * or the child of the given index.It returns undefined if no matching
	 * child is found.
	 *
	 * @method getChild
	 * @param {String|Number} name element name or index
	 * @return {p5.XML}
	 * @example&lt;animal
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.getContent());
	 * }
	 *
	 * // Sketch prints:
	 * // "Goat"
	 * </code></div>
	 * <div class='norender'><code>
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var secondChild = xml.getChild(1);
	 *   print(secondChild.getContent());
	 * }
	 *
	 * // Sketch prints:
	 * // "Leopard"
	 * </code></div>
	 */
	p5.XML.prototype.getChild = function(param) {
	  if(typeof param === 'string') {
	    return this.children.find(function(c) {
	      return c.name === param;
	    });
	  }
	  else {
	    return this.children[param];
	  }
	};

	/**
	 * Appends a new child to the element. The child can be specified with
	 * either a String, which will be used as the new tag's name, or as a
	 * reference to an existing p5.XML object.
	 * A reference to the newly created child is returned as an p5.XML object.
	 *
	 * @method addChild
	 * @param {Object} a p5.XML Object which will be the child to be added
	 */
	p5.XML.prototype.addChild = function(node) {
	  if (node instanceof p5.XML) {
	    this.children.push(node);
	  } else {
	    // PEND
	  }
	};

	/**
	 * Removes the element specified by name or index.
	 *
	 * @method removeChild
	 * @param {String|Number} name element name or index
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   xml.removeChild("animal");
	 *   var children = xml.getChildren();
	 *   for (var i=0; i<children.length; i++) {
	 *     print(children[i].getContent());
	 *   }
	 * }
	 *
	 * // Sketch prints:
	 * // "Leopard"
	 * // "Zebra"
	 * </code></div>
	 * <div class='norender'><code>
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   xml.removeChild(1);
	 *   var children = xml.getChildren();
	 *   for (var i=0; i<children.length; i++) {
	 *     print(children[i].getContent());
	 *   }
	 * }
	 *
	 * // Sketch prints:
	 * // "Goat"
	 * // "Zebra"
	 * </code></div>
	 */
	p5.XML.prototype.removeChild = function(param) {
	  var ind = -1;
	  if(typeof param === 'string') {
	    for (var i=0; i<this.children.length; i++) {
	      if (this.children[i].name === param) {
	        ind = i;
	        break;
	      }
	    }
	  } else {
	    ind = param;
	  }
	  if (ind !== -1) {
	    this.children.splice(ind, 1);
	  }
	};


	/**
	 * Counts the specified element's number of attributes, returned as an Number.
	 *
	 * @method getAttributeCount
	 * @return {Number}
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.getAttributeCount());
	 * }
	 *
	 * // Sketch prints:
	 * // 2
	 * </code></div>
	 */
	p5.XML.prototype.getAttributeCount = function() {
	  return Object.keys(this.attributes).length;
	};

	/**
	 * Gets all of the specified element's attributes, and returns them as an
	 * array of Strings.
	 *
	 * @method listAttributes
	 * @return {Array} an array of strings containing the names of attributes
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.listAttributes());
	 * }
	 *
	 * // Sketch prints:
	 * // ["id", "species"]
	 * </code></div>
	 */
	p5.XML.prototype.listAttributes = function() {
	  return Object.keys(this.attributes);
	};

	/**
	 *  Checks whether or not an element has the specified attribute.
	 *
	 * @method hasAttribute
	 * @param {String} the attribute to be checked
	 * @return {boolean} true if attribute found else false
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.hasAttribute("species"));
	 *   print(firstChild.hasAttribute("color"));
	 * }
	 *
	 * // Sketch prints:
	 * // true
	 * // false
	 * </code></div>
	 */
	p5.XML.prototype.hasAttribute = function(name) {
	  return this.attributes[name] ? true : false;
	};

	/**
	 * Returns an attribute value of the element as an Number. If the defaultValue
	 * parameter is specified and the attribute doesn't exist, then defaultValue
	 * is returned. If no defaultValue is specified and the attribute doesn't
	 * exist, the value 0 is returned.
	 *
	 * @method getNumber
	 * @param {String} name            the non-null full name of the attribute
	 * @param {Number} [defaultValue]  the default value of the attribute
	 * @return {Number}
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.getNumber("id"));
	 * }
	 *
	 * // Sketch prints:
	 * // 0
	 * </code></div>
	 */
	p5.XML.prototype.getNumber = function(name, defaultValue) {
	  return Number(this.attributes[name]) || defaultValue || 0;
	};

	/**
	 * Returns an attribute value of the element as an String. If the defaultValue
	 * parameter is specified and the attribute doesn't exist, then defaultValue
	 * is returned. If no defaultValue is specified and the attribute doesn't
	 * exist, null is returned.
	 *
	 * @method getString
	 * @param {String} name            the non-null full name of the attribute
	 * @param {Number} [defaultValue]  the default value of the attribute
	 * @return {Number}
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.getString("species"));
	 * }
	 *
	 * // Sketch prints:
	 * // "Capra hircus"
	 * </code></div>
	 */
	p5.XML.prototype.getString = function(name, defaultValue) {
	  return String(this.attributes[name]) || defaultValue || null;
	};

	/**
	 * Sets the content of an element's attribute. The first parameter specifies
	 * the attribute name, while the second specifies the new content.
	 *
	 * @method setAttribute
	 * @param {String} name            the full name of the attribute
	 * @param {Number} value           the value of the attribute
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.getString("species"));
	 *   firstChild.setAttribute("species", "Jamides zebra");
	 *   print(firstChild.getString("species"));
	 * }
	 *
	 * // Sketch prints:
	 * // "Capra hircus"
	 * // "Jamides zebra"
	 * </code></div>
	 */
	p5.XML.prototype.setAttribute = function(name, value) {
	  if (this.attributes[name]) {
	    this.attributes[name] = value;
	  }
	};

	/**
	 * Returns the content of an element. If there is no such content,
	 * defaultValue is returned if specified, otherwise null is returned.
	 *
	 * @method getContent
	 * @param {String} [defaultValue] value returned if no content is found
	 * @return {String}
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.getContent());
	 * }
	 *
	 * // Sketch prints:
	 * // "Goat"
	 * </code></div>
	 */
	p5.XML.prototype.getContent = function(defaultValue) {
	  return this.content || defaultValue || null;
	};

	/**
	 * Sets the element's content.
	 *
	 * @method setContent
	 * @param {String} text the new content
	 * @example
	 * <div class='norender'><code>
	 * // The following short XML file called "mammals.xml" is parsed
	 * // in the code below.
	 * //
	 * // <?xml version="1.0"?>
	 * // &lt;mammals&gt;
	 * //   &lt;animal id="0" species="Capra hircus">Goat&lt;/animal&gt;
	 * //   &lt;animal id="1" species="Panthera pardus">Leopard&lt;/animal&gt;
	 * //   &lt;animal id="2" species="Equus zebra">Zebra&lt;/animal&gt;
	 * // &lt;/mammals&gt;
	 *
	 * var xml;
	 *
	 * function preload() {
	 *   xml = loadXML("assets/mammals.xml");
	 * }
	 *
	 * function setup() {
	 *   var firstChild = xml.getChild("animal");
	 *   print(firstChild.getContent());
	 *   firstChild.setContent("Mountain Goat");
	 *   print(firstChild.getContent());
	 * }
	 *
	 * // Sketch prints:
	 * // "Goat"
	 * // "Mountain Goat"
	 * </code></div>
	 */
	p5.XML.prototype.setContent = function( content ) {
	  if(!this.children.length) {
	    this.content = content;
	  }
	};

	/* HELPERS */
	/**
	 * This method is called while the parsing of XML (when loadXML() is
	 * called). The difference between this method and the setContent()
	 * method defined later is that this one is used to set the content
	 * when the node in question has more nodes under it and so on and
	 * not directly text content. While in the other one is used when
	 * the node in question directly has text inside it.
	 *
	 */
	p5.XML.prototype._setCont = function(content) {
	  var str;
	  str = content;
	  str = str.replace(/\s\s+/g, ',');
	  //str = str.split(',');
	  this.content = str;
	};

	/**
	 * This method is called while the parsing of XML (when loadXML() is
	 * called). The XML node is passed and its attributes are stored in the
	 * p5.XML's attribute Object.
	 *
	 */
	p5.XML.prototype._setAttributes = function(node) {
	  var  i, att = {};
	  for( i = 0; i < node.attributes.length; i++) {
	    att[node.attributes[i].nodeName] = node.attributes[i].nodeValue;
	  }
	  this.attributes = att;
	};

	module.exports = p5.XML;
	},{"../core/core":37}],63:[function(_dereq_,module,exports){
	/**
	 * @module Math
	 * @submodule Calculation
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * Calculates the absolute value (magnitude) of a number. Maps to Math.abs().
	 * The absolute value of a number is always positive.
	 *
	 * @method abs
	 * @param  {Number} n number to compute
	 * @return {Number}   absolute value of given number
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var x = -3;
	 *   var y = abs(x);
	 *
	 *   print(x); // -3
	 *   print(y); // 3
	 * }
	 * </code></div>
	 *
	 * @alt
	 * no image displayed
	 *
	 */
	p5.prototype.abs = Math.abs;

	/**
	 * Calculates the closest int value that is greater than or equal to the
	 * value of the parameter. Maps to Math.ceil(). For example, ceil(9.03)
	 * returns the value 10.
	 *
	 * @method ceil
	 * @param  {Number} n number to round up
	 * @return {Number}   rounded up number
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *   // map, mouseX between 0 and 5.
	 *   var ax = map(mouseX, 0, 100, 0, 5);
	 *   var ay = 66;
	 *
	 *   //Get the ceiling of the mapped number.
	 *   var bx = ceil(map(mouseX, 0, 100, 0,5));
	 *   var by = 33;
	 *
	 *   // Multiply the mapped numbers by 20 to more easily
	 *   // see the changes.
	 *   stroke(0);
	 *   fill(0);
	 *   line(0, ay, ax * 20, ay);
	 *   line(0, by, bx * 20, by);
	 *
	 *   // Reformat the float returned by map and draw it.
	 *   noStroke();
	 *   text(nfc(ax, 2,2), ax, ay - 5);
	 *   text(nfc(bx,1,1), bx, by - 5);
	 * }
	 * </code></div>
	  *
	 * @alt
	 * 2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals
	 *
	 */
	p5.prototype.ceil = Math.ceil;

	/**
	 * Constrains a value between a minimum and maximum value.
	 *
	 * @method constrain
	 * @param  {Number} n    number to constrain
	 * @param  {Number} low  minimum limit
	 * @param  {Number} high maximum limit
	 * @return {Number}      constrained number
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *
	 *   var leftWall = 25;
	 *   var rightWall = 75;
	 *
	 *   // xm is just the mouseX, while
	 *   // xc is the mouseX, but constrained
	 *   // between the leftWall and rightWall!
	 *   var xm = mouseX;
	 *   var xc = constrain(mouseX, leftWall, rightWall);
	 *
	 *   // Draw the walls.
	 *   stroke(150);
	 *   line(leftWall, 0, leftWall, height);
	 *   line(rightWall, 0, rightWall, height);
	 *
	 *   // Draw xm and xc as circles.
	 *   noStroke();
	 *   fill(150);
	 *   ellipse(xm, 33, 9,9); // Not Constrained
	 *   fill(0);
	 *   ellipse(xc, 66, 9,9); // Constrained
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 2 vertical lines. 2 ellipses move with mouse X 1 does not move passed lines
	 *
	 */
	p5.prototype.constrain = function(n, low, high) {
	  return Math.max(Math.min(n, high), low);
	};

	/**
	 * Calculates the distance between two points.
	 *
	 * @method dist
	 * @param  {Number} x1 x-coordinate of the first point
	 * @param  {Number} y1 y-coordinate of the first point
	 * @param  {Number} [z1] z-coordinate of the first point
	 * @param  {Number} x2 x-coordinate of the second point
	 * @param  {Number} y2 y-coordinate of the second point
	 * @param  {Number} [z2] z-coordinate of the second point
	 * @return {Number}    distance between the two points
	 * @example
	 * <div><code>
	 * // Move your mouse inside the canvas to see the
	 * // change in distance between two points!
	 * function draw() {
	 *   background(200);
	 *   fill(0);
	 *
	 *   var x1 = 10;
	 *   var y1 = 90;
	 *   var x2 = mouseX;
	 *   var y2 = mouseY;
	 *
	 *   line(x1, y1, x2, y2);
	 *   ellipse(x1, y1, 7, 7);
	 *   ellipse(x2, y2, 7, 7);
	 *
	 *   // d is the length of the line
	 *   // the distance from point 1 to point 2.
	 *   var d = int(dist(x1, y1, x2, y2));
	 *
	 *   // Let's write d along the line we are drawing!
	 *   push();
	 *   translate( (x1+x2)/2, (y1+y2)/2 );
	 *   rotate( atan2(y2-y1,x2-x1) );
	 *   text(nfc(d,1,1), 0, -5);
	 *   pop();
	 *   // Fancy!
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 2 ellipses joined by line. 1 ellipse moves with mouse X&Y. Distance displayed.
	 *
	 */
	p5.prototype.dist = function(x1, y1, z1, x2, y2, z2) {
	  if (arguments.length === 4) {
	    // In the case of 2d: z1 means x2 and x2 means y2
	    return hypot(z1-x1, x2-y1);
	  } else if (arguments.length === 6) {
	    return hypot(x2-x1, y2-y1, z2-z1);
	  }
	};

	/**
	 * Returns Euler's number e (2.71828...) raised to the power of the n
	 * parameter. Maps to Math.exp().
	 *
	 * @method exp
	 * @param  {Number} n exponent to raise
	 * @return {Number}   e^n
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *
	 *   // Compute the exp() function with a value between 0 and 2
	 *   var xValue = map(mouseX, 0, width, 0, 2);
	 *   var yValue = exp(xValue);
	 *
	 *   var y = map(yValue, 0, 8, height, 0);
	 *
	 *   var legend = "exp (" + nfc(xValue, 3) +")\n= " + nf(yValue, 1, 4);
	 *   stroke(150);
	 *   line(mouseX, y, mouseX, height);
	 *   fill(0);
	 *   text(legend, 5, 15);
	 *   noStroke();
	 *   ellipse (mouseX,y, 7, 7);
	 *
	 *   // Draw the exp(x) curve,
	 *   // over the domain of x from 0 to 2
	 *   noFill();
	 *   stroke(0);
	 *   beginShape();
	 *   for (var x = 0; x < width; x++) {
	 *     xValue = map(x, 0, width, 0, 2);
	 *     yValue = exp(xValue);
	 *     y = map(yValue, 0, 8, height, 0);
	 *     vertex(x, y);
	 *   }
	 *
	 *   endShape();
	 *   line(0, 0, 0, height);
	 *   line(0, height-1, width, height-1);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * ellipse moves along a curve with mouse x. e^n displayed.
	 *
	 */
	p5.prototype.exp = Math.exp;

	/**
	 * Calculates the closest int value that is less than or equal to the
	 * value of the parameter. Maps to Math.floor().
	 *
	 * @method floor
	 * @param  {Number} n number to round down
	 * @return {Number}   rounded down number
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *   //map, mouseX between 0 and 5.
	 *   var ax = map(mouseX, 0, 100, 0, 5);
	 *   var ay = 66;
	 *
	 *   //Get the floor of the mapped number.
	 *   var bx = floor(map(mouseX, 0, 100, 0,5));
	 *   var by = 33;
	 *
	 *   // Multiply the mapped numbers by 20 to more easily
	 *   // see the changes.
	 *   stroke(0);
	 *   fill(0);
	 *   line(0, ay, ax * 20, ay);
	 *   line(0, by, bx * 20, by);
	 *
	 *   // Reformat the float returned by map and draw it.
	 *   noStroke();
	 *   text(nfc(ax, 2,2), ax, ay - 5);
	 *   text(nfc(bx,1,1), bx, by - 5);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals
	 *
	 */
	p5.prototype.floor = Math.floor;

	/**
	 * Calculates a number between two numbers at a specific increment. The amt
	 * parameter is the amount to interpolate between the two values where 0.0
	 * equal to the first point, 0.1 is very near the first point, 0.5 is
	 * half-way in between, etc. The lerp function is convenient for creating
	 * motion along a straight path and for drawing dotted lines.
	 *
	 * @method lerp
	 * @param  {Number} start first value
	 * @param  {Number} stop  second value
	 * @param  {Number} amt   number between 0.0 and 1.0
	 * @return {Number}       lerped value
	 * @example
	 * <div><code>
	 * function setup() {
	 *   background(200);
	 *   var a = 20;
	 *   var b = 80;
	 *   var c = lerp(a,b, .2);
	 *   var d = lerp(a,b, .5);
	 *   var e = lerp(a,b, .8);
	 *
	 *   var y = 50
	 *
	 *   strokeWeight(5);
	 *   stroke(0); // Draw the original points in black
	 *   point(a, y);
	 *   point(b, y);
	 *
	 *   stroke(100); // Draw the lerp points in gray
	 *   point(c, y);
	 *   point(d, y);
	 *   point(e, y);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 5 points horizontally staggered mid-canvas. mid 3 are grey, outer black
	 *
	 */
	p5.prototype.lerp = function(start, stop, amt) {
	  return amt*(stop-start)+start;
	};

	/**
	 * Calculates the natural logarithm (the base-e logarithm) of a number. This
	 * function expects the n parameter to be a value greater than 0.0. Maps to
	 * Math.log().
	 *
	 * @method log
	 * @param  {Number} n number greater than 0
	 * @return {Number}   natural logarithm of n
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *   var maxX = 2.8;
	 *   var maxY = 1.5;
	 *
	 *   // Compute the natural log of a value between 0 and maxX
	 *   var xValue = map(mouseX, 0, width, 0, maxX);
	 *   if (xValue > 0) { // Cannot take the log of a negative number.
	 *     var yValue = log(xValue);
	 *     var y = map(yValue, -maxY, maxY, height, 0);
	 *
	 *     // Display the calculation occurring.
	 *     var legend = "log(" + nf(xValue, 1, 2) + ")\n= " + nf(yValue, 1, 3);
	 *     stroke(150);
	 *     line(mouseX, y, mouseX, height);
	 *     fill(0);
	 *     text (legend, 5, 15);
	 *     noStroke();
	 *     ellipse (mouseX, y, 7, 7);
	 *   }
	 *
	 *   // Draw the log(x) curve,
	 *   // over the domain of x from 0 to maxX
	 *   noFill();
	 *   stroke(0);
	 *   beginShape();
	 *   for(var x=0; x < width; x++) {
	 *     xValue = map(x, 0, width, 0, maxX);
	 *     yValue = log(xValue);
	 *     y = map(yValue, -maxY, maxY, height, 0);
	 *     vertex(x, y);
	 *   }
	 *   endShape();
	 *   line(0,0,0,height);
	 *   line(0,height/2,width, height/2);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * ellipse moves along a curve with mouse x. natural logarithm of n displayed.
	 *
	 */
	p5.prototype.log = Math.log;

	/**
	 * Calculates the magnitude (or length) of a vector. A vector is a direction
	 * in space commonly used in computer graphics and linear algebra. Because it
	 * has no "start" position, the magnitude of a vector can be thought of as
	 * the distance from the coordinate 0,0 to its x,y value. Therefore, mag() is
	 * a shortcut for writing dist(0, 0, x, y).
	 *
	 * @method mag
	 * @param  {Number} a first value
	 * @param  {Number} b second value
	 * @return {Number}   magnitude of vector from (0,0) to (a,b)
	 * @example
	 * <div><code>
	 * function setup() {
	 *   var x1 = 20;
	 *   var x2 = 80;
	 *   var y1 = 30;
	 *   var y2 = 70;
	 *
	 *   line(0, 0, x1, y1);
	 *   print(mag(x1, y1));  // Prints "36.05551275463989"
	 *   line(0, 0, x2, y1);
	 *   print(mag(x2, y1));  // Prints "85.44003745317531"
	 *   line(0, 0, x1, y2);
	 *   print(mag(x1, y2));  // Prints "72.80109889280519"
	 *   line(0, 0, x2, y2);
	 *   print(mag(x2, y2));  // Prints "106.3014581273465"
	 * }
	 * </code></div>
	 *
	 * @alt
	 * 4 lines of different length radiate from top left of canvas.
	 *
	 */
	p5.prototype.mag = function(x, y) {
	  return hypot(x, y);
	};

	/**
	 * Re-maps a number from one range to another.
	 * <br><br>
	 * In the first example above, the number 25 is converted from a value in the
	 * range of 0 to 100 into a value that ranges from the left edge of the
	 * window (0) to the right edge (width).
	 *
	 * @method map
	 * @param  {Number} value  the incoming value to be converted
	 * @param  {Number} start1 lower bound of the value's current range
	 * @param  {Number} stop1  upper bound of the value's current range
	 * @param  {Number} start2 lower bound of the value's target range
	 * @param  {Number} stop2  upper bound of the value's target range
	 * @return {Number}        remapped number
	 * @example
	 *   <div><code>
	 *     var value = 25;
	 *     var m = map(value, 0, 100, 0, width);
	 *     ellipse(m, 50, 10, 10);
	 *   </code></div>
	 *
	 *   <div><code>
	 *     function setup() {
	 *       noStroke();
	 *     }
	 *
	 *     function draw() {
	 *       background(204);
	 *       var x1 = map(mouseX, 0, width, 25, 75);
	 *       ellipse(x1, 25, 25, 25);
	 *       var x2 = map(mouseX, 0, width, 0, 100);
	 *       ellipse(x2, 75, 25, 25);
	 *     }
	 *   </code></div>
	 *
	 * @alt
	 * 10 by 10 white ellipse with in mid left canvas
	 * 2 25 by 25 white ellipses move with mouse x. Bottom has more range from X
	 *
	 */
	p5.prototype.map = function(n, start1, stop1, start2, stop2) {
	  return ((n-start1)/(stop1-start1))*(stop2-start2)+start2;
	};

	/**
	 * Determines the largest value in a sequence of numbers, and then returns
	 * that value. max() accepts any number of Number parameters, or an Array
	 * of any length.
	 *
	 * @method max
	 * @param  {Number|Array} n0 Numbers to compare
	 * @return {Number}          maximum Number
	 * @example
	 * <div><code>
	 * function setup() {
	 *   // Change the elements in the array and run the sketch
	 *   // to show how max() works!
	 *   numArray = new Array(2,1,5,4,8,9);
	 *   fill(0);
	 *   noStroke();
	 *   text("Array Elements", 0, 10);
	 *   // Draw all numbers in the array
	 *   var spacing = 15;
	 *   var elemsY = 25;
	 *   for(var i = 0; i < numArray.length; i++) {
	 *     text(numArray[i], i * spacing, elemsY);
	 *   }
	 *   maxX = 33;
	 *   maxY = 80;
	 *   // Draw the Maximum value in the array.
	 *   textSize(32);
	 *   text(max(numArray), maxX, maxY);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 9
	 *
	 */
	p5.prototype.max = function() {
	  if (arguments[0] instanceof Array) {
	    return Math.max.apply(null,arguments[0]);
	  } else {
	    return Math.max.apply(null,arguments);
	  }
	};

	/**
	 * Determines the smallest value in a sequence of numbers, and then returns
	 * that value. min() accepts any number of Number parameters, or an Array
	 * of any length.
	 *
	 * @method min
	 * @param  {Number|Array} n0 Numbers to compare
	 * @return {Number}          minimum Number
	 * @example
	 * <div><code>
	 * function setup() {
	 *   // Change the elements in the array and run the sketch
	 *   // to show how min() works!
	 *   numArray = new Array(2,1,5,4,8,9);
	 *   fill(0);
	 *   noStroke();
	 *   text("Array Elements", 0, 10);
	 *   // Draw all numbers in the array
	 *   var spacing = 15;
	 *   var elemsY = 25;
	 *   for(var i = 0; i < numArray.length; i++) {
	 *     text(numArray[i], i * spacing, elemsY);
	 *   }
	 *   maxX = 33;
	 *   maxY = 80;
	 *   // Draw the Minimum value in the array.
	 *   textSize(32);
	 *   text(min(numArray), maxX, maxY);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 1
	 *
	 */
	p5.prototype.min = function() {
	  if (arguments[0] instanceof Array) {
	    return Math.min.apply(null,arguments[0]);
	  } else {
	    return Math.min.apply(null,arguments);
	  }
	};

	/**
	 * Normalizes a number from another range into a value between 0 and 1.
	 * Identical to map(value, low, high, 0, 1).
	 * Numbers outside of the range are not clamped to 0 and 1, because
	 * out-of-range values are often intentional and useful. (See the second
	 * example above.)
	 *
	 * @method norm
	 * @param  {Number} value incoming value to be normalized
	 * @param  {Number} start lower bound of the value's current range
	 * @param  {Number} stop  upper bound of the value's current range
	 * @return {Number}       normalized number
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *   currentNum = mouseX;
	 *   lowerBound = 0;
	 *   upperBound = width; //100;
	 *   normalized = norm(currentNum, lowerBound, upperBound);
	 *   lineY = 70
	 *   line(0, lineY, width, lineY);
	 *   //Draw an ellipse mapped to the non-normalized value.
	 *   noStroke();
	 *   fill(50)
	 *   var s = 7; // ellipse size
	 *   ellipse(currentNum, lineY, s, s);
	 *
	 *   // Draw the guide
	 *   guideY = lineY + 15;
	 *   text("0", 0, guideY);
	 *   textAlign(RIGHT);
	 *   text("100", width, guideY);
	 *
	 *   // Draw the normalized value
	 *   textAlign(LEFT);
	 *   fill(0);
	 *   textSize(32);
	 *   normalY = 40;
	 *   normalX = 20;
	 *   text(normalized, normalX, normalY);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * ellipse moves with mouse. 0 shown left & 100 right and updating values center
	 *
	 */
	p5.prototype.norm = function(n, start, stop) {
	  return this.map(n, start, stop, 0, 1);
	};

	/**
	 * Facilitates exponential expressions. The pow() function is an efficient
	 * way of multiplying numbers by themselves (or their reciprocals) in large
	 * quantities. For example, pow(3, 5) is equivalent to the expression
	 * 3*3*3*3*3 and pow(3, -5) is equivalent to 1 / 3*3*3*3*3. Maps to
	 * Math.pow().
	 *
	 * @method pow
	 * @param  {Number} n base of the exponential expression
	 * @param  {Number} e power by which to raise the base
	 * @return {Number}   n^e
	 * @example
	 * <div><code>
	 * function setup() {
	 *   //Exponentially increase the size of an ellipse.
	 *   eSize = 3; // Original Size
	 *   eLoc = 10; // Original Location
	 *
	 *   ellipse(eLoc, eLoc, eSize, eSize);
	 *
	 *   ellipse(eLoc*2, eLoc*2, pow(eSize, 2), pow(eSize, 2));
	 *
	 *   ellipse(eLoc*4, eLoc*4, pow(eSize, 3), pow(eSize, 3));
	 *
	 *   ellipse(eLoc*8, eLoc*8, pow(eSize, 4), pow(eSize, 4));
	 * }
	 * </code></div>
	 *
	 * @alt
	 * small to large ellipses radiating from top left of canvas
	 *
	 */
	p5.prototype.pow = Math.pow;

	/**
	 * Calculates the integer closest to the n parameter. For example,
	 * round(133.8) returns the value 134. Maps to Math.round().
	 *
	 * @method round
	 * @param  {Number} n number to round
	 * @return {Number}   rounded number
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *   //map, mouseX between 0 and 5.
	 *   var ax = map(mouseX, 0, 100, 0, 5);
	 *   var ay = 66;
	 *
	 *   // Round the mapped number.
	 *   var bx = round(map(mouseX, 0, 100, 0,5));
	 *   var by = 33;
	 *
	 *   // Multiply the mapped numbers by 20 to more easily
	 *   // see the changes.
	 *   stroke(0);
	 *   fill(0);
	 *   line(0, ay, ax * 20, ay);
	 *   line(0, by, bx * 20, by);
	 *
	 *   // Reformat the float returned by map and draw it.
	 *   noStroke();
	 *   text(nfc(ax, 2,2), ax, ay - 5);
	 *   text(nfc(bx,1,1), bx, by - 5);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * horizontal center line squared values displayed on top and regular on bottom.
	 *
	 */
	p5.prototype.round = Math.round;

	/**
	 * Squares a number (multiplies a number by itself). The result is always a
	 * positive number, as multiplying two negative numbers always yields a
	 * positive result. For example, -1 * -1 = 1.
	 *
	 * @method sq
	 * @param  {Number} n number to square
	 * @return {Number}   squared number
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *   eSize = 7;
	 *   x1 = map(mouseX, 0, width, 0, 10);
	 *   y1 = 80;
	 *   x2 = sq(x1);
	 *   y2 = 20;
	 *
	 *   // Draw the non-squared.
	 *   line(0, y1, width, y1);
	 *   ellipse(x1, y1, eSize, eSize);
	 *
	 *   // Draw the squared.
	 *   line(0, y2, width, y2);
	 *   ellipse(x2, y2, eSize, eSize);
	 *
	 *   // Draw dividing line.
	 *   stroke(100)
	 *   line(0, height/2, width, height/2);
	 *
	 *   // Draw text.
	 *   var spacing = 15;
	 *   noStroke();
	 *   fill(0);
	 *   text("x = " + x1, 0, y1 + spacing);
	 *   text("sq(x) = " + x2, 0, y2 + spacing);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * horizontal center line squared values displayed on top and regular on bottom.
	 *
	 */
	p5.prototype.sq = function(n) { return n*n; };

	/**
	 * Calculates the square root of a number. The square root of a number is
	 * always positive, even though there may be a valid negative root. The
	 * square root s of number a is such that s*s = a. It is the opposite of
	 * squaring. Maps to Math.sqrt().
	 *
	 * @method sqrt
	 * @param  {Number} n non-negative number to square root
	 * @return {Number}   square root of number
	 * @example
	 * <div><code>
	 * function draw() {
	 *   background(200);
	 *   eSize = 7;
	 *   x1 = mouseX;
	 *   y1 = 80;
	 *   x2 = sqrt(x1);
	 *   y2 = 20;
	 *
	 *   // Draw the non-squared.
	 *   line(0, y1, width, y1);
	 *   ellipse(x1, y1, eSize, eSize);
	 *
	 *   // Draw the squared.
	 *   line(0, y2, width, y2);
	 *   ellipse(x2, y2, eSize, eSize);
	 *
	 *   // Draw dividing line.
	 *   stroke(100)
	 *   line(0, height/2, width, height/2);
	 *
	 *   // Draw text.
	 *   noStroke();
	 *   fill(0);
	 *   var spacing = 15;
	 *   text("x = " + x1, 0, y1 + spacing);
	 *   text("sqrt(x) = " + x2, 0, y2 + spacing);
	 * }
	 * </code></div>
	 *
	 * @alt
	 * horizontal center line squareroot values displayed on top and regular on bottom.
	 *
	 */
	p5.prototype.sqrt = Math.sqrt;

	// Calculate the length of the hypotenuse of a right triangle
	// This won't under- or overflow in intermediate steps
	// https://en.wikipedia.org/wiki/Hypot
	function hypot(x, y, z) {
	  // Use the native implementation if it's available
	  if (typeof Math.hypot === 'function') {
	    return Math.hypot.apply(null, arguments);
	  }

	  // Otherwise use the V8 implementation
	  // https://github.com/v8/v8/blob/8cd3cf297287e581a49e487067f5cbd991b27123/src/js/math.js#L217
	  var length = arguments.length;
	  var args = [];
	  var max = 0;
	  for (var i = 0; i < length; i++) {
	    var n = arguments[i];
	    n = +n;
	    if (n === Infinity || n === -Infinity) {
	      return Infinity;
	    }
	    n = Math.abs(n);
	    if (n > max) {
	      max = n;
	    }
	    args[i] = n;
	  }

	  if (max === 0) {
	    max = 1;
	  }
	  var sum = 0;
	  var compensation = 0;
	  for (var j = 0; j < length; j++) {
	    var m = args[j] / max;
	    var summand = m * m - compensation;
	    var preliminary = sum + summand;
	    compensation = (preliminary - sum) - summand;
	    sum = preliminary;
	  }
	  return Math.sqrt(sum) * max;
	}

	module.exports = p5;

	},{"../core/core":37}],64:[function(_dereq_,module,exports){
	/**
	 * @module Math
	 * @submodule Math
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');


	/**
	 * Creates a new p5.Vector (the datatype for storing vectors). This provides a
	 * two or three dimensional vector, specifically a Euclidean (also known as
	 * geometric) vector. A vector is an entity that has both magnitude and
	 * direction.
	 *
	 * @method createVector
	 * @param {Number} [x] x component of the vector
	 * @param {Number} [y] y component of the vector
	 * @param {Number} [z] z component of the vector
	 */
	p5.prototype.createVector = function (x, y, z) {
	  if (this instanceof p5) {
	    return new p5.Vector(this, arguments);
	  } else {
	    return new p5.Vector(x, y, z);
	  }
	};

	module.exports = p5;

	},{"../core/core":37}],65:[function(_dereq_,module,exports){
	//////////////////////////////////////////////////////////////

	// http://mrl.nyu.edu/~perlin/noise/
	// Adapting from PApplet.java
	// which was adapted from toxi
	// which was adapted from the german demo group farbrausch
	// as used in their demo "art": http://www.farb-rausch.de/fr010src.zip

	// someday we might consider using "improved noise"
	// http://mrl.nyu.edu/~perlin/paper445.pdf
	// See: https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js/
	//      blob/master/introduction/Noise1D/noise.js

	/**
	 * @module Math
	 * @submodule Noise
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	var PERLIN_YWRAPB = 4;
	var PERLIN_YWRAP = 1<<PERLIN_YWRAPB;
	var PERLIN_ZWRAPB = 8;
	var PERLIN_ZWRAP = 1<<PERLIN_ZWRAPB;
	var PERLIN_SIZE = 4095;

	var perlin_octaves = 4; // default to medium smooth
	var perlin_amp_falloff = 0.5; // 50% reduction/octave

	var scaled_cosine = function(i) {
	  return 0.5*(1.0-Math.cos(i*Math.PI));
	};

	var perlin; // will be initialized lazily by noise() or noiseSeed()


	/**
	 * Returns the Perlin noise value at specified coordinates. Perlin noise is
	 * a random sequence generator producing a more natural ordered, harmonic
	 * succession of numbers compared to the standard <b>random()</b> function.
	 * It was invented by Ken Perlin in the 1980s and been used since in
	 * graphical applications to produce procedural textures, natural motion,
	 * shapes, terrains etc.<br /><br /> The main difference to the
	 * <b>random()</b> function is that Perlin noise is defined in an infinite
	 * n-dimensional space where each pair of coordinates corresponds to a
	 * fixed semi-random value (fixed only for the lifespan of the program; see
	 * the noiseSeed() function). p5.js can compute 1D, 2D and 3D noise,
	 * depending on the number of coordinates given. The resulting value will
	 * always be between 0.0 and 1.0. The noise value can be animated by moving
	 * through the noise space as demonstrated in the example above. The 2nd
	 * and 3rd dimension can also be interpreted as time.<br /><br />The actual
	 * noise is structured similar to an audio signal, in respect to the
	 * function's use of frequencies. Similar to the concept of harmonics in
	 * physics, perlin noise is computed over several octaves which are added
	 * together for the final result. <br /><br />Another way to adjust the
	 * character of the resulting sequence is the scale of the input
	 * coordinates. As the function works within an infinite space the value of
	 * the coordinates doesn't matter as such, only the distance between
	 * successive coordinates does (eg. when using <b>noise()</b> within a
	 * loop). As a general rule the smaller the difference between coordinates,
	 * the smoother the resulting noise sequence will be. Steps of 0.005-0.03
	 * work best for most applications, but this will differ depending on use.
	 *
	 *
	 * @method noise
	 * @param  {Number} x   x-coordinate in noise space
	 * @param  {Number} y   y-coordinate in noise space
	 * @param  {Number} z   z-coordinate in noise space
	 * @return {Number}     Perlin noise value (between 0 and 1) at specified
	 *                      coordinates
	 * @example
	 * <div>
	 * <code>var xoff = 0.0;
	 *
	 * function draw() {
	 *   background(204);
	 *   xoff = xoff + .01;
	 *   var n = noise(xoff) * width;
	 *   line(n, 0, n, height);
	 * }
	 * </code>
	 * </div>
	 * <div>
	 * <code>var noiseScale=0.02;
	 *
	 * function draw() {
	 *   background(0);
	 *   for (var x=0; x < width; x++) {
	 *     var noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);
	 *     stroke(noiseVal*255);
	 *     line(x, mouseY+noiseVal*80, x, height);
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * vertical line moves left to right with updating noise values.
	 * horizontal wave pattern effected by mouse x-position & updating noise values.
	 *
	 */

	p5.prototype.noise = function(x,y,z) {
	  y = y || 0;
	  z = z || 0;

	  if (perlin == null) {
	    perlin = new Array(PERLIN_SIZE + 1);
	    for (var i = 0; i < PERLIN_SIZE + 1; i++) {
	      perlin[i] = Math.random();
	    }
	  }

	  if (x<0) { x=-x; }
	  if (y<0) { y=-y; }
	  if (z<0) { z=-z; }

	  var xi=Math.floor(x), yi=Math.floor(y), zi=Math.floor(z);
	  var xf = x - xi;
	  var yf = y - yi;
	  var zf = z - zi;
	  var rxf, ryf;

	  var r=0;
	  var ampl=0.5;

	  var n1,n2,n3;

	  for (var o=0; o<perlin_octaves; o++) {
	    var of=xi+(yi<<PERLIN_YWRAPB)+(zi<<PERLIN_ZWRAPB);

	    rxf = scaled_cosine(xf);
	    ryf = scaled_cosine(yf);

	    n1  = perlin[of&PERLIN_SIZE];
	    n1 += rxf*(perlin[(of+1)&PERLIN_SIZE]-n1);
	    n2  = perlin[(of+PERLIN_YWRAP)&PERLIN_SIZE];
	    n2 += rxf*(perlin[(of+PERLIN_YWRAP+1)&PERLIN_SIZE]-n2);
	    n1 += ryf*(n2-n1);

	    of += PERLIN_ZWRAP;
	    n2  = perlin[of&PERLIN_SIZE];
	    n2 += rxf*(perlin[(of+1)&PERLIN_SIZE]-n2);
	    n3  = perlin[(of+PERLIN_YWRAP)&PERLIN_SIZE];
	    n3 += rxf*(perlin[(of+PERLIN_YWRAP+1)&PERLIN_SIZE]-n3);
	    n2 += ryf*(n3-n2);

	    n1 += scaled_cosine(zf)*(n2-n1);

	    r += n1*ampl;
	    ampl *= perlin_amp_falloff;
	    xi<<=1;
	    xf*=2;
	    yi<<=1;
	    yf*=2;
	    zi<<=1;
	    zf*=2;

	    if (xf>=1.0) { xi++; xf--; }
	    if (yf>=1.0) { yi++; yf--; }
	    if (zf>=1.0) { zi++; zf--; }
	  }
	  return r;
	};


	/**
	 *
	 * Adjusts the character and level of detail produced by the Perlin noise
	 * function. Similar to harmonics in physics, noise is computed over
	 * several octaves. Lower octaves contribute more to the output signal and
	 * as such define the overall intensity of the noise, whereas higher octaves
	 * create finer grained details in the noise sequence.
	 * <br><br>
	 * By default, noise is computed over 4 octaves with each octave contributing
	 * exactly half than its predecessor, starting at 50% strength for the 1st
	 * octave. This falloff amount can be changed by adding an additional function
	 * parameter. Eg. a falloff factor of 0.75 means each octave will now have
	 * 75% impact (25% less) of the previous lower octave. Any value between
	 * 0.0 and 1.0 is valid, however note that values greater than 0.5 might
	 * result in greater than 1.0 values returned by <b>noise()</b>.
	 * <br><br>
	 * By changing these parameters, the signal created by the <b>noise()</b>
	 * function can be adapted to fit very specific needs and characteristics.
	 *
	 * @method noiseDetail
	 * @param {Number} lod number of octaves to be used by the noise
	 * @param {Number} falloff falloff factor for each octave
	 * @example
	 * <div>
	 * <code>
	 *
	 * var noiseVal;
	 * var noiseScale=0.02;
	 *
	 * function setup() {
	 *   createCanvas(100,100);
	 * }
	 *
	 * function draw() {
	 *   background(0);
	 *   for (var y = 0; y < height; y++) {
	 *     for (var x = 0; x < width/2; x++) {
	 *       noiseDetail(2,0.2);
	 *       noiseVal = noise((mouseX+x) * noiseScale,
	 *                        (mouseY+y) * noiseScale);
	 *       stroke(noiseVal*255);
	 *       point(x,y);
	 *       noiseDetail(8,0.65);
	 *       noiseVal = noise((mouseX + x + width/2) * noiseScale,
	 *                        (mouseY + y) * noiseScale);
	 *       stroke(noiseVal*255);
	 *       point(x + width/2, y);
	 *     }
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 2 vertical grey smokey patterns affected my mouse x-position and noise.
	 *
	 */
	p5.prototype.noiseDetail = function(lod, falloff) {
	  if (lod>0)     { perlin_octaves=lod; }
	  if (falloff>0) { perlin_amp_falloff=falloff; }
	};

	/**
	 * Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>
	 * produces different results each time the program is run. Set the
	 * <b>value</b> parameter to a constant to return the same pseudo-random
	 * numbers each time the software is run.
	 *
	 * @method noiseSeed
	 * @param {Number} seed   the seed value
	 * @example
	 * <div>
	 * <code>var xoff = 0.0;
	 *
	 * function setup() {
	 *   noiseSeed(99);
	 *   stroke(0, 10);
	 * }
	 *
	 * function draw() {
	 *   xoff = xoff + .01;
	 *   var n = noise(xoff) * width;
	 *   line(n, 0, n, height);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * vertical grey lines drawing in pattern affected by noise.
	 *
	 */
	p5.prototype.noiseSeed = function(seed) {
	  // Linear Congruential Generator
	  // Variant of a Lehman Generator
	  var lcg = (function() {
	    // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes
	    // m is basically chosen to be large (as it is the max period)
	    // and for its relationships to a and c
	    var m = 4294967296,
	    // a - 1 should be divisible by m's prime factors
	    a = 1664525,
	     // c and m should be co-prime
	    c = 1013904223,
	    seed, z;
	    return {
	      setSeed : function(val) {
	        // pick a random seed if val is undefined or null
	        // the >>> 0 casts the seed to an unsigned 32-bit integer
	        z = seed = (val == null ? Math.random() * m : val) >>> 0;
	      },
	      getSeed : function() {
	        return seed;
	      },
	      rand : function() {
	        // define the recurrence relationship
	        z = (a * z + c) % m;
	        // return a float in [0, 1)
	        // if z = m then z / m = 0 therefore (z % m) / m < 1 always
	        return z / m;
	      }
	    };
	  }());

	  lcg.setSeed(seed);
	  perlin = new Array(PERLIN_SIZE + 1);
	  for (var i = 0; i < PERLIN_SIZE + 1; i++) {
	    perlin[i] = lcg.rand();
	  }
	};

	module.exports = p5;

	},{"../core/core":37}],66:[function(_dereq_,module,exports){
	/**
	 * @module Math
	 * @submodule Math
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var polarGeometry = _dereq_('./polargeometry');
	var constants = _dereq_('../core/constants');

	/**
	 * A class to describe a two or three dimensional vector, specifically
	 * a Euclidean (also known as geometric) vector. A vector is an entity
	 * that has both magnitude and direction. The datatype, however, stores
	 * the components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude
	 * and direction can be accessed via the methods mag() and heading().
	 * <br><br>
	 * In many of the p5.js examples, you will see p5.Vector used to describe a
	 * position, velocity, or acceleration. For example, if you consider a rectangle
	 * moving across the screen, at any given instant it has a position (a vector
	 * that points from the origin to its location), a velocity (the rate at which
	 * the object's position changes per time unit, expressed as a vector), and
	 * acceleration (the rate at which the object's velocity changes per time
	 * unit, expressed as a vector).
	 * <br><br>
	 * Since vectors represent groupings of values, we cannot simply use
	 * traditional addition/multiplication/etc. Instead, we'll need to do some
	 * "vector" math, which is made easy by the methods inside the p5.Vector class.
	 *
	 * @class p5.Vector
	 * @constructor
	 * @param {Number} [x] x component of the vector
	 * @param {Number} [y] y component of the vector
	 * @param {Number} [z] z component of the vector
	 * @example
	 * <div>
	 * <code>
	 * var v1 = createVector(40, 50);
	 * var v2 = createVector(40, 50);
	 *
	 * ellipse(v1.x, v1.y, 50, 50);
	 * ellipse(v2.x, v2.y, 50, 50);
	 * v1.add(v2);
	 * ellipse(v1.x, v1.y, 50, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 2 white ellipses. One center-left the other bottom right and off canvas
	 *
	 */
	p5.Vector = function() {
	  var x,y,z;
	  // This is how it comes in with createVector()
	  if(arguments[0] instanceof p5) {
	    // save reference to p5 if passed in
	    this.p5 = arguments[0];
	    x  = arguments[1][0] || 0;
	    y  = arguments[1][1] || 0;
	    z  = arguments[1][2] || 0;
	  // This is what we'll get with new p5.Vector()
	  } else {
	    x = arguments[0] || 0;
	    y = arguments[1] || 0;
	    z = arguments[2] || 0;
	  }
	  /**
	   * The x component of the vector
	   * @property x
	   * @type {Number}
	   */
	  this.x = x;
	  /**
	   * The y component of the vector
	   * @property y
	   * @type {Number}
	   */
	  this.y = y;
	  /**
	   * The z component of the vector
	   * @property z
	   * @type {Number}
	   */
	  this.z = z;
	};

	/**
	 * Returns a string representation of a vector v by calling String(v)
	 * or v.toString(). This method is useful for logging vectors in the
	 * console.
	 * @method  toString
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var v = createVector(20,30);
	 *   print(String(v)); // prints "p5.Vector Object : [20, 30, 0]"
	 * }
	 * </div></code>
	 *
	 */
	p5.Vector.prototype.toString = function p5VectorToString() {
	  return 'p5.Vector Object : ['+ this.x +', '+ this.y +', '+ this.z + ']';
	};

	/**
	 * Sets the x, y, and z component of the vector using two or three separate
	 * variables, the data from a p5.Vector, or the values from a float array.
	 * @method set
	 *
	 * @param {Number|p5.Vector|Array} [x] the x component of the vector or a
	 *                                     p5.Vector or an Array
	 * @param {Number}                 [y] the y component of the vector
	 * @param {Number}                 [z] the z component of the vector
	 * @example
	 * <div class="norender">
	 * <code>
	 * function setup() {
	 *    var v = createVector(1, 2, 3);
	 *    v.set(4,5,6); // Sets vector to [4, 5, 6]
	 *
	 *    var v1 = createVector(0, 0, 0);
	 *    var arr = [1, 2, 3];
	 *    v1.set(arr); // Sets vector to [1, 2, 3]
	 * }
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.set = function (x, y, z) {
	  if (x instanceof p5.Vector) {
	    this.x = x.x || 0;
	    this.y = x.y || 0;
	    this.z = x.z || 0;
	    return this;
	  }
	  if (x instanceof Array) {
	    this.x = x[0] || 0;
	    this.y = x[1] || 0;
	    this.z = x[2] || 0;
	    return this;
	  }
	  this.x = x || 0;
	  this.y = y || 0;
	  this.z = z || 0;
	  return this;
	};

	/**
	 * Gets a copy of the vector, returns a p5.Vector object.
	 *
	 * @method copy
	 * @return {p5.Vector} the copy of the p5.Vector object
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v1 = createVector(1, 2, 3);
	 * var v2 = v1.copy();
	 * print(v1.x == v2.x && v1.y == v2.y && v1.z == v2.z);
	 * // Prints "true"
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.copy = function () {
	  if (this.p5) {
	    return new p5.Vector(this.p5,[this.x, this.y, this.z]);
	  } else {
	    return new p5.Vector(this.x,this.y,this.z);
	  }
	};

	/**
	 * Adds x, y, and z components to a vector, adds one vector to another, or
	 * adds two independent vectors together. The version of the method that adds
	 * two vectors together is a static method and returns a p5.Vector, the others
	 * acts directly on the vector. See the examples for more context.
	 *
	 * @method add
	 * @chainable
	 * @param  {Number|p5.Vector|Array} x   the x component of the vector to be
	 *                                      added or a p5.Vector or an Array
	 * @param  {Number}                 [y] the y component of the vector to be
	 *                                      added
	 * @param  {Number}                 [z] the z component of the vector to be
	 *                                      added
	 * @return {p5.Vector}                  the p5.Vector object.
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(1, 2, 3);
	 * v.add(4,5,6);
	 * // v's compnents are set to [5, 7, 9]
	 * </code>
	 * </div>
	 * <div class="norender">
	 * <code>
	 * // Static method
	 * var v1 = createVector(1, 2, 3);
	 * var v2 = createVector(2, 3, 4);
	 *
	 * var v3 = p5.Vector.add(v1, v2);
	 * // v3 has components [3, 5, 7]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.add = function (x, y, z) {
	  if (x instanceof p5.Vector) {
	    this.x += x.x || 0;
	    this.y += x.y || 0;
	    this.z += x.z || 0;
	    return this;
	  }
	  if (x instanceof Array) {
	    this.x += x[0] || 0;
	    this.y += x[1] || 0;
	    this.z += x[2] || 0;
	    return this;
	  }
	  this.x += x || 0;
	  this.y += y || 0;
	  this.z += z || 0;
	  return this;
	};

	/**
	 * Subtracts x, y, and z components from a vector, subtracts one vector from
	 * another, or subtracts two independent vectors. The version of the method
	 * that subtracts two vectors is a static method and returns a p5.Vector, the
	 * other acts directly on the vector. See the examples for more context.
	 *
	 * @method sub
	 * @chainable
	 * @param  {Number|p5.Vector|Array} x   the x component of the vector or a
	 *                                      p5.Vector or an Array
	 * @param  {Number}                 [y] the y component of the vector
	 * @param  {Number}                 [z] the z component of the vector
	 * @return {p5.Vector}                  p5.Vector object.
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(4, 5, 6);
	 * v.sub(1, 1, 1);
	 * // v's compnents are set to [3, 4, 5]
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * // Static method
	 * var v1 = createVector(2, 3, 4);
	 * var v2 = createVector(1, 2, 3);
	 *
	 * var v3 = p5.Vector.sub(v1, v2);
	 * // v3 has compnents [1, 1, 1]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.sub = function (x, y, z) {
	  if (x instanceof p5.Vector) {
	    this.x -= x.x || 0;
	    this.y -= x.y || 0;
	    this.z -= x.z || 0;
	    return this;
	  }
	  if (x instanceof Array) {
	    this.x -= x[0] || 0;
	    this.y -= x[1] || 0;
	    this.z -= x[2] || 0;
	    return this;
	  }
	  this.x -= x || 0;
	  this.y -= y || 0;
	  this.z -= z || 0;
	  return this;
	};

	/**
	 * Multiply the vector by a scalar. The static version of this method
	 * creates a new p5.Vector while the non static version acts on the vector
	 * directly. See the examples for more context.
	 *
	 * @method mult
	 * @chainable
	 * @param  {Number}    n the number to multiply with the vector
	 * @return {p5.Vector} a reference to the p5.Vector object (allow chaining)
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(1, 2, 3);
	 * v.mult(2);
	 * // v's compnents are set to [2, 4, 6]
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * // Static method
	 * var v1 = createVector(1, 2, 3);
	 * var v2 = p5.Vector.mult(v1, 2);
	 * // v2 has compnents [2, 4, 6]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.mult = function (n) {
	  this.x *= n || 0;
	  this.y *= n || 0;
	  this.z *= n || 0;
	  return this;
	};

	/**
	 * Divide the vector by a scalar. The static version of this method creates a
	 * new p5.Vector while the non static version acts on the vector directly.
	 * See the examples for more context.
	 *
	 * @method div
	 * @chainable
	 * @param  {number}    n the number to divide the vector by
	 * @return {p5.Vector} a reference to the p5.Vector object (allow chaining)
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(6, 4, 2);
	 * v.div(2); //v's compnents are set to [3, 2, 1]
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * // Static method
	 * var v1  = createVector(6, 4, 2);
	 * var v2 = p5.Vector.div(v, 2);
	 * // v2 has compnents [3, 2, 1]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.div = function (n) {
	  this.x /= n;
	  this.y /= n;
	  this.z /= n;
	  return this;
	};

	/**
	 * Calculates the magnitude (length) of the vector and returns the result as
	 * a float (this is simply the equation sqrt(x*x + y*y + z*z).)
	 *
	 * @method mag
	 * @return {Number} magnitude of the vector
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(20.0, 30.0, 40.0);
	 * var m = v.mag();
	 * print(m); // Prints "53.85164807134504"
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.mag = function () {
	  return Math.sqrt(this.magSq());
	};

	/**
	 * Calculates the squared magnitude of the vector and returns the result
	 * as a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.)
	 * Faster if the real length is not required in the
	 * case of comparing vectors, etc.
	 *
	 * @method magSq
	 * @return {number} squared magnitude of the vector
	 * @example
	 * <div class="norender">
	 * <code>
	 * // Static method
	 * var v1 = createVector(6, 4, 2);
	 * print(v1.magSq()); // Prints "56"
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.magSq = function () {
	  var x = this.x, y = this.y, z = this.z;
	  return (x * x + y * y + z * z);
	};

	/**
	 * Calculates the dot product of two vectors. The version of the method
	 * that computes the dot product of two independent vectors is a static
	 * method. See the examples for more context.
	 *
	 *
	 * @method dot
	 * @param  {Number|p5.Vector} x   x component of the vector or a p5.Vector
	 * @param  {Number}           [y] y component of the vector
	 * @param  {Number}           [z] z component of the vector
	 * @return {Number}                 the dot product
	 *
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v1 = createVector(1, 2, 3);
	 * var v2 = createVector(2, 3, 4);
	 *
	 * print(v1.dot(v2)); // Prints "20"
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * //Static method
	 * var v1 = createVector(1, 2, 3);
	 * var v2 = createVector(3, 2, 1);
	 * print (p5.Vector.dot(v1, v2)); // Prints "10"
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.dot = function (x, y, z) {
	  if (x instanceof p5.Vector) {
	    return this.dot(x.x, x.y, x.z);
	  }
	  return this.x * (x || 0) +
	         this.y * (y || 0) +
	         this.z * (z || 0);
	};

	/**
	 * Calculates and returns a vector composed of the cross product between
	 * two vectors. Both the static and non static methods return a new p5.Vector.
	 * See the examples for more context.
	 *
	 * @method cross
	 * @param  {p5.Vector} v p5.Vector to be crossed
	 * @return {p5.Vector}   p5.Vector composed of cross product
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v1 = createVector(1, 2, 3);
	 * var v2 = createVector(1, 2, 3);
	 *
	 * v1.cross(v2); // v's components are [0, 0, 0]
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * // Static method
	 * var v1 = createVector(1, 0, 0);
	 * var v2 = createVector(0, 1, 0);
	 *
	 * var crossProduct = p5.Vector.cross(v1, v2);
	 * // crossProduct has components [0, 0, 1]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.cross = function (v) {
	  var x = this.y * v.z - this.z * v.y;
	  var y = this.z * v.x - this.x * v.z;
	  var z = this.x * v.y - this.y * v.x;
	  if (this.p5) {
	    return new p5.Vector(this.p5,[x,y,z]);
	  } else {
	    return new p5.Vector(x,y,z);
	  }
	};

	/**
	 * Calculates the Euclidean distance between two points (considering a
	 * point as a vector object).
	 *
	 * @method dist
	 * @param  {p5.Vector} v the x, y, and z coordinates of a p5.Vector
	 * @return {Number}      the distance
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v1 = createVector(1, 0, 0);
	 * var v2 = createVector(0, 1, 0);
	 *
	 * var distance = v1.dist(v2); // distance is 1.4142...
	 * </code>
	 * </div>
	 * <div class="norender">
	 * <code>
	 * // Static method
	 * var v1 = createVector(1, 0, 0);
	 * var v2 = createVector(0, 1, 0);
	 *
	 * var distance = p5.Vector.dist(v1,v2);
	 * // distance is 1.4142...
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.dist = function (v) {
	  var d = v.copy().sub(this);
	  return d.mag();
	};

	/**
	 * Normalize the vector to length 1 (make it a unit vector).
	 *
	 * @method normalize
	 * @return {p5.Vector} normalized p5.Vector
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(10, 20, 2);
	 * // v has compnents [10.0, 20.0, 2.0]
	 * v.normalize();
	 * // v's compnents are set to
	 * // [0.4454354, 0.8908708, 0.089087084]
	 * </code>
	 * </div>
	 *
	 */
	p5.Vector.prototype.normalize = function () {
	  return this.mag() === 0 ? this : this.div(this.mag());
	};

	/**
	 * Limit the magnitude of this vector to the value used for the <b>max</b>
	 * parameter.
	 *
	 * @method limit
	 * @param  {Number}    max the maximum magnitude for the vector
	 * @return {p5.Vector}     the modified p5.Vector
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(10, 20, 2);
	 * // v has compnents [10.0, 20.0, 2.0]
	 * v.limit(5);
	 * // v's compnents are set to
	 * // [2.2271771, 4.4543543, 0.4454354]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.limit = function (max) {
	  var mSq = this.magSq();
	  if(mSq > max*max) {
	    this.div(Math.sqrt(mSq)); //normalize it
	    this.mult(max);
	  }
	  return this;
	};

	/**
	 * Set the magnitude of this vector to the value used for the <b>len</b>
	 * parameter.
	 *
	 * @method setMag
	 * @param  {number}    len the new length for this vector
	 * @return {p5.Vector}     the modified p5.Vector
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v1 = createVector(10, 20, 2);
	 * // v has compnents [10.0, 20.0, 2.0]
	 * v1.setMag(10);
	 * // v's compnents are set to [6.0, 8.0, 0.0]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.setMag = function (n) {
	  return this.normalize().mult(n);
	};

	/**
	 * Calculate the angle of rotation for this vector (only 2D vectors)
	 *
	 * @method heading
	 * @return {Number} the angle of rotation
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var v1 = createVector(30,50);
	 *   print(v1.heading()); // 1.0303768265243125
	 *
	 *   var v1 = createVector(40,50);
	 *   print(v1.heading()); // 0.8960553845713439
	 *
	 *   var v1 = createVector(30,70);
	 *   print(v1.heading()); // 1.1659045405098132
	 * }
	 * </div></code>
	 */
	p5.Vector.prototype.heading = function () {
	  var h = Math.atan2(this.y, this.x);
	  if (this.p5) {
	    if (this.p5._angleMode === constants.RADIANS) {
	      return h;
	    } else {
	      return polarGeometry.radiansToDegrees(h);
	    }
	  } else {
	    return h;
	  }
	};

	/**
	 * Rotate the vector by an angle (only 2D vectors), magnitude remains the
	 * same
	 *
	 * @method rotate
	 * @param  {number}    angle the angle of rotation
	 * @return {p5.Vector} the modified p5.Vector
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(10.0, 20.0);
	 * // v has compnents [10.0, 20.0, 0.0]
	 * v.rotate(HALF_PI);
	 * // v's compnents are set to [-20.0, 9.999999, 0.0]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.rotate = function (a) {
	  if (this.p5) {
	    if (this.p5._angleMode === constants.DEGREES) {
	      a = polarGeometry.degreesToRadians(a);
	    }
	  }
	  var newHeading = this.heading() + a;
	  var mag = this.mag();
	  this.x = Math.cos(newHeading) * mag;
	  this.y = Math.sin(newHeading) * mag;
	  return this;
	};

	/**
	 * Linear interpolate the vector to another vector
	 *
	 * @method lerp
	 * @param  {p5.Vector} x   the x component or the p5.Vector to lerp to
	 * @param  {p5.Vector} [y] y the y component
	 * @param  {p5.Vector} [z] z the z component
	 * @param  {Number}    amt the amount of interpolation; some value between 0.0
	 *                         (old vector) and 1.0 (new vector). 0.1 is very near
	 *                         the new vector. 0.5 is halfway in between.
	 * @return {p5.Vector}     the modified p5.Vector
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = createVector(1, 1, 0);
	 *
	 * v.lerp(3, 3, 0, 0.5); // v now has components [2,2,0]
	 * </code>
	 * </div>
	 *
	 * <div class="norender">
	 * <code>
	 * var v1 = createVector(0, 0, 0);
	 * var v2 = createVector(100, 100, 0);
	 *
	 * var v3 = p5.Vector.lerp(v1, v2, 0.5);
	 * // v3 has components [50,50,0]
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.lerp = function (x, y, z, amt) {
	  if (x instanceof p5.Vector) {
	    return this.lerp(x.x, x.y, x.z, y);
	  }
	  this.x += (x - this.x) * amt || 0;
	  this.y += (y - this.y) * amt || 0;
	  this.z += (z - this.z) * amt || 0;
	  return this;
	};

	/**
	 * Return a representation of this vector as a float array. This is only
	 * for temporary use. If used in any other fashion, the contents should be
	 * copied by using the <b>p5.Vector.copy()</b> method to copy into your own
	 * array.
	 *
	 * @method array
	 * @return {Array} an Array with the 3 values
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var v = createVector(20,30);
	 *   print(v.array()); // Prints : Array [20, 30, 0]
	 * }
	 * </div></code>
	 * <div class="norender">
	 * <code>
	 * var v = createVector(10.0, 20.0, 30.0);
	 * var f = v.array();
	 * print(f[0]); // Prints "10.0"
	 * print(f[1]); // Prints "20.0"
	 * print(f[2]); // Prints "30.0"
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.array = function () {
	  return [this.x || 0, this.y || 0, this.z || 0];
	};

	/**
	 * Equality check against a p5.Vector
	 *
	 * @method equals
	 * @param {Number|p5.Vector|Array} [x] the x component of the vector or a
	 *                                     p5.Vector or an Array
	 * @param {Number}                 [y] the y component of the vector
	 * @param {Number}                 [z] the z component of the vector
	 * @return {Boolean} whether the vectors are equals
	 * @example
	 * <div class = "norender"><code>
	 * v1 = createVector(5,10,20);
	 * v2 = createVector(5,10,20);
	 * v3 = createVector(13,10,19);
	 *
	 * print(v1.equals(v2.x,v2.y,v2.z)); // true
	 * print(v1.equals(v3.x,v3.y,v3.z)); // false
	 * </div></code>
	 * <div class="norender">
	 * <code>
	 * var v1 = createVector(10.0, 20.0, 30.0);
	 * var v2 = createVector(10.0, 20.0, 30.0);
	 * var v3 = createVector(0.0, 0.0, 0.0);
	 * print (v1.equals(v2)) // true
	 * print (v1.equals(v3)) // false
	 * </code>
	 * </div>
	 */
	p5.Vector.prototype.equals = function (x, y, z) {
	  var a, b, c;
	  if (x instanceof p5.Vector) {
	    a = x.x || 0;
	    b = x.y || 0;
	    c = x.z || 0;
	  } else if (x instanceof Array) {
	    a = x[0] || 0;
	    b = x[1] || 0;
	    c = x[2] || 0;
	  } else {
	    a = x || 0;
	    b = y || 0;
	    c = z || 0;
	  }
	  return this.x === a && this.y === b && this.z === c;
	};


	// Static Methods


	/**
	 * Make a new 2D unit vector from an angle
	 *
	 * @method fromAngle
	 * @static
	 * @param {Number}     angle the desired angle
	 * @return {p5.Vector}       the new p5.Vector object
	 * @example
	 * <div>
	 * <code>
	 * function draw() {
	 *   background (200);
	 *
	 *   // Create a variable, proportional to the mouseX,
	 *   // varying from 0-360, to represent an angle in degrees.
	 *   angleMode(DEGREES);
	 *   var myDegrees = map(mouseX, 0,width, 0,360);
	 *
	 *   // Display that variable in an onscreen text.
	 *   // (Note the nfc() function to truncate additional decimal places,
	 *   // and the "\xB0" character for the degree symbol.)
	 *   var readout = "angle = " + nfc(myDegrees,1,1) + "\xB0"
	 *   noStroke();
	 *   fill (0);
	 *   text (readout, 5, 15);
	 *
	 *   // Create a p5.Vector using the fromAngle function,
	 *   // and extract its x and y components.
	 *   var v = p5.Vector.fromAngle(radians(myDegrees));
	 *   var vx = v.x;
	 *   var vy = v.y;
	 *
	 *   push();
	 *   translate (width/2, height/2);
	 *   noFill();
	 *   stroke (150);
	 *   line (0,0, 30,0);
	 *   stroke (0);
	 *   line (0,0, 30*vx, 30*vy);
	 *   pop()
	 * }
	 * </code>
	 * </div>
	 */
	p5.Vector.fromAngle = function(angle) {
	  if (this.p5) {
	    if (this.p5._angleMode === constants.DEGREES) {
	      angle = polarGeometry.degreesToRadians(angle);
	    }
	  }
	  if (this.p5) {
	    return new p5.Vector(this.p5,[Math.cos(angle),Math.sin(angle),0]);
	  } else {
	    return new p5.Vector(Math.cos(angle),Math.sin(angle),0);
	  }
	};

	/**
	 * Make a new 2D unit vector from a random angle
	 *
	 * @method random2D
	 * @static
	 * @return {p5.Vector} the new p5.Vector object
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = p5.Vector.random2D();
	 * // May make v's attributes something like:
	 * // [0.61554617, -0.51195765, 0.0] or
	 * // [-0.4695841, -0.14366731, 0.0] or
	 * // [0.6091097, -0.22805278, 0.0]
	 * </code>
	 * </div>
	 */
	p5.Vector.random2D = function () {
	  var angle;
	  // A lot of nonsense to determine if we know about a
	  // p5 sketch and whether we should make a random angle in degrees or radians
	  if (this.p5) {
	    if (this.p5._angleMode === constants.DEGREES) {
	      angle = this.p5.random(360);
	    } else {
	      angle = this.p5.random(constants.TWO_PI);
	    }
	  } else {
	    angle = Math.random()*Math.PI*2;
	  }
	  return this.fromAngle(angle);
	};

	/**
	 * Make a new random 3D unit vector.
	 *
	 * @method random3D
	 * @static
	 * @return {p5.Vector} the new p5.Vector object
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v = p5.Vector.random3D();
	 * // May make v's attributes something like:
	 * // [0.61554617, -0.51195765, 0.599168] or
	 * // [-0.4695841, -0.14366731, -0.8711202] or
	 * // [0.6091097, -0.22805278, -0.7595902]
	 * </code>
	 * </div>
	 */
	p5.Vector.random3D = function () {
	  var angle,vz;
	  // If we know about p5
	  if (this.p5) {
	    angle = this.p5.random(0,constants.TWO_PI);
	    vz = this.p5.random(-1,1);
	  } else {
	    angle = Math.random()*Math.PI*2;
	    vz = Math.random()*2-1;
	  }
	  var vx = Math.sqrt(1-vz*vz)*Math.cos(angle);
	  var vy = Math.sqrt(1-vz*vz)*Math.sin(angle);
	  if (this.p5) {
	    return new p5.Vector(this.p5,[vx,vy,vz]);
	  } else {
	    return new p5.Vector(vx,vy,vz);
	  }
	};


	/**
	 * Adds two vectors together and returns a new one.
	 *
	 * @static
	 * @param  {p5.Vector} v1 a p5.Vector to add
	 * @param  {p5.Vector} v2 a p5.Vector to add
	 * @param  {p5.Vector} target if undefined a new vector will be created
	 * @return {p5.Vector} the resulting p5.Vector
	 *
	 */

	p5.Vector.add = function (v1, v2, target) {
	  if (!target) {
	    target = v1.copy();
	  } else {
	    target.set(v1);
	  }
	  target.add(v2);
	  return target;
	};

	/**
	 * Subtracts one p5.Vector from another and returns a new one.  The second
	 * vector (v2) is subtracted from the first (v1), resulting in v1-v2.
	 *
	 * @static
	 * @param  {p5.Vector} v1 a p5.Vector to subtract from
	 * @param  {p5.Vector} v2 a p5.Vector to subtract
	 * @param  {p5.Vector} target if undefined a new vector will be created
	 * @return {p5.Vector} the resulting p5.Vector
	 */

	p5.Vector.sub = function (v1, v2, target) {
	  if (!target) {
	    target = v1.copy();
	  } else {
	    target.set(v1);
	  }
	  target.sub(v2);
	  return target;
	};


	/**
	 * Multiplies a vector by a scalar and returns a new vector.
	 *
	 * @static
	 * @param  {p5.Vector} v the p5.Vector to multiply
	 * @param  {Number}  n the scalar
	 * @param  {p5.Vector} target if undefined a new vector will be created
	 * @return {p5.Vector}  the resulting new p5.Vector
	 */
	p5.Vector.mult = function (v, n, target) {
	  if (!target) {
	    target = v.copy();
	  } else {
	    target.set(v);
	  }
	  target.mult(n);
	  return target;
	};

	/**
	 * Divides a vector by a scalar and returns a new vector.
	 *
	 * @static
	 * @param  {p5.Vector} v the p5.Vector to divide
	 * @param  {Number}  n the scalar
	 * @param  {p5.Vector} target if undefined a new vector will be created
	 * @return {p5.Vector} the resulting new p5.Vector
	 */
	p5.Vector.div = function (v, n, target) {
	  if (!target) {
	    target = v.copy();
	  } else {
	    target.set(v);
	  }
	  target.div(n);
	  return target;
	};


	/**
	 * Calculates the dot product of two vectors.
	 *
	 * @static
	 * @param  {p5.Vector} v1 the first p5.Vector
	 * @param  {p5.Vector} v2 the second p5.Vector
	 * @return {Number}     the dot product
	 */
	p5.Vector.dot = function (v1, v2) {
	  return v1.dot(v2);
	};

	/**
	 * Calculates the cross product of two vectors.
	 *
	 * @static
	 * @param  {p5.Vector} v1 the first p5.Vector
	 * @param  {p5.Vector} v2 the second p5.Vector
	 * @return {Number}     the cross product
	 */
	p5.Vector.cross = function (v1, v2) {
	  return v1.cross(v2);
	};

	/**
	 * Calculates the Euclidean distance between two points (considering a
	 * point as a vector object).
	 *
	 * @static
	 * @param  {p5.Vector} v1 the first p5.Vector
	 * @param  {p5.Vector} v2 the second p5.Vector
	 * @return {Number}     the distance
	 */
	p5.Vector.dist = function (v1,v2) {
	  return v1.dist(v2);
	};

	/**
	 * Linear interpolate a vector to another vector and return the result as a
	 * new vector.
	 *
	 * @static
	 * @param {p5.Vector} v1 a starting p5.Vector
	 * @param {p5.Vector} v2 the p5.Vector to lerp to
	 * @param {Number}       the amount of interpolation; some value between 0.0
	 *                       (old vector) and 1.0 (new vector). 0.1 is very near
	 *                       the new vector. 0.5 is halfway in between.
	 */
	p5.Vector.lerp = function (v1, v2, amt, target) {
	  if (!target) {
	    target = v1.copy();
	  } else {
	    target.set(v1);
	  }
	  target.lerp(v2, amt);
	  return target;
	};

	/**
	 * Calculates and returns the angle (in radians) between two vectors.
	 * @method angleBetween
	 * @static
	 * @param  {p5.Vector} v1 the x, y, and z components of a p5.Vector
	 * @param  {p5.Vector} v2 the x, y, and z components of a p5.Vector
	 * @return {Number}       the angle between (in radians)
	 * @example
	 * <div class="norender">
	 * <code>
	 * var v1 = createVector(1, 0, 0);
	 * var v2 = createVector(0, 1, 0);
	 *
	 * var angle = p5.Vector.angleBetween(v1, v2);
	 * // angle is PI/2
	 * </code>
	 * </div>
	 */
	p5.Vector.angleBetween = function (v1, v2) {
	  var angle = Math.acos(v1.dot(v2) / (v1.mag() * v2.mag()));
	  if (this.p5) {
	    if (this.p5._angleMode === constants.DEGREES) {
	      angle = polarGeometry.radiansToDegrees(angle);
	    }
	  }
	  return angle;
	};

	/**
	 * @static
	 */
	p5.Vector.mag = function (vecT){
	  var x = vecT.x,
	    y = vecT.y,
	    z = vecT.z;
	  var magSq = x * x + y * y + z * z;
	  return Math.sqrt(magSq);
	};

	module.exports = p5.Vector;

	},{"../core/constants":36,"../core/core":37,"./polargeometry":67}],67:[function(_dereq_,module,exports){

	module.exports = {

	  degreesToRadians: function(x) {
	    return 2 * Math.PI * x / 360;
	  },

	  radiansToDegrees: function(x) {
	    return 360 * x / (2 * Math.PI);
	  }

	};

	},{}],68:[function(_dereq_,module,exports){
	/**
	 * @module Math
	 * @submodule Random
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	var seeded = false;
	var previous = false;
	var y2 = 0;

	// Linear Congruential Generator
	// Variant of a Lehman Generator
	var lcg = (function() {
	  // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes
	  // m is basically chosen to be large (as it is the max period)
	  // and for its relationships to a and c
	  var m = 4294967296,
	    // a - 1 should be divisible by m's prime factors
	    a = 1664525,
	    // c and m should be co-prime
	    c = 1013904223,
	    seed, z;
	  return {
	    setSeed : function(val) {
	      // pick a random seed if val is undefined or null
	      // the >>> 0 casts the seed to an unsigned 32-bit integer
	      z = seed = (val == null ? Math.random() * m : val) >>> 0;
	    },
	    getSeed : function() {
	      return seed;
	    },
	    rand : function() {
	      // define the recurrence relationship
	      z = (a * z + c) % m;
	      // return a float in [0, 1)
	      // if z = m then z / m = 0 therefore (z % m) / m < 1 always
	      return z / m;
	    }
	  };
	}());

	/**
	 * Sets the seed value for random().
	 *
	 * By default, random() produces different results each time the program
	 * is run. Set the seed parameter to a constant to return the same
	 * pseudo-random numbers each time the software is run.
	 *
	 * @method randomSeed
	 * @param {Number} seed   the seed value
	 * @example
	 * <div>
	 * <code>
	 * randomSeed(99);
	 * for (var i=0; i < 100; i++) {
	 *   var r = random(0, 255);
	 *   stroke(r);
	 *   line(i, 0, i, 100);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * many vertical lines drawn in white, black or grey.
	 *
	 */
	p5.prototype.randomSeed = function(seed) {
	  lcg.setSeed(seed);
	  seeded = true;
	  previous = false;
	};

	/**
	 * Return a random floating-point number.
	 *
	 * Takes either 0, 1 or 2 arguments.
	 *
	 * If no argument is given, returns a random number from 0
	 * up to (but not including) 1.
	 *
	 * If one argument is given and it is a number, returns a random number from 0
	 * up to (but not including) the number.
	 *
	 * If one argument is given and it is an array, returns a random element from
	 * that array.
	 *
	 * If two arguments are given, returns a random number from the
	 * first argument up to (but not including) the second argument.
	 *
	 * @method random
	 * @param  {Number} [min]   the lower bound (inclusive)
	 * @param  {Number} [max]   the upper bound (exclusive)
	 * @return {Number|mixed} the random number or a random element in choices
	 * @example
	 * <div>
	 * <code>
	 * for (var i = 0; i < 100; i++) {
	 *   var r = random(50);
	 *   stroke(r*5);
	 *   line(50, i, 50+r, i);
	 * }
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * for (var i = 0; i < 100; i++) {
	 *   var r = random(-50, 50);
	 *   line(50,i,50+r,i);
	 * }
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * // Get a random element from an array using the random(Array) syntax
	 * var words = [ "apple", "bear", "cat", "dog" ];
	 * var word = random(words);  // select random word
	 * text(word,10,50);  // draw the word
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 100 horizontal lines from center canvas to right. size+fill change each time
	 * 100 horizontal lines from center of canvas. height & side change each render
	 * word displayed at random. Either apple, bear, cat, or dog
	 *
	 */
	/**
	 * @method random
	 * @param  {Array} choices   the array to choose from
	 * @return {mixed} the random element from the array
	 * @example
	 */
	p5.prototype.random = function (min, max) {

	  var rand;

	  if (seeded) {
	    rand  = lcg.rand();
	  } else {
	    rand = Math.random();
	  }
	  if (typeof min === 'undefined') {
	    return rand;
	  } else
	  if (typeof max === 'undefined') {
	    if (min instanceof Array) {
	      return min[Math.floor(rand * min.length)];
	    } else {
	      return rand * min;
	    }
	  } else {
	    if (min > max) {
	      var tmp = min;
	      min = max;
	      max = tmp;
	    }

	    return rand * (max-min) + min;
	  }
	};


	/**
	 *
	 * Returns a random number fitting a Gaussian, or
	 * normal, distribution. There is theoretically no minimum or maximum
	 * value that randomGaussian() might return. Rather, there is
	 * just a very low probability that values far from the mean will be
	 * returned; and a higher probability that numbers near the mean will
	 * be returned.
	 * <br><br>
	 * Takes either 0, 1 or 2 arguments.<br>
	 * If no args, returns a mean of 0 and standard deviation of 1.<br>
	 * If one arg, that arg is the mean (standard deviation is 1).<br>
	 * If two args, first is mean, second is standard deviation.
	 *
	 * @method randomGaussian
	 * @param  {Number} mean  the mean
	 * @param  {Number} sd    the standard deviation
	 * @return {Number} the random number
	 * @example
	 * <div>
	 * <code>for (var y = 0; y < 100; y++) {
	 *  var x = randomGaussian(50,15);
	 *  line(50, y, x, y);
	 *}
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 *var distribution = new Array(360);
	 *
	 *function setup() {
	 *  createCanvas(100, 100);
	 *  for (var i = 0; i < distribution.length; i++) {
	 *    distribution[i] = floor(randomGaussian(0,15));
	 *  }
	 *}
	 *
	 *function draw() {
	 *  background(204);
	 *
	 *  translate(width/2, width/2);
	 *
	 *  for (var i = 0; i < distribution.length; i++) {
	 *    rotate(TWO_PI/distribution.length);
	 *    stroke(0);
	 *    var dist = abs(distribution[i]);
	 *    line(0, 0, dist, 0);
	 *  }
	 *}
	 * </code>
	 * </div>
	 * @alt
	 * 100 horizontal lines from center of canvas. height & side change each render
	 * black lines radiate from center of canvas. size determined each render
	 */
	p5.prototype.randomGaussian = function(mean, sd)  {
	  var y1,x1,x2,w;
	  if (previous) {
	    y1 = y2;
	    previous = false;
	  } else {
	    do {
	      x1 = this.random(2) - 1;
	      x2 = this.random(2) - 1;
	      w = x1 * x1 + x2 * x2;
	    } while (w >= 1);
	    w = Math.sqrt((-2 * Math.log(w))/w);
	    y1 = x1 * w;
	    y2 = x2 * w;
	    previous = true;
	  }

	  var m = mean || 0;
	  var s = sd || 1;
	  return y1*s + m;
	};

	module.exports = p5;

	},{"../core/core":37}],69:[function(_dereq_,module,exports){
	/**
	 * @module Math
	 * @submodule Trigonometry
	 * @for p5
	 * @requires core
	 * @requires polargeometry
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var polarGeometry = _dereq_('./polargeometry');
	var constants = _dereq_('../core/constants');

	p5.prototype._angleMode = constants.RADIANS;

	/**
	 * The inverse of cos(), returns the arc cosine of a value. This function
	 * expects the values in the range of -1 to 1 and values are returned in
	 * the range 0 to PI (3.1415927).
	 *
	 * @method acos
	 * @param  {Number} value the value whose arc cosine is to be returned
	 * @return {Number}       the arc cosine of the given value
	 *
	 * @example
	 * <div class= ânorender">
	 * <code>
	 * var a = PI;
	 * var c = cos(a);
	 * var ac = acos(c);
	 * // Prints: "3.1415927 : -1.0 : 3.1415927"
	 * print(a + " : " + c + " : " +  ac);
	 * </code>
	 * </div>
	 *
	 * <div class= ânorender">
	 * <code>
	 * var a = PI + PI/4.0;
	 * var c = cos(a);
	 * var ac = acos(c);
	 * // Prints: "3.926991 : -0.70710665 : 2.3561943"
	 * print(a + " : " + c + " : " +  ac);
	 * </code>
	 * </div>
	 */
	p5.prototype.acos = function(ratio) {
	  if (this._angleMode === constants.RADIANS) {
	    return Math.acos(ratio);
	  } else {
	    return polarGeometry.radiansToDegrees(Math.acos(ratio));
	  }
	};

	/**
	 * The inverse of sin(), returns the arc sine of a value. This function
	 * expects the values in the range of -1 to 1 and values are returned
	 * in the range -PI/2 to PI/2.
	 *
	 * @method asin
	 * @param  {Number} value the value whose arc sine is to be returned
	 * @return {Number}       the arc sine of the given value
	 *
	 * @example
	 * <div class= ânorender">
	 * <code>
	 * var a = PI + PI/3;
	 * var s = sin(a);
	 * var as = asin(s);
	 * // Prints: "1.0471976 : 0.86602545 : 1.0471976"
	 * print(a + " : " + s + " : " +  as);
	 * </code>
	 * </div>
	 *
	 * <div class= ânorender">
	 * <code>
	 * var a = PI + PI/3.0;
	 * var s = sin(a);
	 * var as = asin(s);
	 * // Prints: "4.1887903 : -0.86602545 : -1.0471976"
	 * print(a + " : " + s + " : " +  as);
	 * </code>
	 * </div>
	 *
	 */
	p5.prototype.asin = function(ratio) {
	  if (this._angleMode === constants.RADIANS) {
	    return Math.asin(ratio);
	  } else {
	    return polarGeometry.radiansToDegrees(Math.asin(ratio));
	  }
	};

	/**
	 * The inverse of tan(), returns the arc tangent of a value. This function
	 * expects the values in the range of -Infinity to Infinity (exclusive) and
	 * values are returned in the range -PI/2 to PI/2.
	 *
	 * @method atan
	 * @param  {Number} value the value whose arc tangent is to be returned
	 * @return {Number}       the arc tangent of the given value
	 *
	 * @example
	 * <div class= ânorender">
	 * <code>
	 * var a = PI + PI/3;
	 * var t = tan(a);
	 * var at = atan(t);
	 * // Prints: "1.0471976 : 1.7320509 : 1.0471976"
	 * print(a + " : " + t + " : " +  at);
	 * </code>
	 * </div>
	 *
	 * <div class= ânorender">
	 * <code>
	 * var a = PI + PI/3.0;
	 * var t = tan(a);
	 * var at = atan(t);
	 * // Prints: "4.1887903 : 1.7320513 : 1.0471977"
	 * print(a + " : " + t + " : " +  at);
	 * </code>
	 * </div>
	 *
	 */
	p5.prototype.atan = function(ratio) {
	  if (this._angleMode === constants.RADIANS) {
	    return Math.atan(ratio);
	  } else {
	    return polarGeometry.radiansToDegrees(Math.atan(ratio));
	  }
	};

	/**
	 * Calculates the angle (in radians) from a specified point to the coordinate
	 * origin as measured from the positive x-axis. Values are returned as a
	 * float in the range from PI to -PI. The atan2() function is most often used
	 * for orienting geometry to the position of the cursor.
	 * <br><br>
	 * Note: The y-coordinate of the point is the first parameter, and the
	 * x-coordinate is the second parameter, due the the structure of calculating
	 * the tangent.
	 *
	 * @method atan2
	 * @param  {Number} y y-coordinate of the point
	 * @param  {Number} x x-coordinate of the point
	 * @return {Number}   the arc tangent of the given point
	 *
	 * @example
	 * <div>
	 * <code>
	 * function draw() {
	 *   background(204);
	 *   translate(width/2, height/2);
	 *   var a = atan2(mouseY-height/2, mouseX-width/2);
	 *   rotate(a);
	 *   rect(-30, -5, 60, 10);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 60 by 10 rect at center of canvas rotates with mouse movements
	 *
	 */
	p5.prototype.atan2 = function (y, x) {
	  if (this._angleMode === constants.RADIANS) {
	    return Math.atan2(y, x);
	  } else {
	    return polarGeometry.radiansToDegrees(Math.atan2(y, x));
	  }
	};

	/**
	 * Calculates the cosine of an angle. This function takes into account the
	 * current angleMode. Values are returned in the range -1 to 1.
	 *
	 * @method cos
	 * @param  {Number} angle the angle
	 * @return {Number}       the cosine of the angle
	 *
	 * @example
	 * <div>
	 * <code>
	 * var a = 0.0;
	 * var inc = TWO_PI/25.0;
	 * for (var i = 0; i < 25; i++) {
	 *   line(i*4, 50, i*4, 50+cos(a)*40.0);
	 *   a = a + inc;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * vertical black lines form wave patterns, extend-down on left and right side
	 *
	 */
	p5.prototype.cos = function(angle) {
	  if (this._angleMode === constants.RADIANS) {
	    return Math.cos(angle);
	  } else {
	    return Math.cos(this.radians(angle));
	  }
	};

	/**
	 * Calculates the sine of an angle. This function takes into account the
	 * current angleMode. Values are returned in the range -1 to 1.
	 *
	 * @method sin
	 * @param  {Number} angle the angle
	 * @return {Number}       the sine of the angle
	 *
	 * @example
	 * <div>
	 * <code>
	 * var a = 0.0;
	 * var inc = TWO_PI/25.0;
	 * for (var i = 0; i < 25; i++) {
	 *   line(i*4, 50, i*4, 50+sin(a)*40.0);
	 *   a = a + inc;
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * vertical black lines extend down and up from center to form wave pattern
	 *
	 */
	p5.prototype.sin = function(angle) {
	  if (this._angleMode === constants.RADIANS) {
	    return Math.sin(angle);
	  } else {
	    return Math.sin(this.radians(angle));
	  }
	};

	/**
	 * Calculates the tangent of an angle. This function takes into account
	 * the current angleMode. Values are returned in the range -1 to 1.
	 *
	 * @method tan
	 * @param  {Number} angle the angle
	 * @return {Number}       the tangent of the angle
	 *
	 * @example
	 * <div>
	 * <code>
	 *   var a = 0.0;
	 *   var inc = TWO_PI/50.0;
	 *   for (var i = 0; i < 100; i = i+2) {
	 *     line(i, 50, i, 50+tan(a)*2.0);
	 *     a = a + inc;
	 *   }
	 * </code>
	 *
	 *
	 * @alt
	 * vertical black lines end down and up from center to form spike pattern
	 *
	 */
	p5.prototype.tan = function(angle) {
	  if (this._angleMode === constants.RADIANS) {
	    return Math.tan(angle);
	  } else {
	    return Math.tan(this.radians(angle));
	  }
	};

	/**
	 * Converts a radian measurement to its corresponding value in degrees.
	 * Radians and degrees are two ways of measuring the same thing. There are
	 * 360 degrees in a circle and 2*PI radians in a circle. For example,
	 * 90Â° = PI/2 = 1.5707964.
	 *
	 * @method degrees
	 * @param  {Number} radians the radians value to convert to degrees
	 * @return {Number}         the converted angle
	 *
	 *
	 * @example
	 * <div class= ânorender">
	 * <code>
	 * var rad = PI/4;
	 * var deg = degrees(rad);
	 * print(rad + " radians is " + deg + " degrees");
	 * // Prints: 0.7853981633974483 radians is 45 degrees
	 * </code>
	 * </div>
	 *
	 */
	p5.prototype.degrees = function(angle) {
	  return polarGeometry.radiansToDegrees(angle);
	};

	/**
	 * Converts a degree measurement to its corresponding value in radians.
	 * Radians and degrees are two ways of measuring the same thing. There are
	 * 360 degrees in a circle and 2*PI radians in a circle. For example,
	 * 90Â° = PI/2 = 1.5707964.
	 *
	 * @method radians
	 * @param  {Number} degrees the degree value to convert to radians
	 * @return {Number}         the converted angle
	 *
	 * @example
	 * <div class= ânorender">
	 * <code>
	 * var deg = 45.0;
	 * var rad = radians(deg);
	 * print(deg + " degrees is " + rad + " radians");
	 * // Prints: 45 degrees is 0.7853981633974483 radians
	 * </code>
	 * </div>
	 */
	p5.prototype.radians = function(angle) {
	  return polarGeometry.degreesToRadians(angle);
	};

	/**
	 * Sets the current mode of p5 to given mode. Default mode is RADIANS.
	 *
	 * @method angleMode
	 * @param {Constant} mode either RADIANS or DEGREES
	 *
	 * @example
	 * <div>
	 * <code>
	 * function draw(){
	 *   background(204);
	 *   angleMode(DEGREES); // Change the mode to DEGREES
	 *   var a = atan2(mouseY-height/2, mouseX-width/2);
	 *   translate(width/2, height/2);
	 *   push();
	 *   rotate(a);
	 *   rect(-20, -5, 40, 10); // Larger rectangle is rotating in degrees
	 *   pop();
	 *   angleMode(RADIANS); // Change the mode to RADIANS
	 *   rotate(a); // var a stays the same
	 *   rect(-40, -5, 20, 10); // Smaller rectangle is rotating in radians
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 40 by 10 rect in center rotates with mouse moves. 20 by 10 rect moves faster.
	 *
	 *
	 */
	p5.prototype.angleMode = function(mode) {
	  if (mode === constants.DEGREES || mode === constants.RADIANS) {
	    this._angleMode = mode;
	  }
	};

	module.exports = p5;

	},{"../core/constants":36,"../core/core":37,"./polargeometry":67}],70:[function(_dereq_,module,exports){
	/**
	 * @module Typography
	 * @submodule Attributes
	 * @for p5
	 * @requires core
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * Sets the current alignment for drawing text. Accepts two
	 * arguments: horizAlign (LEFT, CENTER, or RIGHT) and
	 * vertAlign (TOP, BOTTOM, CENTER, or BASELINE).
	 *
	 * The horizAlign parameter is in reference to the x value
	 * of the text() function, while the vertAlign parameter is
	 * in reference to the y value.
	 *
	 * So if you write textAlign(LEFT), you are aligning the left
	 * edge of your text to the x value you give in text(). If you
	 * write textAlign(RIGHT, TOP), you are aligning the right edge
	 * of your text to the x value and the top of edge of the text
	 * to the y value.
	 *
	 * @method textAlign
	 * @param {Constant} horizAlign horizontal alignment, either LEFT,
	 *                            CENTER, or RIGHT
	 * @param {Constant} vertAlign vertical alignment, either TOP,
	 *                            BOTTOM, CENTER, or BASELINE
	 * @return {Number}
	 * @example
	 * <div>
	 * <code>
	 * textSize(16);
	 * textAlign(RIGHT);
	 * text("ABCD", 50, 30);
	 * textAlign(CENTER);
	 * text("EFGH", 50, 50);
	 * textAlign(LEFT);
	 * text("IJKL", 50, 70);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *Letters ABCD displayed at top right, EFGH at center and IJKL at bottom left.
	 *
	 */
	p5.prototype.textAlign = function(horizAlign, vertAlign) {
	  return this._renderer.textAlign.apply(this._renderer, arguments);
	};

	/**
	 * Sets/gets the spacing, in pixels, between lines of text. This
	 * setting will be used in all subsequent calls to the text() function.
	 *
	 * @method textLeading
	 * @param {Number} leading the size in pixels for spacing between lines
	 * @return {Object|Number}
	 * @example
	 * <div>
	 * <code>
	 * // Text to display. The "\n" is a "new line" character
	 * lines = "L1\nL2\nL3";
	 * textSize(12);
	 *
	 * textLeading(10);  // Set leading to 10
	 * text(lines, 10, 25);
	 *
	 * textLeading(20);  // Set leading to 20
	 * text(lines, 40, 25);
	 *
	 * textLeading(30);  // Set leading to 30
	 * text(lines, 70, 25);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *set L1 L2 & L3 displayed vertically 3 times. spacing increases for each set
	 *
	 */
	p5.prototype.textLeading = function(theLeading) {
	  return this._renderer.textLeading.apply(this._renderer, arguments);
	};

	/**
	 * Sets/gets the current font size. This size will be used in all subsequent
	 * calls to the text() function. Font size is measured in pixels.
	 *
	 * @method textSize
	 * @param {Number} theSize the size of the letters in units of pixels
	 * @return {Object|Number}
	 * @example
	 * <div>
	 * <code>
	 * textSize(12);
	 * text("Font Size 12", 10, 30);
	 * textSize(14);
	 * text("Font Size 14", 10, 60);
	 * textSize(16);
	 * text("Font Size 16", 10, 90);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *Font Size 12 displayed small, Font Size 14 medium & Font Size 16 large
	 *
	 */
	p5.prototype.textSize = function(theSize) {
	  return this._renderer.textSize.apply(this._renderer, arguments);
	};

	/**
	 * Sets/gets the style of the text for system fonts to NORMAL, ITALIC, or BOLD.
	 * Note: this may be is overridden by CSS styling. For non-system fonts
	 * (opentype, truetype, etc.) please load styled fonts instead.
	 *
	 * @method textStyle
	 * @param {Number/Constant} theStyle styling for text, either NORMAL,
	 *                            ITALIC, or BOLD
	 * @return {Object|String}
	 * @example
	 * <div>
	 * <code>
	 * strokeWeight(0);
	 * textSize(12);
	 * textStyle(NORMAL);
	 * text("Font Style Normal", 10, 30);
	 * textStyle(ITALIC);
	 * text("Font Style Italic", 10, 60);
	 * textStyle(BOLD);
	 * text("Font Style Bold", 10, 90);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *words Font Style Normal displayed normally, Italic in italic and bold in bold
	 *
	 */
	p5.prototype.textStyle = function(theStyle) {
	  return this._renderer.textStyle.apply(this._renderer, arguments);
	};

	/**
	 * Calculates and returns the width of any character or text string.
	 *
	 * @method textWidth
	 * @param {String} theText the String of characters to measure
	 * @return {Number}
	 * @example
	 * <div>
	 * <code>
	 * textSize(28);
	 *
	 * var aChar = 'P';
	 * var cWidth = textWidth(aChar);
	 * text(aChar, 0, 40);
	 * line(cWidth, 0, cWidth, 50);
	 *
	 * var aString = "p5.js";
	 * var sWidth = textWidth(aString);
	 * text(aString, 0, 85);
	 * line(sWidth, 50, sWidth, 100);
	 * </code>
	 * </div>
	 *
	 * @alt
	 *Letter P and p5.js are displayed with vertical lines at end. P is wide
	 *
	 */
	p5.prototype.textWidth = function(theText) {
	  if (theText.length === 0) {
	    return 0;
	  }
	  return this._renderer.textWidth.apply(this._renderer, arguments);
	};

	/**
	 * Returns the ascent of the current font at its current size. The ascent
	 * represents the distance, in pixels, of the tallest character above
	 * the baseline.
	 *
	 * @return {Number}
	 * @example
	 * <div>
	 * <code>
	 * var base = height * 0.75;
	 * var scalar = 0.8; // Different for each font
	 *
	 * textSize(32);  // Set initial text size
	 * var asc = textAscent() * scalar;  // Calc ascent
	 * line(0, base - asc, width, base - asc);
	 * text("dp", 0, base);  // Draw text on baseline
	 *
	 * textSize(64);  // Increase text size
	 * asc = textAscent() * scalar;  // Recalc ascent
	 * line(40, base - asc, width, base - asc);
	 * text("dp", 40, base);  // Draw text on baseline
	 * </code>
	 * </div>
	 */
	p5.prototype.textAscent = function() {
	  return this._renderer.textAscent();
	};

	/**
	 * Returns the descent of the current font at its current size. The descent
	 * represents the distance, in pixels, of the character with the longest
	 * descender below the baseline.
	 *
	 * @return {Number}
	 * @example
	 * <div>
	 * <code>
	 * var base = height * 0.75;
	 * var scalar = 0.8; // Different for each font
	 *
	 * textSize(32);  // Set initial text size
	 * var desc = textDescent() * scalar;  // Calc ascent
	 * line(0, base+desc, width, base+desc);
	 * text("dp", 0, base);  // Draw text on baseline
	 *
	 * textSize(64);  // Increase text size
	 * desc = textDescent() * scalar;  // Recalc ascent
	 * line(40, base + desc, width, base + desc);
	 * text("dp", 40, base);  // Draw text on baseline
	 * </code>
	 * </div>
	 */
	p5.prototype.textDescent = function() {
	  return this._renderer.textDescent();
	};

	/**
	 * Helper function to measure ascent and descent.
	 */
	p5.prototype._updateTextMetrics = function() {
	  return this._renderer._updateTextMetrics();
	};

	module.exports = p5;

	},{"../core/core":37}],71:[function(_dereq_,module,exports){
	/**
	 * @module Typography
	 * @submodule Loading & Displaying
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var constants = _dereq_('../core/constants');

	_dereq_('../core/error_helpers');


	/**
	 * Draws text to the screen. Displays the information specified in the first
	 * parameter on the screen in the position specified by the additional
	 * parameters. A default font will be used unless a font is set with the
	 * textFont() function and a default size will be used unless a font is set
	 * with textSize(). Change the color of the text with the fill() function.
	 * Change the outline of the text with the stroke() and strokeWeight()
	 * functions.
	 * <br><br>
	 * The text displays in relation to the textAlign() function, which gives the
	 * option to draw to the left, right, and center of the coordinates.
	 * <br><br>
	 * The x2 and y2 parameters define a rectangular area to display within and
	 * may only be used with string data. When these parameters are specified,
	 * they are interpreted based on the current rectMode() setting. Text that
	 * does not fit completely within the rectangle specified will not be drawn
	 * to the screen.
	 *
	 * @method text
	 * @param {String} str the alphanumeric symbols to be displayed
	 * @param {Number} x   x-coordinate of text
	 * @param {Number} y   y-coordinate of text
	 * @param {Number} x2  by default, the width of the text box,
	 *                     see rectMode() for more info
	 * @param {Number} y2  by default, the height of the text box,
	 *                     see rectMode() for more info
	 * @return {Object} this
	 * @example
	 * <div>
	 * <code>
	 * textSize(32);
	 * text("word", 10, 30);
	 * fill(0, 102, 153);
	 * text("word", 10, 60);
	 * fill(0, 102, 153, 51);
	 * text("word", 10, 90);
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * s = "The quick brown fox jumped over the lazy dog.";
	 * fill(50);
	 * text(s, 10, 10, 70, 80); // Text wraps within text box
	 * </code>
	 * </div>
	 *
	 * @alt
	 *'word' displayed 3 times going from black, blue to translucent blue
	 * The quick brown fox jumped over the lazy dog.
	 *
	 */
	p5.prototype.text = function(str, x, y, maxWidth, maxHeight) {
	  return (!(this._renderer._doFill || this._renderer._doStroke)) ? this :
	    this._renderer.text.apply(this._renderer, arguments);
	};

	/**
	 * Sets the current font that will be drawn with the text() function.
	 *
	 * @method textFont
	 * @param {Object|String} f a font loaded via loadFont(), or a String
	 * representing a <a href="https://mzl.la/2dOw8WD">web safe font</a> (a font
	 * that is generally available across all systems).
	 * @return {Object} this
	 * @example
	 * <div>
	 * <code>
	 * fill(0);
	 * textSize(12);
	 * textFont("Georgia");
	 * text("Georgia", 12, 30);
	 * textFont("Helvetica");
	 * text("Helvetica", 12, 60);
	 * </code>
	 * </div>
	 * <div>
	 * <code>
	 * var fontRegular, fontItalic, fontBold;
	 * function preload() {
	 *    fontRegular = loadFont("assets/Regular.otf");
	 *    fontItalic = loadFont("assets/Italic.ttf");
	 *    fontBold = loadFont("assets/Bold.ttf");
	 * }
	 * function setup() {
	 *    background(210);
	 *    fill(0).strokeWeight(0).textSize(10);
	 *    textFont(fontRegular);
	 *    text("Font Style Normal", 10, 30);
	 *    textFont(fontItalic);
	 *    text("Font Style Italic", 10, 50);
	 *    textFont(fontBold);
	 *    text("Font Style Bold", 10, 70);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 *words Font Style Normal displayed normally, Italic in italic and bold in bold
	 *
	 */
	p5.prototype.textFont = function(theFont, theSize) {

	  if (arguments.length) {

	    if (!theFont) {

	      throw Error('null font passed to textFont');
	    }

	    this._renderer._setProperty('_textFont', theFont);

	    if (theSize) {

	      this._renderer._setProperty('_textSize', theSize);
	      this._renderer._setProperty('_textLeading',
	        theSize * constants._DEFAULT_LEADMULT);
	    }

	    return this._renderer._applyTextProperties();
	  }

	  return this;
	};

	module.exports = p5;

	},{"../core/constants":36,"../core/core":37,"../core/error_helpers":40}],72:[function(_dereq_,module,exports){
	/**
	 * This module defines the p5.Font class and functions for
	 * drawing text to the display canvas.
	 * @module Typography
	 * @submodule Font
	 * @requires core
	 * @requires constants
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	var constants = _dereq_('../core/constants');

	/*
	 * TODO:
	 *
	 * API:
	 * -- textBounds()
	 * -- getPath()
	 * -- getPoints()
	 *
	 * ===========================================
	 * -- PFont functions:
	 *    PFont.list()
	 *
	 * -- kerning
	 * -- alignment: justified?
	 * -- integrate p5.dom? (later)
	 */

	/**
	 * Base class for font handling
	 * @class p5.Font
	 * @constructor
	 * @param {Object} [pInst] pointer to p5 instance
	 */
	p5.Font = function(p) {

	  this.parent = p;

	  this.cache = {};

	  /**
	   * Underlying opentype font implementation
	   * @property font
	   */
	  this.font = undefined;
	};

	p5.Font.prototype.list = function() {

	  // TODO
	  throw 'not yet implemented';
	};

	/**
	 * Returns a tight bounding box for the given text string using this
	 * font (currently only supports single lines)
	 *
	 * @method textBounds
	 * @param  {String} line     a line of text
	 * @param  {Number} x        x-position
	 * @param  {Number} y        y-position
	 * @param  {Number} fontSize font size to use (optional)
	 * @param  {Object} options opentype options (optional)
	 *
	 * @return {Object}          a rectangle object with properties: x, y, w, h
	 *
	 * @example
	 * <div>
	 * <code>
	 * var font;
	 * var textString = 'Lorem ipsum dolor sit amet.';
	 * function preload() {
	 *    font = loadFont('./assets/Regular.otf');
	 * };
	 * function setup() {
	 *    background(210);
	 *
	 *    var bbox = font.textBounds(textString, 10, 30, 12);
	 *    fill(255);
	 *    stroke(0);
	 *    rect(bbox.x, bbox.y, bbox.w, bbox.h);
	 *    fill(0);
	 *    noStroke();
	 *
	 *    textFont(font);
	 *    textSize(12);
	 *    text(textString, 10, 30);
	 * };
	 * </code>
	 * </div>
	 *
	 * @alt
	 *words Lorem ipsum dol go off canvas and contained by white bounding box
	 *
	 */
	p5.Font.prototype.textBounds = function(str, x, y, fontSize, options) {

	  x = x !== undefined ? x : 0;
	  y = y !== undefined ? y : 0;
	  fontSize = fontSize || this.parent._renderer._textSize;

	  // Check cache for existing bounds. Take into consideration the text alignment
	  // settings. Default alignment should match opentype's origin: left-aligned &
	  // alphabetic baseline.
	  var p = (options && options.renderer && options.renderer._pInst) ||
	    this.parent,
	    ctx = p._renderer.drawingContext,
	    alignment = ctx.textAlign || constants.LEFT,
	    baseline = ctx.textBaseline || constants.BASELINE;
	  var result = this.cache[cacheKey('textBounds', str, x, y, fontSize, alignment,
	    baseline)];

	  if (!result) {

	    var xCoords = [], yCoords = [], self = this,
	      scale = this._scale(fontSize), minX, minY, maxX, maxY;

	    this.font.forEachGlyph(str, x, y, fontSize, options,
	      function(glyph, gX, gY, gFontSize) {

	        xCoords.push(gX);
	        yCoords.push(gY);

	        var gm = glyph.getMetrics();

	        if (glyph.name !== 'space') {

	          xCoords.push(gX + (gm.xMax * scale));
	          yCoords.push(gY + (-gm.yMin * scale));
	          yCoords.push(gY + (-gm.yMax * scale));

	        } else { // NOTE: deals with broken metrics for spaces in opentype.js

	          xCoords.push(gX + self.font.charToGlyph(' ').advanceWidth *
	            self._scale(fontSize));
	        }
	      });

	    // fix to #1409 (not sure why these max() functions were here)
	    /*minX = Math.max(0, Math.min.apply(null, xCoords));
	    minY = Math.max(0, Math.min.apply(null, yCoords));
	    maxX = Math.max(0, Math.max.apply(null, xCoords));
	    maxY = Math.max(0, Math.max.apply(null, yCoords));*/
	    minX = Math.min.apply(null, xCoords);
	    minY = Math.min.apply(null, yCoords);
	    maxX = Math.max.apply(null, xCoords);
	    maxY = Math.max.apply(null, yCoords);

	    result = {
	      x: minX,
	      y: minY,
	      h: maxY - minY,
	      w: maxX - minX,
	      advance: minX - x
	    };

	    // Bounds are now calculated, so shift the x & y to match alignment settings
	    var textWidth = result.w + result.advance;
	    var pos = this._handleAlignment(p, ctx, str, result.x, result.y, textWidth);
	    result.x = pos.x;
	    result.y = pos.y;

	    this.cache[cacheKey('textBounds', str, x, y, fontSize, alignment,
	      baseline)] = result;
	  }
	  //else console.log('cache-hit');

	  return result;
	};


	/**
	 * Computes an array of points following the path for specified text
	 *
	 * @param  {String} txt     a line of text
	 * @param  {Number} x        x-position
	 * @param  {Number} y        y-position
	 * @param  {Number} fontSize font size to use (optional)
	 * @param  {Object} options  an (optional) object that can contain:
	 *
	 * <br>sampleFactor - the ratio of path-length to number of samples
	 * (default=.25); higher values yield more points and are therefore
	 * more precise
	 *
	 * <br>simplifyThreshold - if set to a non-zero value, collinear points will be
	 * be removed from the polygon; the value represents the threshold angle to use
	 * when determining whether two edges are collinear
	 *
	 * @return {Array}  an array of points, each with x, y, alpha (the path angle)
	 */
	p5.Font.prototype.textToPoints = function(txt, x, y, fontSize, options) {

	  var xoff = 0, result = [], glyphs = this._getGlyphs(txt);

	  fontSize = fontSize || this.parent._renderer._textSize;

	  for (var i = 0; i < glyphs.length; i++) {

	    var gpath = glyphs[i].getPath(x, y, fontSize),
	      paths = splitPaths(gpath.commands);

	    for (var j = 0; j < paths.length; j++) {

	      var pts = pathToPoints(paths[j], options);

	      for (var k = 0; k < pts.length; k++) {
	        pts[k].x += xoff;
	        result.push(pts[k]);
	      }
	    }

	    xoff += glyphs[i].advanceWidth * this._scale(fontSize);
	  }

	  return result;
	};

	// ----------------------------- End API ------------------------------

	/**
	 * Returns the set of opentype glyphs for the supplied string.
	 *
	 * Note that there is not a strict one-to-one mapping between characters
	 * and glyphs, so the list of returned glyphs can be larger or smaller
	 *  than the length of the given string.
	 *
	 * @param  {String} str the string to be converted
	 * @return {array}     the opentype glyphs
	 */
	p5.Font.prototype._getGlyphs = function(str) {

	  return this.font.stringToGlyphs(str);
	};

	/**
	 * Returns an opentype path for the supplied string and position.
	 *
	 * @param  {String} line     a line of text
	 * @param  {Number} x        x-position
	 * @param  {Number} y        y-position
	 * @param  {Object} options opentype options (optional)
	 * @return {Object}     the opentype path
	 */
	p5.Font.prototype._getPath = function(line, x, y, options) {

	  var p = (options && options.renderer && options.renderer._pInst) ||
	    this.parent,
	    ctx = p._renderer.drawingContext,
	    pos = this._handleAlignment(p, ctx, line, x, y);

	  return this.font.getPath(line, pos.x, pos.y, p._renderer._textSize, options);
	};

	/*
	 * Creates an SVG-formatted path-data string
	 * (See http://www.w3.org/TR/SVG/paths.html#PathData)
	 * from the given opentype path or string/position
	 *
	 * @param  {Object} path    an opentype path, OR the following:
	 *
	 * @param  {String} line     a line of text
	 * @param  {Number} x        x-position
	 * @param  {Number} y        y-position
	 * @param  {Object} options opentype options (optional), set options.decimals
	 * to set the decimal precision of the path-data
	 *
	 * @return {Object}     this p5.Font object
	 */
	p5.Font.prototype._getPathData = function(line, x, y, options) {

	  var decimals = 3;

	  // create path from string/position
	  if (typeof line === 'string' && arguments.length > 2) {

	    line = this._getPath(line, x, y, options);
	  }
	  // handle options specified in 2nd arg
	  else if (typeof x === 'object') {

	    options = x;
	  }

	  // handle svg arguments
	  if (options && typeof options.decimals === 'number') {

	    decimals = options.decimals;
	  }

	  return line.toPathData(decimals);
	};

	/*
	 * Creates an SVG <path> element, as a string,
	 * from the given opentype path or string/position
	 *
	 * @param  {Object} path    an opentype path, OR the following:
	 *
	 * @param  {String} line     a line of text
	 * @param  {Number} x        x-position
	 * @param  {Number} y        y-position
	 * @param  {Object} options opentype options (optional), set options.decimals
	 * to set the decimal precision of the path-data in the <path> element,
	 *  options.fill to set the fill color for the <path> element,
	 *  options.stroke to set the stroke color for the <path> element,
	 *  options.strokeWidth to set the strokeWidth for the <path> element.
	 *
	 * @return {Object}     this p5.Font object
	 */
	p5.Font.prototype._getSVG = function(line, x, y, options) {

	  var decimals = 3;

	  // create path from string/position
	  if (typeof line === 'string' && arguments.length > 2) {

	    line = this._getPath(line, x, y, options);
	  }
	  // handle options specified in 2nd arg
	  else if (typeof x === 'object') {

	    options = x;
	  }

	  // handle svg arguments
	  if (options) {
	    if (typeof options.decimals === 'number') {
	      decimals = options.decimals;
	    }
	    if (typeof options.strokeWidth === 'number') {
	      line.strokeWidth = options.strokeWidth;
	    }
	    if (typeof options.fill !== 'undefined') {
	      line.fill = options.fill;
	    }
	    if (typeof options.stroke !== 'undefined') {
	      line.stroke = options.stroke;
	    }
	  }

	  return line.toSVG(decimals);
	};

	/*
	 * Renders an opentype path or string/position
	 * to the current graphics context
	 *
	 * @param  {Object} path    an opentype path, OR the following:
	 *
	 * @param  {String} line     a line of text
	 * @param  {Number} x        x-position
	 * @param  {Number} y        y-position
	 * @param  {Object} options opentype options (optional)
	 *
	 * @return {Object}     this p5.Font object
	 */
	p5.Font.prototype._renderPath = function(line, x, y, options) {

	  var pdata, pg = (options && options.renderer) || this.parent._renderer,
	    ctx = pg.drawingContext;

	  if (typeof line === 'object' && line.commands) {

	    pdata = line.commands;
	  } else {

	    //pos = handleAlignment(p, ctx, line, x, y);
	    pdata = this._getPath(line, x, y, options).commands;
	  }

	  ctx.beginPath();
	  for (var i = 0; i < pdata.length; i += 1) {

	    var cmd = pdata[i];
	    if (cmd.type === 'M') {
	      ctx.moveTo(cmd.x, cmd.y);
	    } else if (cmd.type === 'L') {
	      ctx.lineTo(cmd.x, cmd.y);
	    } else if (cmd.type === 'C') {
	      ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
	    } else if (cmd.type === 'Q') {
	      ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
	    } else if (cmd.type === 'Z') {
	      ctx.closePath();
	    }
	  }

	  // only draw stroke if manually set by user
	  if (pg._doStroke && pg._strokeSet) {

	    ctx.stroke();
	  }

	  if (pg._doFill) {

	    // if fill hasn't been set by user, use default-text-fill
	    ctx.fillStyle = pg._fillSet ? ctx.fillStyle : constants._DEFAULT_TEXT_FILL;
	    ctx.fill();
	  }

	  return this;
	};

	p5.Font.prototype._textWidth = function(str, fontSize) {

	  if (str === ' ') { // special case for now

	    return this.font.charToGlyph(' ').advanceWidth * this._scale(fontSize);
	  }

	  var bounds = this.textBounds(str, 0, 0, fontSize);
	  return bounds.w + bounds.advance;
	};

	p5.Font.prototype._textAscent = function(fontSize) {

	  return this.font.ascender * this._scale(fontSize);
	};

	p5.Font.prototype._textDescent = function(fontSize) {

	  return -this.font.descender * this._scale(fontSize);
	};

	p5.Font.prototype._scale = function(fontSize) {

	  return (1 / this.font.unitsPerEm) * (fontSize ||
	    this.parent._renderer._textSize);
	};

	p5.Font.prototype._handleAlignment = function(p, ctx, line, x, y, textWidth) {
	  var fontSize = p._renderer._textSize,
	    textAscent = this._textAscent(fontSize),
	    textDescent = this._textDescent(fontSize);

	  textWidth = textWidth !== undefined ? textWidth :
	    this._textWidth(line, fontSize);

	  if (ctx.textAlign === constants.CENTER) {
	    x -= textWidth / 2;
	  } else if (ctx.textAlign === constants.RIGHT) {
	    x -= textWidth;
	  }

	  if (ctx.textBaseline === constants.TOP) {
	    y += textAscent;
	  } else if (ctx.textBaseline === constants._CTX_MIDDLE) {
	    y += textAscent / 2;
	  } else if (ctx.textBaseline === constants.BOTTOM) {
	    y -= textDescent;
	  }

	  return { x: x, y: y };
	};

	// path-utils

	function pathToPoints(cmds, options) {

	  var opts = parseOpts(options, {
	    sampleFactor: 0.1,
	    simplifyThreshold: 0,
	  });

	  var len = pointAtLength(cmds,0,1), // total-length
	    t = len / (len * opts.sampleFactor),
	    pts = [];

	  for (var i = 0; i < len; i += t) {
	    pts.push(pointAtLength(cmds, i));
	  }

	  if (opts.simplifyThreshold) {
	    /*var count = */simplify(pts, opts.simplifyThreshold);
	    //console.log('Simplify: removed ' + count + ' pts');
	  }

	  return pts;
	}

	function simplify(pts, angle) {

	  angle = (typeof angle === 'undefined') ? 0 : angle;

	  var num = 0;
	  for (var i = pts.length - 1; pts.length > 3 && i >= 0; --i) {

	    if (collinear(at(pts, i - 1), at(pts, i), at(pts, i + 1), angle)) {

	      // Remove the middle point
	      pts.splice(i % pts.length, 1);
	      num++;
	    }
	  }
	  return num;
	}

	function splitPaths(cmds) {

	  var paths = [], current;
	  for (var i = 0; i < cmds.length; i++) {
	    if (cmds[i].type === 'M') {
	      if (current) {
	        paths.push(current);
	      }
	      current = [];
	    }
	    current.push(cmdToArr(cmds[i]));
	  }
	  paths.push(current);

	  return paths;
	}

	function cmdToArr(cmd) {

	  var arr = [ cmd.type ];
	  if (cmd.type === 'M' || cmd.type === 'L') { // moveto or lineto
	    arr.push(cmd.x, cmd.y);
	  } else if (cmd.type === 'C') {
	    arr.push(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
	  } else if (cmd.type === 'Q') {
	    arr.push(cmd.x1, cmd.y1, cmd.x, cmd.y);
	  }
	  // else if (cmd.type === 'Z') { /* no-op */ }
	  return arr;
	}

	function parseOpts(options, defaults) {

	  if (typeof options !== 'object') {
	    options = defaults;
	  }
	  else {
	    for (var key in defaults) {
	      if (typeof options[key] === 'undefined') {
	        options[key] = defaults[key];
	      }
	    }
	  }
	  return options;
	}

	//////////////////////// Helpers ////////////////////////////

	function at(v, i) {
	  var s = v.length;
	  return v[i < 0 ? i % s + s : i % s];
	}

	function collinear(a, b, c, thresholdAngle) {

	  if (!thresholdAngle) {
	    return areaTriangle(a, b, c) === 0;
	  }

	  if (typeof collinear.tmpPoint1 === 'undefined') {
	    collinear.tmpPoint1 = [];
	    collinear.tmpPoint2 = [];
	  }

	  var ab = collinear.tmpPoint1, bc = collinear.tmpPoint2;
	  ab.x = b.x - a.x;
	  ab.y = b.y - a.y;
	  bc.x = c.x - b.x;
	  bc.y = c.y - b.y;

	  var dot = ab.x * bc.x + ab.y * bc.y,
	    magA = Math.sqrt(ab.x * ab.x + ab.y * ab.y),
	    magB = Math.sqrt(bc.x * bc.x + bc.y * bc.y),
	    angle = Math.acos(dot / (magA * magB));

	  return angle < thresholdAngle;
	}

	function areaTriangle(a, b, c) {
	  return (((b[0] - a[0]) * (c[1] - a[1])) - ((c[0] - a[0]) * (b[1] - a[1])));
	}

	// Portions of below code copyright 2008 Dmitry Baranovskiy (via MIT license)

	function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {

	  var t1 = 1 - t, t13 = Math.pow(t1, 3), t12 = Math.pow(t1, 2), t2 = t * t,
	    t3 = t2 * t, x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x +
	    t3 * p2x, y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y +
	    t3 * p2y, mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),
	    my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),
	    nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),
	    ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),
	    ax = t1 * p1x + t * c1x, ay = t1 * p1y + t * c1y,
	    cx = t1 * c2x + t * p2x, cy = t1 * c2y + t * p2y,
	    alpha = (90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI);

	  if (mx > nx || my < ny) { alpha += 180; }

	  return { x: x, y: y, m: { x: mx, y: my }, n: { x: nx, y: ny },
	    start: { x: ax, y: ay }, end: { x: cx, y: cy }, alpha: alpha
	  };
	}

	function getPointAtSegmentLength(p1x,p1y,c1x,c1y,c2x,c2y,p2x,p2y,length) {
	  return (length == null) ? bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) :
	    findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,
	      getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));
	}

	function pointAtLength(path, length, istotal) {
	  path = path2curve(path);
	  var x, y, p, l, sp = '', subpaths = {}, point, len = 0;
	  for (var i = 0, ii = path.length; i < ii; i++) {
	    p = path[i];
	    if (p[0] === 'M') {
	      x = +p[1];
	      y = +p[2];
	    } else {
	      l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);
	      if (len + l > length) {
	        if (!istotal) {
	          point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5],
	            p[6], length - len);
	          return { x: point.x, y: point.y, alpha: point.alpha };
	        }
	      }
	      len += l;
	      x = +p[5];
	      y = +p[6];
	    }
	    sp += p.shift() + p;
	  }
	  subpaths.end = sp;

	  point = istotal ? len : findDotsAtSegment
	    (x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);

	  if (point.alpha) {
	    point = { x: point.x, y: point.y, alpha: point.alpha };
	  }

	  return point;
	}

	function pathToAbsolute(pathArray) {

	  var res = [], x = 0, y = 0, mx = 0, my = 0, start = 0;
	  if (pathArray[0][0] === 'M') {
	    x = +pathArray[0][1];
	    y = +pathArray[0][2];
	    mx = x;
	    my = y;
	    start++;
	    res[0] = ['M', x, y];
	  }

	  var dots,crz = pathArray.length===3 && pathArray[0][0]==='M' &&
	    pathArray[1][0].toUpperCase()==='R' && pathArray[2][0].toUpperCase()==='Z';

	  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
	    res.push(r = []);
	    pa = pathArray[i];
	    if (pa[0] !== String.prototype.toUpperCase.call(pa[0])) {
	      r[0] = String.prototype.toUpperCase.call(pa[0]);
	      switch (r[0]) {
	        case 'A':
	          r[1] = pa[1];
	          r[2] = pa[2];
	          r[3] = pa[3];
	          r[4] = pa[4];
	          r[5] = pa[5];
	          r[6] = +(pa[6] + x);
	          r[7] = +(pa[7] + y);
	          break;
	        case 'V':
	          r[1] = +pa[1] + y;
	          break;
	        case 'H':
	          r[1] = +pa[1] + x;
	          break;
	        case 'R':
	          dots = [x, y].concat(pa.slice(1));
	          for (var j = 2, jj = dots.length; j < jj; j++) {
	            dots[j] = +dots[j] + x;
	            dots[++j] = +dots[j] + y;
	          }
	          res.pop();
	          res = res.concat(catmullRom2bezier(dots, crz));
	          break;
	        case 'M':
	          mx = +pa[1] + x;
	          my = +pa[2] + y;
	          break;
	        default:
	          for (j = 1, jj = pa.length; j < jj; j++) {
	            r[j] = +pa[j] + ((j % 2) ? x : y);
	          }
	      }
	    } else if (pa[0] === 'R') {
	      dots = [x, y].concat(pa.slice(1));
	      res.pop();
	      res = res.concat(catmullRom2bezier(dots, crz));
	      r = ['R'].concat(pa.slice(-2));
	    } else {
	      for (var k = 0, kk = pa.length; k < kk; k++) {
	        r[k] = pa[k];
	      }
	    }
	    switch (r[0]) {
	      case 'Z':
	        x = mx;
	        y = my;
	        break;
	      case 'H':
	        x = r[1];
	        break;
	      case 'V':
	        y = r[1];
	        break;
	      case 'M':
	        mx = r[r.length - 2];
	        my = r[r.length - 1];
	        break;
	      default:
	        x = r[r.length - 2];
	        y = r[r.length - 1];
	    }
	  }
	  return res;
	}

	function path2curve(path, path2) {

	  var p = pathToAbsolute(path), p2 = path2 && pathToAbsolute(path2),
	    attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },
	    attrs2 = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },

	    processPath = function(path, d, pcom) {
	      var nx, ny, tq = { T: 1, Q: 1 };
	      if (!path) { return ['C', d.x, d.y, d.x, d.y, d.x, d.y]; }
	      if (!(path[0] in tq)) { d.qx = d.qy = null; }
	      switch (path[0]) {
	        case 'M':
	          d.X = path[1];
	          d.Y = path[2];
	          break;
	        case 'A':
	          path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));
	          break;
	        case 'S':
	          if (pcom === 'C' || pcom === 'S') {
	            nx = d.x * 2 - d.bx;
	            ny = d.y * 2 - d.by;
	          } else {
	            nx = d.x;
	            ny = d.y;
	          }
	          path = ['C', nx, ny].concat(path.slice(1));
	          break;
	        case 'T':
	          if (pcom === 'Q' || pcom === 'T') {
	            d.qx = d.x * 2 - d.qx;
	            d.qy = d.y * 2 - d.qy;
	          } else {
	            d.qx = d.x;
	            d.qy = d.y;
	          }
	          path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
	          break;
	        case 'Q':
	          d.qx = path[1];
	          d.qy = path[2];
	          path = ['C'].concat(q2c(d.x,d.y,path[1],path[2],path[3],path[4]));
	          break;
	        case 'L':
	          path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));
	          break;
	        case 'H':
	          path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));
	          break;
	        case 'V':
	          path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));
	          break;
	        case 'Z':
	          path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));
	          break;
	      }
	      return path;
	    },

	    fixArc = function(pp, i) {
	      if (pp[i].length > 7) {
	        pp[i].shift();
	        var pi = pp[i];
	        while (pi.length) {
	          pcoms1[i] = 'A';
	          if (p2) { pcoms2[i] = 'A'; }
	          pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
	        }
	        pp.splice(i, 1);
	        ii = Math.max(p.length, p2 && p2.length || 0);
	      }
	    },

	    fixM = function(path1, path2, a1, a2, i) {
	      if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {
	        path2.splice(i, 0, ['M', a2.x, a2.y]);
	        a1.bx = 0;
	        a1.by = 0;
	        a1.x = path1[i][1];
	        a1.y = path1[i][2];
	        ii = Math.max(p.length, p2 && p2.length || 0);
	      }
	    },

	    pcoms1 = [], // path commands of original path p
	    pcoms2 = [], // path commands of original path p2
	    pfirst = '', // temporary holder for original path command
	    pcom = ''; // holder for previous path command of original path

	  for (var i = 0, ii = Math.max(p.length, p2 && p2.length || 0); i < ii; i++) {
	    if (p[i]) { pfirst = p[i][0]; } // save current path command

	    if (pfirst !== 'C') {
	      pcoms1[i] = pfirst; // Save current path command
	      if (i) { pcom = pcoms1[i - 1]; } // Get previous path command pcom
	    }
	    p[i] = processPath(p[i], attrs, pcom);

	    if (pcoms1[i] !== 'A' && pfirst === 'C') { pcoms1[i] = 'C'; }

	    fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1

	    if (p2) { // the same procedures is done to p2
	      if (p2[i]) { pfirst = p2[i][0]; }
	      if (pfirst !== 'C') {
	        pcoms2[i] = pfirst;
	        if (i) { pcom = pcoms2[i - 1]; }
	      }
	      p2[i] = processPath(p2[i], attrs2, pcom);

	      if (pcoms2[i] !== 'A' && pfirst === 'C') { pcoms2[i] = 'C'; }

	      fixArc(p2, i);
	    }
	    fixM(p, p2, attrs, attrs2, i);
	    fixM(p2, p, attrs2, attrs, i);
	    var seg = p[i], seg2 = p2 && p2[i], seglen = seg.length,
	      seg2len = p2 && seg2.length;
	    attrs.x = seg[seglen - 2];
	    attrs.y = seg[seglen - 1];
	    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;
	    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;
	    attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);
	    attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);
	    attrs2.x = p2 && seg2[seg2len - 2];
	    attrs2.y = p2 && seg2[seg2len - 1];
	  }

	  return p2 ? [p, p2] : p;
	}

	function a2c(x1, y1, rx, ry, angle, lac, sweep_flag, x2, y2, recursive) {
	  // for more information of where this Math came from visit:
	  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
	  var PI = Math.PI, _120 = PI * 120 / 180, f1, f2, cx, cy,
	    rad = PI / 180 * (+angle || 0), res = [], xy,
	    rotate = function (x, y, rad) {
	      var X = x * Math.cos(rad) - y * Math.sin(rad),
	        Y = x * Math.sin(rad) + y * Math.cos(rad);
	      return { x: X, y: Y };
	    };
	  if (!recursive) {
	    xy = rotate(x1, y1, -rad);
	    x1 = xy.x;
	    y1 = xy.y;
	    xy = rotate(x2, y2, -rad);
	    x2 = xy.x;
	    y2 = xy.y;
	    var x = (x1 - x2) / 2, y = (y1 - y2) / 2,
	      h = (x * x) / (rx * rx) + (y * y) / (ry * ry);
	    if (h > 1) {
	      h = Math.sqrt(h);
	      rx = h * rx;
	      ry = h * ry;
	    }
	    var rx2 = rx * rx, ry2 = ry * ry,
	      k = (lac === sweep_flag ? -1 : 1) * Math.sqrt(Math.abs
	        ((rx2 * ry2 - rx2 * y * y - ry2 * x * x)/(rx2 * y * y + ry2 * x * x)));

	    cx = k * rx * y / ry + (x1 + x2) / 2;
	    cy = k * -ry * x / rx + (y1 + y2) / 2;
	    f1 = Math.asin(((y1 - cy) / ry).toFixed(9));
	    f2 = Math.asin(((y2 - cy) / ry).toFixed(9));

	    f1 = x1 < cx ? PI - f1 : f1;
	    f2 = x2 < cx ? PI - f2 : f2;

	    if (f1 < 0) { f1 = PI * 2 + f1; }
	    if (f2 < 0) { f2 = PI * 2 + f2; }

	    if (sweep_flag && f1 > f2) {
	      f1 = f1 - PI * 2;
	    }
	    if (!sweep_flag && f2 > f1) {
	      f2 = f2 - PI * 2;
	    }
	  } else {
	    f1 = recursive[0];
	    f2 = recursive[1];
	    cx = recursive[2];
	    cy = recursive[3];
	  }
	  var df = f2 - f1;
	  if (Math.abs(df) > _120) {
	    var f2old = f2, x2old = x2, y2old = y2;
	    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
	    x2 = cx + rx * Math.cos(f2);
	    y2 = cy + ry * Math.sin(f2);
	    res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old,
	      [f2, f2old, cx, cy]);
	  }
	  df = f2 - f1;
	  var c1 = Math.cos(f1),
	    s1 = Math.sin(f1),
	    c2 = Math.cos(f2),
	    s2 = Math.sin(f2),
	    t = Math.tan(df / 4),
	    hx = 4 / 3 * rx * t,
	    hy = 4 / 3 * ry * t,
	    m1 = [x1, y1],
	    m2 = [x1 + hx * s1, y1 - hy * c1],
	    m3 = [x2 + hx * s2, y2 - hy * c2],
	    m4 = [x2, y2];
	  m2[0] = 2 * m1[0] - m2[0];
	  m2[1] = 2 * m1[1] - m2[1];
	  if (recursive) {
	    return [m2, m3, m4].concat(res);
	  } else {
	    res = [m2, m3, m4].concat(res).join().split(',');
	    var newres = [];
	    for (var i = 0, ii = res.length; i < ii; i++) {
	      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i],
	        res[i + 1], rad).x;
	    }
	    return newres;
	  }
	}

	// http://schepers.cc/getting-to-the-point
	function catmullRom2bezier(crp, z) {
	  var d = [];
	  for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
	    var p = [{
	      x: +crp[i - 2],
	      y: +crp[i - 1]
	    }, {
	      x: +crp[i],
	      y: +crp[i + 1]
	    }, {
	      x: +crp[i + 2],
	      y: +crp[i + 3]
	    }, {
	      x: +crp[i + 4],
	      y: +crp[i + 5]
	    }];
	    if (z) {
	      if (!i) {
	        p[0] = {
	          x: +crp[iLen - 2],
	          y: +crp[iLen - 1]
	        };
	      } else if (iLen - 4 === i) {
	        p[3] = {
	          x: +crp[0],
	          y: +crp[1]
	        };
	      } else if (iLen - 2 === i) {
	        p[2] = {
	          x: +crp[0],
	          y: +crp[1]
	        };
	        p[3] = {
	          x: +crp[2],
	          y: +crp[3]
	        };
	      }
	    } else {
	      if (iLen - 4 === i) {
	        p[3] = p[2];
	      } else if (!i) {
	        p[0] = {
	          x: +crp[i],
	          y: +crp[i + 1]
	        };
	      }
	    }
	    d.push(['C', (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y +
	      p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y -
	      p[3].y) / 6, p[2].x, p[2].y ]);
	  }

	  return d;
	}

	function l2c(x1, y1, x2, y2) { return [x1, y1, x2, y2, x2, y2]; }

	function q2c(x1, y1, ax, ay, x2, y2) {
	  var _13 = 1 / 3, _23 = 2 / 3;
	  return [
	    _13 * x1 + _23 * ax, _13 * y1 + _23 * ay,
	    _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2
	  ];
	}

	function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
	  if (z == null) { z = 1; }
	  z = z > 1 ? 1 : z < 0 ? 0 : z;
	  var z2 = z / 2,
	    n = 12, Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873,
	       -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816],
	    sum = 0, Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032,
	      0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472 ];
	  for (var i = 0; i < n; i++) {
	    var ct = z2 * Tvalues[i] + z2,
	      xbase = base3(ct, x1, x2, x3, x4),
	      ybase = base3(ct, y1, y2, y3, y4),
	      comb = xbase * xbase + ybase * ybase;
	    sum += Cvalues[i] * Math.sqrt(comb);
	  }
	  return z2 * sum;
	}

	function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {
	  if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {
	    return;
	  }
	  var t = 1, step = t / 2, t2 = t - step, l, e = 0.01;
	  l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);
	  while (Math.abs(l - ll) > e) {
	    step /= 2;
	    t2 += (l < ll ? 1 : -1) * step;
	    l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);
	  }
	  return t2;
	}

	function base3(t, p1, p2, p3, p4) {
	  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,
	    t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
	  return t * t2 - 3 * p1 + 3 * p2;
	}

	function cacheKey() {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  i = args.length;
	  var hash = '';
	  while (i--) {
	    hash += (args[i] === Object(args[i])) ?
	      JSON.stringify(args[i]) : args[i];
	  }
	  return hash;
	}

	module.exports = p5.Font;

	},{"../core/constants":36,"../core/core":37}],73:[function(_dereq_,module,exports){
	/**
	 * @module Data
	 * @submodule Array Functions
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * Adds a value to the end of an array. Extends the length of
	 * the array by one. Maps to Array.push().
	 *
	 * @method append
	 * @param {Array} array Array to append
	 * @param {any} value to be added to the Array
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *
	 * var myArray = new Array("Mango", "Apple", "Papaya")
	 * print(myArray) // ["Mango", "Apple", "Papaya"]
	 *
	 * append(myArray, "Peach")
	 * print(myArray) // ["Mango", "Apple", "Papaya", "Peach"]
	 *
	 * }
	 * </div></code>
	 */
	p5.prototype.append = function(array, value) {
	  array.push(value);
	  return array;
	};

	/**
	 * Copies an array (or part of an array) to another array. The src array is
	 * copied to the dst array, beginning at the position specified by
	 * srcPosition and into the position specified by dstPosition. The number of
	 * elements to copy is determined by length. Note that copying values
	 * overwrites existing values in the destination array. To append values
	 * instead of overwriting them, use concat().
	 * <br><br>
	 * The simplified version with only two arguments, arrayCopy(src, dst),
	 * copies an entire array to another of the same size. It is equivalent to
	 * arrayCopy(src, 0, dst, 0, src.length).
	 * <br><br>
	 * Using this function is far more efficient for copying array data than
	 * iterating through a for() loop and copying each element individually.
	 *
	 * @method arrayCopy
	 * @param {Array}  src           the source Array
	 * @param {Number} [srcPosition] starting position in the source Array
	 * @param {Array}  dst           the destination Array
	 * @param {Number} [dstPosition] starting position in the destination Array
	 * @param {Number} [length]      number of Array elements to be copied
	 *
	 * @example
	 *  <div class="norender"><code>
	 *  function setup() {
	 *
	 *    var src = new Array("A", "B", "C");
	 *    var dst = new Array( 1 ,  2 ,  3 );
	 *    var srcPosition = 1;
	 *    var dstPosition = 0;
	 *    var length = 2;
	 *
	 *    print(src); // ["A", "B", "C"]
	 *    print(dst); // [ 1 ,  2 ,  3 ]
	 *
	 *    arrayCopy(src, srcPosition, dst, dstPosition, length);
	 *    print(dst); // ["B", "C", 3]
	 *
	 *    }
	 *  </div></code>
	 */
	p5.prototype.arrayCopy = function(
	  src,
	  srcPosition,
	  dst,
	  dstPosition,
	  length) {

	  // the index to begin splicing from dst array
	  var start,
	      end;

	  if (typeof length !== 'undefined') {

	    end = Math.min(length, src.length);
	    start = dstPosition;
	    src = src.slice(srcPosition, end + srcPosition);

	  } else {

	    if (typeof dst !== 'undefined') { // src, dst, length
	      // rename  so we don't get confused
	      end = dst;
	      end = Math.min(end, src.length);
	    } else { // src, dst
	      end = src.length;
	    }

	    start = 0;
	    // rename  so we don't get confused
	    dst = srcPosition;
	    src = src.slice(0, end);
	  }

	  // Since we are not returning the array and JavaScript is pass by reference
	  // we must modify the actual values of the array
	  // instead of reassigning arrays
	  Array.prototype.splice.apply(dst, [start, end].concat(src));

	};

	/**
	 * Concatenates two arrays, maps to Array.concat(). Does not modify the
	 * input arrays.
	 *
	 * @method concat
	 * @param {Array} a first Array to concatenate
	 * @param {Array} b second Array to concatenate
	 * @return {Array} concatenated array
	 *
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var arr1 = new Array("A", "B", "C");
	 *   var arr2 = new Array( 1 ,  2 ,  3 );
	 *
	 *   print(arr1); // ["A","B","C"]
	 *   print(arr2); // [1,2,3]
	 *
	 *   var arr3 = concat(arr1, arr2);
	 *
	 *   print(arr1); // ["A","B","C"]
	 *   print(arr2); // [1,2,3]
	 *   print(arr3); // ["A","B","C",1,2,3]
	 *
	 * }
	 * </div></code>
	 */
	p5.prototype.concat = function(list0, list1) {
	  return list0.concat(list1);
	};

	/**
	 * Reverses the order of an array, maps to Array.reverse()
	 *
	 * @method reverse
	 * @param {Array} list Array to reverse
	 * @example
	 * <div class="norender"><code>
	 * function setup() {
	 *   var myArray = new Array("A", "B", "C");
	 *   print(myArray); // ["A","B","C"]
	 *
	 *   reverse(myArray);
	 *   print(myArray); // ["C","B","A"]
	 * }
	 * </div></code>
	 */
	p5.prototype.reverse = function(list) {
	  return list.reverse();
	};

	/**
	 * Decreases an array by one element and returns the shortened array,
	 * maps to Array.pop().
	 *
	 * @method shorten
	 * @param  {Array} list Array to shorten
	 * @return {Array} shortened Array
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var myArray = new Array("A", "B", "C");
	 *   print(myArray); // ["A","B","C"]
	 *
	 *   var newArray = shorten(myArray);
	 *   print(myArray); // ["A","B","C"]
	 *   print(newArray); // ["A","B"]
	 * }
	 * </div></code>
	 */
	p5.prototype.shorten = function(list) {
	  list.pop();
	  return list;
	};

	/**
	 * Randomizes the order of the elements of an array. Implements
	 * <a href="http://Bost.Ocks.org/mike/shuffle/" target=_blank>
	 * Fisher-Yates Shuffle Algorithm</a>.
	 *
	 * @method shuffle
	 * @param  {Array}   array  Array to shuffle
	 * @param  {Boolean} [bool] modify passed array
	 * @return {Array}   shuffled Array
	 * @example
	 * <div><code>
	 * function setup() {
	 *   var regularArr = ['ABC', 'def', createVector(), TAU, Math.E];
	 *   print(regularArr);
	 *   shuffle(regularArr, true); // force modifications to passed array
	 *   print(regularArr);
	 *
	 *   // By default shuffle() returns a shuffled cloned array:
	 *   var newArr = shuffle(regularArr);
	 *   print(regularArr);
	 *   print(newArr);
	 * }
	 * </code></div>
	 */
	p5.prototype.shuffle = function(arr, bool) {
	  var isView = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(arr);
	  arr = bool || isView ? arr : arr.slice();

	  var rnd, tmp, idx = arr.length;
	  while (idx > 1) {
	    rnd = Math.random()*idx | 0;

	    tmp = arr[--idx];
	    arr[idx] = arr[rnd];
	    arr[rnd] = tmp;
	  }

	  return arr;
	};

	/**
	 * Sorts an array of numbers from smallest to largest, or puts an array of
	 * words in alphabetical order. The original array is not modified; a
	 * re-ordered array is returned. The count parameter states the number of
	 * elements to sort. For example, if there are 12 elements in an array and
	 * count is set to 5, only the first 5 elements in the array will be sorted.
	 *
	 * @method sort
	 * @param {Array} list Array to sort
	 * @param {Number} [count] number of elements to sort, starting from 0
	 *
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var words = new Array("banana", "apple", "pear","lime");
	 *   print(words); // ["banana", "apple", "pear", "lime"]
	 *   var count = 4; // length of array
	 *
	 *   words = sort(words, count);
	 *   print(words); // ["apple", "banana", "lime", "pear"]
	 * }
	 * </div></code>
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var numbers = new Array(2,6,1,5,14,9,8,12);
	 *   print(numbers); // [2,6,1,5,14,9,8,12]
	 *   var count = 5; // Less than the length of the array
	 *
	 *   numbers = sort(numbers, count);
	 *   print(numbers); // [1,2,5,6,14,9,8,12]
	 * }
	 * </div></code>
	 */
	p5.prototype.sort = function(list, count) {
	  var arr = count ? list.slice(0, Math.min(count, list.length)) : list;
	  var rest = count ? list.slice(Math.min(count, list.length)) : [];
	  if (typeof arr[0] === 'string') {
	    arr = arr.sort();
	  } else {
	    arr = arr.sort(function(a,b){return a-b;});
	  }
	  return arr.concat(rest);
	};

	/**
	 * Inserts a value or an array of values into an existing array. The first
	 * parameter specifies the initial array to be modified, and the second
	 * parameter defines the data to be inserted. The third parameter is an index
	 * value which specifies the array position from which to insert data.
	 * (Remember that array index numbering starts at zero, so the first position
	 * is 0, the second position is 1, and so on.)
	 *
	 * @method splice
	 * @param {Array}  list Array to splice into
	 * @param {any}    value value to be spliced in
	 * @param {Number} position in the array from which to insert data
	 *
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var myArray = new Array(0,1,2,3,4);
	 *   var insArray = new Array("A","B","C");
	 *   print(myArray); // [0,1,2,3,4]
	 *   print(insArray); // ["A","B","C"]
	 *
	 *   splice(myArray, insArray, 3);
	 *   print(myArray); // [0,1,2,"A","B","C",3,4]
	 * }
	 * </div></code>
	 */
	p5.prototype.splice = function(list, value, index) {

	  // note that splice returns spliced elements and not an array
	  Array.prototype.splice.apply(list, [index, 0].concat(value));

	  return list;
	};

	/**
	 * Extracts an array of elements from an existing array. The list parameter
	 * defines the array from which the elements will be copied, and the start
	 * and count parameters specify which elements to extract. If no count is
	 * given, elements will be extracted from the start to the end of the array.
	 * When specifying the start, remember that the first array element is 0.
	 * This function does not change the source array.
	 *
	 * @method subset
	 * @param  {Array}  list    Array to extract from
	 * @param  {Number} start   position to begin
	 * @param  {Number} [count] number of values to extract
	 * @return {Array}          Array of extracted elements
	 *
	 * @example
	 * <div class = "norender"><code>
	 * function setup() {
	 *   var myArray = new Array(1,2,3,4,5);
	 *   print(myArray); // [1,2,3,4,5]
	 *
	 *   var sub1 = subset(myArray, 0, 3);
	 *   var sub2 = subset(myArray, 2, 2);
	 *   print(sub1); // [1,2,3]
	 *   print(sub2); // [3,4]
	 * }
	 * </div></code>
	 */
	p5.prototype.subset = function(list, start, count) {
	  if (typeof count !== 'undefined') {
	    return list.slice(start, start + count);
	  } else {
	    return list.slice(start, list.length);
	  }
	};

	module.exports = p5;

	},{"../core/core":37}],74:[function(_dereq_,module,exports){
	/**
	 * @module Data
	 * @submodule Conversion
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * Converts a string to its floating point representation. The contents of a
	 * string must resemble a number, or NaN (not a number) will be returned.
	 * For example, float("1234.56") evaluates to 1234.56, but float("giraffe")
	 * will return NaN.
	 *
	 * When an array of values is passed in, then an array of floats of the same
	 * length is returned.
	 *
	 * @method float
	 * @param {String}  str float string to parse
	 * @return {Number}     floating point representation of string
	 * @example
	 * <div><code>
	 * var str = '20';
	 * var diameter = float(str);
	 * ellipse(width/2, height/2, diameter, diameter);
	 * </code></div>
	 *
	 * @alt
	 * 20 by 20 white ellipse in the center of the canvas
	 *
	 */
	p5.prototype.float = function(str) {
	  if (str instanceof Array) {
	    return str.map(parseFloat);
	  }
	  return parseFloat(str);
	};

	/**
	 * Converts a boolean, string, or float to its integer representation.
	 * When an array of values is passed in, then an int array of the same length
	 * is returned.
	 *
	 * @method int
	 * @param {String|Boolean|Number|Array} n value to parse
	 * @return {Number}                     integer representation of value
	 * @example
	 * <div class='norender'><code>
	 * print(int("10")); // 10
	 * print(int(10.31)); // 10
	 * print(int(-10)); // -10
	 * print(int(true)); // 1
	 * print(int(false)); // 0
	 * print(int([false, true, "10.3", 9.8])); // [0, 1, 10, 9]
	 * </code></div>
	 */
	p5.prototype.int = function(n, radix) {
	  radix = radix || 10;
	  if (typeof n === 'string') {
	    return parseInt(n, radix);
	  } else if (typeof n === 'number') {
	    return n | 0;
	  } else if (typeof n === 'boolean') {
	    return n ? 1 : 0;
	  } else if (n instanceof Array) {
	    return n.map(function(n) { return p5.prototype.int(n, radix); });
	  }
	};

	/**
	 * Converts a boolean, string or number to its string representation.
	 * When an array of values is passed in, then an array of strings of the same
	 * length is returned.
	 *
	 * @method str
	 * @param {String|Boolean|Number|Array} n value to parse
	 * @return {String}                     string representation of value
	 * @example
	 * <div class='norender'><code>
	 * print(str("10"));  // "10"
	 * print(str(10.31)); // "10.31"
	 * print(str(-10));   // "-10"
	 * print(str(true));  // "true"
	 * print(str(false)); // "false"
	 * print(str([true, "10.3", 9.8])); // [ "true", "10.3", "9.8" ]
	 * </code></div>
	 */
	p5.prototype.str = function(n) {
	  if (n instanceof Array) {
	    return n.map(p5.prototype.str);
	  } else {
	    return String(n);
	  }
	};

	/**
	 * Converts a number or string to its boolean representation.
	 * For a number, any non-zero value (positive or negative) evaluates to true,
	 * while zero evaluates to false. For a string, the value "true" evaluates to
	 * true, while any other value evaluates to false. When an array of number or
	 * string values is passed in, then a array of booleans of the same length is
	 * returned.
	 *
	 * @method boolean
	 * @param {String|Boolean|Number|Array} n value to parse
	 * @return {Boolean}                    boolean representation of value
	 * @example
	 * <div class='norender'><code>
	 * print(boolean(0));               // false
	 * print(boolean(1));               // true
	 * print(boolean("true"));          // true
	 * print(boolean("abcd"));          // false
	 * print(boolean([0, 12, "true"])); // [false, true, false]
	 * </code></div>
	 */
	p5.prototype.boolean = function(n) {
	  if (typeof n === 'number') {
	    return n !== 0;
	  } else if (typeof n === 'string') {
	    return n.toLowerCase() === 'true';
	  } else if (typeof n === 'boolean') {
	    return n;
	  } else if (n instanceof Array) {
	    return n.map(p5.prototype.boolean);
	  }
	};

	/**
	 * Converts a number, string or boolean to its byte representation.
	 * A byte can be only a whole number between -128 and 127, so when a value
	 * outside of this range is converted, it wraps around to the corresponding
	 * byte representation. When an array of number, string or boolean values is
	 * passed in, then an array of bytes the same length is returned.
	 *
	 * @method byte
	 * @param {String|Boolean|Number|Array} n value to parse
	 * @return {Number}                     byte representation of value
	 * @example
	 * <div class='norender'><code>
	 * print(byte(127));               // 127
	 * print(byte(128));               // -128
	 * print(byte(23.4));              // 23
	 * print(byte("23.4"));            // 23
	 * print(byte(true));              // 1
	 * print(byte([0, 255, "100"]));   // [0, -1, 100]
	 * </code></div>
	 */
	p5.prototype.byte = function(n) {
	  var nn = p5.prototype.int(n, 10);
	  if (typeof nn === 'number') {
	    return ((nn + 128) % 256) - 128;
	  } else if (nn instanceof Array) {
	    return nn.map(p5.prototype.byte);
	  }
	};

	/**
	 * Converts a number or string to its corresponding single-character
	 * string representation. If a string parameter is provided, it is first
	 * parsed as an integer and then translated into a single-character string.
	 * When an array of number or string values is passed in, then an array of
	 * single-character strings of the same length is returned.
	 *
	 * @method char
	 * @param {String|Number|Array} n value to parse
	 * @return {String}             string representation of value
	 * @example
	 * <div class='norender'><code>
	 * print(char(65));                     // "A"
	 * print(char("65"));                   // "A"
	 * print(char([65, 66, 67]));           // [ "A", "B", "C" ]
	 * print(join(char([65, 66, 67]), '')); // "ABC"
	 * </code></div>
	 */
	p5.prototype.char = function(n) {
	  if (typeof n === 'number' && !isNaN(n)) {
	    return String.fromCharCode(n);
	  } else if (n instanceof Array) {
	    return n.map(p5.prototype.char);
	  } else if (typeof n === 'string') {
	    return p5.prototype.char(parseInt(n, 10));
	  }
	};

	/**
	 * Converts a single-character string to its corresponding integer
	 * representation. When an array of single-character string values is passed
	 * in, then an array of integers of the same length is returned.
	 *
	 * @method unchar
	 * @param {String|Array} n value to parse
	 * @return {Number}      integer representation of value
	 * @example
	 * <div class='norender'><code>
	 * print(unchar("A"));               // 65
	 * print(unchar(["A", "B", "C"]));   // [ 65, 66, 67 ]
	 * print(unchar(split("ABC", "")));  // [ 65, 66, 67 ]
	 * </code></div>
	 */
	p5.prototype.unchar = function(n) {
	  if (typeof n === 'string' && n.length === 1) {
	    return n.charCodeAt(0);
	  } else if (n instanceof Array) {
	    return n.map(p5.prototype.unchar);
	  }
	};

	/**
	 * Converts a number to a string in its equivalent hexadecimal notation. If a
	 * second parameter is passed, it is used to set the number of characters to
	 * generate in the hexadecimal notation. When an array is passed in, an
	 * array of strings in hexadecimal notation of the same length is returned.
	 *
	 * @method hex
	 * @param {Number|Array} n value to parse
	 * @return {String}      hexadecimal string representation of value
	 * @example
	 * <div class='norender'><code>
	 * print(hex(255));               // "000000FF"
	 * print(hex(255, 6));            // "0000FF"
	 * print(hex([0, 127, 255], 6));  // [ "000000", "00007F", "0000FF" ]
	 * </code></div>
	 */
	p5.prototype.hex = function(n, digits) {
	  digits = (digits === undefined || digits === null) ? digits = 8 : digits;
	  if (n instanceof Array) {
	    return n.map(function(n) { return p5.prototype.hex(n, digits); });
	  } else if (typeof n === 'number') {
	    if (n < 0) {
	      n = 0xFFFFFFFF + n + 1;
	    }
	    var hex = Number(n).toString(16).toUpperCase();
	    while (hex.length < digits) {
	      hex = '0' + hex;
	    }
	    if (hex.length >= digits) {
	      hex = hex.substring(hex.length - digits, hex.length);
	    }
	    return hex;
	  }
	};

	/**
	 * Converts a string representation of a hexadecimal number to its equivalent
	 * integer value. When an array of strings in hexadecimal notation is passed
	 * in, an array of integers of the same length is returned.
	 *
	 * @method unhex
	 * @param {String|Array} n value to parse
	 * @return {Number}      integer representation of hexadecimal value
	 * @example
	 * <div class='norender'><code>
	 * print(unhex("A"));                // 10
	 * print(unhex("FF"));               // 255
	 * print(unhex(["FF", "AA", "00"])); // [ 255, 170, 0 ]
	 * </code></div>
	 */
	p5.prototype.unhex = function(n) {
	  if (n instanceof Array) {
	    return n.map(p5.prototype.unhex);
	  } else {
	    return parseInt('0x' + n, 16);
	  }
	};

	module.exports = p5;

	},{"../core/core":37}],75:[function(_dereq_,module,exports){
	/**
	 * @module Data
	 * @submodule String Functions
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	//return p5; //LM is this a mistake?

	/**
	 * Combines an array of Strings into one String, each separated by the
	 * character(s) used for the separator parameter. To join arrays of ints or
	 * floats, it's necessary to first convert them to Strings using nf() or
	 * nfs().
	 *
	 * @method join
	 * @param  {Array}  list      array of Strings to be joined
	 * @param  {String} separator String to be placed between each item
	 * @return {String}           joined String
	 * @example
	 * <div>
	 * <code>
	 * var array = ["Hello", "world!"]
	 * var separator = " "
	 * var message = join(array, separator);
	 * text(message, 5, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * "hello world!" displayed middle left of canvas.
	 *
	 */
	p5.prototype.join = function(list, separator) {
	  return list.join(separator);
	};

	/**
	 * This function is used to apply a regular expression to a piece of text,
	 * and return matching groups (elements found inside parentheses) as a
	 * String array. If there are no matches, a null value will be returned.
	 * If no groups are specified in the regular expression, but the sequence
	 * matches, an array of length 1 (with the matched text as the first element
	 * of the array) will be returned.
	 * <br><br>
	 * To use the function, first check to see if the result is null. If the
	 * result is null, then the sequence did not match at all. If the sequence
	 * did match, an array is returned.
	 * <br><br>
	 * If there are groups (specified by sets of parentheses) in the regular
	 * expression, then the contents of each will be returned in the array.
	 * Element [0] of a regular expression match returns the entire matching
	 * string, and the match groups start at element [1] (the first group is [1],
	 * the second [2], and so on).
	 *
	 * @method match
	 * @param  {String} str    the String to be searched
	 * @param  {String} regexp the regexp to be used for matching
	 * @return {Array}         Array of Strings found
	 * @example
	 * <div>
	 * <code>
	 * var string = "Hello p5js*!"
	 * var regexp = "p5js\\*"
	 * var match = match(string, regexp);
	 * text(match, 5, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * "p5js*" displayed middle left of canvas.
	 *
	 */
	p5.prototype.match =  function(str, reg) {
	  return str.match(reg);
	};

	/**
	 * This function is used to apply a regular expression to a piece of text,
	 * and return a list of matching groups (elements found inside parentheses)
	 * as a two-dimensional String array. If there are no matches, a null value
	 * will be returned. If no groups are specified in the regular expression,
	 * but the sequence matches, a two dimensional array is still returned, but
	 * the second dimension is only of length one.
	 * <br><br>
	 * To use the function, first check to see if the result is null. If the
	 * result is null, then the sequence did not match at all. If the sequence
	 * did match, a 2D array is returned.
	 * <br><br>
	 * If there are groups (specified by sets of parentheses) in the regular
	 * expression, then the contents of each will be returned in the array.
	 * Assuming a loop with counter variable i, element [i][0] of a regular
	 * expression match returns the entire matching string, and the match groups
	 * start at element [i][1] (the first group is [i][1], the second [i][2],
	 * and so on).
	 *
	 * @method matchAll
	 * @param  {String} str    the String to be searched
	 * @param  {String} regexp the regexp to be used for matching
	 * @return {Array}         2d Array of Strings found
	 * @example
	 * <div class="norender">
	 * <code>
	 * var string = "Hello p5js*! Hello world!"
	 * var regexp = "Hello"
	 * matchAll(string, regexp);
	 * </code>
	 * </div>

	 */
	p5.prototype.matchAll = function(str, reg) {
	  var re = new RegExp(reg, 'g');
	  var match = re.exec(str);
	  var matches = [];
	  while (match !== null) {
	    matches.push(match);
	    // matched text: match[0]
	    // match start: match.index
	    // capturing group n: match[n]
	    match = re.exec(str);
	  }
	  return matches;
	};

	/**
	 * Utility function for formatting numbers into strings. There are two
	 * versions: one for formatting floats, and one for formatting ints.
	 * The values for the digits, left, and right parameters should always
	 * be positive integers.
	 *
	 * @method nf
	 * @param {Number|Array} num      the Number to format
	 * @param {Number}       [left]   number of digits to the left of the
	 *                                decimal point
	 * @param {Number}       [right]  number of digits to the right of the
	 *                                decimal point
	 * @return {String|Array}         formatted String
	 * @example
	 * <div>
	 * <code>
	 * function setup() {
	 *   background(200);
	 *   var num = 112.53106115;
	 *
	 *   noStroke();
	 *   fill(0);
	 *   textSize(14);
	 *   // Draw formatted numbers
	 *   text(nf(num, 5, 2), 10, 20);
	 *
	 *   text(nf(num, 4, 3), 10, 55);
	 *
	 *   text(nf(num, 3, 6), 10, 85);
	 *
	 *   // Draw dividing lines
	 *   stroke(120);
	 *   line(0, 30, width, 30);
	 *   line(0, 65, width, 65);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * "0011253" top left, "0112.531" mid left, "112.531061" bottom left canvas
	 *
	 */
	p5.prototype.nf = function () {
	  if (arguments[0] instanceof Array) {
	    var a = arguments[1];
	    var b = arguments[2];
	    return arguments[0].map(function (x) {
	      return doNf(x, a, b);
	    });
	  }
	  else{
	    var typeOfFirst = Object.prototype.toString.call(arguments[0]);
	    if(typeOfFirst === '[object Arguments]'){
	      if(arguments[0].length===3){
	        return this.nf(arguments[0][0],arguments[0][1],arguments[0][2]);
	      }
	      else if(arguments[0].length===2){
	        return this.nf(arguments[0][0],arguments[0][1]);
	      }
	      else{
	        return this.nf(arguments[0][0]);
	      }
	    }
	    else {
	      return doNf.apply(this, arguments);
	    }
	  }
	};

	function doNf() {
	  var num = arguments[0];
	  var neg = num < 0;
	  var n = neg ? num.toString().substring(1) : num.toString();
	  var decimalInd = n.indexOf('.');
	  var intPart = decimalInd !== -1 ? n.substring(0, decimalInd) : n;
	  var decPart = decimalInd !== -1 ? n.substring(decimalInd + 1) : '';
	  var str = neg ? '-' : '';
	  if (arguments.length === 3) {
	    var decimal = '';
	    if(decimalInd !== -1 || arguments[2] - decPart.length > 0){
	      decimal = '.';
	    }
	    if (decPart.length > arguments[2]) {
	      decPart = decPart.substring(0, arguments[2]);
	    }
	    for (var i = 0; i < arguments[1] - intPart.length; i++) {
	      str += '0';
	    }
	    str += intPart;
	    str += decimal;
	    str += decPart;
	    for (var j = 0; j < arguments[2] - decPart.length; j++) {
	      str += '0';
	    }
	    return str;
	  }
	  else {
	    for (var k = 0; k < Math.max(arguments[1] - intPart.length, 0); k++) {
	      str += '0';
	    }
	    str += n;
	    return str;
	  }
	}

	/**
	 * Utility function for formatting numbers into strings and placing
	 * appropriate commas to mark units of 1000. There are two versions: one
	 * for formatting ints, and one for formatting an array of ints. The value
	 * for the right parameter should always be a positive integer.
	 *
	 * @method nfc
	 * @param  {Number|Array}   num     the Number to format
	 * @param  {Number}         [right] number of digits to the right of the
	 *                                  decimal point
	 * @return {String|Array}           formatted String
	 * @example
	 * <div>
	 * <code>
	 * function setup() {
	 *   background(200);
	 *   var num = 11253106.115;
	 *   var numArr = new Array(1,1,2);
	 *
	 *   noStroke();
	 *   fill(0);
	 *   textSize(12);
	 *
	 *   // Draw formatted numbers
	 *   text(nfc(num, 4, 2), 10, 30);
	 *   text(nfc(numArr, 2, 1), 10, 80);
	 *
	 *   // Draw dividing line
	 *   stroke(120);
	 *   line(0, 50, width, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * "11,253,106.115" top middle and "1.00,1.00,2.00" displayed bottom mid
	 *
	 */
	p5.prototype.nfc = function () {
	  if (arguments[0] instanceof Array) {
	    var a = arguments[1];
	    return arguments[0].map(function (x) {
	      return doNfc(x, a);
	    });
	  } else {
	    return doNfc.apply(this, arguments);
	  }
	};
	function doNfc() {
	  var num = arguments[0].toString();
	  var dec = num.indexOf('.');
	  var rem = dec !== -1 ? num.substring(dec) : '';
	  var n = dec !== -1 ? num.substring(0, dec) : num;
	  n = n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
	  if (arguments[1] === 0) {
	    rem = '';
	  }
	  else if(arguments[1] !== undefined){
	    if(arguments[1] > rem.length){
	      rem+= dec === -1 ? '.' : '';
	      var len = arguments[1] - rem.length + 1;
	      for(var i =0; i< len; i++){
	        rem += '0';
	      }
	    }
	    else{
	      rem = rem.substring(0, arguments[1] + 1);
	    }
	  }
	  return n + rem;
	}

	/**
	 * Utility function for formatting numbers into strings. Similar to nf() but
	 * puts a "+" in front of positive numbers and a "-" in front of negative
	 * numbers. There are two versions: one for formatting floats, and one for
	 * formatting ints. The values for left, and right parameters
	 * should always be positive integers.
	 *
	 * @method nfp
	 * @param {Number|Array} num      the Number to format
	 * @param {Number}       [left]   number of digits to the left of the decimal
	 *                                point
	 * @param {Number}       [right]  number of digits to the right of the
	 *                                decimal point
	 * @return {String|Array}         formatted String
	 * @example
	 * <div>
	 * <code>
	 * function setup() {
	 *   background(200);
	 *   var num1 = 11253106.115;
	 *   var num2 = -11253106.115;
	 *
	 *   noStroke();
	 *   fill(0);
	 *   textSize(12);
	 *
	 *   // Draw formatted numbers
	 *   text(nfp(num1, 4, 2), 10, 30);
	 *   text(nfp(num2, 4, 2), 10, 80);
	 *
	 *   // Draw dividing line
	 *   stroke(120);
	 *   line(0, 50, width, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * "+11253106.11" top middle and "-11253106.11" displayed bottom middle
	 *
	 */
	p5.prototype.nfp = function() {
	  var nfRes = this.nf.apply(this, arguments);
	  if (nfRes instanceof Array) {
	    return nfRes.map(addNfp);
	  } else {
	    return addNfp(nfRes);
	  }
	};

	function addNfp() {
	  return (
	    parseFloat(arguments[0]) > 0) ?
	    '+'+arguments[0].toString() :
	    arguments[0].toString();
	}

	/**
	 * Utility function for formatting numbers into strings. Similar to nf() but
	 * puts a " " (space) in front of positive numbers and a "-" in front of
	 * negative numbers. There are two versions: one for formatting floats, and
	 * one for formatting ints. The values for the digits, left, and right
	 * parameters should always be positive integers.
	 *
	 * @method nfs
	 * @param {Number|Array} num      the Number to format
	 * @param {Number}       [left]   number of digits to the left of the decimal
	 *                                point
	 * @param {Number}       [right]  number of digits to the right of the
	 *                                decimal point
	 * @return {String|Array}         formatted String
	 * @example
	 * <div>
	 * <code>
	 * function setup() {
	 *   background(200);
	 *   var num1 = 11253106.115;
	 *   var num2 = -11253106.115;
	 *
	 *   noStroke();
	 *   fill(0);
	 *   textSize(12);
	 *   // Draw formatted numbers
	 *   text(nfs(num1, 4, 2), 10, 30);
	 *
	 *   text(nfs(num2, 4, 2), 10, 80);
	 *
	 *   // Draw dividing line
	 *   stroke(120);
	 *   line(0, 50, width, 50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * "11253106.11" top middle and "-11253106.11" displayed bottom middle
	 *
	 */
	p5.prototype.nfs = function() {
	  var nfRes = this.nf.apply(this, arguments);
	  if (nfRes instanceof Array) {
	    return nfRes.map(addNfs);
	  } else {
	    return addNfs(nfRes);
	  }
	};

	function addNfs() {
	  return (
	    parseFloat(arguments[0]) > 0) ?
	    ' '+arguments[0].toString() :
	    arguments[0].toString();
	}

	/**
	 * The split() function maps to String.split(), it breaks a String into
	 * pieces using a character or string as the delimiter. The delim parameter
	 * specifies the character or characters that mark the boundaries between
	 * each piece. A String[] array is returned that contains each of the pieces.
	 *
	 * The splitTokens() function works in a similar fashion, except that it
	 * splits using a range of characters instead of a specific character or
	 * sequence.
	 *
	 * @method split
	 * @param  {String} value the String to be split
	 * @param  {String} delim the String used to separate the data
	 * @return {Array}  Array of Strings
	 * @example
	 * <div>
	 * <code>
	 * var names = "Pat,Xio,Alex"
	 * var splitString = split(names, ",");
	 * text(splitString[0], 5, 30);
	 * text(splitString[1], 5, 50);
	 * text(splitString[2], 5, 70);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * "pat" top left, "Xio" mid left and "Alex" displayed bottom left
	 *
	 */
	p5.prototype.split = function(str, delim) {
	  return str.split(delim);
	};

	/**
	 * The splitTokens() function splits a String at one or many character
	 * delimiters or "tokens." The delim parameter specifies the character or
	 * characters to be used as a boundary.
	 * <br><br>
	 * If no delim characters are specified, any whitespace character is used to
	 * split. Whitespace characters include tab (\t), line feed (\n), carriage
	 * return (\r), form feed (\f), and space.
	 *
	 * @method splitTokens
	 * @param  {String} value   the String to be split
	 * @param  {String} [delim] list of individual Strings that will be used as
	 *                          separators
	 * @return {Array}          Array of Strings
	 * @example
	 * <div class = "norender">
	 * <code>
	 * function setup() {
	 *   var myStr = "Mango, Banana, Lime";
	 *   var myStrArr = splitTokens(myStr, ",");
	 *
	 *   print(myStrArr); // prints : ["Mango"," Banana"," Lime"]
	 * }
	 * </code>
	 * </div>
	 */
	p5.prototype.splitTokens = function() {
	  var d,sqo,sqc,str;
	  str = arguments[1];
	  if (arguments.length > 1) {
	    sqc = /\]/g.exec(str);
	    sqo = /\[/g.exec(str);
	    if ( sqo && sqc ) {
	      str = str.slice(0, sqc.index) + str.slice(sqc.index+1);
	      sqo = /\[/g.exec(str);
	      str = str.slice(0, sqo.index) + str.slice(sqo.index+1);
	      d = new RegExp('[\\['+str+'\\]]','g');
	    } else if ( sqc ) {
	      str = str.slice(0, sqc.index) + str.slice(sqc.index+1);
	      d = new RegExp('[' + str + '\\]]', 'g');
	    } else if(sqo) {
	      str = str.slice(0, sqo.index) + str.slice(sqo.index+1);
	      d = new RegExp('[' + str + '\\[]', 'g');
	    } else {
	      d = new RegExp('[' + str + ']', 'g');
	    }
	  } else {
	    d = /\s/g;
	  }
	  return arguments[0].split(d).filter(function(n){return n;});
	};

	/**
	 * Removes whitespace characters from the beginning and end of a String. In
	 * addition to standard whitespace characters such as space, carriage return,
	 * and tab, this function also removes the Unicode "nbsp" character.
	 *
	 * @method trim
	 * @param  {String|Array} str a String or Array of Strings to be trimmed
	 * @return {String|Array}       a trimmed String or Array of Strings
	 * @example
	 * <div>
	 * <code>
	 * var string = trim("  No new lines\n   ");
	 * text(string +" here", 2, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * "No new lines here" displayed center canvas
	 *
	 */
	p5.prototype.trim = function(str) {
	  if (str instanceof Array) {
	    return str.map(this.trim);
	  } else {
	    return str.trim();
	  }
	};

	module.exports = p5;

	},{"../core/core":37}],76:[function(_dereq_,module,exports){
	/**
	 * @module IO
	 * @submodule Time & Date
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * p5.js communicates with the clock on your computer. The day() function
	 * returns the current day as a value from 1 - 31.
	 *
	 * @method day
	 * @return {Number} the current day
	 * @example
	 * <div>
	 * <code>
	 * var d = day();
	 * text("Current day: \n" + d, 5, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Current day is displayed
	 *
	 */
	p5.prototype.day = function() {
	  return new Date().getDate();
	};

	/**
	 * p5.js communicates with the clock on your computer. The hour() function
	 * returns the current hour as a value from 0 - 23.
	 *
	 * @method hour
	 * @return {Number} the current hour
	 * @example
	 * <div>
	 * <code>
	 * var h = hour();
	 * text("Current hour:\n" + h, 5, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Current hour is displayed
	 *
	 */
	p5.prototype.hour = function() {
	  return new Date().getHours();
	};

	/**
	 * p5.js communicates with the clock on your computer. The minute() function
	 * returns the current minute as a value from 0 - 59.
	 *
	 * @method minute
	 * @return {Number} the current minute
	 * @example
	 * <div>
	 * <code>
	 * var m = minute();
	 * text("Current minute: \n" + m, 5, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Current minute is displayed
	 *
	 */
	p5.prototype.minute = function() {
	  return new Date().getMinutes();
	};

	/**
	 * Returns the number of milliseconds (thousandths of a second) since
	 * starting the program. This information is often used for timing events and
	 * animation sequences.
	 *
	 * @method millis
	 * @return {Number} the number of milliseconds since starting the program
	 * @example
	 * <div>
	 * <code>
	 * var millisecond = millis();
	 * text("Milliseconds \nrunning: \n" + millisecond, 5, 40);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * number of milliseconds since program has started displayed
	 *
	 */
	p5.prototype.millis = function() {
	  return window.performance.now();
	};

	/**
	 * p5.js communicates with the clock on your computer. The month() function
	 * returns the current month as a value from 1 - 12.
	 *
	 * @method month
	 * @return {Number} the current month
	 * @example
	 * <div>
	 * <code>
	 * var m = month();
	 * text("Current month: \n" + m, 5, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Current month is displayed
	 *
	 */
	p5.prototype.month = function() {
	  return new Date().getMonth() + 1; //January is 0!
	};

	/**
	 * p5.js communicates with the clock on your computer. The second() function
	 * returns the current second as a value from 0 - 59.
	 *
	 * @method second
	 * @return {Number} the current second
	 * @example
	 * <div>
	 * <code>
	 * var s = second();
	 * text("Current second: \n" + s, 5, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Current second is displayed
	 *
	 */
	p5.prototype.second = function() {
	  return new Date().getSeconds();
	};

	/**
	 * p5.js communicates with the clock on your computer. The year() function
	 * returns the current year as an integer (2014, 2015, 2016, etc).
	 *
	 * @method year
	 * @return {Number} the current year
	 * @example
	 * <div>
	 * <code>
	 * var y = year();
	 * text("Current year: \n" + y, 5, 50);
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Current year is displayed
	 *
	 */
	p5.prototype.year = function() {
	  return new Date().getFullYear();
	};

	module.exports = p5;

	},{"../core/core":37}],77:[function(_dereq_,module,exports){
	/**
	 * @module Lights, Camera
	 * @submodule Camera
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * Sets camera position
	 * @method camera
	 * @param  {Number} x  camera position value on x axis
	 * @param  {Number} y  camera position value on y axis
	 * @param  {Number} z  camera position value on z axis
	 * @return {p5}        the p5 object
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 * function draw(){
	 *  //move the camera away from the plane by a sin wave
	 *  camera(0, 0, sin(frameCount * 0.01) * 100);
	 *  plane(120, 120);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * blue square shrinks in size grows to fill canvas. disappears then loops.
	 *
	 */
	p5.prototype.camera = function(x, y, z){
	  //what it manipulates is the model view matrix
	  this._renderer.translate(-x, -y, -z);
	};

	/**
	 * Sets perspective camera
	 * @method  perspective
	 * @param  {Number} fovy   camera frustum vertical field of view,
	 *                         from bottom to top of view, in degrees
	 * @param  {Number} aspect camera frustum aspect ratio
	 * @param  {Number} near   frustum near plane length
	 * @param  {Number} far    frustum far plane length
	 * @return {p5}            the p5 object
	 * @example
	 * <div>
	 * <code>
	 * //drag mouse to toggle the world!
	 * //you will see there's a vanish point
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 *   var fov = 60 / 180 * PI;
	 *   var cameraZ = (height/2.0) / tan(fov/2.0);
	 *   perspective(60 / 180 * PI, width/height, cameraZ * 0.1, cameraZ * 10);
	 * }
	 * function draw(){
	 *  background(200);
	 *  orbitControl();
	 *  for(var i = -1; i < 2; i++){
	 *     for(var j = -2; j < 3; j++){
	 *       push();
	 *       translate(i*160, 0, j*160);
	 *       box(40, 40, 40);
	 *       pop();
	 *     }
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * colored 3d boxes toggleable with mouse position
	 *
	 */
	p5.prototype.perspective = function(fovy,aspect,near,far) {
	  this._renderer.uPMatrix = p5.Matrix.identity();
	  this._renderer.uPMatrix.perspective(fovy,aspect,near,far);
	  this._renderer._curCamera = 'custom';
	};

	/**
	 * Setup ortho camera
	 * @method  ortho
	 * @param  {Number} left   camera frustum left plane
	 * @param  {Number} right  camera frustum right plane
	 * @param  {Number} bottom camera frustum bottom plane
	 * @param  {Number} top    camera frustum top plane
	 * @param  {Number} near   camera frustum near plane
	 * @param  {Number} far    camera frustum far plane
	 * @return {p5}            the p5 object
	 * @example
	 * <div>
	 * <code>
	 * //drag mouse to toggle the world!
	 * //there's no vanish point
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 *   ortho(-width/2, width/2, height/2, -height/2, 0, 500);
	 * }
	 * function draw(){
	 *  background(200);
	 *  orbitControl();
	 *  for(var i = -1; i < 2; i++){
	 *     for(var j = -2; j < 3; j++){
	 *       push();
	 *       translate(i*160, 0, j*160);
	 *       box(40, 40, 40);
	 *       pop();
	 *     }
	 *   }
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * 3 3d boxes, reveal several more boxes on 3d plane when mouse used to toggle
	 *
	 */
	p5.prototype.ortho = function(left,right,bottom,top,near,far) {
	  this._renderer.uPMatrix = p5.Matrix.identity();
	  this._renderer.uPMatrix.ortho(left,right,bottom,top,near,far);
	  this._renderer._curCamera = 'custom';
	};

	module.exports = p5;

	},{"../core/core":37}],78:[function(_dereq_,module,exports){
	'use strict';

	var p5 = _dereq_('../core/core');

	//@TODO: implement full orbit controls including
	//pan, zoom, quaternion rotation, etc.
	p5.prototype.orbitControl = function(){
	  if(this.mouseIsPressed){
	    this.rotateY((this.mouseX - this.width / 2) / (this.width / 2));
	    this.rotateX((this.mouseY - this.height / 2) / (this.width / 2));
	  }
	  return this;
	};

	module.exports = p5;
	},{"../core/core":37}],79:[function(_dereq_,module,exports){
	/**
	 * @module Lights, Camera
	 * @submodule Lights
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * Creates an ambient light with a color
	 * @method  ambientLight
	 * @param  {Number|Array|String|p5.Color} v1  gray value,
	 * red or hue value (depending on the current color mode),
	 * or color Array, or CSS color string
	 * @param  {Number}            [v2] optional: green or saturation value
	 * @param  {Number}            [v3] optional: blue or brightness value
	 * @param  {Number}            [a]  optional: opacity
	 * @return {p5}                the p5 object
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 * function draw(){
	 *   background(0);
	 *   ambientLight(150);
	 *   ambientMaterial(250);
	 *   sphere(50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * nothing displayed
	 *
	 */
	p5.prototype.ambientLight = function(v1, v2, v3, a){
	  var gl = this._renderer.GL;
	  var shaderProgram = this._renderer._getShader(
	    'lightVert', 'lightTextureFrag');

	  gl.useProgram(shaderProgram);
	  shaderProgram.uAmbientColor = gl.getUniformLocation(
	    shaderProgram,
	    'uAmbientColor[' + this._renderer.ambientLightCount + ']');

	  var color = this._renderer._pInst.color.apply(
	    this._renderer._pInst, arguments);
	  var colors = color._array;

	  gl.uniform3f( shaderProgram.uAmbientColor,
	    colors[0], colors[1], colors[2]);

	  //in case there's no material color for the geometry
	  shaderProgram.uMaterialColor = gl.getUniformLocation(
	    shaderProgram, 'uMaterialColor' );
	  gl.uniform4f( shaderProgram.uMaterialColor, 1, 1, 1, 1);

	  this._renderer.ambientLightCount ++;
	  shaderProgram.uAmbientLightCount =
	    gl.getUniformLocation(shaderProgram, 'uAmbientLightCount');
	  gl.uniform1i(shaderProgram.uAmbientLightCount,
	    this._renderer.ambientLightCount);

	  return this;
	};

	/**
	 * Creates a directional light with a color and a direction
	 * @method  directionalLight
	 * @param  {Number|Array|String|p5.Color} v1   gray value,
	 * red or hue value (depending on the current color mode),
	 * or color Array, or CSS color string
	 * @param  {Number}          [v2] optional: green or saturation value
	 * @param  {Number}          [v3] optional: blue or brightness value
	 * @param  {Number}          [a]  optional: opacity
	 * @param  {Number|p5.Vector} x   x axis direction or a p5.Vector
	 * @param  {Number}          [y]  optional: y axis direction
	 * @param  {Number}          [z]  optional: z axis direction
	 * @return {p5}              the p5 object
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 * function draw(){
	 *   background(0);
	 *   //move your mouse to change light direction
	 *   var dirX = (mouseX / width - 0.5) *2;
	 *   var dirY = (mouseY / height - 0.5) *(-2);
	 *   directionalLight(250, 250, 250, dirX, dirY, 0.25);
	 *   ambientMaterial(250);
	 *   sphere(50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * light source on canvas changeable with mouse position
	 *
	 */
	p5.prototype.directionalLight = function(v1, v2, v3, a, x, y, z) {
	  var gl = this._renderer.GL;
	  var shaderProgram = this._renderer._getShader(
	    'lightVert', 'lightTextureFrag');

	  gl.useProgram(shaderProgram);
	  shaderProgram.uDirectionalColor = gl.getUniformLocation(
	    shaderProgram,
	    'uDirectionalColor[' + this._renderer.directionalLightCount + ']');

	  //@TODO: check parameters number
	  var color = this._renderer._pInst.color.apply(
	    this._renderer._pInst, [v1, v2, v3]);
	  var colors = color._array;

	  gl.uniform3f( shaderProgram.uDirectionalColor,
	    colors[0], colors[1], colors[2]);

	  var _x, _y, _z;

	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  if(typeof args[args.length-1] === 'number'){
	    _x = args[args.length-3];
	    _y = args[args.length-2];
	    _z = args[args.length-1];

	  }else{
	    try{
	      _x = args[args.length-1].x;
	      _y = args[args.length-1].y;
	      _z = args[args.length-1].z;
	    }
	    catch(error){
	      throw error;
	    }
	  }

	  shaderProgram.uLightingDirection = gl.getUniformLocation(
	    shaderProgram,
	    'uLightingDirection[' + this._renderer.directionalLightCount + ']');
	  gl.uniform3f( shaderProgram.uLightingDirection, _x, _y, _z);

	  //in case there's no material color for the geometry
	  shaderProgram.uMaterialColor = gl.getUniformLocation(
	    shaderProgram, 'uMaterialColor' );
	  gl.uniform4f( shaderProgram.uMaterialColor, 1, 1, 1, 1);

	  this._renderer.directionalLightCount ++;
	  shaderProgram.uDirectionalLightCount =
	    gl.getUniformLocation(shaderProgram, 'uDirectionalLightCount');
	  gl.uniform1i(shaderProgram.uDirectionalLightCount,
	    this._renderer.directionalLightCount);

	  return this;
	};

	/**
	 * Creates a point light with a color and a light position
	 * @method  pointLight
	 * @param  {Number|Array|String|p5.Color} v1   gray value,
	 * red or hue value (depending on the current color mode),
	 * or color Array, or CSS color string
	 * @param  {Number}          [v2] optional: green or saturation value
	 * @param  {Number}          [v3] optional: blue or brightness value
	 * @param  {Number}          [a]  optional: opacity
	 * @param  {Number|p5.Vector} x   x axis position or a p5.Vector
	 * @param  {Number}          [y]  optional: y axis position
	 * @param  {Number}          [z]  optional: z axis position
	 * @return {p5}              the p5 object
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 * function draw(){
	 *   background(0);
	 *   //move your mouse to change light position
	 *   var locY = (mouseY / height - 0.5) *(-2);
	 *   var locX = (mouseX / width - 0.5) *2;
	 *   //to set the light position,
	 *   //think of the world's coordinate as:
	 *   // -1,1 -------- 1,1
	 *   //   |            |
	 *   //   |            |
	 *   //   |            |
	 *   // -1,-1---------1,-1
	 *   pointLight(250, 250, 250, locX, locY, 0);
	 *   ambientMaterial(250);
	 *   sphere(50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * spot light on canvas changes position with mouse
	 *
	 */
	p5.prototype.pointLight = function(v1, v2, v3, a, x, y, z) {
	  var gl = this._renderer.GL;
	  var shaderProgram = this._renderer._getShader(
	    'lightVert', 'lightTextureFrag');

	  gl.useProgram(shaderProgram);
	  shaderProgram.uPointLightColor = gl.getUniformLocation(
	    shaderProgram,
	    'uPointLightColor[' + this._renderer.pointLightCount + ']');

	  //@TODO: check parameters number
	  var color = this._renderer._pInst.color.apply(
	    this._renderer._pInst, [v1, v2, v3]);
	  var colors = color._array;

	  gl.uniform3f( shaderProgram.uPointLightColor,
	    colors[0], colors[1], colors[2]);

	  var _x, _y, _z;

	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  if(typeof args[args.length-1] === 'number'){
	    _x = args[args.length-3];
	    _y = args[args.length-2];
	    _z = args[args.length-1];

	  }else{
	    try{
	      _x = args[args.length-1].x;
	      _y = args[args.length-1].y;
	      _z = args[args.length-1].z;
	    }
	    catch(error){
	      throw error;
	    }
	  }

	  shaderProgram.uPointLightLocation = gl.getUniformLocation(
	    shaderProgram,
	    'uPointLightLocation[' + this._renderer.pointLightCount + ']');
	  gl.uniform3f( shaderProgram.uPointLightLocation, _x, _y, _z);

	  //in case there's no material color for the geometry
	  shaderProgram.uMaterialColor = gl.getUniformLocation(
	    shaderProgram, 'uMaterialColor' );
	  gl.uniform4f( shaderProgram.uMaterialColor, 1, 1, 1, 1);

	  this._renderer.pointLightCount ++;
	  shaderProgram.uPointLightCount =
	    gl.getUniformLocation(shaderProgram, 'uPointLightCount');
	  gl.uniform1i(shaderProgram.uPointLightCount,
	    this._renderer.pointLightCount);

	  return this;
	};

	module.exports = p5;

	},{"../core/core":37}],80:[function(_dereq_,module,exports){
	/**
	 * @module Shape
	 * @submodule 3D Models
	 * @for p5
	 * @requires core
	 * @requires p5.Geometry3D
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	_dereq_('./p5.Geometry');

	/**
	 * Load a 3d model from an OBJ file.
	 * <br><br>
	 * One of the limitations of the OBJ format is that it doesn't have a built-in
	 * sense of scale. This means that models exported from different programs might
	 * be very different sizes. If your model isn't displaying, try calling
	 * loadModel() with the normalized parameter set to true. This will resize the
	 * model to a scale appropriate for p5. You can also make additional changes to
	 * the final size of your model with the scale() function.
	 *
	 * @method loadModel
	 * @param  {String} path Path of the model to be loaded
	 * @param  {Boolean} [normalize] If true, scale the model to a
	 *                                standardized size when loading
	 * @param  {Function(p5.Geometry3D)} [successCallback] Function to be called
	 *                                   once the model is loaded. Will be passed
	 *                                   the 3D model object.
	 * @param  {Function(Event)}    [failureCallback] called with event error if
	 *                                the image fails to load.
	 * @return {p5.Geometry} the p5.Geometry3D object
	 * @example
	 * <div>
	 * <code>
	 * //draw a spinning teapot
	 * var teapot;
	 *
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 *
	 *   teapot = loadModel('assets/teapot.obj');
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   rotateX(frameCount * 0.01);
	 *   rotateY(frameCount * 0.01);
	 *   model(teapot);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Vertically rotating 3-d teapot with red, green and blue gradient.
	 *
	 */
	p5.prototype.loadModel = function () {
	  var path = arguments[0];
	  var normalize;
	  var successCallback;
	  var failureCallback;
	  if(typeof arguments[1] === 'boolean') {
	    normalize = arguments[1];
	    successCallback = arguments[2];
	    failureCallback = arguments[3];
	  } else {
	    normalize = false;
	    successCallback = arguments[1];
	    failureCallback = arguments[2];
	  }

	  var model = new p5.Geometry();
	  model.gid = path + '|' + normalize;
	  this.loadStrings(path, function(strings) {
	    parseObj(model, strings);

	    if (normalize) {
	      model.normalize();
	    }

	    if (typeof successCallback === 'function') {
	      successCallback(model);
	    }
	  }.bind(this), failureCallback);

	  return model;
	};

	/**
	 * Parse OBJ lines into model. For reference, this is what a simple model of a
	 * square might look like:
	 *
	 * v -0.5 -0.5 0.5
	 * v -0.5 -0.5 -0.5
	 * v -0.5 0.5 -0.5
	 * v -0.5 0.5 0.5
	 *
	 * f 4 3 2 1
	 */
	function parseObj( model, lines ) {
	  // OBJ allows a face to specify an index for a vertex (in the above example),
	  // but it also allows you to specify a custom combination of vertex, UV
	  // coordinate, and vertex normal. So, "3/4/3" would mean, "use vertex 3 with
	  // UV coordinate 4 and vertex normal 3". In WebGL, every vertex with different
	  // parameters must be a different vertex, so loadedVerts is used to
	  // temporarily store the parsed vertices, normals, etc., and indexedVerts is
	  // used to map a specific combination (keyed on, for example, the string
	  // "3/4/3"), to the actual index of the newly created vertex in the final
	  // object.
	  var loadedVerts = {'v' : [],
	                    'vt' : [],
	                    'vn' : []};
	  var indexedVerts = {};

	  for (var line = 0; line < lines.length; ++line) {
	    // Each line is a separate object (vertex, face, vertex normal, etc)
	    // For each line, split it into tokens on whitespace. The first token
	    // describes the type.
	    var tokens = lines[line].trim().split(/\b\s+/);

	    if (tokens.length > 0) {
	      if (tokens[0] === 'v' || tokens[0] === 'vn') {
	        // Check if this line describes a vertex or vertex normal.
	        // It will have three numeric parameters.
	        var vertex = new p5.Vector(parseFloat(tokens[1]),
	                                   parseFloat(tokens[2]),
	                                   parseFloat(tokens[3]));
	        loadedVerts[tokens[0]].push(vertex);
	      } else if (tokens[0] === 'vt') {
	        // Check if this line describes a texture coordinate.
	        // It will have two numeric parameters.
	        var texVertex = [parseFloat(tokens[1]), parseFloat(tokens[2])];
	        loadedVerts[tokens[0]].push(texVertex);
	      } else if (tokens[0] === 'f') {
	        // Check if this line describes a face.
	        // OBJ faces can have more than three points. Triangulate points.
	        for (var tri = 3; tri < tokens.length; ++tri) {
	          var face = [];

	          var vertexTokens = [1, tri - 1, tri];

	          for (var tokenInd = 0; tokenInd < vertexTokens.length; ++tokenInd) {
	            // Now, convert the given token into an index
	            var vertString = tokens[vertexTokens[tokenInd]];
	            var vertIndex = 0;

	            // TODO: Faces can technically use negative numbers to refer to the
	            // previous nth vertex. I haven't seen this used in practice, but
	            // it might be good to implement this in the future.

	            if (indexedVerts[vertString] !== undefined) {
	              vertIndex = indexedVerts[vertString];
	            } else {
	              var vertParts = vertString.split('/');
	              for (var i = 0; i < vertParts.length; i++) {
	                vertParts[i] = parseInt(vertParts[i]) - 1;
	              }

	              vertIndex = indexedVerts[vertString] = model.vertices.length;
	              model.vertices.push(loadedVerts.v[vertParts[0]].copy());
	              if (loadedVerts.vt[vertParts[1]]) {
	                model.uvs.push(loadedVerts.vt[vertParts[1]].slice());
	              } else {
	                model.uvs.push([0, 0]);
	              }

	              if (loadedVerts.vn[vertParts[2]]) {
	                model.vertexNormals.push(loadedVerts.vn[vertParts[2]].copy());
	              }
	            }

	            face.push(vertIndex);
	          }

	          model.faces.push(face);
	        }
	      }
	    }
	  }

	  // If the model doesn't have normals, compute the normals
	  if(model.vertexNormals.length === 0) {
	    model.computeNormals();
	  }

	  return model;
	}

	/**
	 * Render a 3d model to the screen.
	 *
	 * @method model
	 * @param  {p5.Geometry} model Loaded 3d model to be rendered
	 * @example
	 * <div>
	 * <code>
	 * //draw a spinning teapot
	 * var teapot;
	 *
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 *
	 *   teapot = loadModel('assets/teapot.obj');
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   rotateX(frameCount * 0.01);
	 *   rotateY(frameCount * 0.01);
	 *   model(teapot);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Vertically rotating 3-d teapot with red, green and blue gradient.
	 *
	 */
	p5.prototype.model = function ( model ) {
	  if (model.vertices.length > 0) {
	    if (!this._renderer.geometryInHash(model.gid)) {
	      this._renderer.createBuffers(model.gid, model);
	    }

	    this._renderer.drawBuffers(model.gid);
	  }
	};

	module.exports = p5;

	},{"../core/core":37,"./p5.Geometry":82}],81:[function(_dereq_,module,exports){
	/**
	 * @module Lights, Camera
	 * @submodule Material
	 * @for p5
	 * @requires core
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	//require('./p5.Texture');

	/**
	 * Normal material for geometry. You can view all
	 * possible materials in this
	 * <a href="https://p5js.org/examples/examples/3D_Materials.php">example</a>.
	 * @method normalMaterial
	 * @return {p5}                the p5 object
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *  background(200);
	 *  normalMaterial();
	 *  sphere(50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Red, green and blue gradient.
	 *
	 */
	p5.prototype.normalMaterial = function(){
	  this._renderer._getShader('normalVert', 'normalFrag');
	  return this;
	};

	/**
	 * Texture for geometry.  You can view other possible materials in this
	 * <a href="https://p5js.org/examples/examples/3D_Materials.php">example</a>.
	 * @method texture
	 * @param {p5.Image | p5.MediaElement | p5.Graphics} tex 2-dimensional graphics
	 *                    to render as texture
	 * @return {p5}                the p5 object
	 * @example
	 * <div>
	 * <code>
	 * var img;
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 *   img = loadImage("assets/laDefense.jpg");
	 * }
	 *
	 * function draw(){
	 *   background(0);
	 *   rotateZ(frameCount * 0.01);
	 *   rotateX(frameCount * 0.01);
	 *   rotateY(frameCount * 0.01);
	 *   //pass image as texture
	 *   texture(img);
	 *   box(200, 200, 200);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var pg;
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 *   pg = createGraphics(200, 200);
	 *   pg.textSize(100);
	 * }
	 *
	 * function draw(){
	 *   background(0);
	 *   pg.background(255);
	 *   pg.text('hello!', 0, 100);
	 *   //pass image as texture
	 *   texture(pg);
	 *   plane(200);
	 * }
	 * </code>
	 * </div>
	 *
	 * <div>
	 * <code>
	 * var vid;
	 * function preload(){
	 *   vid = createVideo("assets/fingers.mov");
	 *   vid.hide();
	 *   vid.loop();
	 * }
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(0);
	 *   //pass video frame as texture
	 *   texture(vid);
	 *   plane(200);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Rotating view of many images umbrella and grid roof on a 3d plane
	 * black canvas
	 * black canvas
	 *
	 */
	p5.prototype.texture = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var gl = this._renderer.GL;
	  var shaderProgram = this._renderer._getShader('lightVert',
	    'lightTextureFrag');
	  gl.useProgram(shaderProgram);
	  var textureData;
	  //if argument is not already a texture
	  //create a new one
	  if(!args[0].isTexture){
	    if (args[0] instanceof p5.Image) {
	      textureData = args[0].canvas;
	    }
	    //if param is a video
	    else if (typeof p5.MediaElement !== 'undefined' &&
	            args[0] instanceof p5.MediaElement){
	      if(!args[0].loadedmetadata) {return;}
	      textureData = args[0].elt;
	    }
	    //used with offscreen 2d graphics renderer
	    else if(args[0] instanceof p5.Graphics){
	      textureData = args[0].elt;
	    }
	    var tex = gl.createTexture();
	    args[0]._setProperty('tex', tex);
	    args[0]._setProperty('isTexture', true);
	    this._renderer._bind.call(this, tex, textureData);
	  }
	  else {
	    if(args[0] instanceof p5.Graphics ||
	      (typeof p5.MediaElement !== 'undefined' &&
	      args[0] instanceof p5.MediaElement)){
	      textureData = args[0].elt;
	    }
	    else if(args[0] instanceof p5.Image){
	      textureData = args[0].canvas;
	    }
	    this._renderer._bind.call(this, args[0].tex, textureData);
	  }
	  //this is where we'd activate multi textures
	  //eg. gl.activeTexture(gl.TEXTURE0 + (unit || 0));
	  //but for now we just have a single texture.
	  //@TODO need to extend this functionality
	  gl.activeTexture(gl.TEXTURE0);
	  gl.bindTexture(gl.TEXTURE_2D, args[0].tex);
	  gl.uniform1i(gl.getUniformLocation(shaderProgram, 'isTexture'), true);
	  gl.uniform1i(gl.getUniformLocation(shaderProgram, 'uSampler'), 0);
	  return this;
	};

	/**
	 * Texture Util functions
	 */
	p5.RendererGL.prototype._bind = function(tex, data){
	  var gl = this._renderer.GL;
	  gl.bindTexture(gl.TEXTURE_2D, tex);
	  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
	  gl.texImage2D(gl.TEXTURE_2D, 0,
	    gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);
	  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
	  gl.texParameteri(gl.TEXTURE_2D,
	  gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	  gl.texParameteri(gl.TEXTURE_2D,
	  gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	  gl.texParameteri(gl.TEXTURE_2D,
	  gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	  gl.texParameteri(gl.TEXTURE_2D,
	  gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	  gl.bindTexture(gl.TEXTURE_2D, null);
	};

	/**
	 * Checks whether val is a pot
	 * more info on power of 2 here:
	 * https://www.opengl.org/wiki/NPOT_Texture
	 * @param  {Number}  value
	 * @return {Boolean}
	 */
	// function _isPowerOf2 (value){
	//   return (value & (value - 1)) === 0;
	// }

	/**
	 * returns the next highest power of 2 value
	 * @param  {Number} value [description]
	 * @return {Number}       [description]
	 */
	// function _nextHighestPOT (value){
	//   --value;
	//   for (var i = 1; i < 32; i <<= 1) {
	//     value = value | value >> i;
	//   }
	//   return value + 1;

	/**
	 * Ambient material for geometry with a given color. You can view all
	 * possible materials in this
	 * <a href="https://p5js.org/examples/examples/3D_Materials.php">example</a>.
	 * @method  ambientMaterial
	 * @param  {Number|Array|String|p5.Color} v1  gray value,
	 * red or hue value (depending on the current color mode),
	 * or color Array, or CSS color string
	 * @param  {Number}            [v2] optional: green or saturation value
	 * @param  {Number}            [v3] optional: blue or brightness value
	 * @param  {Number}            [a]  optional: opacity
	* @return {p5}                 the p5 object
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 * function draw(){
	 *  background(0);
	 *  ambientLight(100);
	 *  pointLight(250, 250, 250, 100, 100, 0);
	 *  ambientMaterial(250);
	 *  sphere(50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * radiating light source from top right of canvas
	 *
	 */
	p5.prototype.ambientMaterial = function(v1, v2, v3, a) {
	  var gl = this._renderer.GL;
	  var shaderProgram =
	    this._renderer._getShader('lightVert', 'lightTextureFrag');

	  gl.useProgram(shaderProgram);
	  shaderProgram.uMaterialColor = gl.getUniformLocation(
	    shaderProgram, 'uMaterialColor' );
	  var colors = this._renderer._applyColorBlend.apply(this._renderer, arguments);

	  gl.uniform4f(shaderProgram.uMaterialColor,
	    colors[0], colors[1], colors[2], colors[3]);

	  shaderProgram.uSpecular = gl.getUniformLocation(
	    shaderProgram, 'uSpecular' );
	  gl.uniform1i(shaderProgram.uSpecular, false);

	  gl.uniform1i(gl.getUniformLocation(shaderProgram, 'isTexture'), false);

	  return this;
	};

	/**
	 * Specular material for geometry with a given color. You can view all
	 * possible materials in this
	 * <a href="https://p5js.org/examples/examples/3D_Materials.php">example</a>.
	 * @method specularMaterial
	 * @param  {Number|Array|String|p5.Color} v1  gray value,
	 * red or hue value (depending on the current color mode),
	 * or color Array, or CSS color string
	 * @param  {Number}            [v2] optional: green or saturation value
	 * @param  {Number}            [v3] optional: blue or brightness value
	 * @param  {Number}            [a]  optional: opacity
	 * @return {p5}                the p5 object
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 * function draw(){
	 *  background(0);
	 *  ambientLight(100);
	 *  pointLight(250, 250, 250, 100, 100, 0);
	 *  specularMaterial(250);
	 *  sphere(50);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * diffused radiating light source from top right of canvas
	 *
	 */
	p5.prototype.specularMaterial = function(v1, v2, v3, a) {
	  var gl = this._renderer.GL;
	  var shaderProgram =
	    this._renderer._getShader('lightVert', 'lightTextureFrag');
	  gl.useProgram(shaderProgram);
	  gl.uniform1i(gl.getUniformLocation(shaderProgram, 'isTexture'), false);
	  shaderProgram.uMaterialColor = gl.getUniformLocation(
	    shaderProgram, 'uMaterialColor' );
	  var colors = this._renderer._applyColorBlend.apply(this._renderer, arguments);
	  gl.uniform4f(shaderProgram.uMaterialColor,
	    colors[0], colors[1], colors[2], colors[3]);
	  shaderProgram.uSpecular = gl.getUniformLocation(
	    shaderProgram, 'uSpecular' );
	  gl.uniform1i(shaderProgram.uSpecular, true);

	  return this;
	};

	/**
	 * @private blends colors according to color components.
	 * If alpha value is less than 1, we need to enable blending
	 * on our gl context.  Otherwise opaque objects need to a depthMask.
	 * @param  {Number} v1 [description]
	 * @param  {Number} v2 [description]
	 * @param  {Number} v3 [description]
	 * @param  {Number} a  [description]
	 * @return {[Number]}  Normalized numbers array
	 */
	p5.RendererGL.prototype._applyColorBlend = function(v1,v2,v3,a){
	  var gl = this.GL;
	  var color = this._pInst.color.apply(
	    this._pInst, arguments);
	  var colors = color._array;
	  if(colors[colors.length-1] < 1.0){
	    gl.depthMask(false);
	    gl.enable(gl.BLEND);
	    gl.blendEquation( gl.FUNC_ADD );
	    gl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );
	  } else {
	    gl.depthMask(true);
	    gl.disable(gl.BLEND);
	  }
	  return colors;
	};

	module.exports = p5;

	},{"../core/core":37}],82:[function(_dereq_,module,exports){
	//some of the functions are adjusted from Three.js(http://threejs.org)

	'use strict';

	var p5 = _dereq_('../core/core');

	/**
	 * p5 Geometry class
	 * @constructor
	 * @param  {Function | Object} vertData callback function or Object
	 *                     containing routine(s) for vertex data generation
	 * @param  {Number} [detailX] number of vertices on horizontal surface
	 * @param  {Number} [detailY] number of vertices on horizontal surface
	 * @param {Function} [callback] function to call upon object instantiation.
	 *
	 */
	p5.Geometry = function
	(detailX, detailY, callback){
	  //an array containing every vertex
	  //@type [p5.Vector]
	  this.vertices = [];
	  //an array containing 1 normal per vertex
	  //@type [p5.Vector]
	  //[p5.Vector, p5.Vector, p5.Vector,p5.Vector, p5.Vector, p5.Vector,...]
	  this.vertexNormals = [];
	  //an array containing each three vertex indices that form a face
	  //[[0, 1, 2], [2, 1, 3], ...]
	  this.faces = [];
	  //a 2D array containing uvs for every vertex
	  //[[0.0,0.0],[1.0,0.0], ...]
	  this.uvs = [];
	  this.detailX = (detailX !== undefined) ? detailX: 1;
	  this.detailY = (detailY !== undefined) ? detailY: 1;
	  if(callback instanceof Function){
	    callback.call(this);
	  }
	  return this;
	};

	p5.Geometry.prototype.computeFaces = function(){
	  var sliceCount = this.detailX + 1;
	  var a, b, c, d;
	  for (var i = 0; i < this.detailY; i++){
	    for (var j = 0; j < this.detailX; j++){
	      a = i * sliceCount + j;// + offset;
	      b = i * sliceCount + j + 1;// + offset;
	      c = (i + 1)* sliceCount + j + 1;// + offset;
	      d = (i + 1)* sliceCount + j;// + offset;
	      this.faces.push([a, b, d]);
	      this.faces.push([d, b, c]);
	    }
	  }
	  return this;
	};

	p5.Geometry.prototype._getFaceNormal = function(faceId,vertId){
	  //This assumes that vA->vB->vC is a counter-clockwise ordering
	  var face = this.faces[faceId];
	  var vA = this.vertices[face[vertId%3]];
	  var vB = this.vertices[face[(vertId+1)%3]];
	  var vC = this.vertices[face[(vertId+2)%3]];
	  var n = p5.Vector.cross(
	    p5.Vector.sub(vB,vA),
	    p5.Vector.sub(vC,vA));
	  var sinAlpha = p5.Vector.mag(n) /
	  (p5.Vector.mag(p5.Vector.sub(vB,vA))*
	    p5.Vector.mag(p5.Vector.sub(vC,vA)));
	  n = n.normalize();
	  return n.mult(Math.asin(sinAlpha));
	};
	/**
	 * computes smooth normals per vertex as an average of each
	 * face.
	 */
	p5.Geometry.prototype.computeNormals = function (){
	  for(var v=0; v < this.vertices.length; v++){
	    var normal = new p5.Vector();
	    for(var i=0; i < this.faces.length; i++){
	      //if our face contains a given vertex
	      //calculate an average of the normals
	      //of the triangles adjacent to that vertex
	      if(this.faces[i][0] === v ||
	        this.faces[i][1] === v ||
	        this.faces[i][2] === v)
	      {
	        normal = normal.add(this._getFaceNormal(i, v));
	      }
	    }
	    normal = normal.normalize();
	    this.vertexNormals.push(normal);
	  }
	  return this;
	};

	/**
	 * Averages the vertex normals. Used in curved
	 * surfaces
	 * @return {p5.Geometry}
	 */
	p5.Geometry.prototype.averageNormals = function() {

	  for(var i = 0; i <= this.detailY; i++){
	    var offset = this.detailX + 1;
	    var temp = p5.Vector
	      .add(this.vertexNormals[i*offset],
	        this.vertexNormals[i*offset + this.detailX]);
	    temp = p5.Vector.div(temp, 2);
	    this.vertexNormals[i*offset] = temp;
	    this.vertexNormals[i*offset + this.detailX] = temp;
	  }
	  return this;
	};

	/**
	 * Averages pole normals.  Used in spherical primitives
	 * @return {p5.Geometry}
	 */
	p5.Geometry.prototype.averagePoleNormals = function() {

	  //average the north pole
	  var sum = new p5.Vector(0, 0, 0);
	  for(var i = 0; i < this.detailX; i++){
	    sum.add(this.vertexNormals[i]);
	  }
	  sum = p5.Vector.div(sum, this.detailX);

	  for(i = 0; i < this.detailX; i++){
	    this.vertexNormals[i] = sum;
	  }

	  //average the south pole
	  sum = new p5.Vector(0, 0, 0);
	  for(i = this.vertices.length - 1;
	    i > this.vertices.length - 1 - this.detailX; i--){
	    sum.add(this.vertexNormals[i]);
	  }
	  sum = p5.Vector.div(sum, this.detailX);

	  for(i = this.vertices.length - 1;
	    i > this.vertices.length - 1 - this.detailX; i--){
	    this.vertexNormals[i] = sum;
	  }
	  return this;
	};

	/**
	 * Modifies all vertices to be centered within the range -100 to 100.
	 * @return {p5.Geometry}
	 */
	p5.Geometry.prototype.normalize = function() {
	  if(this.vertices.length > 0) {
	    // Find the corners of our bounding box
	    var maxPosition = this.vertices[0].copy();
	    var minPosition = this.vertices[0].copy();

	    for(var i = 0; i < this.vertices.length; i++) {
	      maxPosition.x = Math.max(maxPosition.x, this.vertices[i].x);
	      minPosition.x = Math.min(minPosition.x, this.vertices[i].x);
	      maxPosition.y = Math.max(maxPosition.y, this.vertices[i].y);
	      minPosition.y = Math.min(minPosition.y, this.vertices[i].y);
	      maxPosition.z = Math.max(maxPosition.z, this.vertices[i].z);
	      minPosition.z = Math.min(minPosition.z, this.vertices[i].z);
	    }

	    var center = p5.Vector.lerp(maxPosition, minPosition, 0.5);
	    var dist = p5.Vector.sub(maxPosition, minPosition);
	    var longestDist = Math.max(Math.max(dist.x, dist.y), dist.z);
	    var scale = 200 / longestDist;

	    for(i = 0; i < this.vertices.length; i++) {
	      this.vertices[i].sub(center);
	      this.vertices[i].mult(scale);
	    }
	  }
	  return this;
	};

	module.exports = p5.Geometry;

	},{"../core/core":37}],83:[function(_dereq_,module,exports){
	/**
	* @requires constants
	* @todo see methods below needing further implementation.
	* future consideration: implement SIMD optimizations
	* when browser compatibility becomes available
	* https://developer.mozilla.org/en-US/docs/Web/JavaScript/
	*   Reference/Global_Objects/SIMD
	*/

	'use strict';

	var p5 = _dereq_('../core/core');
	var polarGeometry = _dereq_('../math/polargeometry');
	var constants = _dereq_('../core/constants');
	var GLMAT_ARRAY_TYPE = (
	    typeof Float32Array !== 'undefined') ?
	  Float32Array : Array;

	/**
	 * A class to describe a 4x4 matrix
	 * for model and view matrix manipulation in the p5js webgl renderer.
	 * class p5.Matrix
	 * @constructor
	 * @param {Array} [mat4] array literal of our 4x4 matrix
	 */
	p5.Matrix = function() {
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  // This is default behavior when object
	  // instantiated using createMatrix()
	  // @todo implement createMatrix() in core/math.js
	  if(args[0] instanceof p5) {
	    // save reference to p5 if passed in
	    this.p5 = args[0];
	    if(args[1] === 'mat3'){
	      this.mat3 = args[2] || new GLMAT_ARRAY_TYPE([
	        1, 0, 0,
	        0, 1, 0,
	        0, 0, 1
	      ]);
	    }
	    else {
	      this.mat4  = args[1] || new GLMAT_ARRAY_TYPE([
	        1, 0, 0, 0,
	        0, 1, 0, 0,
	        0, 0, 1, 0,
	        0, 0, 0, 1
	      ]);
	    }
	    // default behavior when object
	    // instantiated using new p5.Matrix()
	  } else {
	    if(args[0] === 'mat3'){
	      this.mat3 = args[1] || new GLMAT_ARRAY_TYPE([
	        1, 0, 0,
	        0, 1, 0,
	        0, 0, 1
	      ]);
	    }
	    else {
	      this.mat4 = args[0] || new GLMAT_ARRAY_TYPE([
	        1, 0, 0, 0,
	        0, 1, 0, 0,
	        0, 0, 1, 0,
	        0, 0, 0, 1
	      ]);
	    }
	  }
	  return this;
	};

	/**
	 * Sets the x, y, and z component of the vector using two or three separate
	 * variables, the data from a p5.Matrix, or the values from a float array.
	 *
	 * @param {p5.Matrix|Array} [inMatrix] the input p5.Matrix or
	 *                                     an Array of length 16
	 */
	p5.Matrix.prototype.set = function (inMatrix) {
	  if (inMatrix instanceof p5.Matrix) {
	    this.mat4 = inMatrix.mat4;
	    return this;
	  }
	  else if (inMatrix instanceof GLMAT_ARRAY_TYPE) {
	    this.mat4 = inMatrix;
	    return this;
	  }
	  return this;
	};

	/**
	 * Gets a copy of the vector, returns a p5.Matrix object.
	 *
	 * @return {p5.Matrix} the copy of the p5.Matrix object
	 */
	p5.Matrix.prototype.get = function () {
	  return new p5.Matrix(this.mat4);
	};

	/**
	 * return a copy of a matrix
	 * @return {p5.Matrix}   the result matrix
	 */
	p5.Matrix.prototype.copy = function(){
	  var copied = new p5.Matrix();
	  copied.mat4[0] = this.mat4[0];
	  copied.mat4[1] = this.mat4[1];
	  copied.mat4[2] = this.mat4[2];
	  copied.mat4[3] = this.mat4[3];
	  copied.mat4[4] = this.mat4[4];
	  copied.mat4[5] = this.mat4[5];
	  copied.mat4[6] = this.mat4[6];
	  copied.mat4[7] = this.mat4[7];
	  copied.mat4[8] = this.mat4[8];
	  copied.mat4[9] = this.mat4[9];
	  copied.mat4[10] = this.mat4[10];
	  copied.mat4[11] = this.mat4[11];
	  copied.mat4[12] = this.mat4[12];
	  copied.mat4[13] = this.mat4[13];
	  copied.mat4[14] = this.mat4[14];
	  copied.mat4[15] = this.mat4[15];
	  return copied;
	};

	/**
	 * return an identity matrix
	 * @return {p5.Matrix}   the result matrix
	 */
	p5.Matrix.identity = function(){
	  return new p5.Matrix();
	};

	/**
	 * transpose according to a given matrix
	 * @param  {p5.Matrix | Typed Array} a  the matrix to be based on to transpose
	 * @return {p5.Matrix}                  this
	 */
	p5.Matrix.prototype.transpose = function(a){
	  var a01, a02, a03, a12, a13, a23;
	  if(a instanceof p5.Matrix){
	    a01 = a.mat4[1];
	    a02 = a.mat4[2];
	    a03 = a.mat4[3];
	    a12 = a.mat4[6];
	    a13 = a.mat4[7];
	    a23 = a.mat4[11];

	    this.mat4[0] = a.mat4[0];
	    this.mat4[1] = a.mat4[4];
	    this.mat4[2] = a.mat4[8];
	    this.mat4[3] = a.mat4[12];
	    this.mat4[4] = a01;
	    this.mat4[5] = a.mat4[5];
	    this.mat4[6] = a.mat4[9];
	    this.mat4[7] = a.mat4[13];
	    this.mat4[8] = a02;
	    this.mat4[9] = a12;
	    this.mat4[10] = a.mat4[10];
	    this.mat4[11] = a.mat4[14];
	    this.mat4[12] = a03;
	    this.mat4[13] = a13;
	    this.mat4[14] = a23;
	    this.mat4[15] = a.mat4[15];

	  }else if(a instanceof GLMAT_ARRAY_TYPE){
	    a01 = a[1];
	    a02 = a[2];
	    a03 = a[3];
	    a12 = a[6];
	    a13 = a[7];
	    a23 = a[11];

	    this.mat4[0] = a[0];
	    this.mat4[1] = a[4];
	    this.mat4[2] = a[8];
	    this.mat4[3] = a[12];
	    this.mat4[4] = a01;
	    this.mat4[5] = a[5];
	    this.mat4[6] = a[9];
	    this.mat4[7] = a[13];
	    this.mat4[8] = a02;
	    this.mat4[9] = a12;
	    this.mat4[10] = a[10];
	    this.mat4[11] = a[14];
	    this.mat4[12] = a03;
	    this.mat4[13] = a13;
	    this.mat4[14] = a23;
	    this.mat4[15] = a[15];
	  }
	  return this;
	};

	/**
	 * invert  matrix according to a give matrix
	 * @param  {p5.Matrix or Typed Array} a   the matrix to be based on to invert
	 * @return {p5.Matrix}                    this
	 */
	p5.Matrix.prototype.invert = function(a){
	  var a00, a01, a02, a03, a10, a11, a12, a13,
	  a20, a21, a22, a23, a30, a31, a32, a33;
	  if(a instanceof p5.Matrix){
	    a00 = a.mat4[0];
	    a01 = a.mat4[1];
	    a02 = a.mat4[2];
	    a03 = a.mat4[3];
	    a10 = a.mat4[4];
	    a11 = a.mat4[5];
	    a12 = a.mat4[6];
	    a13 = a.mat4[7];
	    a20 = a.mat4[8];
	    a21 = a.mat4[9];
	    a22 = a.mat4[10];
	    a23 = a.mat4[11];
	    a30 = a.mat4[12];
	    a31 = a.mat4[13];
	    a32 = a.mat4[14];
	    a33 = a.mat4[15];
	  }else if(a instanceof GLMAT_ARRAY_TYPE){
	    a00 = a[0];
	    a01 = a[1];
	    a02 = a[2];
	    a03 = a[3];
	    a10 = a[4];
	    a11 = a[5];
	    a12 = a[6];
	    a13 = a[7];
	    a20 = a[8];
	    a21 = a[9];
	    a22 = a[10];
	    a23 = a[11];
	    a30 = a[12];
	    a31 = a[13];
	    a32 = a[14];
	    a33 = a[15];
	  }
	  var b00 = a00 * a11 - a01 * a10,
	  b01 = a00 * a12 - a02 * a10,
	  b02 = a00 * a13 - a03 * a10,
	  b03 = a01 * a12 - a02 * a11,
	  b04 = a01 * a13 - a03 * a11,
	  b05 = a02 * a13 - a03 * a12,
	  b06 = a20 * a31 - a21 * a30,
	  b07 = a20 * a32 - a22 * a30,
	  b08 = a20 * a33 - a23 * a30,
	  b09 = a21 * a32 - a22 * a31,
	  b10 = a21 * a33 - a23 * a31,
	  b11 = a22 * a33 - a23 * a32,

	  // Calculate the determinant
	  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 -
	  b04 * b07 + b05 * b06;

	  if (!det) {
	    return null;
	  }
	  det = 1.0 / det;

	  this.mat4[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	  this.mat4[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	  this.mat4[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	  this.mat4[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
	  this.mat4[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	  this.mat4[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	  this.mat4[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	  this.mat4[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
	  this.mat4[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	  this.mat4[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	  this.mat4[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	  this.mat4[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
	  this.mat4[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
	  this.mat4[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
	  this.mat4[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
	  this.mat4[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

	  return this;
	};

	/**
	 * Inverts a 3x3 matrix
	 * @return {[type]} [description]
	 */
	p5.Matrix.prototype.invert3x3 = function (){
	  var a00 = this.mat3[0],
	  a01 = this.mat3[1],
	  a02 = this.mat3[2],
	  a10 = this.mat3[3],
	  a11 = this.mat3[4],
	  a12 = this.mat3[5],
	  a20 = this.mat3[6],
	  a21 = this.mat3[7],
	  a22 = this.mat3[8],
	  b01 = a22 * a11 - a12 * a21,
	  b11 = -a22 * a10 + a12 * a20,
	  b21 = a21 * a10 - a11 * a20,

	  // Calculate the determinant
	  det = a00 * b01 + a01 * b11 + a02 * b21;
	  if (!det) {
	    return null;
	  }
	  det = 1.0 / det;
	  this.mat3[0] = b01 * det;
	  this.mat3[1] = (-a22 * a01 + a02 * a21) * det;
	  this.mat3[2] = (a12 * a01 - a02 * a11) * det;
	  this.mat3[3] = b11 * det;
	  this.mat3[4] = (a22 * a00 - a02 * a20) * det;
	  this.mat3[5] = (-a12 * a00 + a02 * a10) * det;
	  this.mat3[6] = b21 * det;
	  this.mat3[7] = (-a21 * a00 + a01 * a20) * det;
	  this.mat3[8] = (a11 * a00 - a01 * a10) * det;
	  return this;
	};

	/**
	 * transposes a 3x3 p5.Matrix by a mat3
	 * @param  {[Number]} mat3 1-dimensional array
	 * @return {p5.Matrix} this
	 */
	p5.Matrix.prototype.transpose3x3 = function (mat3){
	  var a01 = mat3[1], a02 = mat3[2], a12 = mat3[5];
	  this.mat3[1] = mat3[3];
	  this.mat3[2] = mat3[6];
	  this.mat3[3] = a01;
	  this.mat3[5] = mat3[7];
	  this.mat3[6] = a02;
	  this.mat3[7] = a12;
	  return this;
	};

	/**
	 * converts a 4x4 matrix to its 3x3 inverse tranform
	 * commonly used in MVMatrix to NMatrix conversions.
	 * @param  {p5.Matrix} mat4 the matrix to be based on to invert
	 * @return {p5.Matrix} this with mat3
	 * @todo  finish implementation
	 */
	p5.Matrix.prototype.inverseTranspose = function (matrix){
	  if(this.mat3 === undefined){
	    console.error('sorry, this function only works with mat3');
	  }
	  else {
	    //convert mat4 -> mat3
	    this.mat3[0] = matrix.mat4[0];
	    this.mat3[1] = matrix.mat4[1];
	    this.mat3[2] = matrix.mat4[2];
	    this.mat3[3] = matrix.mat4[4];
	    this.mat3[4] = matrix.mat4[5];
	    this.mat3[5] = matrix.mat4[6];
	    this.mat3[6] = matrix.mat4[8];
	    this.mat3[7] = matrix.mat4[9];
	    this.mat3[8] = matrix.mat4[10];
	  }

	  this.invert3x3().transpose3x3(this.mat3);
	  return this;
	};

	/**
	 * inspired by Toji's mat4 determinant
	 * @return {Number} Determinant of our 4x4 matrix
	 */
	p5.Matrix.prototype.determinant = function(){
	  var d00 = (this.mat4[0] * this.mat4[5]) - (this.mat4[1] * this.mat4[4]),
	    d01 = (this.mat4[0] * this.mat4[6]) - (this.mat4[2] * this.mat4[4]),
	    d02 = (this.mat4[0] * this.mat4[7]) - (this.mat4[3] * this.mat4[4]),
	    d03 = (this.mat4[1] * this.mat4[6]) - (this.mat4[2] * this.mat4[5]),
	    d04 = (this.mat4[1] * this.mat4[7]) - (this.mat4[3] * this.mat4[5]),
	    d05 = (this.mat4[2] * this.mat4[7]) - (this.mat4[3] * this.mat4[6]),
	    d06 = (this.mat4[8] * this.mat4[13]) - (this.mat4[9] * this.mat4[12]),
	    d07 = (this.mat4[8] * this.mat4[14]) - (this.mat4[10] * this.mat4[12]),
	    d08 = (this.mat4[8] * this.mat4[15]) - (this.mat4[11] * this.mat4[12]),
	    d09 = (this.mat4[9] * this.mat4[14]) - (this.mat4[10] * this.mat4[13]),
	    d10 = (this.mat4[9] * this.mat4[15]) - (this.mat4[11] * this.mat4[13]),
	    d11 = (this.mat4[10] * this.mat4[15]) - (this.mat4[11] * this.mat4[14]);

	  // Calculate the determinant
	  return d00 * d11 - d01 * d10 + d02 * d09 +
	    d03 * d08 - d04 * d07 + d05 * d06;
	};

	/**
	 * multiply two mat4s
	 * @param {p5.Matrix | Array}  multMatrix The matrix we want to multiply by
	 * @return {p5.Matrix}         this
	 */
	p5.Matrix.prototype.mult = function(multMatrix){
	  var _dest = new GLMAT_ARRAY_TYPE(16);
	  var _src = new GLMAT_ARRAY_TYPE(16);

	  if(multMatrix instanceof p5.Matrix) {
	    _src = multMatrix.mat4;
	  }
	  else if(multMatrix instanceof GLMAT_ARRAY_TYPE){
	    _src = multMatrix;
	  }

	  // each row is used for the multiplier
	  var b0  = this.mat4[0], b1 = this.mat4[1],
	    b2 = this.mat4[2], b3 = this.mat4[3];
	  _dest[0] = b0*_src[0] + b1*_src[4] + b2*_src[8] + b3*_src[12];
	  _dest[1] = b0*_src[1] + b1*_src[5] + b2*_src[9] + b3*_src[13];
	  _dest[2] = b0*_src[2] + b1*_src[6] + b2*_src[10] + b3*_src[14];
	  _dest[3] = b0*_src[3] + b1*_src[7] + b2*_src[11] + b3*_src[15];

	  b0 = this.mat4[4];
	  b1 = this.mat4[5];
	  b2 = this.mat4[6];
	  b3 = this.mat4[7];
	  _dest[4] = b0*_src[0] + b1*_src[4] + b2*_src[8] + b3*_src[12];
	  _dest[5] = b0*_src[1] + b1*_src[5] + b2*_src[9] + b3*_src[13];
	  _dest[6] = b0*_src[2] + b1*_src[6] + b2*_src[10] + b3*_src[14];
	  _dest[7] = b0*_src[3] + b1*_src[7] + b2*_src[11] + b3*_src[15];

	  b0 = this.mat4[8];
	  b1 = this.mat4[9];
	  b2 = this.mat4[10];
	  b3 = this.mat4[11];
	  _dest[8] = b0*_src[0] + b1*_src[4] + b2*_src[8] + b3*_src[12];
	  _dest[9] = b0*_src[1] + b1*_src[5] + b2*_src[9] + b3*_src[13];
	  _dest[10] = b0*_src[2] + b1*_src[6] + b2*_src[10] + b3*_src[14];
	  _dest[11] = b0*_src[3] + b1*_src[7] + b2*_src[11] + b3*_src[15];

	  b0 = this.mat4[12];
	  b1 = this.mat4[13];
	  b2 = this.mat4[14];
	  b3 = this.mat4[15];
	  _dest[12] = b0*_src[0] + b1*_src[4] + b2*_src[8] + b3*_src[12];
	  _dest[13] = b0*_src[1] + b1*_src[5] + b2*_src[9] + b3*_src[13];
	  _dest[14] = b0*_src[2] + b1*_src[6] + b2*_src[10] + b3*_src[14];
	  _dest[15] = b0*_src[3] + b1*_src[7] + b2*_src[11] + b3*_src[15];

	  this.mat4 = _dest;

	  return this;
	};

	/**
	 * scales a p5.Matrix by scalars or a vector
	 * @param  {p5.Vector | Array }
	 *                      vector to scale by
	 * @return {p5.Matrix}  this
	 */
	p5.Matrix.prototype.scale = function() {
	  var x,y,z;
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  //if our 1st arg is a type p5.Vector
	  if (args[0] instanceof p5.Vector){
	    x = args[0].x;
	    y = args[0].y;
	    z = args[0].z;
	  }
	  //otherwise if it's an array
	  else if (args[0] instanceof Array){
	    x = args[0][0];
	    y = args[0][1];
	    z = args[0][2];
	  }
	  var _dest = new GLMAT_ARRAY_TYPE(16);
	  _dest[0] = this.mat4[0] * x;
	  _dest[1] = this.mat4[1] * x;
	  _dest[2] = this.mat4[2] * x;
	  _dest[3] = this.mat4[3] * x;
	  _dest[4] = this.mat4[4] * y;
	  _dest[5] = this.mat4[5] * y;
	  _dest[6] = this.mat4[6] * y;
	  _dest[7] = this.mat4[7] * y;
	  _dest[8] = this.mat4[8] * z;
	  _dest[9] = this.mat4[9] * z;
	  _dest[10] = this.mat4[10] * z;
	  _dest[11] = this.mat4[11] * z;
	  _dest[12] = this.mat4[12];
	  _dest[13] = this.mat4[13];
	  _dest[14] = this.mat4[14];
	  _dest[15] = this.mat4[15];

	  this.mat4 = _dest;
	  return this;
	};

	/**
	 * rotate our Matrix around an axis by the given angle.
	 * @param  {Number} a The angle of rotation in radians
	 * @param  {p5.Vector | Array} axis  the axis(es) to rotate around
	 * @return {p5.Matrix}                    this
	 * inspired by Toji's gl-matrix lib, mat4 rotation
	 */
	p5.Matrix.prototype.rotate = function(a, axis){
	  var x, y, z, _a, len;

	  if (this.p5) {
	    if (this.p5._angleMode === constants.DEGREES) {
	      _a = polarGeometry.degreesToRadians(a);
	    }
	  }
	  else {
	    _a = a;
	  }
	  if (axis instanceof p5.Vector) {
	    x = axis.x;
	    y = axis.y;
	    z = axis.z;
	  }
	  else if (axis instanceof Array) {
	    x = axis[0];
	    y = axis[1];
	    z = axis[2];
	  }

	  len = Math.sqrt(x * x + y * y + z * z);
	  x *= (1/len);
	  y *= (1/len);
	  z *= (1/len);

	  var a00 = this.mat4[0];
	  var a01 = this.mat4[1];
	  var a02 = this.mat4[2];
	  var a03 = this.mat4[3];
	  var a10 = this.mat4[4];
	  var a11 = this.mat4[5];
	  var a12 = this.mat4[6];
	  var a13 = this.mat4[7];
	  var a20 = this.mat4[8];
	  var a21 = this.mat4[9];
	  var a22 = this.mat4[10];
	  var a23 = this.mat4[11];

	  //sin,cos, and tan of respective angle
	  var sA = Math.sin(_a);
	  var cA = Math.cos(_a);
	  var tA = 1 - cA;
	  // Construct the elements of the rotation matrix
	  var b00 = x * x * tA + cA;
	  var b01 = y * x * tA + z * sA;
	  var b02 = z * x * tA - y * sA;
	  var b10 = x * y * tA - z * sA;
	  var b11 = y * y * tA + cA;
	  var b12 = z * y * tA + x * sA;
	  var b20 = x * z * tA + y * sA;
	  var b21 = y * z * tA - x * sA;
	  var b22 = z * z * tA + cA;

	  // rotation-specific matrix multiplication
	  this.mat4[0] = a00 * b00 + a10 * b01 + a20 * b02;
	  this.mat4[1] = a01 * b00 + a11 * b01 + a21 * b02;
	  this.mat4[2] = a02 * b00 + a12 * b01 + a22 * b02;
	  this.mat4[3] = a03 * b00 + a13 * b01 + a23 * b02;
	  this.mat4[4] = a00 * b10 + a10 * b11 + a20 * b12;
	  this.mat4[5] = a01 * b10 + a11 * b11 + a21 * b12;
	  this.mat4[6] = a02 * b10 + a12 * b11 + a22 * b12;
	  this.mat4[7] = a03 * b10 + a13 * b11 + a23 * b12;
	  this.mat4[8] = a00 * b20 + a10 * b21 + a20 * b22;
	  this.mat4[9] = a01 * b20 + a11 * b21 + a21 * b22;
	  this.mat4[10] = a02 * b20 + a12 * b21 + a22 * b22;
	  this.mat4[11] = a03 * b20 + a13 * b21 + a23 * b22;

	  return this;
	};

	/**
	 * @todo  finish implementing this method!
	 * translates
	 * @param  {Array} v vector to translate by
	 * @return {p5.Matrix}                    this
	 */
	p5.Matrix.prototype.translate = function(v){
	  var x = v[0],
	    y = v[1],
	    z = v[2] || 0;
	  this.mat4[12] =
	    this.mat4[0] * x +this.mat4[4] * y +this.mat4[8] * z +this.mat4[12];
	  this.mat4[13] =
	    this.mat4[1] * x +this.mat4[5] * y +this.mat4[9] * z +this.mat4[13];
	  this.mat4[14] =
	    this.mat4[2] * x +this.mat4[6] * y +this.mat4[10] * z +this.mat4[14];
	  this.mat4[15] =
	    this.mat4[3] * x +this.mat4[7] * y +this.mat4[11] * z +this.mat4[15];
	};

	p5.Matrix.prototype.rotateX = function(a){
	  this.rotate(a, [1,0,0]);
	};
	p5.Matrix.prototype.rotateY = function(a){
	  this.rotate(a, [0,1,0]);
	};
	p5.Matrix.prototype.rotateZ = function(a){
	  this.rotate(a, [0,0,1]);
	};

	/**
	 * sets the perspective matrix
	 * @param  {Number} fovy   [description]
	 * @param  {Number} aspect [description]
	 * @param  {Number} near   near clipping plane
	 * @param  {Number} far    far clipping plane
	 * @return {void}
	 */
	p5.Matrix.prototype.perspective = function(fovy,aspect,near,far){

	  var f = 1.0 / Math.tan(fovy / 2),
	    nf = 1 / (near - far);

	  this.mat4[0] = f / aspect;
	  this.mat4[1] = 0;
	  this.mat4[2] = 0;
	  this.mat4[3] = 0;
	  this.mat4[4] = 0;
	  this.mat4[5] = f;
	  this.mat4[6] = 0;
	  this.mat4[7] = 0;
	  this.mat4[8] = 0;
	  this.mat4[9] = 0;
	  this.mat4[10] = (far + near) * nf;
	  this.mat4[11] = -1;
	  this.mat4[12] = 0;
	  this.mat4[13] = 0;
	  this.mat4[14] = (2 * far * near) * nf;
	  this.mat4[15] = 0;

	  return this;

	};

	/**
	 * sets the ortho matrix
	 * @param  {Number} left   [description]
	 * @param  {Number} right  [description]
	 * @param  {Number} bottom [description]
	 * @param  {Number} top    [description]
	 * @param  {Number} near   near clipping plane
	 * @param  {Number} far    far clipping plane
	 * @return {void}
	 */
	p5.Matrix.prototype.ortho = function(left,right,bottom,top,near,far){

	  var lr = 1 / (left - right),
	    bt = 1 / (bottom - top),
	    nf = 1 / (near - far);
	  this.mat4[0] = -2 * lr;
	  this.mat4[1] = 0;
	  this.mat4[2] = 0;
	  this.mat4[3] = 0;
	  this.mat4[4] = 0;
	  this.mat4[5] = -2 * bt;
	  this.mat4[6] = 0;
	  this.mat4[7] = 0;
	  this.mat4[8] = 0;
	  this.mat4[9] = 0;
	  this.mat4[10] = 2 * nf;
	  this.mat4[11] = 0;
	  this.mat4[12] = (left + right) * lr;
	  this.mat4[13] = (top + bottom) * bt;
	  this.mat4[14] = (far + near) * nf;
	  this.mat4[15] = 1;

	  return this;
	};

	/**
	 * PRIVATE
	 */
	// matrix methods adapted from:
	// https://developer.mozilla.org/en-US/docs/Web/WebGL/
	// gluPerspective
	//
	// function _makePerspective(fovy, aspect, znear, zfar){
	//    var ymax = znear * Math.tan(fovy * Math.PI / 360.0);
	//    var ymin = -ymax;
	//    var xmin = ymin * aspect;
	//    var xmax = ymax * aspect;
	//    return _makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);
	//  }

	////
	//// glFrustum
	////
	//function _makeFrustum(left, right, bottom, top, znear, zfar){
	//  var X = 2*znear/(right-left);
	//  var Y = 2*znear/(top-bottom);
	//  var A = (right+left)/(right-left);
	//  var B = (top+bottom)/(top-bottom);
	//  var C = -(zfar+znear)/(zfar-znear);
	//  var D = -2*zfar*znear/(zfar-znear);
	//  var frustrumMatrix =[
	//  X, 0, A, 0,
	//  0, Y, B, 0,
	//  0, 0, C, D,
	//  0, 0, -1, 0
	//];
	//return frustrumMatrix;
	// }

	// function _setMVPMatrices(){
	////an identity matrix
	////@TODO use the p5.Matrix class to abstract away our MV matrices and
	///other math
	//var _mvMatrix =
	//[
	//  1.0,0.0,0.0,0.0,
	//  0.0,1.0,0.0,0.0,
	//  0.0,0.0,1.0,0.0,
	//  0.0,0.0,0.0,1.0
	//];

	module.exports = p5.Matrix;

	},{"../core/constants":36,"../core/core":37,"../math/polargeometry":67}],84:[function(_dereq_,module,exports){
	/**
	 * Welcome to RendererGL Immediate Mode.
	 * Immediate mode is used for drawing custom shapes
	 * from a set of vertices.  Immediate Mode is activated
	 * when you call beginShape() & de-activated when you call endShape().
	 * Immediate mode is a style of programming borrowed
	 * from OpenGL's (now-deprecated) immediate mode.
	 * It differs from p5.js' default, Retained Mode, which caches
	 * geometries and buffers on the CPU to reduce the number of webgl
	 * draw calls. Retained mode is more efficient & performative,
	 * however, Immediate Mode is useful for sketching quick
	 * geometric ideas.
	 */
	'use strict';

	var p5 = _dereq_('../core/core');
	var constants = _dereq_('../core/constants');

	/**
	 * Begin shape drawing.  This is a helpful way of generating
	 * custom shapes quickly.  However in WEBGL mode, application
	 * performance will likely drop as a result of too many calls to
	 * beginShape() / endShape().  As a high performance alternative,
	 * please use p5.js geometry primitives.
	 * @param  {Number} mode webgl primitives mode.  beginShape supports the
	 *                       following modes:
	 *                       POINTS,LINES,LINE_STRIP,LINE_LOOP,TRIANGLES,
	 *                       TRIANGLE_STRIP,and TRIANGLE_FAN.
	 * @return {[type]}      [description]
	 */
	p5.RendererGL.prototype.beginShape = function(mode){
	  //default shape mode is line_strip
	  this.immediateMode.shapeMode = (mode !== undefined ) ?
	    mode : constants.LINE_STRIP;
	  //if we haven't yet initialized our
	  //immediateMode vertices & buffers, create them now!
	  if(this.immediateMode.vertexPositions === undefined){
	    this.immediateMode.vertexPositions = [];
	    this.immediateMode.vertexColors = [];
	    this.immediateMode.vertexBuffer = this.GL.createBuffer();
	    this.immediateMode.colorBuffer = this.GL.createBuffer();
	  } else {
	    this.immediateMode.vertexPositions.length = 0;
	    this.immediateMode.vertexColors.length = 0;
	  }
	  this.isImmediateDrawing = true;
	  return this;
	};
	/**
	 * adds a vertex to be drawn in a custom Shape.
	 * @param  {Number} x x-coordinate of vertex
	 * @param  {Number} y y-coordinate of vertex
	 * @param  {Number} z z-coordinate of vertex
	 * @return {p5.RendererGL}   [description]
	 * @TODO implement handling of p5.Vector args
	 */
	p5.RendererGL.prototype.vertex = function(x, y, z){
	  this.immediateMode.vertexPositions.push(x, y, z);
	  var vertexColor = this.curFillColor || [0.5, 0.5, 0.5, 1.0];
	  this.immediateMode.vertexColors.push(
	    vertexColor[0],
	    vertexColor[1],
	    vertexColor[2],
	    vertexColor[3]);
	  return this;
	};

	/**
	 * End shape drawing and render vertices to screen.
	 * @return {p5.RendererGL} [description]
	 */
	p5.RendererGL.prototype.endShape =
	function(mode, isCurve, isBezier,isQuadratic, isContour, shapeKind){
	  var gl = this.GL;
	  this._bindImmediateBuffers(
	    this.immediateMode.vertexPositions,
	    this.immediateMode.vertexColors);
	  if(mode){
	    if(this.drawMode === 'fill'){
	      switch(this.immediateMode.shapeMode){
	        case constants.LINE_STRIP:
	          this.immediateMode.shapeMode = constants.TRIANGLE_FAN;
	          break;
	        case constants.LINES:
	          this.immediateMode.shapeMode = constants.TRIANGLE_FAN;
	          break;
	        case constants.TRIANGLES:
	          this.immediateMode.shapeMode = constants.TRIANGLE_FAN;
	          break;
	      }
	    } else {
	      switch(this.immediateMode.shapeMode){
	        case constants.LINE_STRIP:
	          this.immediateMode.shapeMode = constants.LINE_LOOP;
	          break;
	        case constants.LINES:
	          this.immediateMode.shapeMode = constants.LINE_LOOP;
	          break;
	      }
	    }
	  }
	  //QUADS & QUAD_STRIP are not supported primitives modes
	  //in webgl.
	  if(this.immediateMode.shapeMode === constants.QUADS ||
	    this.immediateMode.shapeMode === constants.QUAD_STRIP){
	    throw new Error('sorry, ' + this.immediateMode.shapeMode+
	      ' not yet implemented in webgl mode.');
	  }
	  else {
	    gl.enable(gl.BLEND);
	    gl.drawArrays(this.immediateMode.shapeMode, 0,
	      this.immediateMode.vertexPositions.length / 3);
	  }
	  //clear out our vertexPositions & colors arrays
	  //after rendering
	  this.immediateMode.vertexPositions.length = 0;
	  this.immediateMode.vertexColors.length = 0;
	  this.isImmediateDrawing = false;
	  return this;
	};
	/**
	 * Bind immediateMode buffers to data,
	 * then draw gl arrays
	 * @param  {Array} vertices Numbers array representing
	 *                          vertex positions
	 * @return {p5.RendererGL}
	 */
	p5.RendererGL.prototype._bindImmediateBuffers = function(vertices, colors){
	  this._setDefaultCamera();
	  var gl = this.GL;
	  var shaderKey = this._getCurShaderId();
	  var shaderProgram = this.mHash[shaderKey];
	  //vertex position Attribute
	  shaderProgram.vertexPositionAttribute =
	    gl.getAttribLocation(shaderProgram, 'aPosition');
	  gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
	  gl.bindBuffer(gl.ARRAY_BUFFER, this.immediateMode.vertexBuffer);
	  gl.bufferData(
	    gl.ARRAY_BUFFER, new Float32Array(vertices), gl.DYNAMIC_DRAW);
	  gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute,
	    3, gl.FLOAT, false, 0, 0);

	  shaderProgram.vertexColorAttribute =
	    gl.getAttribLocation(shaderProgram, 'aVertexColor');
	  gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
	  gl.bindBuffer(gl.ARRAY_BUFFER, this.immediateMode.colorBuffer);
	  gl.bufferData(gl.ARRAY_BUFFER,
	    new Float32Array(colors),gl.DYNAMIC_DRAW);
	  gl.vertexAttribPointer(shaderProgram.vertexColorAttribute,
	    4, gl.FLOAT, false, 0, 0);
	  //matrix
	  this._setMatrixUniforms(shaderKey);
	  //@todo implement in all shaders (not just immediateVert)
	  //set our default point size
	  // this._setUniform1f(shaderKey,
	  //   'uPointSize',
	  //   this.pointSize);
	  return this;
	};

	//////////////////////////////////////////////
	// COLOR
	//////////////////////////////////////////////

	p5.RendererGL.prototype._getColorVertexShader = function(){
	  var gl = this.GL;
	  var mId = 'immediateVert|vertexColorFrag';
	  var shaderProgram;

	  if(!this.materialInHash(mId)){
	    shaderProgram =
	      this._initShaders('immediateVert', 'vertexColorFrag', true);
	    this.mHash[mId] = shaderProgram;
	    shaderProgram.vertexColorAttribute =
	    gl.getAttribLocation(shaderProgram, 'aVertexColor');
	    gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
	  }else{
	    shaderProgram = this.mHash[mId];
	  }
	  return shaderProgram;
	};

	module.exports = p5.RendererGL;
	},{"../core/constants":36,"../core/core":37}],85:[function(_dereq_,module,exports){
	//Retained Mode. The default mode for rendering 3D primitives
	//in WEBGL.
	'use strict';

	var p5 = _dereq_('../core/core');
	var hashCount = 0;
	/**
	 * _initBufferDefaults
	 * @description initializes buffer defaults. runs each time a new geometry is
	 * registered
	 * @param  {String} gId  key of the geometry object
	 */
	p5.RendererGL.prototype._initBufferDefaults = function(gId) {
	  //@TODO remove this limit on hashes in gHash
	  hashCount ++;
	  if(hashCount > 1000){
	    var key = Object.keys(this.gHash)[0];
	    delete this.gHash[key];
	    hashCount --;
	  }

	  var gl = this.GL;
	  //create a new entry in our gHash
	  this.gHash[gId] = {};
	  this.gHash[gId].vertexBuffer = gl.createBuffer();
	  this.gHash[gId].normalBuffer = gl.createBuffer();
	  this.gHash[gId].uvBuffer = gl.createBuffer();
	  this.gHash[gId].indexBuffer = gl.createBuffer();
	};
	/**
	 * createBuffers description
	 * @param  {String} gId    key of the geometry object
	 * @param  {p5.Geometry}  obj contains geometry data
	 */
	p5.RendererGL.prototype.createBuffers = function(gId, obj) {
	  var gl = this.GL;
	  this._setDefaultCamera();
	  //initialize the gl buffers for our geom groups
	  this._initBufferDefaults(gId);
	  //return the current shaderProgram from our material hash
	  var shaderProgram = this.mHash[this._getCurShaderId()];
	  //@todo rename "numberOfItems" property to something more descriptive
	  //we mult the num geom faces by 3
	  this.gHash[gId].numberOfItems = obj.faces.length * 3;
	  gl.bindBuffer(gl.ARRAY_BUFFER, this.gHash[gId].vertexBuffer);
	  gl.bufferData(
	    gl.ARRAY_BUFFER,
	    new Float32Array( vToNArray(obj.vertices) ),
	    gl.STATIC_DRAW);
	  //vertex position
	  shaderProgram.vertexPositionAttribute =
	    gl.getAttribLocation(shaderProgram, 'aPosition');
	  gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);

	  gl.vertexAttribPointer(
	    shaderProgram.vertexPositionAttribute,
	    3, gl.FLOAT, false, 0, 0);

	  gl.bindBuffer(gl.ARRAY_BUFFER, this.gHash[gId].normalBuffer);
	  gl.bufferData(
	    gl.ARRAY_BUFFER,
	    new Float32Array( vToNArray(obj.vertexNormals) ),
	    gl.STATIC_DRAW);
	  //vertex normal
	  shaderProgram.vertexNormalAttribute =
	    gl.getAttribLocation(shaderProgram, 'aNormal');
	  gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

	  gl.vertexAttribPointer(
	    shaderProgram.vertexNormalAttribute,
	    3, gl.FLOAT, false, 0, 0);

	  gl.bindBuffer(gl.ARRAY_BUFFER, this.gHash[gId].uvBuffer);
	  gl.bufferData(
	    gl.ARRAY_BUFFER,
	    new Float32Array( flatten(obj.uvs) ),
	    gl.STATIC_DRAW);
	  //texture coordinate Attribute
	  shaderProgram.textureCoordAttribute =
	    gl.getAttribLocation(shaderProgram, 'aTexCoord');
	  gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);
	  gl.vertexAttribPointer(
	    shaderProgram.textureCoordAttribute,
	    2, gl.FLOAT, false, 0, 0);

	  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.gHash[gId].indexBuffer);
	  gl.bufferData(
	    gl.ELEMENT_ARRAY_BUFFER,
	    new Uint16Array( flatten(obj.faces) ),
	    gl.STATIC_DRAW);
	};

	/**
	 * Draws buffers given a geometry key ID
	 * @param  {String} gId     ID in our geom hash
	 * @return {p5.RendererGL} this
	 */
	p5.RendererGL.prototype.drawBuffers = function(gId) {
	  this._setDefaultCamera();
	  var gl = this.GL;
	  var shaderKey = this._getCurShaderId();
	  var shaderProgram = this.mHash[shaderKey];
	  //vertex position buffer
	  gl.bindBuffer(gl.ARRAY_BUFFER, this.gHash[gId].vertexBuffer);
	  gl.vertexAttribPointer(
	    shaderProgram.vertexPositionAttribute,
	    3, gl.FLOAT, false, 0, 0);
	  //normal buffer
	  gl.bindBuffer(gl.ARRAY_BUFFER, this.gHash[gId].normalBuffer);
	  gl.vertexAttribPointer(
	    shaderProgram.vertexNormalAttribute,
	    3, gl.FLOAT, false, 0, 0);
	  // uv buffer
	  gl.bindBuffer(gl.ARRAY_BUFFER, this.gHash[gId].uvBuffer);
	  gl.vertexAttribPointer(
	    shaderProgram.textureCoordAttribute,
	    2, gl.FLOAT, false, 0, 0);
	  //vertex index buffer
	  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.gHash[gId].indexBuffer);
	  this._setMatrixUniforms(shaderKey);
	  gl.drawElements(
	    gl.TRIANGLES, this.gHash[gId].numberOfItems,
	    gl.UNSIGNED_SHORT, 0);
	  return this;
	};
	///////////////////////////////
	//// UTILITY FUNCTIONS
	//////////////////////////////
	/**
	 * turn a two dimensional array into one dimensional array
	 * @param  {Array} arr 2-dimensional array
	 * @return {Array}     1-dimensional array
	 * [[1, 2, 3],[4, 5, 6]] -> [1, 2, 3, 4, 5, 6]
	 */
	function flatten(arr){
	  if (arr.length>0){
	    return arr.reduce(function(a, b){
	      return a.concat(b);
	    });
	  } else {
	    return [];
	  }
	}

	/**
	 * turn a p5.Vector Array into a one dimensional number array
	 * @param  {Array} arr  an array of p5.Vector
	 * @return {Array]}     a one dimensional array of numbers
	 * [p5.Vector(1, 2, 3), p5.Vector(4, 5, 6)] ->
	 * [1, 2, 3, 4, 5, 6]
	 */
	function vToNArray(arr){
	  return flatten(arr.map(function(item){
	    return [item.x, item.y, item.z];
	  }));
	}
	module.exports = p5.RendererGL;

	},{"../core/core":37}],86:[function(_dereq_,module,exports){
	'use strict';

	var p5 = _dereq_('../core/core');
	var shader = _dereq_('./shader');
	_dereq_('../core/p5.Renderer');
	_dereq_('./p5.Matrix');
	var uMVMatrixStack = [];

	//@TODO should implement public method
	//to override these attributes
	var attributes = {
	  alpha: true,
	  depth: true,
	  stencil: true,
	  antialias: false,
	  premultipliedAlpha: false,
	  preserveDrawingBuffer: false
	};

	/**
	 * @class p5.RendererGL
	 * @constructor
	 * @extends p5.Renderer
	 * 3D graphics class.
	 * @todo extend class to include public method for offscreen
	 * rendering (FBO).
	 *
	 */
	p5.RendererGL = function(elt, pInst, isMainCanvas) {
	  p5.Renderer.call(this, elt, pInst, isMainCanvas);
	  this._initContext();

	  this.isP3D = true; //lets us know we're in 3d mode
	  this.GL = this.drawingContext;
	  //lights
	  this.ambientLightCount = 0;
	  this.directionalLightCount = 0;
	  this.pointLightCount = 0;
	  //camera
	  this._curCamera = null;

	  /**
	   * model view, projection, & normal
	   * matrices
	   */
	  this.uMVMatrix = new p5.Matrix();
	  this.uPMatrix  = new p5.Matrix();
	  this.uNMatrix = new p5.Matrix('mat3');
	  //Geometry & Material hashes
	  this.gHash = {};
	  this.mHash = {};
	  //Imediate Mode
	  //default drawing is done in Retained Mode
	  this.isImmediateDrawing = false;
	  this.immediateMode = {};
	  this.curFillColor = [0.5,0.5,0.5,1.0];
	  this.curStrokeColor = [0.5,0.5,0.5,1.0];
	  this.pointSize = 5.0;//default point/stroke
	  return this;
	};

	p5.RendererGL.prototype = Object.create(p5.Renderer.prototype);

	//////////////////////////////////////////////
	// Setting
	//////////////////////////////////////////////

	p5.RendererGL.prototype._initContext = function() {
	  try {
	    this.drawingContext = this.canvas.getContext('webgl', attributes) ||
	      this.canvas.getContext('experimental-webgl', attributes);
	    if (this.drawingContext === null) {
	      throw new Error('Error creating webgl context');
	    } else {
	      console.log('p5.RendererGL: enabled webgl context');
	      var gl = this.drawingContext;
	      gl.enable(gl.DEPTH_TEST);
	      gl.depthFunc(gl.LEQUAL);
	      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
	    }
	  } catch (er) {
	    throw new Error(er);
	  }
	};
	//detect if user didn't set the camera
	//then call this function below
	p5.RendererGL.prototype._setDefaultCamera = function(){
	  if(this._curCamera === null){
	    var _w = this.width;
	    var _h = this.height;
	    this.uPMatrix = p5.Matrix.identity();
	    var cameraZ = (this.height / 2) / Math.tan(Math.PI * 30 / 180);
	    this.uPMatrix.perspective(60 / 180 * Math.PI, _w / _h,
	                              cameraZ * 0.1, cameraZ * 10);
	    this._curCamera = 'default';
	  }
	};

	p5.RendererGL.prototype._update = function() {
	  this.uMVMatrix = p5.Matrix.identity();
	  this.translate(0, 0, -(this.height / 2) / Math.tan(Math.PI * 30 / 180));
	  this.ambientLightCount = 0;
	  this.directionalLightCount = 0;
	  this.pointLightCount = 0;
	};

	/**
	 * [background description]
	 * @return {[type]} [description]
	 */
	p5.RendererGL.prototype.background = function() {
	  var gl = this.GL;
	  var _col = this._pInst.color.apply(this._pInst, arguments);
	  var _r = (_col.levels[0]) / 255;
	  var _g = (_col.levels[1]) / 255;
	  var _b = (_col.levels[2]) / 255;
	  var _a = (_col.levels[3]) / 255;
	  gl.clearColor(_r, _g, _b, _a);
	  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	};

	//@TODO implement this
	// p5.RendererGL.prototype.clear = function() {
	//@TODO
	// };

	//////////////////////////////////////////////
	// SHADER
	//////////////////////////////////////////////

	/**
	 * [_initShaders description]
	 * @param  {string} vertId [description]
	 * @param  {string} fragId [description]
	 * @return {[type]}        [description]
	 */
	p5.RendererGL.prototype._initShaders =
	function(vertId, fragId, isImmediateMode) {
	  var gl = this.GL;
	  //set up our default shaders by:
	  // 1. create the shader,
	  // 2. load the shader source,
	  // 3. compile the shader
	  var _vertShader = gl.createShader(gl.VERTEX_SHADER);
	  //load in our default vertex shader
	  gl.shaderSource(_vertShader, shader[vertId]);
	  gl.compileShader(_vertShader);
	  // if our vertex shader failed compilation?
	  if (!gl.getShaderParameter(_vertShader, gl.COMPILE_STATUS)) {
	    alert('Yikes! An error occurred compiling the shaders:' +
	      gl.getShaderInfoLog(_vertShader));
	    return null;
	  }

	  var _fragShader = gl.createShader(gl.FRAGMENT_SHADER);
	  //load in our material frag shader
	  gl.shaderSource(_fragShader, shader[fragId]);
	  gl.compileShader(_fragShader);
	  // if our frag shader failed compilation?
	  if (!gl.getShaderParameter(_fragShader, gl.COMPILE_STATUS)) {
	    alert('Darn! An error occurred compiling the shaders:' +
	      gl.getShaderInfoLog(_fragShader));
	    return null;
	  }

	  var shaderProgram = gl.createProgram();
	  gl.attachShader(shaderProgram, _vertShader);
	  gl.attachShader(shaderProgram, _fragShader);
	  gl.linkProgram(shaderProgram);
	  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
	    alert('Snap! Error linking shader program');
	  }
	  //END SHADERS SETUP

	  this._getLocation(shaderProgram, isImmediateMode);

	  return shaderProgram;
	};

	p5.RendererGL.prototype._getLocation =
	function(shaderProgram, isImmediateMode) {
	  var gl = this.GL;
	  gl.useProgram(shaderProgram);

	  //projection Matrix uniform
	  shaderProgram.uPMatrixUniform =
	    gl.getUniformLocation(shaderProgram, 'uProjectionMatrix');
	  //model view Matrix uniform
	  shaderProgram.uMVMatrixUniform =
	    gl.getUniformLocation(shaderProgram, 'uModelViewMatrix');

	  //@TODO: figure out a better way instead of if statement
	  if(isImmediateMode === undefined){
	    //normal Matrix uniform
	    shaderProgram.uNMatrixUniform =
	    gl.getUniformLocation(shaderProgram, 'uNormalMatrix');

	    shaderProgram.samplerUniform =
	    gl.getUniformLocation(shaderProgram, 'uSampler');
	  }
	};

	/**
	 * Sets a shader uniform given a shaderProgram and uniform string
	 * @param {String} shaderKey key to material Hash.
	 * @param {String} uniform location in shader.
	 * @param { Number} data data to bind uniform.  Float data type.
	 * @todo currently this function sets uniform1f data.
	 * Should generalize function to accept any uniform
	 * data type.
	 */
	p5.RendererGL.prototype._setUniform1f = function(shaderKey,uniform,data)
	{
	  var gl = this.GL;
	  var shaderProgram = this.mHash[shaderKey];
	  gl.useProgram(shaderProgram);
	  shaderProgram[uniform] = gl.getUniformLocation(shaderProgram, uniform);
	  gl.uniform1f(shaderProgram[uniform], data);
	  return this;
	};

	p5.RendererGL.prototype._setMatrixUniforms = function(shaderKey) {
	  var gl = this.GL;
	  var shaderProgram = this.mHash[shaderKey];

	  gl.useProgram(shaderProgram);

	  gl.uniformMatrix4fv(
	    shaderProgram.uPMatrixUniform,
	    false, this.uPMatrix.mat4);

	  gl.uniformMatrix4fv(
	    shaderProgram.uMVMatrixUniform,
	    false, this.uMVMatrix.mat4);

	  this.uNMatrix.inverseTranspose(this.uMVMatrix);

	  gl.uniformMatrix3fv(
	    shaderProgram.uNMatrixUniform,
	    false, this.uNMatrix.mat3);
	};
	//////////////////////////////////////////////
	// GET CURRENT | for shader and color
	//////////////////////////////////////////////
	p5.RendererGL.prototype._getShader = function(vertId, fragId, isImmediateMode) {
	  var mId = vertId + '|' + fragId;
	  //create it and put it into hashTable
	  if(!this.materialInHash(mId)){
	    var shaderProgram = this._initShaders(vertId, fragId, isImmediateMode);
	    this.mHash[mId] = shaderProgram;
	  }
	  this.curShaderId = mId;

	  return this.mHash[this.curShaderId];
	};

	p5.RendererGL.prototype._getCurShaderId = function(){
	  //if the shader ID is not yet defined
	  var mId, shaderProgram;
	  if(this.drawMode !== 'fill' && this.curShaderId === undefined){
	    //default shader: normalMaterial()
	    mId = 'normalVert|normalFrag';
	    shaderProgram = this._initShaders('normalVert', 'normalFrag');
	    this.mHash[mId] = shaderProgram;
	    this.curShaderId = mId;
	  } else if(this.isImmediateDrawing && this.drawMode === 'fill'){
	    mId = 'immediateVert|vertexColorFrag';
	    shaderProgram = this._initShaders('immediateVert', 'vertexColorFrag');
	    this.mHash[mId] = shaderProgram;
	    this.curShaderId = mId;
	  }
	  return this.curShaderId;
	};

	//////////////////////////////////////////////
	// COLOR
	//////////////////////////////////////////////
	/**
	 * Basic fill material for geometry with a given color
	 * @method  fill
	 * @param  {Number|Array|String|p5.Color} v1  gray value,
	 * red or hue value (depending on the current color mode),
	 * or color Array, or CSS color string
	 * @param  {Number}            [v2] optional: green or saturation value
	 * @param  {Number}            [v3] optional: blue or brightness value
	 * @param  {Number}            [a]  optional: opacity
	 * @return {p5}                the p5 object
	 * @example
	 * <div>
	 * <code>
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *  background(0);
	 *  fill(250, 0, 0);
	 *  rotateX(frameCount * 0.01);
	 *  rotateY(frameCount * 0.01);
	 *  rotateZ(frameCount * 0.01);
	 *  box(200, 200, 200);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * red canvas
	 *
	 */
	p5.RendererGL.prototype.fill = function(v1, v2, v3, a) {
	  var gl = this.GL;
	  var shaderProgram;
	  //see material.js for more info on color blending in webgl
	  var colors = this._applyColorBlend.apply(this, arguments);
	  this.curFillColor = colors;
	  this.drawMode = 'fill';
	  if(this.isImmediateDrawing){
	    shaderProgram =
	    this._getShader('immediateVert','vertexColorFrag');
	    gl.useProgram(shaderProgram);
	  } else {
	    shaderProgram =
	    this._getShader('normalVert', 'basicFrag');
	    gl.useProgram(shaderProgram);
	    //RetainedMode uses a webgl uniform to pass color vals
	    //in ImmediateMode, we want access to each vertex so therefore
	    //we cannot use a uniform.
	    shaderProgram.uMaterialColor = gl.getUniformLocation(
	      shaderProgram, 'uMaterialColor' );
	    gl.uniform4f( shaderProgram.uMaterialColor,
	      colors[0],
	      colors[1],
	      colors[2],
	      colors[3]);
	  }
	  return this;
	};
	p5.RendererGL.prototype.stroke = function(r, g, b, a) {
	  var color = this._pInst.color.apply(this._pInst, arguments);
	  var colorNormalized = color._array;
	  this.curStrokeColor = colorNormalized;
	  this.drawMode = 'stroke';
	  return this;
	};

	//@TODO
	p5.RendererGL.prototype._strokeCheck = function(){
	  if(this.drawMode === 'stroke'){
	    throw new Error(
	      'stroke for shapes in 3D not yet implemented, use fill for now :('
	    );
	  }
	};

	/**
	 * [strokeWeight description]
	 * @param  {Number} pointSize stroke point size
	 * @return {[type]}           [description]
	 * @todo  strokeWeight currently works on points only.
	 * implement on all wireframes and strokes.
	 */
	p5.RendererGL.prototype.strokeWeight = function(pointSize) {
	  this.pointSize = pointSize;
	  return this;
	};
	//////////////////////////////////////////////
	// HASH | for material and geometry
	//////////////////////////////////////////////

	p5.RendererGL.prototype.geometryInHash = function(gId){
	  return this.gHash[gId] !== undefined;
	};

	p5.RendererGL.prototype.materialInHash = function(mId){
	  return this.mHash[mId] !== undefined;
	};

	/**
	 * [resize description]
	 * @param  {[type]} w [description]
	 * @param  {[tyoe]} h [description]
	 * @return {[type]}   [description]
	 */
	p5.RendererGL.prototype.resize = function(w,h) {
	  var gl = this.GL;
	  p5.Renderer.prototype.resize.call(this, w, h);
	  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
	  // If we're using the default camera, update the aspect ratio
	  if(this._curCamera === 'default') {
	    this._curCamera = null;
	    this._setDefaultCamera();
	  }
	};

	/**
	 * clears color and depth buffers
	 * with r,g,b,a
	 * @param {Number} r normalized red val.
	 * @param {Number} g normalized green val.
	 * @param {Number} b normalized blue val.
	 * @param {Number} a normalized alpha val.
	 */
	p5.RendererGL.prototype.clear = function() {
	  var gl = this.GL;
	  gl.clearColor(arguments[0],
	    arguments[1],
	    arguments[2],
	    arguments[3]);
	  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	};

	/**
	 * [translate description]
	 * @param  {[type]} x [description]
	 * @param  {[type]} y [description]
	 * @param  {[type]} z [description]
	 * @return {[type]}   [description]
	 * @todo implement handle for components or vector as args
	 */
	p5.RendererGL.prototype.translate = function(x, y, z) {
	  this.uMVMatrix.translate([x,-y,z]);
	  return this;
	};

	/**
	 * Scales the Model View Matrix by a vector
	 * @param  {Number | p5.Vector | Array} x [description]
	 * @param  {Number} [y] y-axis scalar
	 * @param  {Number} [z] z-axis scalar
	 * @return {this}   [description]
	 */
	p5.RendererGL.prototype.scale = function(x,y,z) {
	  this.uMVMatrix.scale([x,y,z]);
	  return this;
	};

	p5.RendererGL.prototype.rotate = function(rad, axis){
	  this.uMVMatrix.rotate(rad, axis);
	  return this;
	};

	p5.RendererGL.prototype.rotateX = function(rad) {
	  this.rotate(rad, [1,0,0]);
	  return this;
	};

	p5.RendererGL.prototype.rotateY = function(rad) {
	  this.rotate(rad, [0,1,0]);
	  return this;
	};

	p5.RendererGL.prototype.rotateZ = function(rad) {
	  this.rotate(rad, [0,0,1]);
	  return this;
	};

	/**
	 * pushes a copy of the model view matrix onto the
	 * MV Matrix stack.
	 */
	p5.RendererGL.prototype.push = function() {
	  uMVMatrixStack.push(this.uMVMatrix.copy());
	};

	/**
	 * [pop description]
	 * @return {[type]} [description]
	 */
	p5.RendererGL.prototype.pop = function() {
	  if (uMVMatrixStack.length === 0) {
	    throw new Error('Invalid popMatrix!');
	  }
	  this.uMVMatrix = uMVMatrixStack.pop();
	};

	p5.RendererGL.prototype.resetMatrix = function() {
	  this.uMVMatrix = p5.Matrix.identity();
	  this.translate(0, 0, -800);
	  return this;
	};

	// Text/Typography
	// @TODO:
	p5.RendererGL.prototype._applyTextProperties = function() {
	  //@TODO finish implementation
	  console.error('text commands not yet implemented in webgl');
	};
	module.exports = p5.RendererGL;

	},{"../core/core":37,"../core/p5.Renderer":43,"./p5.Matrix":83,"./shader":88}],87:[function(_dereq_,module,exports){
	/**
	 * @module Shape
	 * @submodule 3D Primitives
	 * @for p5
	 * @requires core
	 * @requires p5.Geometry
	 */

	'use strict';

	var p5 = _dereq_('../core/core');
	_dereq_('./p5.Geometry');
	/**
	 * Draw a plane with given a width and height
	 * @method plane
	 * @param  {Number} width      width of the plane
	 * @param  {Number} height     height of the plane
	 * @param  {Number} [detailX]  Optional number of triangle
	 *                             subdivisions in x-dimension
	 * @param {Number} [detailY]   Optional number of triangle
	 *                             subdivisions in y-dimension
	 * @return {p5}                the p5 object
	 * @example
	 * <div>
	 * <code>
	 * //draw a plane with width 200 and height 200
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   plane(200, 200);
	 * }
	 * </code>
	 * </div>
	 *
	 * @alt
	 * Nothing displayed on canvas
	 * Rotating interior view of a box with sides that change color.
	 * 3d red and green gradient.
	 * Rotating interior view of a cylinder with sides that change color.
	 * Rotating view of a cylinder with sides that change color.
	 * 3d red and green gradient.
	 * rotating view of a multi-colored cylinder with concave sides.
	 */
	p5.prototype.plane = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var width = args[0] || 50;
	  var height = args[1] || width;
	  var detailX = typeof args[2] === 'number' ? args[2] : 1;
	  var detailY = typeof args[3] === 'number' ? args[3] : 1;

	  var gId = 'plane|'+width+'|'+height+'|'+detailX+'|'+detailY;

	  if(!this._renderer.geometryInHash(gId)){
	    var _plane = function(){
	      var u,v,p;
	      for (var i = 0; i <= this.detailY; i++){
	        v = i / this.detailY;
	        for (var j = 0; j <= this.detailX; j++){
	          u = j / this.detailX;
	          p = new p5.Vector(width * u - width/2,
	            height * v - height/2,
	            0);
	          this.vertices.push(p);
	          this.uvs.push([u,v]);
	        }
	      }
	    };
	    var planeGeom =
	    new p5.Geometry(detailX, detailY, _plane);
	    planeGeom
	      .computeFaces()
	      .computeNormals();
	    this._renderer.createBuffers(gId, planeGeom);
	  }

	  this._renderer.drawBuffers(gId);

	};

	/**
	 * Draw a box with given width, height and depth
	 * @method  box
	 * @param  {Number} width     width of the box
	 * @param  {Number} Height    height of the box
	 * @param  {Number} depth     depth of the box
	 * @param {Number} [detailX]  Optional number of triangle
	 *                            subdivisions in x-dimension
	 * @param {Number} [detailY]  Optional number of triangle
	 *                            subdivisions in y-dimension
	 * @return {p5}               the p5 object
	 * @example
	 * <div>
	 * <code>
	 * //draw a spinning box with width, height and depth 200
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   rotateX(frameCount * 0.01);
	 *   rotateY(frameCount * 0.01);
	 *   box(200, 200, 200);
	 * }
	 * </code>
	 * </div>
	 */
	p5.prototype.box = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var width = args[0] || 50;
	  var height = args[1] || width;
	  var depth = args[2] || width;

	  var detailX = typeof args[3] === 'number' ? args[3] : 4;
	  var detailY = typeof args[4] === 'number' ? args[4] : 4;
	  var gId = 'box|'+width+'|'+height+'|'+depth+'|'+detailX+'|'+detailY;

	  if(!this._renderer.geometryInHash(gId)){
	    var _box = function(){
	      var cubeIndices = [
	        [0, 4, 2, 6],// -1, 0, 0],// -x
	        [1, 3, 5, 7],// +1, 0, 0],// +x
	        [0, 1, 4, 5],// 0, -1, 0],// -y
	        [2, 6, 3, 7],// 0, +1, 0],// +y
	        [0, 2, 1, 3],// 0, 0, -1],// -z
	        [4, 5, 6, 7]// 0, 0, +1] // +z
	      ];
	      var id=0;
	      for (var i = 0; i < cubeIndices.length; i++) {
	        var cubeIndex = cubeIndices[i];
	        var v = i * 4;
	        for (var j = 0; j < 4; j++) {
	          var d = cubeIndex[j];
	          //inspired by lightgl:
	          //https://github.com/evanw/lightgl.js
	          //octants:https://en.wikipedia.org/wiki/Octant_(solid_geometry)
	          var octant = new p5.Vector(
	            ((d & 1) * 2 - 1)*width/2,
	            ((d & 2) - 1) *height/2,
	            ((d & 4) / 2 - 1) * depth/2);
	          this.vertices.push( octant );
	          this.uvs.push([j & 1, (j & 2) / 2]);
	          id++;
	        }
	        this.faces.push([v, v + 1, v + 2]);
	        this.faces.push([v + 2, v + 1, v + 3]);
	      }
	    };
	    var boxGeom = new p5.Geometry(detailX,detailY, _box);
	    boxGeom.computeNormals();
	    //initialize our geometry buffer with
	    //the key val pair:
	    //geometry Id, Geom object
	    this._renderer.createBuffers(gId, boxGeom);
	  }
	  this._renderer.drawBuffers(gId);

	  return this;

	};

	/**
	 * Draw a sphere with given radius
	 * @method sphere
	 * @param  {Number} radius            radius of circle
	 * @param  {Number} [detailX]         optional: number of segments,
	 *                                    the more segments the smoother geometry
	 *                                    default is 24
	 * @param  {Number} [detailY]         optional: number of segments,
	 *                                    the more segments the smoother geometry
	 *                                    default is 16
	 * @return {p5}                       the p5 object
	 * @example
	 * <div>
	 * <code>
	 * // draw a sphere with radius 200
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   sphere(50);
	 * }
	 * </code>
	 * </div>
	 */
	p5.prototype.sphere = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var radius = args[0] || 50;
	  var detailX = typeof args[1] === 'number' ? args[1] : 24;
	  var detailY = typeof args[2] === 'number' ? args[2] : 16;
	  var gId = 'sphere|'+radius+'|'+detailX+'|'+detailY;
	  if(!this._renderer.geometryInHash(gId)){
	    var _sphere = function(){
	      var u,v,p;
	      for (var i = 0; i <= this.detailY; i++){
	        v = i / this.detailY;
	        for (var j = 0; j <= this.detailX; j++){
	          u = j / this.detailX;
	          var theta = 2 * Math.PI * u;
	          var phi = Math.PI * v - Math.PI / 2;
	          p = new p5.Vector(radius * Math.cos(phi) * Math.sin(theta),
	            radius * Math.sin(phi),
	            radius * Math.cos(phi) * Math.cos(theta));
	          this.vertices.push(p);
	          this.uvs.push([u,v]);
	        }
	      }
	    };
	    var sphereGeom = new p5.Geometry(detailX, detailY, _sphere);
	    sphereGeom
	      .computeFaces()
	      .computeNormals()
	      .averageNormals()
	      .averagePoleNormals();
	    this._renderer.createBuffers(gId, sphereGeom);
	  }
	  this._renderer.drawBuffers(gId);

	  return this;
	};


	/**
	* @private
	* helper function for creating both cones and cyllinders
	*/
	var _truncatedCone = function(
	  bottomRadius,
	  topRadius,
	  height,
	  detailX,
	  detailY,
	  topCap,
	  bottomCap) {
	  detailX = (detailX < 3) ? 3 : detailX;
	  detailY = (detailY < 1) ? 1 : detailY;
	  topCap = (topCap === undefined) ? true : topCap;
	  bottomCap = (bottomCap === undefined) ? true : bottomCap;
	  var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);
	  var vertsAroundEdge = detailX + 1;

	  // ensure constant slant
	  var slant = Math.atan2(bottomRadius - topRadius, height);
	  var start = topCap ? -2 : 0;
	  var end = detailY + (bottomCap ? 2 : 0);
	  var yy, ii;
	  for (yy = start; yy <= end; ++yy) {
	    var v = yy / detailY;
	    var y = height * v;
	    var ringRadius;
	    if (yy < 0) {
	      y = 0;
	      v = 1;
	      ringRadius = bottomRadius;
	    } else if (yy > detailY) {
	      y = height;
	      v = 1;
	      ringRadius = topRadius;
	    } else {
	      ringRadius = bottomRadius +
	        (topRadius - bottomRadius) * (yy / detailY);
	    }
	    if (yy === -2 || yy === detailY + 2) {
	      ringRadius = 0;
	      v = 0;
	    }
	    y -= height / 2;
	    for (ii = 0; ii < vertsAroundEdge; ++ii) {
	      //VERTICES
	      this.vertices.push(
	        new p5.Vector(
	          Math.sin(ii*Math.PI * 2 /detailX) * ringRadius,
	          y,
	          Math.cos(ii*Math.PI * 2 /detailX) * ringRadius)
	        );
	      //VERTEX NORMALS
	      this.vertexNormals.push(
	        new p5.Vector(
	          (yy < 0 || yy > detailY) ? 0 :
	          (Math.sin(ii * Math.PI * 2 / detailX) * Math.cos(slant)),
	          (yy < 0) ? -1 : (yy > detailY ? 1 : Math.sin(slant)),
	          (yy < 0 || yy > detailY) ? 0 :
	          (Math.cos(ii * Math.PI * 2 / detailX) * Math.cos(slant)))
	        );
	      //UVs
	      this.uvs.push([(ii / detailX), v]);
	    }
	  }
	  for (yy = 0; yy < detailY + extra; ++yy) {
	    for (ii = 0; ii < detailX; ++ii) {
	      this.faces.push([vertsAroundEdge * (yy + 0) + 0 + ii,
	        vertsAroundEdge * (yy + 0) + 1 + ii,
	        vertsAroundEdge * (yy + 1) + 1 + ii]);
	      this.faces.push([vertsAroundEdge * (yy + 0) + 0 + ii,
	        vertsAroundEdge * (yy + 1) + 1 + ii,
	        vertsAroundEdge * (yy + 1) + 0 + ii]);
	    }
	  }
	};

	/**
	 * Draw a cylinder with given radius and height
	 * @method  cylinder
	 * @param  {Number} radius     radius of the surface
	 * @param  {Number} height     height of the cylinder
	 * @param  {Number} [detailX]  optional: number of segments,
	 *                             the more segments the smoother geometry
	 *                             default is 24
	 * @param {Number} [detailY]   optional: number of segments in y-dimension,
	 *                             the more segments the smoother geometry
	 *                             default is 16
	 * @return {p5}                the p5 object
	 * @example
	 * <div>
	 * <code>
	 * //draw a spinning cylinder with radius 200 and height 200
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   rotateX(frameCount * 0.01);
	 *   rotateZ(frameCount * 0.01);
	 *   cylinder(200, 200);
	 * }
	 * </code>
	 * </div>
	 */
	p5.prototype.cylinder = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var radius = args[0] || 50;
	  var height = args[1] || radius;
	  var detailX = typeof args[2] === 'number' ? args[2] : 24;
	  var detailY = typeof args[3] === 'number' ? args[3] : 16;
	  var gId = 'cylinder|'+radius+'|'+height+'|'+detailX+'|'+detailY;
	  if(!this._renderer.geometryInHash(gId)){
	    var cylinderGeom = new p5.Geometry(detailX, detailY);
	    _truncatedCone.call(
	      cylinderGeom,
	      radius,
	      radius,
	      height,
	      detailX,
	      detailY,
	      true,true);
	    cylinderGeom.computeNormals();
	    this._renderer.createBuffers(gId, cylinderGeom);
	  }

	  this._renderer.drawBuffers(gId);

	  return this;
	};


	/**
	 * Draw a cone with given radius and height
	 * @method cone
	 * @param  {Number} radius            radius of the bottom surface
	 * @param  {Number} height            height of the cone
	 * @param  {Number} [detailX]         optional: number of segments,
	 *                                    the more segments the smoother geometry
	 *                                    default is 24
	 * @param  {Number} [detailY]         optional: number of segments,
	 *                                    the more segments the smoother geometry
	 *                                    default is 16
	 * @return {p5}                       the p5 object
	 * @example
	 * <div>
	 * <code>
	 * //draw a spinning cone with radius 200 and height 200
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   rotateX(frameCount * 0.01);
	 *   rotateZ(frameCount * 0.01);
	 *   cone(200, 200);
	 * }
	 * </code>
	 * </div>
	 */
	p5.prototype.cone = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var baseRadius = args[0] || 50;
	  var height = args[1] || baseRadius;
	  var detailX = typeof args[2] === 'number' ? args[2] : 24;
	  var detailY = typeof args[3] === 'number' ? args[3] : 16;
	  var gId = 'cone|'+baseRadius+'|'+height+'|'+detailX+'|'+detailY;
	  if(!this._renderer.geometryInHash(gId)){
	    var coneGeom = new p5.Geometry(detailX, detailY);
	    _truncatedCone.call(coneGeom,
	      baseRadius,
	      0,//top radius 0
	      height,
	      detailX,
	      detailY,
	      true,
	      true);
	    //for cones we need to average Normals
	    coneGeom
	      .computeNormals();
	    this._renderer.createBuffers(gId, coneGeom);
	  }

	  this._renderer.drawBuffers(gId);

	  return this;
	};

	/**
	 * Draw an ellipsoid with given radius
	 * @method ellipsoid
	 * @param  {Number} radiusx           xradius of circle
	 * @param  {Number} radiusy           yradius of circle
	 * @param  {Number} radiusz           zradius of circle
	 * @param  {Number} [detailX]         optional: number of segments,
	 *                                    the more segments the smoother geometry
	 *                                    default is 24. Avoid detail number above
	 *                                    150, it may crash the browser.
	 * @param  {Number} [detailY]         optional: number of segments,
	 *                                    the more segments the smoother geometry
	 *                                    default is 16. Avoid detail number above
	 *                                    150, it may crash the browser.
	 * @return {p5}                       the p5 object
	 * @example
	 * <div>
	 * <code>
	 * // draw an ellipsoid with radius 20, 30 and 40.
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   ellipsoid(20, 30, 40);
	 * }
	 * </code>
	 * </div>
	 */
	p5.prototype.ellipsoid = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var detailX = typeof args[3] === 'number' ? args[3] : 24;
	  var detailY = typeof args[4] === 'number' ? args[4] : 24;
	  var radiusX = args[0] || 50;
	  var radiusY = args[1] || radiusX;
	  var radiusZ = args[2] || radiusX;

	  var gId = 'ellipsoid|'+radiusX+'|'+radiusY+
	  '|'+radiusZ+'|'+detailX+'|'+detailY;


	  if(!this._renderer.geometryInHash(gId)){
	    var _ellipsoid = function(){
	      var u,v,p;
	      for (var i = 0; i <= this.detailY; i++){
	        v = i / this.detailY;
	        for (var j = 0; j <= this.detailX; j++){
	          u = j / this.detailX;
	          var theta = 2 * Math.PI * u;
	          var phi = Math.PI * v - Math.PI / 2;
	          p = new p5.Vector(radiusX * Math.cos(phi) * Math.sin(theta),
	            radiusY * Math.sin(phi),
	            radiusZ * Math.cos(phi) * Math.cos(theta));
	          this.vertices.push(p);
	          this.uvs.push([u,v]);
	        }
	      }
	    };
	    var ellipsoidGeom = new p5.Geometry(detailX, detailY,_ellipsoid);
	    ellipsoidGeom
	      .computeFaces()
	      .computeNormals();
	    this._renderer.createBuffers(gId, ellipsoidGeom);
	  }

	  this._renderer.drawBuffers(gId);

	  return this;
	};

	/**
	 * Draw a torus with given radius and tube radius
	 * @method torus
	 * @param  {Number} radius        radius of the whole ring
	 * @param  {Number} tubeRadius    radius of the tube
	 * @param  {Number} [detailX]     optional: number of segments in x-dimension,
	 *                                the more segments the smoother geometry
	 *                                default is 24
	 * @param  {Number} [detailY]     optional: number of segments in y-dimension,
	 *                                the more segments the smoother geometry
	 *                                default is 16
	 * @return {p5}                   the p5 object
	 * @example
	 * <div>
	 * <code>
	 * //draw a spinning torus with radius 200 and tube radius 60
	 * function setup(){
	 *   createCanvas(100, 100, WEBGL);
	 * }
	 *
	 * function draw(){
	 *   background(200);
	 *   rotateX(frameCount * 0.01);
	 *   rotateY(frameCount * 0.01);
	 *   torus(200, 60);
	 * }
	 * </code>
	 * </div>
	 */
	p5.prototype.torus = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var detailX = typeof args[2] === 'number' ? args[2] : 24;
	  var detailY = typeof args[3] === 'number' ? args[3] : 16;

	  var radius = args[0] || 50;
	  var tubeRadius = args[1] || 10;

	  var gId = 'torus|'+radius+'|'+tubeRadius+'|'+detailX+'|'+detailY;

	  if(!this._renderer.geometryInHash(gId)){
	    var _torus = function(){
	      var u,v,p;
	      for (var i = 0; i <= this.detailY; i++){
	        v = i / this.detailY;
	        for (var j = 0; j <= this.detailX; j++){
	          u = j / this.detailX;
	          var theta = 2 * Math.PI * u;
	          var phi = 2 * Math.PI * v;
	          p = new p5.Vector(
	            (radius + tubeRadius * Math.cos(phi)) * Math.cos(theta),
	            (radius + tubeRadius * Math.cos(phi)) * Math.sin(theta),
	            tubeRadius * Math.sin(phi));
	          this.vertices.push(p);
	          this.uvs.push([u,v]);
	        }
	      }
	    };
	    var torusGeom = new p5.Geometry(detailX, detailY, _torus);
	    torusGeom
	      .computeFaces()
	      .computeNormals()
	      .averageNormals();
	    this._renderer.createBuffers(gId, torusGeom);
	  }

	  this._renderer.drawBuffers(gId);

	  return this;
	};

	///////////////////////
	/// 2D primitives
	/////////////////////////

	//@TODO
	p5.RendererGL.prototype.point = function(x, y, z){
	  console.log('point not yet implemented in webgl');
	  return this;
	};

	p5.RendererGL.prototype.triangle = function
	(args){
	  var x1=args[0], y1=args[1];
	  var x2=args[2], y2=args[3];
	  var x3=args[4], y3=args[5];
	  var gId = 'tri|'+x1+'|'+y1+'|'+
	  x2+'|'+y2+'|'+
	  x3+'|'+y3;
	  if(!this.geometryInHash(gId)){
	    var _triangle = function(){
	      var vertices = [];
	      vertices.push(new p5.Vector(x1,y1,0));
	      vertices.push(new p5.Vector(x2,y2,0));
	      vertices.push(new p5.Vector(x3,y3,0));
	      this.vertices = vertices;
	      this.faces = [[0,1,2]];
	      this.uvs = [[0,0],[0,1],[1,1]];
	    };
	    var triGeom = new p5.Geometry(1,1,_triangle);
	    triGeom.computeNormals();
	    this.createBuffers(gId, triGeom);
	  }

	  this.drawBuffers(gId);
	  return this;
	};

	p5.RendererGL.prototype.ellipse = function
	(args){
	  var x = args[0];
	  var y = args[1];
	  var width = args[2];
	  var height = args[3];
	  //detailX and Y are optional 6th & 7th
	  //arguments
	  var detailX = args[4] || 24;
	  var detailY = args[5] || 16;
	  var gId = 'ellipse|'+args[0]+'|'+args[1]+'|'+args[2]+'|'+
	  args[3];
	  if(!this.geometryInHash(gId)){
	    var _ellipse = function(){
	      var u,v,p;
	      var centerX = x+width*0.5;
	      var centerY = y+height*0.5;
	      for (var i = 0; i <= this.detailY; i++){
	        v = i / this.detailY;
	        for (var j = 0; j <= this.detailX; j++){
	          u = j / this.detailX;
	          var theta = 2 * Math.PI * u;
	          if(v === 0){
	            p = new p5.Vector(centerX, centerY, 0);
	          }
	          else{
	            var _x = centerX + width*0.5 * Math.cos(theta);
	            var _y = centerY + height*0.5 * Math.sin(theta);
	            p = new p5.Vector(_x, _y, 0);
	          }
	          this.vertices.push(p);
	          this.uvs.push([u,v]);
	        }
	      }
	    };
	    var ellipseGeom = new p5.Geometry(detailX,detailY,_ellipse);
	    ellipseGeom
	      .computeFaces()
	      .computeNormals();
	    this.createBuffers(gId, ellipseGeom);
	  }
	  this.drawBuffers(gId);
	  return this;
	};

	p5.RendererGL.prototype.rect = function
	(args){
	  var gId = 'rect|'+args[0]+'|'+args[1]+'|'+args[2]+'|'+
	  args[3];
	  var x = args[0];
	  var y = args[1];
	  var width = args[2];
	  var height = args[3];
	  var detailX = args[4] || 24;
	  var detailY = args[5] || 16;
	  if(!this.geometryInHash(gId)){
	    var _rect = function(){
	      var u,v,p;
	      for (var i = 0; i <= this.detailY; i++){
	        v = i / this.detailY;
	        for (var j = 0; j <= this.detailX; j++){
	          u = j / this.detailX;
	          // var _x = x-width/2;
	          // var _y = y-height/2;
	          p = new p5.Vector(
	            x + (width*u),
	            y + (height*v),
	            0
	          );
	          this.vertices.push(p);
	          this.uvs.push([u,v]);
	        }
	      }
	    };
	    var rectGeom = new p5.Geometry(detailX,detailY,_rect);
	    rectGeom
	      .computeFaces()
	      .computeNormals();
	    this.createBuffers(gId, rectGeom);
	  }
	  this.drawBuffers(gId);
	  return this;
	};

	p5.RendererGL.prototype.quad = function(){
	  var args = new Array(arguments.length);
	  for (var i = 0; i < args.length; ++i) {
	    args[i] = arguments[i];
	  }
	  var x1 = args[0],
	    y1 = args[1],
	    x2 = args[2],
	    y2 = args[3],
	    x3 = args[4],
	    y3 = args[5],
	    x4 = args[6],
	    y4 = args[7];
	  var gId = 'quad|'+x1+'|'+y1+'|'+
	  x2+'|'+y2+'|'+
	  x3+'|'+y3+'|'+
	  x4+'|'+y4;
	  if(!this.geometryInHash(gId)){
	    var _quad = function(){
	      this.vertices.push(new p5.Vector(x1,y1,0));
	      this.vertices.push(new p5.Vector(x2,y2,0));
	      this.vertices.push(new p5.Vector(x3,y3,0));
	      this.vertices.push(new p5.Vector(x4,y4,0));
	      this.uvs.push([0, 0], [1, 0], [1, 1], [0, 1]);
	    };
	    var quadGeom = new p5.Geometry(2,2,_quad);
	    quadGeom.computeNormals();
	    quadGeom.faces = [[0,1,2],[2,3,0]];
	    this.createBuffers(gId, quadGeom);
	  }
	  this.drawBuffers(gId);
	  return this;
	};

	//this implementation of bezier curve
	//is based on Bernstein polynomial
	p5.RendererGL.prototype.bezier = function
	(args){
	  var bezierDetail=args[12] || 20;//value of Bezier detail
	  this.beginShape();
	  var coeff=[0,0,0,0];//  Bernstein polynomial coeffecients
	  var vertex=[0,0,0]; //(x,y,z) coordinates of points in bezier curve
	  for(var i=0; i<=bezierDetail; i++){
	    coeff[0]=Math.pow(1-(i/bezierDetail),3);
	    coeff[1]=(3*(i/bezierDetail)) * (Math.pow(1-(i/bezierDetail),2));
	    coeff[2]=(3*Math.pow(i/bezierDetail,2)) * (1-(i/bezierDetail));
	    coeff[3]=Math.pow(i/bezierDetail,3);
	    vertex[0]=args[0]*coeff[0] + args[3]*coeff[1] +
	              args[6]*coeff[2] + args[9]*coeff[3];
	    vertex[1]=args[1]*coeff[0] + args[4]*coeff[1] +
	              args[7]*coeff[2] + args[10]*coeff[3];
	    vertex[2]=args[2]*coeff[0] + args[5]*coeff[1] +
	              args[8]*coeff[2] + args[11]*coeff[3];
	    this.vertex(vertex[0],vertex[1],vertex[2]);
	  }
	  this.endShape();
	  return this;
	};

	p5.RendererGL.prototype.curve=function
	(args){
	  var curveDetail=args[12];
	  this.beginShape();
	  var coeff=[0,0,0,0];//coeffecients of the equation
	  var vertex=[0,0,0]; //(x,y,z) coordinates of points in bezier curve
	  for(var i=0; i<=curveDetail; i++){
	    coeff[0]=Math.pow((i/curveDetail),3) * 0.5;
	    coeff[1]=Math.pow((i/curveDetail),2) * 0.5;
	    coeff[2]=(i/curveDetail) * 0.5;
	    coeff[3]=0.5;
	    vertex[0]=coeff[0]*(-args[0] + (3*args[3]) - (3*args[6]) +args[9]) +
	              coeff[1]*((2*args[0]) - (5*args[3]) + (4*args[6]) - args[9]) +
	              coeff[2]*(-args[0] + args[6]) +
	              coeff[3]*(2*args[3]);
	    vertex[1]=coeff[0]*(-args[1] + (3*args[4]) - (3*args[7]) +args[10]) +
	              coeff[1]*((2*args[1]) - (5*args[4]) + (4*args[7]) - args[10]) +
	              coeff[2]*(-args[1] + args[7]) +
	              coeff[3]*(2*args[4]);
	    vertex[2]=coeff[0]*(-args[2] + (3*args[5]) - (3*args[8]) +args[11]) +
	              coeff[1]*((2*args[2]) - (5*args[5]) + (4*args[8]) - args[11]) +
	              coeff[2]*(-args[2] + args[8]) +
	              coeff[3]*(2*args[5]);
	    this.vertex(vertex[0],vertex[1],vertex[2]);
	  }
	  this.endShape();
	  return this;
	};

	module.exports = p5;

	},{"../core/core":37,"./p5.Geometry":82}],88:[function(_dereq_,module,exports){


	module.exports = {
	  immediateVert:
	    "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nvarying vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition * vec3(1.0, -1.0, 1.0), 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n",
	  vertexColorVert:
	    "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition * vec3(1.0, -1.0, 1.0), 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n",
	  vertexColorFrag:
	    "precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}",
	  normalVert:
	    "attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying vec3 vVertexNormal;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition * vec3(1.0, -1.0, 1.0), 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = vec3( uNormalMatrix * aNormal );\n  vVertTexCoord = aTexCoord;\n}\n",
	  normalFrag:
	    "precision mediump float;\nvarying vec3 vVertexNormal;\nvoid main(void) {\n  gl_FragColor = vec4(vVertexNormal, 1.0);\n}",
	  basicFrag:
	    "precision mediump float;\nvarying vec3 vVertexNormal;\nuniform vec4 uMaterialColor;\nvoid main(void) {\n  gl_FragColor = uMaterialColor;\n}",
	  lightVert:
	    "attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\nuniform int uDirectionalLightCount;\nuniform int uPointLightCount;\n\nuniform vec3 uAmbientColor[8];\nuniform vec3 uLightingDirection[8];\nuniform vec3 uDirectionalColor[8];\nuniform vec3 uPointLightLocation[8];\nuniform vec3 uPointLightColor[8];\nuniform bool uSpecular;\n\nvarying vec3 vVertexNormal;\nvarying vec2 vVertTexCoord;\nvarying vec3 vLightWeighting;\n\nvec3 ambientLightFactor = vec3(0.0, 0.0, 0.0);\nvec3 directionalLightFactor = vec3(0.0, 0.0, 0.0);\nvec3 pointLightFactor = vec3(0.0, 0.0, 0.0);\nvec3 pointLightFactor2 = vec3(0.0, 0.0, 0.0);\n\nvoid main(void){\n\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\n  vec3 vertexNormal = vec3( uNormalMatrix * aNormal );\n  vVertexNormal = vertexNormal;\n  vVertTexCoord = aTexCoord;\n\n  vec4 mvPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  vec3 eyeDirection = normalize(-mvPosition.xyz);\n\n  float shininess = 32.0;\n  float specularFactor = 2.0;\n  float diffuseFactor = 0.3;\n\n  for(int i = 0; i < 8; i++){\n    if(uAmbientLightCount == i) break;\n    ambientLightFactor += uAmbientColor[i];\n  }\n\n  for(int j = 0; j < 8; j++){\n    if(uDirectionalLightCount == j) break;\n    vec3 dir = uLightingDirection[j];\n    float directionalLightWeighting = max(dot(vertexNormal, dir), 0.0);\n    directionalLightFactor += uDirectionalColor[j] * directionalLightWeighting;\n  }\n\n  for(int k = 0; k < 8; k++){\n    if(uPointLightCount == k) break;\n    vec3 loc = uPointLightLocation[k];\n    vec3 lightDirection = normalize(loc - mvPosition.xyz);\n\n    float directionalLightWeighting = max(dot(vertexNormal, lightDirection), 0.0);\n    pointLightFactor += uPointLightColor[k] * directionalLightWeighting;\n\n    //factor2 for specular\n    vec3 reflectionDirection = reflect(-lightDirection, vertexNormal);\n    float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n\n    pointLightFactor2 += uPointLightColor[k] * (specularFactor * specularLightWeighting\n      +  directionalLightWeighting * diffuseFactor);\n  }\n\n  if(!uSpecular){\n    vLightWeighting =  ambientLightFactor + directionalLightFactor + pointLightFactor;\n  }else{\n    vLightWeighting = ambientLightFactor + directionalLightFactor + pointLightFactor2;\n  }\n\n}\n",
	  lightTextureFrag:
	    "precision mediump float;\n\nuniform vec4 uMaterialColor;\nuniform sampler2D uSampler;\nuniform bool isTexture;\n\nvarying vec3 vLightWeighting;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  if(!isTexture){\n    gl_FragColor = vec4(vec3(uMaterialColor.rgb * vLightWeighting), uMaterialColor.a);\n  }else{\n    vec4 textureColor = texture2D(uSampler, vVertTexCoord);\n    if(vLightWeighting == vec3(0., 0., 0.)){\n      gl_FragColor = textureColor;\n    }else{\n      gl_FragColor = vec4(vec3(textureColor.rgb * vLightWeighting), textureColor.a);\n    }\n  }\n}"
	};
	},{}]},{},[28])(28)
	});

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! p5.sound.js v0.3.2 2016-11-01 */
	(function (root, factory) {
	  if (true)
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(67)], __WEBPACK_AMD_DEFINE_RESULT__ = function (p5) { (factory(p5));}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  else if (typeof exports === 'object')
	    factory(require('../p5'));
	  else
	    factory(root['p5']);
	}(this, function (p5) {
	  /**
	 *  p5.sound extends p5 with <a href="http://caniuse.com/audio-api"
	 *  target="_blank">Web Audio</a> functionality including audio input,
	 *  playback, analysis and synthesis.
	 *  <br/><br/>
	 *  <a href="#/p5.SoundFile"><b>p5.SoundFile</b></a>: Load and play sound files.<br/>
	 *  <a href="#/p5.Amplitude"><b>p5.Amplitude</b></a>: Get the current volume of a sound.<br/>
	 *  <a href="#/p5.AudioIn"><b>p5.AudioIn</b></a>: Get sound from an input source, typically
	 *    a computer microphone.<br/>
	 *  <a href="#/p5.FFT"><b>p5.FFT</b></a>: Analyze the frequency of sound. Returns
	 *    results from the frequency spectrum or time domain (waveform).<br/>
	 *  <a href="#/p5.Oscillator"><b>p5.Oscillator</b></a>: Generate Sine,
	 *    Triangle, Square and Sawtooth waveforms. Base class of
	 *    <a href="#/p5.Noise">p5.Noise</a> and <a href="#/p5.Pulse">p5.Pulse</a>.
	 *    <br/>
	 *  <a href="#/p5.Env"><b>p5.Env</b></a>: An Envelope is a series
	 *    of fades over time. Often used to control an object's
	 *    output gain level as an "ADSR Envelope" (Attack, Decay,
	 *    Sustain, Release). Can also modulate other parameters.<br/>
	 *  <a href="#/p5.Delay"><b>p5.Delay</b></a>: A delay effect with
	 *    parameters for feedback, delayTime, and lowpass filter.<br/>
	 *  <a href="#/p5.Filter"><b>p5.Filter</b></a>: Filter the frequency range of a
	 *    sound.
	 *  <br/>
	 *  <a href="#/p5.Reverb"><b>p5.Reverb</b></a>: Add reverb to a sound by specifying
	 *    duration and decay. <br/>
	 *  <b><a href="#/p5.Convolver">p5.Convolver</a>:</b> Extends
	 *  <a href="#/p5.Reverb">p5.Reverb</a> to simulate the sound of real
	 *    physical spaces through convolution.<br/>
	 *  <b><a href="#/p5.SoundRecorder">p5.SoundRecorder</a></b>: Record sound for playback 
	 *    / save the .wav file.
	 *  <b><a href="#/p5.Phrase">p5.Phrase</a></b>, <b><a href="#/p5.Part">p5.Part</a></b> and
	 *  <b><a href="#/p5.Score">p5.Score</a></b>: Compose musical sequences.
	 *  <br/><br/>
	 *  p5.sound is on <a href="https://github.com/therewasaguy/p5.sound/">GitHub</a>.
	 *  Download the latest version 
	 *  <a href="https://github.com/therewasaguy/p5.sound/blob/master/lib/p5.sound.js">here</a>.
	 *  
	 *  @module p5.sound
	 *  @submodule p5.sound
	 *  @for p5.sound
	 *  @main
	 */
	/**
	 *  p5.sound developed by Jason Sigal for the Processing Foundation, Google Summer of Code 2014. The MIT License (MIT).
	 *  
	 *  http://github.com/therewasaguy/p5.sound
	 *
	 *  Some of the many audio libraries & resources that inspire p5.sound:
	 *   - TONE.js (c) Yotam Mann, 2014. Licensed under The MIT License (MIT). https://github.com/TONEnoTONE/Tone.js
	 *   - buzz.js (c) Jay Salvat, 2013. Licensed under The MIT License (MIT). http://buzz.jaysalvat.com/
	 *   - Boris Smus Web Audio API book, 2013. Licensed under the Apache License http://www.apache.org/licenses/LICENSE-2.0
	 *   - wavesurfer.js https://github.com/katspaugh/wavesurfer.js
	 *   - Web Audio Components by Jordan Santell https://github.com/web-audio-components
	 *   - Wilm Thoben's Sound library for Processing https://github.com/processing/processing/tree/master/java/libraries/sound
	 *   
	 *   Web Audio API: http://w3.org/TR/webaudio/
	 */
	var sndcore;
	sndcore = function () {
	  'use strict';
	  /* AudioContext Monkeypatch
	     Copyright 2013 Chris Wilson
	     Licensed under the Apache License, Version 2.0 (the "License");
	     you may not use this file except in compliance with the License.
	     You may obtain a copy of the License at
	         http://www.apache.org/licenses/LICENSE-2.0
	     Unless required by applicable law or agreed to in writing, software
	     distributed under the License is distributed on an "AS IS" BASIS,
	     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	     See the License for the specific language governing permissions and
	     limitations under the License.
	  */
	  (function (global, exports, perf) {
	    exports = exports || {};
	    'use strict';
	    function fixSetTarget(param) {
	      if (!param)
	        // if NYI, just return
	        return;
	      if (!param.setTargetAtTime)
	        param.setTargetAtTime = param.setTargetValueAtTime;
	    }
	    if (window.hasOwnProperty('webkitAudioContext') && !window.hasOwnProperty('AudioContext')) {
	      window.AudioContext = webkitAudioContext;
	      if (typeof AudioContext.prototype.createGain !== 'function')
	        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;
	      if (typeof AudioContext.prototype.createDelay !== 'function')
	        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;
	      if (typeof AudioContext.prototype.createScriptProcessor !== 'function')
	        AudioContext.prototype.createScriptProcessor = AudioContext.prototype.createJavaScriptNode;
	      if (typeof AudioContext.prototype.createPeriodicWave !== 'function')
	        AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;
	      AudioContext.prototype.internal_createGain = AudioContext.prototype.createGain;
	      AudioContext.prototype.createGain = function () {
	        var node = this.internal_createGain();
	        fixSetTarget(node.gain);
	        return node;
	      };
	      AudioContext.prototype.internal_createDelay = AudioContext.prototype.createDelay;
	      AudioContext.prototype.createDelay = function (maxDelayTime) {
	        var node = maxDelayTime ? this.internal_createDelay(maxDelayTime) : this.internal_createDelay();
	        fixSetTarget(node.delayTime);
	        return node;
	      };
	      AudioContext.prototype.internal_createBufferSource = AudioContext.prototype.createBufferSource;
	      AudioContext.prototype.createBufferSource = function () {
	        var node = this.internal_createBufferSource();
	        if (!node.start) {
	          node.start = function (when, offset, duration) {
	            if (offset || duration)
	              this.noteGrainOn(when || 0, offset, duration);
	            else
	              this.noteOn(when || 0);
	          };
	        } else {
	          node.internal_start = node.start;
	          node.start = function (when, offset, duration) {
	            if (typeof duration !== 'undefined')
	              node.internal_start(when || 0, offset, duration);
	            else
	              node.internal_start(when || 0, offset || 0);
	          };
	        }
	        if (!node.stop) {
	          node.stop = function (when) {
	            this.noteOff(when || 0);
	          };
	        } else {
	          node.internal_stop = node.stop;
	          node.stop = function (when) {
	            node.internal_stop(when || 0);
	          };
	        }
	        fixSetTarget(node.playbackRate);
	        return node;
	      };
	      AudioContext.prototype.internal_createDynamicsCompressor = AudioContext.prototype.createDynamicsCompressor;
	      AudioContext.prototype.createDynamicsCompressor = function () {
	        var node = this.internal_createDynamicsCompressor();
	        fixSetTarget(node.threshold);
	        fixSetTarget(node.knee);
	        fixSetTarget(node.ratio);
	        fixSetTarget(node.reduction);
	        fixSetTarget(node.attack);
	        fixSetTarget(node.release);
	        return node;
	      };
	      AudioContext.prototype.internal_createBiquadFilter = AudioContext.prototype.createBiquadFilter;
	      AudioContext.prototype.createBiquadFilter = function () {
	        var node = this.internal_createBiquadFilter();
	        fixSetTarget(node.frequency);
	        fixSetTarget(node.detune);
	        fixSetTarget(node.Q);
	        fixSetTarget(node.gain);
	        return node;
	      };
	      if (typeof AudioContext.prototype.createOscillator !== 'function') {
	        AudioContext.prototype.internal_createOscillator = AudioContext.prototype.createOscillator;
	        AudioContext.prototype.createOscillator = function () {
	          var node = this.internal_createOscillator();
	          if (!node.start) {
	            node.start = function (when) {
	              this.noteOn(when || 0);
	            };
	          } else {
	            node.internal_start = node.start;
	            node.start = function (when) {
	              node.internal_start(when || 0);
	            };
	          }
	          if (!node.stop) {
	            node.stop = function (when) {
	              this.noteOff(when || 0);
	            };
	          } else {
	            node.internal_stop = node.stop;
	            node.stop = function (when) {
	              node.internal_stop(when || 0);
	            };
	          }
	          if (!node.setPeriodicWave)
	            node.setPeriodicWave = node.setWaveTable;
	          fixSetTarget(node.frequency);
	          fixSetTarget(node.detune);
	          return node;
	        };
	      }
	    }
	    if (window.hasOwnProperty('webkitOfflineAudioContext') && !window.hasOwnProperty('OfflineAudioContext')) {
	      window.OfflineAudioContext = webkitOfflineAudioContext;
	    }
	    return exports;
	  }(window));
	  // <-- end MonkeyPatch.
	  // Create the Audio Context
	  var audiocontext = new window.AudioContext();
	  /**
	   * <p>Returns the Audio Context for this sketch. Useful for users
	   * who would like to dig deeper into the <a target='_blank' href=
	   * 'http://webaudio.github.io/web-audio-api/'>Web Audio API
	   * </a>.</p>
	   *
	   * @method getAudioContext
	   * @return {Object}    AudioContext for this sketch
	   */
	  p5.prototype.getAudioContext = function () {
	    return audiocontext;
	  };
	  // Polyfill for AudioIn, also handled by p5.dom createCapture
	  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
	  /**
	   * Determine which filetypes are supported (inspired by buzz.js)
	   * The audio element (el) will only be used to test browser support for various audio formats
	   */
	  var el = document.createElement('audio');
	  p5.prototype.isSupported = function () {
	    return !!el.canPlayType;
	  };
	  var isOGGSupported = function () {
	    return !!el.canPlayType && el.canPlayType('audio/ogg; codecs="vorbis"');
	  };
	  var isMP3Supported = function () {
	    return !!el.canPlayType && el.canPlayType('audio/mpeg;');
	  };
	  var isWAVSupported = function () {
	    return !!el.canPlayType && el.canPlayType('audio/wav; codecs="1"');
	  };
	  var isAACSupported = function () {
	    return !!el.canPlayType && (el.canPlayType('audio/x-m4a;') || el.canPlayType('audio/aac;'));
	  };
	  var isAIFSupported = function () {
	    return !!el.canPlayType && el.canPlayType('audio/x-aiff;');
	  };
	  p5.prototype.isFileSupported = function (extension) {
	    switch (extension.toLowerCase()) {
	    case 'mp3':
	      return isMP3Supported();
	    case 'wav':
	      return isWAVSupported();
	    case 'ogg':
	      return isOGGSupported();
	    case 'aac', 'm4a', 'mp4':
	      return isAACSupported();
	    case 'aif', 'aiff':
	      return isAIFSupported();
	    default:
	      return false;
	    }
	  };
	  // if it is iOS, we have to have a user interaction to start Web Audio
	  // http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
	  var iOS = navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false;
	  if (iOS) {
	    var iosStarted = false;
	    var startIOS = function () {
	      if (iosStarted)
	        return;
	      // create empty buffer
	      var buffer = audiocontext.createBuffer(1, 1, 22050);
	      var source = audiocontext.createBufferSource();
	      source.buffer = buffer;
	      // connect to output (your speakers)
	      source.connect(audiocontext.destination);
	      // play the file
	      source.start(0);
	      console.log('start ios!');
	      if (audiocontext.state === 'running') {
	        iosStarted = true;
	      }
	    };
	    document.addEventListener('touchend', startIOS, false);
	    document.addEventListener('touchstart', startIOS, false);
	  }
	}();
	var master;
	master = function () {
	  'use strict';
	  /**
	   * Master contains AudioContext and the master sound output.
	   */
	  var Master = function () {
	    var audiocontext = p5.prototype.getAudioContext();
	    this.input = audiocontext.createGain();
	    this.output = audiocontext.createGain();
	    //put a hard limiter on the output
	    this.limiter = audiocontext.createDynamicsCompressor();
	    this.limiter.threshold.value = 0;
	    this.limiter.ratio.value = 20;
	    this.audiocontext = audiocontext;
	    this.output.disconnect();
	    // an array of input sources
	    this.inputSources = [];
	    // connect input to limiter
	    this.input.connect(this.limiter);
	    // connect limiter to output
	    this.limiter.connect(this.output);
	    // meter is just for global Amplitude / FFT analysis
	    this.meter = audiocontext.createGain();
	    this.fftMeter = audiocontext.createGain();
	    this.output.connect(this.meter);
	    this.output.connect(this.fftMeter);
	    // connect output to destination
	    this.output.connect(this.audiocontext.destination);
	    // an array of all sounds in the sketch
	    this.soundArray = [];
	    // an array of all musical parts in the sketch
	    this.parts = [];
	    // file extensions to search for
	    this.extensions = [];
	  };
	  // create a single instance of the p5Sound / master output for use within this sketch
	  var p5sound = new Master();
	  /**
	   * Returns a number representing the master amplitude (volume) for sound
	   * in this sketch.
	   *
	   * @method getMasterVolume
	   * @return {Number} Master amplitude (volume) for sound in this sketch.
	   *                  Should be between 0.0 (silence) and 1.0.
	   */
	  p5.prototype.getMasterVolume = function () {
	    return p5sound.output.gain.value;
	  };
	  /**
	   *  <p>Scale the output of all sound in this sketch</p>
	   *  Scaled between 0.0 (silence) and 1.0 (full volume).
	   *  1.0 is the maximum amplitude of a digital sound, so multiplying
	   *  by greater than 1.0 may cause digital distortion. To
	   *  fade, provide a <code>rampTime</code> parameter. For more
	   *  complex fades, see the Env class.
	   *
	   *  Alternately, you can pass in a signal source such as an
	   *  oscillator to modulate the amplitude with an audio signal.
	   *
	   *  <p><b>How This Works</b>: When you load the p5.sound module, it
	   *  creates a single instance of p5sound. All sound objects in this
	   *  module output to p5sound before reaching your computer's output.
	   *  So if you change the amplitude of p5sound, it impacts all of the
	   *  sound in this module.</p>
	   *
	   *  <p>If no value is provided, returns a Web Audio API Gain Node</p>
	   *
	   *  @method  masterVolume
	   *  @param {Number|Object} volume  Volume (amplitude) between 0.0
	   *                                     and 1.0 or modulating signal/oscillator
	   *  @param {Number} [rampTime]  Fade for t seconds
	   *  @param {Number} [timeFromNow]  Schedule this event to happen at
	   *                                 t seconds in the future
	   */
	  p5.prototype.masterVolume = function (vol, rampTime, tFromNow) {
	    if (typeof vol === 'number') {
	      var rampTime = rampTime || 0;
	      var tFromNow = tFromNow || 0;
	      var now = p5sound.audiocontext.currentTime;
	      var currentVol = p5sound.output.gain.value;
	      p5sound.output.gain.cancelScheduledValues(now + tFromNow);
	      p5sound.output.gain.linearRampToValueAtTime(currentVol, now + tFromNow);
	      p5sound.output.gain.linearRampToValueAtTime(vol, now + tFromNow + rampTime);
	    } else if (vol) {
	      vol.connect(p5sound.output.gain);
	    } else {
	      // return the Gain Node
	      return p5sound.output.gain;
	    }
	  };
	  /**
	   *  `p5.soundOut` is the p5.sound master output. It sends output to
	   *  the destination of this window's web audio context. It contains
	   *  Web Audio API nodes including a dyanmicsCompressor (<code>.limiter</code>),
	   *  and Gain Nodes for <code>.input</code> and <code>.output</code>.
	   *
	   *  @property soundOut
	   *  @type {Object}
	   */
	  p5.prototype.soundOut = p5.soundOut = p5sound;
	  /**
	   *  a silent connection to the DesinationNode
	   *  which will ensure that anything connected to it
	   *  will not be garbage collected
	   *
	   *  @private
	   */
	  p5.soundOut._silentNode = p5sound.audiocontext.createGain();
	  p5.soundOut._silentNode.gain.value = 0;
	  p5.soundOut._silentNode.connect(p5sound.audiocontext.destination);
	  return p5sound;
	}(sndcore);
	var helpers;
	helpers = function () {
	  'use strict';
	  var p5sound = master;
	  /**
	   * Returns a number representing the sample rate, in samples per second,
	   * of all sound objects in this audio context. It is determined by the
	   * sampling rate of your operating system's sound card, and it is not
	   * currently possile to change.
	   * It is often 44100, or twice the range of human hearing.
	   *
	   * @method sampleRate
	   * @return {Number} samplerate samples per second
	   */
	  p5.prototype.sampleRate = function () {
	    return p5sound.audiocontext.sampleRate;
	  };
	  /**
	   *  Returns the closest MIDI note value for
	   *  a given frequency.
	   *  
	   *  @param  {Number} frequency A freqeuncy, for example, the "A"
	   *                             above Middle C is 440Hz
	   *  @return {Number}   MIDI note value
	   */
	  p5.prototype.freqToMidi = function (f) {
	    var mathlog2 = Math.log(f / 440) / Math.log(2);
	    var m = Math.round(12 * mathlog2) + 57;
	    return m;
	  };
	  /**
	   *  Returns the frequency value of a MIDI note value.
	   *  General MIDI treats notes as integers where middle C
	   *  is 60, C# is 61, D is 62 etc. Useful for generating
	   *  musical frequencies with oscillators.
	   *  
	   *  @method  midiToFreq
	   *  @param  {Number} midiNote The number of a MIDI note
	   *  @return {Number} Frequency value of the given MIDI note
	   *  @example
	   *  <div><code>
	   *  var notes = [60, 64, 67, 72];
	   *  var i = 0;
	   *  
	   *  function setup() {
	   *    osc = new p5.Oscillator('Triangle');
	   *    osc.start();
	   *    frameRate(1);
	   *  }
	   *  
	   *  function draw() {
	   *    var freq = midiToFreq(notes[i]);
	   *    osc.freq(freq);
	   *    i++;
	   *    if (i >= notes.length){
	   *      i = 0;
	   *    }
	   *  }
	   *  </code></div>
	   */
	  p5.prototype.midiToFreq = function (m) {
	    return 440 * Math.pow(2, (m - 69) / 12);
	  };
	  /**
	   *  List the SoundFile formats that you will include. LoadSound 
	   *  will search your directory for these extensions, and will pick
	   *  a format that is compatable with the client's web browser.
	   *  <a href="http://media.io/">Here</a> is a free online file
	   *  converter.
	   *  
	   *  @method soundFormats
	   *  @param {String|Strings} formats i.e. 'mp3', 'wav', 'ogg'
	   *  @example
	   *  <div><code>
	   *  function preload() {
	   *    // set the global sound formats
	   *    soundFormats('mp3', 'ogg');
	   *    
	   *    // load either beatbox.mp3, or .ogg, depending on browser
	   *    mySound = loadSound('../sounds/beatbox.mp3');
	   *  }
	   *
	   *  function setup() {
	   *    mySound.play();
	   *  }
	   *  </code></div>
	   */
	  p5.prototype.soundFormats = function () {
	    // reset extensions array
	    p5sound.extensions = [];
	    // add extensions
	    for (var i = 0; i < arguments.length; i++) {
	      arguments[i] = arguments[i].toLowerCase();
	      if ([
	          'mp3',
	          'wav',
	          'ogg',
	          'm4a',
	          'aac'
	        ].indexOf(arguments[i]) > -1) {
	        p5sound.extensions.push(arguments[i]);
	      } else {
	        throw arguments[i] + ' is not a valid sound format!';
	      }
	    }
	  };
	  p5.prototype.disposeSound = function () {
	    for (var i = 0; i < p5sound.soundArray.length; i++) {
	      p5sound.soundArray[i].dispose();
	    }
	  };
	  // register removeSound to dispose of p5sound SoundFiles, Convolvers,
	  // Oscillators etc when sketch ends
	  p5.prototype.registerMethod('remove', p5.prototype.disposeSound);
	  p5.prototype._checkFileFormats = function (paths) {
	    var path;
	    // if path is a single string, check to see if extension is provided
	    if (typeof paths === 'string') {
	      path = paths;
	      // see if extension is provided
	      var extTest = path.split('.').pop();
	      // if an extension is provided...
	      if ([
	          'mp3',
	          'wav',
	          'ogg',
	          'm4a',
	          'aac'
	        ].indexOf(extTest) > -1) {
	        var supported = p5.prototype.isFileSupported(extTest);
	        if (supported) {
	          path = path;
	        } else {
	          var pathSplit = path.split('.');
	          var pathCore = pathSplit[pathSplit.length - 1];
	          for (var i = 0; i < p5sound.extensions.length; i++) {
	            var extension = p5sound.extensions[i];
	            var supported = p5.prototype.isFileSupported(extension);
	            if (supported) {
	              pathCore = '';
	              if (pathSplit.length === 2) {
	                pathCore += pathSplit[0];
	              }
	              for (var i = 1; i <= pathSplit.length - 2; i++) {
	                var p = pathSplit[i];
	                pathCore += '.' + p;
	              }
	              path = pathCore += '.';
	              path = path += extension;
	              break;
	            }
	          }
	        }
	      } else {
	        for (var i = 0; i < p5sound.extensions.length; i++) {
	          var extension = p5sound.extensions[i];
	          var supported = p5.prototype.isFileSupported(extension);
	          if (supported) {
	            path = path + '.' + extension;
	            break;
	          }
	        }
	      }
	    } else if (typeof paths === 'object') {
	      for (var i = 0; i < paths.length; i++) {
	        var extension = paths[i].split('.').pop();
	        var supported = p5.prototype.isFileSupported(extension);
	        if (supported) {
	          // console.log('.'+extension + ' is ' + supported +
	          //  ' supported by your browser.');
	          path = paths[i];
	          break;
	        }
	      }
	    }
	    return path;
	  };
	  /**
	   *  Used by Osc and Env to chain signal math
	   */
	  p5.prototype._mathChain = function (o, math, thisChain, nextChain, type) {
	    // if this type of math already exists in the chain, replace it
	    for (var i in o.mathOps) {
	      if (o.mathOps[i] instanceof type) {
	        o.mathOps[i].dispose();
	        thisChain = i;
	        if (thisChain < o.mathOps.length - 1) {
	          nextChain = o.mathOps[i + 1];
	        }
	      }
	    }
	    o.mathOps[thisChain - 1].disconnect();
	    o.mathOps[thisChain - 1].connect(math);
	    math.connect(nextChain);
	    o.mathOps[thisChain] = math;
	    return o;
	  };
	}(master);
	var errorHandler;
	errorHandler = function () {
	  'use strict';
	  /**
	   *  Helper function to generate an error
	   *  with a custom stack trace that points to the sketch
	   *  and removes other parts of the stack trace.
	   *  
	   *  @private
	   *  
	   *  @param  {String} name         custom  error name
	   *  @param  {String} errorTrace   custom error trace
	   *  @param  {String} failedPath     path to the file that failed to load
	   *  @property {String} name custom error name
	   *  @property {String} message custom error message
	   *  @property {String} stack trace the error back to a line in the user's sketch.
	   *                           Note: this edits out stack trace within p5.js and p5.sound.
	   *  @property {String} originalStack unedited, original stack trace
	   *  @property {String} failedPath path to the file that failed to load
	   *  @return {Error}     returns a custom Error object
	   */
	  var CustomError = function (name, errorTrace, failedPath) {
	    var err = new Error();
	    var tempStack, splitStack;
	    err.name = name;
	    err.originalStack = err.stack + errorTrace;
	    tempStack = err.stack + errorTrace;
	    err.failedPath = failedPath;
	    // only print the part of the stack trace that refers to the user code:
	    var splitStack = tempStack.split('\n');
	    splitStack = splitStack.filter(function (ln) {
	      return !ln.match(/(p5.|native code|globalInit)/g);
	    });
	    err.stack = splitStack.join('\n');
	    return err;
	  };
	  return CustomError;
	}();
	var panner;
	panner = function () {
	  'use strict';
	  var p5sound = master;
	  var ac = p5sound.audiocontext;
	  // Stereo panner
	  // if there is a stereo panner node use it
	  if (typeof ac.createStereoPanner !== 'undefined') {
	    p5.Panner = function (input, output, numInputChannels) {
	      this.stereoPanner = this.input = ac.createStereoPanner();
	      input.connect(this.stereoPanner);
	      this.stereoPanner.connect(output);
	    };
	    p5.Panner.prototype.pan = function (val, tFromNow) {
	      var time = tFromNow || 0;
	      var t = ac.currentTime + time;
	      this.stereoPanner.pan.linearRampToValueAtTime(val, t);
	    };
	    p5.Panner.prototype.inputChannels = function (numChannels) {
	    };
	    p5.Panner.prototype.connect = function (obj) {
	      this.stereoPanner.connect(obj);
	    };
	    p5.Panner.prototype.disconnect = function (obj) {
	      this.stereoPanner.disconnect();
	    };
	  } else {
	    // if there is no createStereoPanner object
	    // such as in safari 7.1.7 at the time of writing this
	    // use this method to create the effect
	    p5.Panner = function (input, output, numInputChannels) {
	      this.input = ac.createGain();
	      input.connect(this.input);
	      this.left = ac.createGain();
	      this.right = ac.createGain();
	      this.left.channelInterpretation = 'discrete';
	      this.right.channelInterpretation = 'discrete';
	      // if input is stereo
	      if (numInputChannels > 1) {
	        this.splitter = ac.createChannelSplitter(2);
	        this.input.connect(this.splitter);
	        this.splitter.connect(this.left, 1);
	        this.splitter.connect(this.right, 0);
	      } else {
	        this.input.connect(this.left);
	        this.input.connect(this.right);
	      }
	      this.output = ac.createChannelMerger(2);
	      this.left.connect(this.output, 0, 1);
	      this.right.connect(this.output, 0, 0);
	      this.output.connect(output);
	    };
	    // -1 is left, +1 is right
	    p5.Panner.prototype.pan = function (val, tFromNow) {
	      var time = tFromNow || 0;
	      var t = ac.currentTime + time;
	      var v = (val + 1) / 2;
	      var rightVal = Math.cos(v * Math.PI / 2);
	      var leftVal = Math.sin(v * Math.PI / 2);
	      this.left.gain.linearRampToValueAtTime(leftVal, t);
	      this.right.gain.linearRampToValueAtTime(rightVal, t);
	    };
	    p5.Panner.prototype.inputChannels = function (numChannels) {
	      if (numChannels === 1) {
	        this.input.disconnect();
	        this.input.connect(this.left);
	        this.input.connect(this.right);
	      } else if (numChannels === 2) {
	        if (typeof (this.splitter === 'undefined')) {
	          this.splitter = ac.createChannelSplitter(2);
	        }
	        this.input.disconnect();
	        this.input.connect(this.splitter);
	        this.splitter.connect(this.left, 1);
	        this.splitter.connect(this.right, 0);
	      }
	    };
	    p5.Panner.prototype.connect = function (obj) {
	      this.output.connect(obj);
	    };
	    p5.Panner.prototype.disconnect = function (obj) {
	      this.output.disconnect();
	    };
	  }
	  // 3D panner
	  p5.Panner3D = function (input, output) {
	    var panner3D = ac.createPanner();
	    panner3D.panningModel = 'HRTF';
	    panner3D.distanceModel = 'linear';
	    panner3D.setPosition(0, 0, 0);
	    input.connect(panner3D);
	    panner3D.connect(output);
	    panner3D.pan = function (xVal, yVal, zVal) {
	      panner3D.setPosition(xVal, yVal, zVal);
	    };
	    return panner3D;
	  };
	}(master);
	var soundfile;
	soundfile = function () {
	  'use strict';
	  var CustomError = errorHandler;
	  var p5sound = master;
	  var ac = p5sound.audiocontext;
	  /**
	   *  <p>SoundFile object with a path to a file.</p>
	   *  
	   *  <p>The p5.SoundFile may not be available immediately because
	   *  it loads the file information asynchronously.</p>
	   * 
	   *  <p>To do something with the sound as soon as it loads
	   *  pass the name of a function as the second parameter.</p>
	   *  
	   *  <p>Only one file path is required. However, audio file formats 
	   *  (i.e. mp3, ogg, wav and m4a/aac) are not supported by all
	   *  web browsers. If you want to ensure compatability, instead of a single
	   *  file path, you may include an Array of filepaths, and the browser will
	   *  choose a format that works.</p>
	   * 
	   *  @class p5.SoundFile
	   *  @constructor
	   *  @param {String/Array} path   path to a sound file (String). Optionally,
	   *                               you may include multiple file formats in
	   *                               an array. Alternately, accepts an object
	   *                               from the HTML5 File API, or a p5.File.
	   *  @param {Function} [successCallback]   Name of a function to call once file loads
	   *  @param {Function} [errorCallback]   Name of a function to call if file fails to
	   *                                      load. This function will receive an error or
	   *                                     XMLHttpRequest object with information
	   *                                     about what went wrong.
	   *  @param {Function} [whileLoadingCallback]   Name of a function to call while file
	   *                                             is loading. That function will
	   *                                             receive progress of the request to
	   *                                             load the sound file
	   *                                             (between 0 and 1) as its first
	   *                                             parameter. This progress
	   *                                             does not account for the additional
	   *                                             time needed to decode the audio data.
	   *                                             
	   *  @return {Object}    p5.SoundFile Object
	   *  @example 
	   *  <div><code>
	   *  
	   *  function preload() {
	   *    mySound = loadSound('assets/doorbell.mp3');
	   *  }
	   *
	   *  function setup() {
	   *    mySound.setVolume(0.1);
	   *    mySound.play();
	   *  }
	   * 
	   * </code></div>
	   */
	  p5.SoundFile = function (paths, onload, onerror, whileLoading) {
	    if (typeof paths !== 'undefined') {
	      if (typeof paths == 'string' || typeof paths[0] == 'string') {
	        var path = p5.prototype._checkFileFormats(paths);
	        this.url = path;
	      } else if (typeof paths == 'object') {
	        if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
	          // The File API isn't supported in this browser 
	          throw 'Unable to load file because the File API is not supported';
	        }
	      }
	      // if type is a p5.File...get the actual file
	      if (paths.file) {
	        paths = paths.file;
	      }
	      this.file = paths;
	    }
	    // private _onended callback, set by the method: onended(callback)
	    this._onended = function () {
	    };
	    this._looping = false;
	    this._playing = false;
	    this._paused = false;
	    this._pauseTime = 0;
	    // cues for scheduling events with addCue() removeCue()
	    this._cues = [];
	    //  position of the most recently played sample
	    this._lastPos = 0;
	    this._counterNode;
	    this._scopeNode;
	    // array of sources so that they can all be stopped!
	    this.bufferSourceNodes = [];
	    // current source
	    this.bufferSourceNode = null;
	    this.buffer = null;
	    this.playbackRate = 1;
	    this.gain = 1;
	    this.input = p5sound.audiocontext.createGain();
	    this.output = p5sound.audiocontext.createGain();
	    this.reversed = false;
	    // start and end of playback / loop
	    this.startTime = 0;
	    this.endTime = null;
	    this.pauseTime = 0;
	    // "restart" would stop playback before retriggering
	    this.mode = 'sustain';
	    // time that playback was started, in millis
	    this.startMillis = null;
	    // stereo panning
	    this.panPosition = 0;
	    this.panner = new p5.Panner(this.output, p5sound.input, 2);
	    // it is possible to instantiate a soundfile with no path
	    if (this.url || this.file) {
	      this.load(onload, onerror);
	    }
	    // add this p5.SoundFile to the soundArray
	    p5sound.soundArray.push(this);
	    if (typeof whileLoading === 'function') {
	      this._whileLoading = whileLoading;
	    } else {
	      this._whileLoading = function () {
	      };
	    }
	  };
	  // register preload handling of loadSound
	  p5.prototype.registerPreloadMethod('loadSound', p5.prototype);
	  /**
	   *  loadSound() returns a new p5.SoundFile from a specified
	   *  path. If called during preload(), the p5.SoundFile will be ready
	   *  to play in time for setup() and draw(). If called outside of
	   *  preload, the p5.SoundFile will not be ready immediately, so
	   *  loadSound accepts a callback as the second parameter. Using a
	   *  <a href="https://github.com/processing/p5.js/wiki/Local-server">
	   *  local server</a> is recommended when loading external files.
	   *  
	   *  @method loadSound
	   *  @param  {String/Array}   path     Path to the sound file, or an array with
	   *                                    paths to soundfiles in multiple formats
	   *                                    i.e. ['sound.ogg', 'sound.mp3'].
	   *                                    Alternately, accepts an object: either
	   *                                    from the HTML5 File API, or a p5.File.
	   *  @param {Function} [successCallback]   Name of a function to call once file loads
	   *  @param {Function} [errorCallback]   Name of a function to call if there is
	   *                                      an error loading the file.
	   *  @param {Function} [whileLoading] Name of a function to call while file is loading.
	   *                                 This function will receive the percentage loaded
	   *                                 so far, from 0.0 to 1.0.
	   *  @return {SoundFile}            Returns a p5.SoundFile
	   *  @example 
	   *  <div><code>
	   *  function preload() {
	   *   mySound = loadSound('assets/doorbell.mp3');
	   *  }
	   *
	   *  function setup() {
	   *    mySound.setVolume(0.1);
	   *    mySound.play();
	   *  }
	   *  </code></div>
	   */
	  p5.prototype.loadSound = function (path, callback, onerror, whileLoading) {
	    // if loading locally without a server
	    if (window.location.origin.indexOf('file://') > -1 && window.cordova === 'undefined') {
	      alert('This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS');
	    }
	    var s = new p5.SoundFile(path, callback, onerror, whileLoading);
	    return s;
	  };
	  /**
	   * This is a helper function that the p5.SoundFile calls to load
	   * itself. Accepts a callback (the name of another function)
	   * as an optional parameter.
	   *
	   * @private
	   * @param {Function} [successCallback]   Name of a function to call once file loads
	   * @param {Function} [errorCallback]   Name of a function to call if there is an error
	   */
	  p5.SoundFile.prototype.load = function (callback, errorCallback) {
	    var loggedError = false;
	    var self = this;
	    var errorTrace = new Error().stack;
	    if (this.url != undefined && this.url != '') {
	      var request = new XMLHttpRequest();
	      request.addEventListener('progress', function (evt) {
	        self._updateProgress(evt);
	      }, false);
	      request.open('GET', this.url, true);
	      request.responseType = 'arraybuffer';
	      request.onload = function () {
	        if (request.status == 200) {
	          // on sucess loading file:
	          ac.decodeAudioData(request.response, // success decoding buffer:
	          function (buff) {
	            self.buffer = buff;
	            self.panner.inputChannels(buff.numberOfChannels);
	            if (callback) {
	              callback(self);
	            }
	          }, // error decoding buffer. "e" is undefined in Chrome 11/22/2015
	          function (e) {
	            var err = new CustomError('decodeAudioData', errorTrace, self.url);
	            var msg = 'AudioContext error at decodeAudioData for ' + self.url;
	            if (errorCallback) {
	              err.msg = msg;
	              errorCallback(err);
	            } else {
	              console.error(msg + '\n The error stack trace includes: \n' + err.stack);
	            }
	          });
	        } else {
	          var err = new CustomError('loadSound', errorTrace, self.url);
	          var msg = 'Unable to load ' + self.url + '. The request status was: ' + request.status + ' (' + request.statusText + ')';
	          if (errorCallback) {
	            err.message = msg;
	            errorCallback(err);
	          } else {
	            console.error(msg + '\n The error stack trace includes: \n' + err.stack);
	          }
	        }
	      };
	      // if there is another error, aside from 404...
	      request.onerror = function (e) {
	        var err = new CustomError('loadSound', errorTrace, self.url);
	        var msg = 'There was no response from the server at ' + self.url + '. Check the url and internet connectivity.';
	        if (errorCallback) {
	          err.message = msg;
	          errorCallback(err);
	        } else {
	          console.error(msg + '\n The error stack trace includes: \n' + err.stack);
	        }
	      };
	      request.send();
	    } else if (this.file != undefined) {
	      var reader = new FileReader();
	      var self = this;
	      reader.onload = function () {
	        ac.decodeAudioData(reader.result, function (buff) {
	          self.buffer = buff;
	          self.panner.inputChannels(buff.numberOfChannels);
	          if (callback) {
	            callback(self);
	          }
	        });
	      };
	      reader.onerror = function (e) {
	        if (onerror)
	          onerror(e);
	      };
	      reader.readAsArrayBuffer(this.file);
	    }
	  };
	  // TO DO: use this method to create a loading bar that shows progress during file upload/decode.
	  p5.SoundFile.prototype._updateProgress = function (evt) {
	    if (evt.lengthComputable) {
	      var percentComplete = evt.loaded / evt.total * 0.99;
	      this._whileLoading(percentComplete, evt);
	    } else {
	      // Unable to compute progress information since the total size is unknown
	      this._whileLoading('size unknown');
	    }
	  };
	  /**
	   *  Returns true if the sound file finished loading successfully.
	   *  
	   *  @method  isLoaded
	   *  @return {Boolean} 
	   */
	  p5.SoundFile.prototype.isLoaded = function () {
	    if (this.buffer) {
	      return true;
	    } else {
	      return false;
	    }
	  };
	  /**
	   * Play the p5.SoundFile
	   *
	   * @method play
	   * @param {Number} [startTime]            (optional) schedule playback to start (in seconds from now).
	   * @param {Number} [rate]             (optional) playback rate
	   * @param {Number} [amp]              (optional) amplitude (volume)
	   *                                     of playback
	   * @param {Number} [cueStart]        (optional) cue start time in seconds
	   * @param {Number} [duration]          (optional) duration of playback in seconds
	   */
	  p5.SoundFile.prototype.play = function (time, rate, amp, _cueStart, duration) {
	    var self = this;
	    var now = p5sound.audiocontext.currentTime;
	    var cueStart, cueEnd;
	    var time = time || 0;
	    if (time < 0) {
	      time = 0;
	    }
	    time = time + now;
	    // TO DO: if already playing, create array of buffers for easy stop()
	    if (this.buffer) {
	      // reset the pause time (if it was paused)
	      this._pauseTime = 0;
	      // handle restart playmode
	      if (this.mode === 'restart' && this.buffer && this.bufferSourceNode) {
	        var now = p5sound.audiocontext.currentTime;
	        this.bufferSourceNode.stop(time);
	        this._counterNode.stop(time);
	      }
	      // set playback rate
	      if (rate)
	        this.playbackRate = rate;
	      // make a new source and counter. They are automatically assigned playbackRate and buffer
	      this.bufferSourceNode = this._initSourceNode();
	      // garbage collect counterNode and create a new one
	      if (this._counterNode)
	        this._counterNode = undefined;
	      this._counterNode = this._initCounterNode();
	      if (_cueStart) {
	        if (_cueStart >= 0 && _cueStart < this.buffer.duration) {
	          // this.startTime = cueStart;
	          cueStart = _cueStart;
	        } else {
	          throw 'start time out of range';
	        }
	      } else {
	        cueStart = 0;
	      }
	      if (duration) {
	        // if duration is greater than buffer.duration, just play entire file anyway rather than throw an error
	        duration = duration <= this.buffer.duration - cueStart ? duration : this.buffer.duration;
	      } else {
	        duration = this.buffer.duration - cueStart;
	      }
	      // TO DO: Fix this. It broke in Safari
	      // 
	      // method of controlling gain for individual bufferSourceNodes, without resetting overall soundfile volume
	      // if (typeof(this.bufferSourceNode.gain === 'undefined' ) ) {
	      //   this.bufferSourceNode.gain = p5sound.audiocontext.createGain();
	      // }
	      // this.bufferSourceNode.connect(this.bufferSourceNode.gain);
	      // set local amp if provided, otherwise 1
	      var a = amp || 1;
	      // this.bufferSourceNode.gain.gain.setValueAtTime(a, p5sound.audiocontext.currentTime);
	      // this.bufferSourceNode.gain.connect(this.output); 
	      this.bufferSourceNode.connect(this.output);
	      this.output.gain.value = a;
	      // if it was paused, play at the pause position
	      if (this._paused) {
	        this.bufferSourceNode.start(time, this.pauseTime, duration);
	        this._counterNode.start(time, this.pauseTime, duration);
	      } else {
	        this.bufferSourceNode.start(time, cueStart, duration);
	        this._counterNode.start(time, cueStart, duration);
	      }
	      this._playing = true;
	      this._paused = false;
	      // add source to sources array, which is used in stopAll()
	      this.bufferSourceNodes.push(this.bufferSourceNode);
	      this.bufferSourceNode._arrayIndex = this.bufferSourceNodes.length - 1;
	      // delete this.bufferSourceNode from the sources array when it is done playing:
	      var clearOnEnd = function (e) {
	        this._playing = false;
	        this.removeEventListener('ended', clearOnEnd, false);
	        // call the onended callback
	        self._onended(self);
	        self.bufferSourceNodes.forEach(function (n, i) {
	          if (n._playing === false) {
	            self.bufferSourceNodes.splice(i);
	          }
	        });
	        if (self.bufferSourceNodes.length === 0) {
	          self._playing = false;
	        }
	      };
	      this.bufferSourceNode.onended = clearOnEnd;
	    } else {
	      throw 'not ready to play file, buffer has yet to load. Try preload()';
	    }
	    // if looping, will restart at original time
	    this.bufferSourceNode.loop = this._looping;
	    this._counterNode.loop = this._looping;
	    if (this._looping === true) {
	      var cueEnd = cueStart + duration;
	      this.bufferSourceNode.loopStart = cueStart;
	      this.bufferSourceNode.loopEnd = cueEnd;
	      this._counterNode.loopStart = cueStart;
	      this._counterNode.loopEnd = cueEnd;
	    }
	  };
	  /**
	   *  p5.SoundFile has two play modes: <code>restart</code> and
	   *  <code>sustain</code>. Play Mode determines what happens to a
	   *  p5.SoundFile if it is triggered while in the middle of playback.
	   *  In sustain mode, playback will continue simultaneous to the
	   *  new playback. In restart mode, play() will stop playback
	   *  and start over. Sustain is the default mode. 
	   *  
	   *  @method  playMode
	   *  @param  {String} str 'restart' or 'sustain'
	   *  @example
	   *  <div><code>
	   *  function setup(){
	   *    mySound = loadSound('assets/Damscray_DancingTiger.mp3');
	   *  }
	   *  function mouseClicked() {
	   *    mySound.playMode('sustain');
	   *    mySound.play();
	   *  }
	   *  function keyPressed() {
	   *    mySound.playMode('restart');
	   *    mySound.play();
	   *  }
	   * 
	   * </code></div>
	   */
	  p5.SoundFile.prototype.playMode = function (str) {
	    var s = str.toLowerCase();
	    // if restart, stop all other sounds from playing
	    if (s === 'restart' && this.buffer && this.bufferSourceNode) {
	      for (var i = 0; i < this.bufferSourceNodes.length - 1; i++) {
	        var now = p5sound.audiocontext.currentTime;
	        this.bufferSourceNodes[i].stop(now);
	      }
	    }
	    // set play mode to effect future playback
	    if (s === 'restart' || s === 'sustain') {
	      this.mode = s;
	    } else {
	      throw 'Invalid play mode. Must be either "restart" or "sustain"';
	    }
	  };
	  /**
	   *  Pauses a file that is currently playing. If the file is not
	   *  playing, then nothing will happen.
	   *
	   *  After pausing, .play() will resume from the paused
	   *  position.
	   *  If p5.SoundFile had been set to loop before it was paused,
	   *  it will continue to loop after it is unpaused with .play().
	   *
	   *  @method pause
	   *  @param {Number} [startTime] (optional) schedule event to occur
	   *                               seconds from now
	   *  @example
	   *  <div><code>
	   *  var soundFile;
	   *  
	   *  function preload() {
	   *    soundFormats('ogg', 'mp3');
	   *    soundFile = loadSound('assets/Damscray_-_Dancing_Tiger_02.mp3');
	   *  }
	   *  function setup() {
	   *    background(0, 255, 0);
	   *    soundFile.setVolume(0.1);
	   *    soundFile.loop();
	   *  }
	   *  function keyTyped() {
	   *    if (key == 'p') {
	   *      soundFile.pause();
	   *      background(255, 0, 0);
	   *    }
	   *  }
	   *  
	   *  function keyReleased() {
	   *    if (key == 'p') {
	   *      soundFile.play();
	   *      background(0, 255, 0);
	   *    }
	   *  }
	   *  </code>
	   *  </div>
	   */
	  p5.SoundFile.prototype.pause = function (time) {
	    var now = p5sound.audiocontext.currentTime;
	    var time = time || 0;
	    var pTime = time + now;
	    if (this.isPlaying() && this.buffer && this.bufferSourceNode) {
	      this.pauseTime = this.currentTime();
	      this.bufferSourceNode.stop(pTime);
	      this._counterNode.stop(pTime);
	      this._paused = true;
	      this._playing = false;
	      this._pauseTime = this.currentTime();
	    } else {
	      this._pauseTime = 0;
	    }
	  };
	  /**
	   * Loop the p5.SoundFile. Accepts optional parameters to set the
	   * playback rate, playback volume, loopStart, loopEnd.
	   *
	   * @method loop
	   * @param {Number} [startTime] (optional) schedule event to occur
	   *                             seconds from now
	   * @param {Number} [rate]        (optional) playback rate
	   * @param {Number} [amp]         (optional) playback volume
	   * @param {Number} [cueLoopStart](optional) startTime in seconds
	   * @param {Number} [duration]  (optional) loop duration in seconds
	   */
	  p5.SoundFile.prototype.loop = function (startTime, rate, amp, loopStart, duration) {
	    this._looping = true;
	    this.play(startTime, rate, amp, loopStart, duration);
	  };
	  /**
	   * Set a p5.SoundFile's looping flag to true or false. If the sound
	   * is currently playing, this change will take effect when it
	   * reaches the end of the current playback. 
	   * 
	   * @param {Boolean} Boolean   set looping to true or false
	   */
	  p5.SoundFile.prototype.setLoop = function (bool) {
	    if (bool === true) {
	      this._looping = true;
	    } else if (bool === false) {
	      this._looping = false;
	    } else {
	      throw 'Error: setLoop accepts either true or false';
	    }
	    if (this.bufferSourceNode) {
	      this.bufferSourceNode.loop = this._looping;
	      this._counterNode.loop = this._looping;
	    }
	  };
	  /**
	   * Returns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not.
	   *
	   * @return {Boolean}
	   */
	  p5.SoundFile.prototype.isLooping = function () {
	    if (!this.bufferSourceNode) {
	      return false;
	    }
	    if (this._looping === true && this.isPlaying() === true) {
	      return true;
	    }
	    return false;
	  };
	  /**
	   *  Returns true if a p5.SoundFile is playing, false if not (i.e.
	   *  paused or stopped).
	   *
	   *  @method isPlaying
	   *  @return {Boolean}
	   */
	  p5.SoundFile.prototype.isPlaying = function () {
	    return this._playing;
	  };
	  /**
	   *  Returns true if a p5.SoundFile is paused, false if not (i.e.
	   *  playing or stopped).
	   *
	   *  @method  isPaused
	   *  @return {Boolean}
	   */
	  p5.SoundFile.prototype.isPaused = function () {
	    return this._paused;
	  };
	  /**
	   * Stop soundfile playback.
	   *
	   * @method stop
	   * @param {Number} [startTime] (optional) schedule event to occur
	   *                             in seconds from now
	   */
	  p5.SoundFile.prototype.stop = function (timeFromNow) {
	    var time = timeFromNow || 0;
	    if (this.mode == 'sustain') {
	      this.stopAll(time);
	      this._playing = false;
	      this.pauseTime = 0;
	      this._paused = false;
	    } else if (this.buffer && this.bufferSourceNode) {
	      var now = p5sound.audiocontext.currentTime;
	      var t = time || 0;
	      this.pauseTime = 0;
	      this.bufferSourceNode.stop(now + t);
	      this._counterNode.stop(now + t);
	      this._playing = false;
	      this._paused = false;
	    }
	  };
	  /**
	   *  Stop playback on all of this soundfile's sources.
	   *  @private
	   */
	  p5.SoundFile.prototype.stopAll = function (_time) {
	    var now = p5sound.audiocontext.currentTime;
	    var time = _time || 0;
	    if (this.buffer && this.bufferSourceNode) {
	      for (var i = 0; i < this.bufferSourceNodes.length; i++) {
	        if (typeof this.bufferSourceNodes[i] != undefined) {
	          try {
	            this.bufferSourceNodes[i].onended = function () {
	            };
	            this.bufferSourceNodes[i].stop(now + time);
	          } catch (e) {
	          }
	        }
	      }
	      this._counterNode.stop(now + time);
	      this._onended(this);
	    }
	  };
	  /**
	   *  Multiply the output volume (amplitude) of a sound file
	   *  between 0.0 (silence) and 1.0 (full volume).
	   *  1.0 is the maximum amplitude of a digital sound, so multiplying
	   *  by greater than 1.0 may cause digital distortion. To
	   *  fade, provide a <code>rampTime</code> parameter. For more
	   *  complex fades, see the Env class.
	   *
	   *  Alternately, you can pass in a signal source such as an
	   *  oscillator to modulate the amplitude with an audio signal.
	   *
	   *  @method  setVolume
	   *  @param {Number|Object} volume  Volume (amplitude) between 0.0
	   *                                     and 1.0 or modulating signal/oscillator
	   *  @param {Number} [rampTime]  Fade for t seconds
	   *  @param {Number} [timeFromNow]  Schedule this event to happen at
	   *                                 t seconds in the future
	   */
	  p5.SoundFile.prototype.setVolume = function (vol, rampTime, tFromNow) {
	    if (typeof vol === 'number') {
	      var rampTime = rampTime || 0;
	      var tFromNow = tFromNow || 0;
	      var now = p5sound.audiocontext.currentTime;
	      var currentVol = this.output.gain.value;
	      this.output.gain.cancelScheduledValues(now + tFromNow);
	      this.output.gain.linearRampToValueAtTime(currentVol, now + tFromNow);
	      this.output.gain.linearRampToValueAtTime(vol, now + tFromNow + rampTime);
	    } else if (vol) {
	      vol.connect(this.output.gain);
	    } else {
	      // return the Gain Node
	      return this.output.gain;
	    }
	  };
	  // same as setVolume, to match Processing Sound
	  p5.SoundFile.prototype.amp = p5.SoundFile.prototype.setVolume;
	  // these are the same thing
	  p5.SoundFile.prototype.fade = p5.SoundFile.prototype.setVolume;
	  p5.SoundFile.prototype.getVolume = function () {
	    return this.output.gain.value;
	  };
	  /**
	   * Set the stereo panning of a p5.sound object to
	   * a floating point number between -1.0 (left) and 1.0 (right).
	   * Default is 0.0 (center).
	   *
	   * @method pan
	   * @param {Number} [panValue]     Set the stereo panner
	   * @param  {Number} timeFromNow schedule this event to happen
	   *                                seconds from now
	   * @example
	   * <div><code>
	   *
	   *  var ball = {};
	   *  var soundFile;
	   *
	   *  function setup() {
	   *    soundFormats('ogg', 'mp3');
	   *    soundFile = loadSound('assets/beatbox.mp3');
	   *  }
	   *  
	   *  function draw() {
	   *    background(0);
	   *    ball.x = constrain(mouseX, 0, width);
	   *    ellipse(ball.x, height/2, 20, 20)
	   *  }
	   *  
	   *  function mousePressed(){
	   *    // map the ball's x location to a panning degree 
	   *    // between -1.0 (left) and 1.0 (right)
	   *    var panning = map(ball.x, 0., width,-1.0, 1.0);
	   *    soundFile.pan(panning);
	   *    soundFile.play();
	   *  }
	   *  </div></code>
	   */
	  p5.SoundFile.prototype.pan = function (pval, tFromNow) {
	    this.panPosition = pval;
	    this.panner.pan(pval, tFromNow);
	  };
	  /**
	   * Returns the current stereo pan position (-1.0 to 1.0)
	   *
	   * @return {Number} Returns the stereo pan setting of the Oscillator
	   *                          as a number between -1.0 (left) and 1.0 (right).
	   *                          0.0 is center and default.
	   */
	  p5.SoundFile.prototype.getPan = function () {
	    return this.panPosition;
	  };
	  /**
	   *  Set the playback rate of a sound file. Will change the speed and the pitch.
	   *  Values less than zero will reverse the audio buffer.
	   *
	   *  @method rate
	   *  @param {Number} [playbackRate]     Set the playback rate. 1.0 is normal,
	   *                                     .5 is half-speed, 2.0 is twice as fast.
	   *                                     Values less than zero play backwards.
	   *  @example
	   *  <div><code>
	   *  var song;
	   *  
	   *  function preload() {
	   *    song = loadSound('assets/Damscray_DancingTiger.mp3');
	   *  }
	   *
	   *  function setup() {
	   *    song.loop();
	   *  }
	   *
	   *  function draw() {
	   *    background(200);
	   *    
	   *    // Set the rate to a range between 0.1 and 4
	   *    // Changing the rate also alters the pitch
	   *    var speed = map(mouseY, 0.1, height, 0, 2);
	   *    speed = constrain(speed, 0.01, 4);
	   *    song.rate(speed);
	   *    
	   *    // Draw a circle to show what is going on
	   *    stroke(0);
	   *    fill(51, 100);
	   *    ellipse(mouseX, 100, 48, 48);
	   *  }
	   *  
	   * </code>
	   * </div>
	   *  
	   */
	  p5.SoundFile.prototype.rate = function (playbackRate) {
	    if (this.playbackRate === playbackRate && this.bufferSourceNode) {
	      if (this.bufferSourceNode.playbackRate.value === playbackRate) {
	        return;
	      }
	    }
	    this.playbackRate = playbackRate;
	    var rate = playbackRate;
	    if (this.playbackRate === 0 && this._playing) {
	      this.pause();
	    }
	    if (this.playbackRate < 0 && !this.reversed) {
	      var cPos = this.currentTime();
	      var cRate = this.bufferSourceNode.playbackRate.value;
	      // this.pause();
	      this.reverseBuffer();
	      rate = Math.abs(playbackRate);
	      var newPos = (cPos - this.duration()) / rate;
	      this.pauseTime = newPos;
	    } else if (this.playbackRate > 0 && this.reversed) {
	      this.reverseBuffer();
	    }
	    if (this.bufferSourceNode) {
	      var now = p5sound.audiocontext.currentTime;
	      this.bufferSourceNode.playbackRate.cancelScheduledValues(now);
	      this.bufferSourceNode.playbackRate.linearRampToValueAtTime(Math.abs(rate), now);
	      this._counterNode.playbackRate.cancelScheduledValues(now);
	      this._counterNode.playbackRate.linearRampToValueAtTime(Math.abs(rate), now);
	    }
	  };
	  // TO DO: document this
	  p5.SoundFile.prototype.setPitch = function (num) {
	    var newPlaybackRate = midiToFreq(num) / midiToFreq(60);
	    this.rate(newPlaybackRate);
	  };
	  p5.SoundFile.prototype.getPlaybackRate = function () {
	    return this.playbackRate;
	  };
	  /**
	   * Returns the duration of a sound file in seconds.
	   *
	   * @method duration
	   * @return {Number} The duration of the soundFile in seconds.
	   */
	  p5.SoundFile.prototype.duration = function () {
	    // Return Duration
	    if (this.buffer) {
	      return this.buffer.duration;
	    } else {
	      return 0;
	    }
	  };
	  /**
	   * Return the current position of the p5.SoundFile playhead, in seconds.
	   * Note that if you change the playbackRate while the p5.SoundFile is
	   * playing, the results may not be accurate.
	   *
	   * @method currentTime
	   * @return {Number}   currentTime of the soundFile in seconds.
	   */
	  p5.SoundFile.prototype.currentTime = function () {
	    // TO DO --> make reverse() flip these values appropriately
	    if (this._pauseTime > 0) {
	      return this._pauseTime;
	    } else {
	      return this._lastPos / ac.sampleRate;
	    }
	  };
	  /**
	   * Move the playhead of the song to a position, in seconds. Start
	   * and Stop time. If none are given, will reset the file to play
	   * entire duration from start to finish.
	   *
	   * @method jump
	   * @param {Number} cueTime    cueTime of the soundFile in seconds.
	   * @param {Number} duration    duration in seconds.
	   */
	  p5.SoundFile.prototype.jump = function (cueTime, duration) {
	    if (cueTime < 0 || cueTime > this.buffer.duration) {
	      throw 'jump time out of range';
	    }
	    if (duration > this.buffer.duration - cueTime) {
	      throw 'end time out of range';
	    }
	    var cTime = cueTime || 0;
	    var eTime = duration || this.buffer.duration - cueTime;
	    if (this.isPlaying()) {
	      this.stop();
	    }
	    this.play(0, this.playbackRate, this.output.gain.value, cTime, eTime);
	  };
	  /**
	  * Return the number of channels in a sound file.
	  * For example, Mono = 1, Stereo = 2.
	  *
	  * @method channels
	  * @return {Number} [channels]
	  */
	  p5.SoundFile.prototype.channels = function () {
	    return this.buffer.numberOfChannels;
	  };
	  /**
	  * Return the sample rate of the sound file.
	  *
	  * @method sampleRate
	  * @return {Number} [sampleRate]
	  */
	  p5.SoundFile.prototype.sampleRate = function () {
	    return this.buffer.sampleRate;
	  };
	  /**
	  * Return the number of samples in a sound file.
	  * Equal to sampleRate * duration.
	  *
	  * @method frames
	  * @return {Number} [sampleCount]
	  */
	  p5.SoundFile.prototype.frames = function () {
	    return this.buffer.length;
	  };
	  /**
	   * Returns an array of amplitude peaks in a p5.SoundFile that can be
	   * used to draw a static waveform. Scans through the p5.SoundFile's
	   * audio buffer to find the greatest amplitudes. Accepts one
	   * parameter, 'length', which determines size of the array.
	   * Larger arrays result in more precise waveform visualizations.
	   * 
	   * Inspired by Wavesurfer.js.
	   * 
	   * @method  getPeaks
	   * @params {Number} [length] length is the size of the returned array.
	   *                          Larger length results in more precision.
	   *                          Defaults to 5*width of the browser window.
	   * @returns {Float32Array} Array of peaks.
	   */
	  p5.SoundFile.prototype.getPeaks = function (length) {
	    if (this.buffer) {
	      // set length to window's width if no length is provided
	      if (!length) {
	        length = window.width * 5;
	      }
	      if (this.buffer) {
	        var buffer = this.buffer;
	        var sampleSize = buffer.length / length;
	        var sampleStep = ~~(sampleSize / 10) || 1;
	        var channels = buffer.numberOfChannels;
	        var peaks = new Float32Array(Math.round(length));
	        for (var c = 0; c < channels; c++) {
	          var chan = buffer.getChannelData(c);
	          for (var i = 0; i < length; i++) {
	            var start = ~~(i * sampleSize);
	            var end = ~~(start + sampleSize);
	            var max = 0;
	            for (var j = start; j < end; j += sampleStep) {
	              var value = chan[j];
	              if (value > max) {
	                max = value;
	              } else if (-value > max) {
	                max = value;
	              }
	            }
	            if (c === 0 || Math.abs(max) > peaks[i]) {
	              peaks[i] = max;
	            }
	          }
	        }
	        return peaks;
	      }
	    } else {
	      throw 'Cannot load peaks yet, buffer is not loaded';
	    }
	  };
	  /**
	   *  Reverses the p5.SoundFile's buffer source.
	   *  Playback must be handled separately (see example).
	   *
	   *  @method  reverseBuffer
	   *  @example
	   *  <div><code>
	   *  var drum;
	   *  
	   *  function preload() {
	   *    drum = loadSound('assets/drum.mp3');
	   *  }
	   *
	   *  function setup() {
	   *    drum.reverseBuffer();
	   *    drum.play();
	   *  }
	   *  
	   * </code>
	   * </div>
	   */
	  p5.SoundFile.prototype.reverseBuffer = function () {
	    var curVol = this.getVolume();
	    this.setVolume(0, 0.01, 0);
	    this.pause();
	    if (this.buffer) {
	      for (var i = 0; i < this.buffer.numberOfChannels; i++) {
	        Array.prototype.reverse.call(this.buffer.getChannelData(i));
	      }
	      // set reversed flag
	      this.reversed = !this.reversed;
	    } else {
	      throw 'SoundFile is not done loading';
	    }
	    this.setVolume(curVol, 0.01, 0.0101);
	    this.play();
	  };
	  /**
	   *  Schedule an event to be called when the soundfile
	   *  reaches the end of a buffer. If the soundfile is
	   *  playing through once, this will be called when it
	   *  ends. If it is looping, it will be called when
	   *  stop is called.
	   *  
	   *  @method  onended
	   *  @param  {Function} callback function to call when the
	   *                              soundfile has ended.
	   */
	  p5.SoundFile.prototype.onended = function (callback) {
	    this._onended = callback;
	    return this;
	  };
	  p5.SoundFile.prototype.add = function () {
	  };
	  p5.SoundFile.prototype.dispose = function () {
	    var now = p5sound.audiocontext.currentTime;
	    // remove reference to soundfile
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this.stop(now);
	    if (this.buffer && this.bufferSourceNode) {
	      for (var i = 0; i < this.bufferSourceNodes.length - 1; i++) {
	        if (this.bufferSourceNodes[i] !== null) {
	          this.bufferSourceNodes[i].disconnect();
	          try {
	            this.bufferSourceNodes[i].stop(now);
	          } catch (e) {
	          }
	          this.bufferSourceNodes[i] = null;
	        }
	      }
	      if (this.isPlaying()) {
	        try {
	          this._counterNode.stop(now);
	        } catch (e) {
	          console.log(e);
	        }
	        this._counterNode = null;
	      }
	    }
	    if (this.output) {
	      this.output.disconnect();
	      this.output = null;
	    }
	    if (this.panner) {
	      this.panner.disconnect();
	      this.panner = null;
	    }
	  };
	  /**
	   * Connects the output of a p5sound object to input of another
	   * p5.sound object. For example, you may connect a p5.SoundFile to an
	   * FFT or an Effect. If no parameter is given, it will connect to
	   * the master output. Most p5sound objects connect to the master
	   * output when they are created.
	   *
	   * @method connect
	   * @param {Object} [object] Audio object that accepts an input
	   */
	  p5.SoundFile.prototype.connect = function (unit) {
	    if (!unit) {
	      this.panner.connect(p5sound.input);
	    } else {
	      if (unit.hasOwnProperty('input')) {
	        this.panner.connect(unit.input);
	      } else {
	        this.panner.connect(unit);
	      }
	    }
	  };
	  /**
	   * Disconnects the output of this p5sound object.
	   *
	   * @method disconnect
	   */
	  p5.SoundFile.prototype.disconnect = function () {
	    this.panner.disconnect();
	  };
	  /**
	   */
	  p5.SoundFile.prototype.getLevel = function (smoothing) {
	    console.warn('p5.SoundFile.getLevel has been removed from the library. Use p5.Amplitude instead');
	  };
	  /**
	   *  Reset the source for this SoundFile to a
	   *  new path (URL).
	   *
	   *  @method  setPath
	   *  @param {String}   path     path to audio file
	   *  @param {Function} callback Callback
	   */
	  p5.SoundFile.prototype.setPath = function (p, callback) {
	    var path = p5.prototype._checkFileFormats(p);
	    this.url = path;
	    this.load(callback);
	  };
	  /**
	   *  Replace the current Audio Buffer with a new Buffer.
	   *  
	   *  @param {Array} buf Array of Float32 Array(s). 2 Float32 Arrays
	   *                     will create a stereo source. 1 will create
	   *                     a mono source.
	   */
	  p5.SoundFile.prototype.setBuffer = function (buf) {
	    var numChannels = buf.length;
	    var size = buf[0].length;
	    var newBuffer = ac.createBuffer(numChannels, size, ac.sampleRate);
	    if (!buf[0] instanceof Float32Array) {
	      buf[0] = new Float32Array(buf[0]);
	    }
	    for (var channelNum = 0; channelNum < numChannels; channelNum++) {
	      var channel = newBuffer.getChannelData(channelNum);
	      channel.set(buf[channelNum]);
	    }
	    this.buffer = newBuffer;
	    // set numbers of channels on input to the panner
	    this.panner.inputChannels(numChannels);
	  };
	  //////////////////////////////////////////////////
	  // script processor node with an empty buffer to help
	  // keep a sample-accurate position in playback buffer.
	  // Inspired by Chinmay Pendharkar's technique for Sonoport --> http://bit.ly/1HwdCsV
	  // Copyright [2015] [Sonoport (Asia) Pte. Ltd.],
	  // Licensed under the Apache License http://apache.org/licenses/LICENSE-2.0
	  ////////////////////////////////////////////////////////////////////////////////////
	  // initialize counterNode, set its initial buffer and playbackRate
	  p5.SoundFile.prototype._initCounterNode = function () {
	    var self = this;
	    var now = ac.currentTime;
	    var cNode = ac.createBufferSource();
	    // dispose of scope node if it already exists
	    if (self._scopeNode) {
	      self._scopeNode.disconnect();
	      self._scopeNode.onaudioprocess = undefined;
	      self._scopeNode = null;
	    }
	    self._scopeNode = ac.createScriptProcessor(256, 1, 1);
	    // create counter buffer of the same length as self.buffer
	    cNode.buffer = _createCounterBuffer(self.buffer);
	    cNode.playbackRate.setValueAtTime(self.playbackRate, now);
	    cNode.connect(self._scopeNode);
	    self._scopeNode.connect(p5.soundOut._silentNode);
	    self._scopeNode.onaudioprocess = function (processEvent) {
	      var inputBuffer = processEvent.inputBuffer.getChannelData(0);
	      // update the lastPos
	      self._lastPos = inputBuffer[inputBuffer.length - 1] || 0;
	      // do any callbacks that have been scheduled
	      self._onTimeUpdate(self._lastPos);
	    };
	    return cNode;
	  };
	  // initialize sourceNode, set its initial buffer and playbackRate
	  p5.SoundFile.prototype._initSourceNode = function () {
	    var self = this;
	    var now = ac.currentTime;
	    var bufferSourceNode = ac.createBufferSource();
	    bufferSourceNode.buffer = self.buffer;
	    bufferSourceNode.playbackRate.value = self.playbackRate;
	    return bufferSourceNode;
	  };
	  var _createCounterBuffer = function (buffer) {
	    var array = new Float32Array(buffer.length);
	    var audioBuf = ac.createBuffer(1, buffer.length, 44100);
	    for (var index = 0; index < buffer.length; index++) {
	      array[index] = index;
	    }
	    audioBuf.getChannelData(0).set(array);
	    return audioBuf;
	  };
	  /**
	   *  processPeaks returns an array of timestamps where it thinks there is a beat.
	   *
	   *  This is an asynchronous function that processes the soundfile in an offline audio context,
	   *  and sends the results to your callback function.
	   *
	   *  The process involves running the soundfile through a lowpass filter, and finding all of the
	   *  peaks above the initial threshold. If the total number of peaks are below the minimum number of peaks,
	   *  it decreases the threshold and re-runs the analysis until either minPeaks or minThreshold are reached.
	   *  
	   *  @method  processPeaks
	   *  @param  {Function} callback       a function to call once this data is returned
	   *  @param  {Number}   [initThreshold] initial threshold defaults to 0.9
	   *  @param  {Number}   [minThreshold]   minimum threshold defaults to 0.22
	   *  @param  {Number}   [minPeaks]       minimum number of peaks defaults to 200
	   *  @return {Array}                  Array of timestamped peaks
	   */
	  p5.SoundFile.prototype.processPeaks = function (callback, _initThreshold, _minThreshold, _minPeaks) {
	    var bufLen = this.buffer.length;
	    var sampleRate = this.buffer.sampleRate;
	    var buffer = this.buffer;
	    var initialThreshold = _initThreshold || 0.9, threshold = initialThreshold, minThreshold = _minThreshold || 0.22, minPeaks = _minPeaks || 200;
	    // Create offline context
	    var offlineContext = new OfflineAudioContext(1, bufLen, sampleRate);
	    // create buffer source
	    var source = offlineContext.createBufferSource();
	    source.buffer = buffer;
	    // Create filter. TO DO: allow custom setting of filter
	    var filter = offlineContext.createBiquadFilter();
	    filter.type = 'lowpass';
	    source.connect(filter);
	    filter.connect(offlineContext.destination);
	    // start playing at time:0
	    source.start(0);
	    offlineContext.startRendering();
	    // Render the song
	    // act on the result
	    offlineContext.oncomplete = function (e) {
	      var data = {};
	      var filteredBuffer = e.renderedBuffer;
	      var bufferData = filteredBuffer.getChannelData(0);
	      // step 1: 
	      // create Peak instances, add them to array, with strength and sampleIndex
	      do {
	        allPeaks = getPeaksAtThreshold(bufferData, threshold);
	        threshold -= 0.005;
	      } while (Object.keys(allPeaks).length < minPeaks && threshold >= minThreshold);
	      // step 2:
	      // find intervals for each peak in the sampleIndex, add tempos array
	      var intervalCounts = countIntervalsBetweenNearbyPeaks(allPeaks);
	      // step 3: find top tempos
	      var groups = groupNeighborsByTempo(intervalCounts, filteredBuffer.sampleRate);
	      // sort top intervals
	      var topTempos = groups.sort(function (intA, intB) {
	        return intB.count - intA.count;
	      }).splice(0, 5);
	      // set this SoundFile's tempo to the top tempo ??
	      this.tempo = topTempos[0].tempo;
	      // step 4:
	      // new array of peaks at top tempo within a bpmVariance
	      var bpmVariance = 5;
	      var tempoPeaks = getPeaksAtTopTempo(allPeaks, topTempos[0].tempo, filteredBuffer.sampleRate, bpmVariance);
	      callback(tempoPeaks);
	    };
	  };
	  // process peaks
	  var Peak = function (amp, i) {
	    this.sampleIndex = i;
	    this.amplitude = amp;
	    this.tempos = [];
	    this.intervals = [];
	  };
	  var allPeaks = [];
	  // 1. for processPeaks() Function to identify peaks above a threshold
	  // returns an array of peak indexes as frames (samples) of the original soundfile
	  function getPeaksAtThreshold(data, threshold) {
	    var peaksObj = {};
	    var length = data.length;
	    for (var i = 0; i < length; i++) {
	      if (data[i] > threshold) {
	        var amp = data[i];
	        var peak = new Peak(amp, i);
	        peaksObj[i] = peak;
	        // Skip forward ~ 1/8s to get past this peak.
	        i += 6000;
	      }
	      i++;
	    }
	    return peaksObj;
	  }
	  // 2. for processPeaks()
	  function countIntervalsBetweenNearbyPeaks(peaksObj) {
	    var intervalCounts = [];
	    var peaksArray = Object.keys(peaksObj).sort();
	    for (var index = 0; index < peaksArray.length; index++) {
	      // find intervals in comparison to nearby peaks
	      for (var i = 0; i < 10; i++) {
	        var startPeak = peaksObj[peaksArray[index]];
	        var endPeak = peaksObj[peaksArray[index + i]];
	        if (startPeak && endPeak) {
	          var startPos = startPeak.sampleIndex;
	          var endPos = endPeak.sampleIndex;
	          var interval = endPos - startPos;
	          // add a sample interval to the startPeek in the allPeaks array
	          if (interval > 0) {
	            startPeak.intervals.push(interval);
	          }
	          // tally the intervals and return interval counts
	          var foundInterval = intervalCounts.some(function (intervalCount, p) {
	            if (intervalCount.interval === interval) {
	              intervalCount.count++;
	              return intervalCount;
	            }
	          });
	          // store with JSON like formatting
	          if (!foundInterval) {
	            intervalCounts.push({
	              interval: interval,
	              count: 1
	            });
	          }
	        }
	      }
	    }
	    return intervalCounts;
	  }
	  // 3. for processPeaks --> find tempo
	  function groupNeighborsByTempo(intervalCounts, sampleRate) {
	    var tempoCounts = [];
	    intervalCounts.forEach(function (intervalCount, i) {
	      try {
	        // Convert an interval to tempo
	        var theoreticalTempo = Math.abs(60 / (intervalCount.interval / sampleRate));
	        theoreticalTempo = mapTempo(theoreticalTempo);
	        var foundTempo = tempoCounts.some(function (tempoCount) {
	          if (tempoCount.tempo === theoreticalTempo)
	            return tempoCount.count += intervalCount.count;
	        });
	        if (!foundTempo) {
	          if (isNaN(theoreticalTempo)) {
	            return;
	          }
	          tempoCounts.push({
	            tempo: Math.round(theoreticalTempo),
	            count: intervalCount.count
	          });
	        }
	      } catch (e) {
	        throw e;
	      }
	    });
	    return tempoCounts;
	  }
	  // 4. for processPeaks - get peaks at top tempo
	  function getPeaksAtTopTempo(peaksObj, tempo, sampleRate, bpmVariance) {
	    var peaksAtTopTempo = [];
	    var peaksArray = Object.keys(peaksObj).sort();
	    // TO DO: filter out peaks that have the tempo and return
	    for (var i = 0; i < peaksArray.length; i++) {
	      var key = peaksArray[i];
	      var peak = peaksObj[key];
	      for (var j = 0; j < peak.intervals.length; j++) {
	        var intervalBPM = Math.round(Math.abs(60 / (peak.intervals[j] / sampleRate)));
	        intervalBPM = mapTempo(intervalBPM);
	        var dif = intervalBPM - tempo;
	        if (Math.abs(intervalBPM - tempo) < bpmVariance) {
	          // convert sampleIndex to seconds
	          peaksAtTopTempo.push(peak.sampleIndex / 44100);
	        }
	      }
	    }
	    // filter out peaks that are very close to each other
	    peaksAtTopTempo = peaksAtTopTempo.filter(function (peakTime, index, arr) {
	      var dif = arr[index + 1] - peakTime;
	      if (dif > 0.01) {
	        return true;
	      }
	    });
	    return peaksAtTopTempo;
	  }
	  // helper function for processPeaks
	  function mapTempo(theoreticalTempo) {
	    // these scenarios create infinite while loop
	    if (!isFinite(theoreticalTempo) || theoreticalTempo == 0) {
	      return;
	    }
	    // Adjust the tempo to fit within the 90-180 BPM range
	    while (theoreticalTempo < 90)
	      theoreticalTempo *= 2;
	    while (theoreticalTempo > 180 && theoreticalTempo > 90)
	      theoreticalTempo /= 2;
	    return theoreticalTempo;
	  }
	  /*** SCHEDULE EVENTS ***/
	  /**
	   *  Schedule events to trigger every time a MediaElement
	   *  (audio/video) reaches a playback cue point.
	   *
	   *  Accepts a callback function, a time (in seconds) at which to trigger
	   *  the callback, and an optional parameter for the callback.
	   *
	   *  Time will be passed as the first parameter to the callback function,
	   *  and param will be the second parameter.
	   *
	   *
	   *  @method  addCue
	   *  @param {Number}   time     Time in seconds, relative to this media
	   *                             element's playback. For example, to trigger
	   *                             an event every time playback reaches two
	   *                             seconds, pass in the number 2. This will be
	   *                             passed as the first parameter to
	   *                             the callback function.
	   *  @param {Function} callback Name of a function that will be
	   *                             called at the given time. The callback will
	   *                             receive time and (optionally) param as its
	   *                             two parameters.
	   *  @param {Object} [value]    An object to be passed as the
	   *                             second parameter to the
	   *                             callback function.
	   *  @return {Number} id ID of this cue,
	   *                      useful for removeCue(id)
	   *  @example
	   *  <div><code>
	   *  function setup() {
	   *    background(0);
	   *    noStroke();
	   *    fill(255);
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *    
	   *    mySound = loadSound('assets/beat.mp3');
	   *
	   *    // schedule calls to changeText
	   *    mySound.addCue(0.50, changeText, "hello" );
	   *    mySound.addCue(1.00, changeText, "p5" );
	   *    mySound.addCue(1.50, changeText, "what" );
	   *    mySound.addCue(2.00, changeText, "do" );
	   *    mySound.addCue(2.50, changeText, "you" );
	   *    mySound.addCue(3.00, changeText, "want" );
	   *    mySound.addCue(4.00, changeText, "to" );
	   *    mySound.addCue(5.00, changeText, "make" );
	   *    mySound.addCue(6.00, changeText, "?" );
	   *  }
	   *
	   *  function changeText(val) {
	   *    background(0);
	   *    text(val, width/2, height/2);
	   *  }
	   *
	   *  function mouseClicked() {
	   *    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
	   *      if (mySound.isPlaying() ) {
	   *        mySound.stop();
	   *      } else {
	   *        mySound.play();
	   *      }
	   *    }
	   *  }
	   *  </code></div>
	   */
	  p5.SoundFile.prototype.addCue = function (time, callback, val) {
	    var id = this._cueIDCounter++;
	    var cue = new Cue(callback, time, id, val);
	    this._cues.push(cue);
	    // if (!this.elt.ontimeupdate) {
	    //   this.elt.ontimeupdate = this._onTimeUpdate.bind(this);
	    // }
	    return id;
	  };
	  /**
	   *  Remove a callback based on its ID. The ID is returned by the
	   *  addCue method.
	   *
	   *  @method removeCue
	   *  @param  {Number} id ID of the cue, as returned by addCue
	   */
	  p5.SoundFile.prototype.removeCue = function (id) {
	    var cueLength = this._cues.length;
	    for (var i = 0; i < cueLength; i++) {
	      var cue = this._cues[i];
	      if (cue.id === id) {
	        this.cues.splice(i, 1);
	      }
	    }
	    if (this._cues.length === 0) {
	    }
	  };
	  /**
	   *  Remove all of the callbacks that had originally been scheduled
	   *  via the addCue method.
	   *
	   *  @method  clearCues
	   */
	  p5.SoundFile.prototype.clearCues = function () {
	    this._cues = [];
	  };
	  // private method that checks for cues to be fired if events
	  // have been scheduled using addCue(callback, time).
	  p5.SoundFile.prototype._onTimeUpdate = function (position) {
	    var playbackTime = position / this.buffer.sampleRate;
	    var cueLength = this._cues.length;
	    for (var i = 0; i < cueLength; i++) {
	      var cue = this._cues[i];
	      var callbackTime = cue.time;
	      var val = cue.val;
	      if (this._prevTime < callbackTime && callbackTime <= playbackTime) {
	        // pass the scheduled callbackTime as parameter to the callback
	        cue.callback(val);
	      }
	    }
	    this._prevTime = playbackTime;
	  };
	  // Cue inspired by JavaScript setTimeout, and the
	  // Tone.js Transport Timeline Event, MIT License Yotam Mann 2015 tonejs.org
	  var Cue = function (callback, time, id, val) {
	    this.callback = callback;
	    this.time = time;
	    this.id = id;
	    this.val = val;
	  };
	}(sndcore, errorHandler, master);
	var amplitude;
	amplitude = function () {
	  'use strict';
	  var p5sound = master;
	  /**
	   *  Amplitude measures volume between 0.0 and 1.0.
	   *  Listens to all p5sound by default, or use setInput()
	   *  to listen to a specific sound source. Accepts an optional
	   *  smoothing value, which defaults to 0. 
	   *
	   *  @class p5.Amplitude
	   *  @constructor
	   *  @param {Number} [smoothing] between 0.0 and .999 to smooth
	   *                             amplitude readings (defaults to 0)
	   *  @return {Object}    Amplitude Object
	   *  @example
	   *  <div><code>
	   *  var sound, amplitude, cnv;
	   *  
	   *  function preload(){
	   *    sound = loadSound('assets/beat.mp3');
	   *  }
	   *  function setup() {
	   *    cnv = createCanvas(100,100);
	   *    amplitude = new p5.Amplitude();
	   *
	   *    // start / stop the sound when canvas is clicked
	   *    cnv.mouseClicked(function() {
	   *      if (sound.isPlaying() ){
	   *        sound.stop();
	   *      } else {
	   *        sound.play();
	   *      }
	   *    });
	   *  }
	   *  function draw() {
	   *    background(0);
	   *    fill(255);
	   *    var level = amplitude.getLevel();
	   *    var size = map(level, 0, 1, 0, 200);
	   *    ellipse(width/2, height/2, size, size);
	   *  }
	   *
	   *  </code></div>
	   */
	  p5.Amplitude = function (smoothing) {
	    // Set to 2048 for now. In future iterations, this should be inherited or parsed from p5sound's default
	    this.bufferSize = 2048;
	    // set audio context
	    this.audiocontext = p5sound.audiocontext;
	    this.processor = this.audiocontext.createScriptProcessor(this.bufferSize, 2, 1);
	    // for connections
	    this.input = this.processor;
	    this.output = this.audiocontext.createGain();
	    // smoothing defaults to 0
	    this.smoothing = smoothing || 0;
	    // the variables to return
	    this.volume = 0;
	    this.average = 0;
	    this.stereoVol = [
	      0,
	      0
	    ];
	    this.stereoAvg = [
	      0,
	      0
	    ];
	    this.stereoVolNorm = [
	      0,
	      0
	    ];
	    this.volMax = 0.001;
	    this.normalize = false;
	    this.processor.onaudioprocess = this._audioProcess.bind(this);
	    this.processor.connect(this.output);
	    this.output.gain.value = 0;
	    // this may only be necessary because of a Chrome bug
	    this.output.connect(this.audiocontext.destination);
	    // connect to p5sound master output by default, unless set by input()
	    p5sound.meter.connect(this.processor);
	    // add this p5.SoundFile to the soundArray
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Connects to the p5sound instance (master output) by default.
	   *  Optionally, you can pass in a specific source (i.e. a soundfile).
	   *
	   *  @method setInput
	   *  @param {soundObject|undefined} [snd] set the sound source
	   *                                       (optional, defaults to
	   *                                       master output)
	   *  @param {Number|undefined} [smoothing] a range between 0.0 and 1.0
	   *                                        to smooth amplitude readings
	   *  @example
	   *  <div><code>
	   *  function preload(){
	   *    sound1 = loadSound('assets/beat.mp3');
	   *    sound2 = loadSound('assets/drum.mp3');
	   *  }
	   *  function setup(){
	   *    amplitude = new p5.Amplitude();
	   *    sound1.play();
	   *    sound2.play();
	   *    amplitude.setInput(sound2);
	   *  }
	   *  function draw() {
	   *    background(0);
	   *    fill(255);
	   *    var level = amplitude.getLevel();
	   *    var size = map(level, 0, 1, 0, 200);
	   *    ellipse(width/2, height/2, size, size);
	   *  }
	   *  function mouseClicked(){
	   *    sound1.stop();
	   *    sound2.stop();
	   *  }
	   *  </code></div>
	   */
	  p5.Amplitude.prototype.setInput = function (source, smoothing) {
	    p5sound.meter.disconnect();
	    if (smoothing) {
	      this.smoothing = smoothing;
	    }
	    // connect to the master out of p5s instance if no snd is provided
	    if (source == null) {
	      console.log('Amplitude input source is not ready! Connecting to master output instead');
	      p5sound.meter.connect(this.processor);
	    } else if (source instanceof p5.Signal) {
	      source.output.connect(this.processor);
	    } else if (source) {
	      source.connect(this.processor);
	      this.processor.disconnect();
	      this.processor.connect(this.output);
	    } else {
	      p5sound.meter.connect(this.processor);
	    }
	  };
	  p5.Amplitude.prototype.connect = function (unit) {
	    if (unit) {
	      if (unit.hasOwnProperty('input')) {
	        this.output.connect(unit.input);
	      } else {
	        this.output.connect(unit);
	      }
	    } else {
	      this.output.connect(this.panner.connect(p5sound.input));
	    }
	  };
	  p5.Amplitude.prototype.disconnect = function (unit) {
	    this.output.disconnect();
	  };
	  // TO DO make this stereo / dependent on # of audio channels
	  p5.Amplitude.prototype._audioProcess = function (event) {
	    for (var channel = 0; channel < event.inputBuffer.numberOfChannels; channel++) {
	      var inputBuffer = event.inputBuffer.getChannelData(channel);
	      var bufLength = inputBuffer.length;
	      var total = 0;
	      var sum = 0;
	      var x;
	      for (var i = 0; i < bufLength; i++) {
	        x = inputBuffer[i];
	        if (this.normalize) {
	          total += Math.max(Math.min(x / this.volMax, 1), -1);
	          sum += Math.max(Math.min(x / this.volMax, 1), -1) * Math.max(Math.min(x / this.volMax, 1), -1);
	        } else {
	          total += x;
	          sum += x * x;
	        }
	      }
	      var average = total / bufLength;
	      // ... then take the square root of the sum.
	      var rms = Math.sqrt(sum / bufLength);
	      this.stereoVol[channel] = Math.max(rms, this.stereoVol[channel] * this.smoothing);
	      this.stereoAvg[channel] = Math.max(average, this.stereoVol[channel] * this.smoothing);
	      this.volMax = Math.max(this.stereoVol[channel], this.volMax);
	    }
	    // add volume from all channels together
	    var self = this;
	    var volSum = this.stereoVol.reduce(function (previousValue, currentValue, index) {
	      self.stereoVolNorm[index - 1] = Math.max(Math.min(self.stereoVol[index - 1] / self.volMax, 1), 0);
	      self.stereoVolNorm[index] = Math.max(Math.min(self.stereoVol[index] / self.volMax, 1), 0);
	      return previousValue + currentValue;
	    });
	    // volume is average of channels
	    this.volume = volSum / this.stereoVol.length;
	    // normalized value
	    this.volNorm = Math.max(Math.min(this.volume / this.volMax, 1), 0);
	  };
	  /**
	   *  Returns a single Amplitude reading at the moment it is called.
	   *  For continuous readings, run in the draw loop.
	   *
	   *  @method getLevel
	   *  @param {Number} [channel] Optionally return only channel 0 (left) or 1 (right)
	   *  @return {Number}       Amplitude as a number between 0.0 and 1.0
	   *  @example
	   *  <div><code>
	   *  function preload(){
	   *    sound = loadSound('assets/beat.mp3');
	   *  }
	   *  function setup() { 
	   *    amplitude = new p5.Amplitude();
	   *    sound.play();
	   *  }
	   *  function draw() {
	   *    background(0);
	   *    fill(255);
	   *    var level = amplitude.getLevel();
	   *    var size = map(level, 0, 1, 0, 200);
	   *    ellipse(width/2, height/2, size, size);
	   *  }
	   *  function mouseClicked(){
	   *    sound.stop();
	   *  }
	   *  </code></div>
	   */
	  p5.Amplitude.prototype.getLevel = function (channel) {
	    if (typeof channel !== 'undefined') {
	      if (this.normalize) {
	        return this.stereoVolNorm[channel];
	      } else {
	        return this.stereoVol[channel];
	      }
	    } else if (this.normalize) {
	      return this.volNorm;
	    } else {
	      return this.volume;
	    }
	  };
	  /**
	   * Determines whether the results of Amplitude.process() will be
	   * Normalized. To normalize, Amplitude finds the difference the
	   * loudest reading it has processed and the maximum amplitude of
	   * 1.0. Amplitude adds this difference to all values to produce
	   * results that will reliably map between 0.0 and 1.0. However,
	   * if a louder moment occurs, the amount that Normalize adds to
	   * all the values will change. Accepts an optional boolean parameter
	   * (true or false). Normalizing is off by default.
	   *
	   * @method toggleNormalize
	   * @param {boolean} [boolean] set normalize to true (1) or false (0)
	   */
	  p5.Amplitude.prototype.toggleNormalize = function (bool) {
	    if (typeof bool === 'boolean') {
	      this.normalize = bool;
	    } else {
	      this.normalize = !this.normalize;
	    }
	  };
	  /**
	   *  Smooth Amplitude analysis by averaging with the last analysis 
	   *  frame. Off by default.
	   *
	   *  @method smooth
	   *  @param {Number} set smoothing from 0.0 <= 1
	   */
	  p5.Amplitude.prototype.smooth = function (s) {
	    if (s >= 0 && s < 1) {
	      this.smoothing = s;
	    } else {
	      console.log('Error: smoothing must be between 0 and 1');
	    }
	  };
	  p5.Amplitude.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this.input.disconnect();
	    this.output.disconnect();
	    this.input = this.processor = undefined;
	    this.output = undefined;
	  };
	}(master);
	var fft;
	fft = function () {
	  'use strict';
	  var p5sound = master;
	  /**
	   *  <p>FFT (Fast Fourier Transform) is an analysis algorithm that
	   *  isolates individual
	   *  <a href="https://en.wikipedia.org/wiki/Audio_frequency">
	   *  audio frequencies</a> within a waveform.</p>
	   *
	   *  <p>Once instantiated, a p5.FFT object can return an array based on
	   *  two types of analyses: <br> â¢ <code>FFT.waveform()</code> computes
	   *  amplitude values along the time domain. The array indices correspond
	   *  to samples across a brief moment in time. Each value represents
	   *  amplitude of the waveform at that sample of time.<br>
	   *  â¢ <code>FFT.analyze() </code> computes amplitude values along the
	   *  frequency domain. The array indices correspond to frequencies (i.e.
	   *  pitches), from the lowest to the highest that humans can hear. Each
	   *  value represents amplitude at that slice of the frequency spectrum.
	   *  Use with <code>getEnergy()</code> to measure amplitude at specific
	   *  frequencies, or within a range of frequencies. </p>
	   *
	   *  <p>FFT analyzes a very short snapshot of sound called a sample
	   *  buffer. It returns an array of amplitude measurements, referred
	   *  to as <code>bins</code>. The array is 1024 bins long by default.
	   *  You can change the bin array length, but it must be a power of 2
	   *  between 16 and 1024 in order for the FFT algorithm to function
	   *  correctly. The actual size of the FFT buffer is twice the 
	   *  number of bins, so given a standard sample rate, the buffer is
	   *  2048/44100 seconds long.</p>
	   *  
	   * 
	   *  @class p5.FFT
	   *  @constructor
	   *  @param {Number} [smoothing]   Smooth results of Freq Spectrum.
	   *                                0.0 < smoothing < 1.0.
	   *                                Defaults to 0.8.
	   *  @param {Number} [bins]    Length of resulting array.
	   *                            Must be a power of two between
	   *                            16 and 1024. Defaults to 1024.
	   *  @return {Object}    FFT Object
	   *  @example
	   *  <div><code>
	   *  function preload(){
	   *    sound = loadSound('assets/Damscray_DancingTiger.mp3');
	   *  }
	   *  
	   *  function setup(){
	   *    var cnv = createCanvas(100,100);
	   *    cnv.mouseClicked(togglePlay);
	   *    fft = new p5.FFT();
	   *    sound.amp(0.2);
	   *  }
	   *  
	   *  function draw(){
	   *    background(0);
	   *  
	   *    var spectrum = fft.analyze(); 
	   *    noStroke();
	   *    fill(0,255,0); // spectrum is green
	   *    for (var i = 0; i< spectrum.length; i++){
	   *      var x = map(i, 0, spectrum.length, 0, width);
	   *      var h = -height + map(spectrum[i], 0, 255, height, 0);
	   *      rect(x, height, width / spectrum.length, h )
	   *    }
	   *  
	   *    var waveform = fft.waveform();
	   *    noFill();
	   *    beginShape();
	   *    stroke(255,0,0); // waveform is red
	   *    strokeWeight(1);
	   *    for (var i = 0; i< waveform.length; i++){
	   *      var x = map(i, 0, waveform.length, 0, width);
	   *      var y = map( waveform[i], -1, 1, 0, height);
	   *      vertex(x,y);
	   *    }
	   *    endShape();
	   *  
	   *    text('click to play/pause', 4, 10);
	   *  }
	   *  
	   *  // fade sound if mouse is over canvas
	   *  function togglePlay() {
	   *    if (sound.isPlaying()) {
	   *      sound.pause();
	   *    } else {
	   *      sound.loop();
	   *    }
	   *  }
	   *  </code></div>
	   */
	  p5.FFT = function (smoothing, bins) {
	    this.smoothing = smoothing || 0.8;
	    this.bins = bins || 1024;
	    var FFT_SIZE = bins * 2 || 2048;
	    this.input = this.analyser = p5sound.audiocontext.createAnalyser();
	    // default connections to p5sound fftMeter
	    p5sound.fftMeter.connect(this.analyser);
	    this.analyser.smoothingTimeConstant = this.smoothing;
	    this.analyser.fftSize = FFT_SIZE;
	    this.freqDomain = new Uint8Array(this.analyser.frequencyBinCount);
	    this.timeDomain = new Uint8Array(this.analyser.frequencyBinCount);
	    // predefined frequency ranages, these will be tweakable
	    this.bass = [
	      20,
	      140
	    ];
	    this.lowMid = [
	      140,
	      400
	    ];
	    this.mid = [
	      400,
	      2600
	    ];
	    this.highMid = [
	      2600,
	      5200
	    ];
	    this.treble = [
	      5200,
	      14000
	    ];
	    // add this p5.SoundFile to the soundArray
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Set the input source for the FFT analysis. If no source is
	   *  provided, FFT will analyze all sound in the sketch.
	   *
	   *  @method  setInput
	   *  @param {Object} [source] p5.sound object (or web audio API source node)
	   */
	  p5.FFT.prototype.setInput = function (source) {
	    if (!source) {
	      p5sound.fftMeter.connect(this.analyser);
	    } else {
	      if (source.output) {
	        source.output.connect(this.analyser);
	      } else if (source.connect) {
	        source.connect(this.analyser);
	      }
	      p5sound.fftMeter.disconnect();
	    }
	  };
	  /**
	   *  Returns an array of amplitude values (between -1.0 and +1.0) that represent
	   *  a snapshot of amplitude readings in a single buffer. Length will be
	   *  equal to bins (defaults to 1024). Can be used to draw the waveform
	   *  of a sound. 
	   *  
	   *  @method waveform
	   *  @param {Number} [bins]    Must be a power of two between
	   *                            16 and 1024. Defaults to 1024.
	   *  @param {String} [precision] If any value is provided, will return results
	   *                              in a Float32 Array which is more precise
	   *                              than a regular array.
	   *  @return {Array}  Array    Array of amplitude values (-1 to 1)
	   *                            over time. Array length = bins.
	   *
	   */
	  p5.FFT.prototype.waveform = function () {
	    var bins, mode, normalArray;
	    for (var i = 0; i < arguments.length; i++) {
	      if (typeof arguments[i] === 'number') {
	        bins = arguments[i];
	        this.analyser.fftSize = bins * 2;
	      }
	      if (typeof arguments[i] === 'string') {
	        mode = arguments[i];
	      }
	    }
	    // getFloatFrequencyData doesnt work in Safari as of 5/2015
	    if (mode && !p5.prototype._isSafari()) {
	      timeToFloat(this, this.timeDomain);
	      this.analyser.getFloatTimeDomainData(this.timeDomain);
	      return this.timeDomain;
	    } else {
	      timeToInt(this, this.timeDomain);
	      this.analyser.getByteTimeDomainData(this.timeDomain);
	      var normalArray = new Array();
	      for (var i = 0; i < this.timeDomain.length; i++) {
	        var scaled = p5.prototype.map(this.timeDomain[i], 0, 255, -1, 1);
	        normalArray.push(scaled);
	      }
	      return normalArray;
	    }
	  };
	  /**
	   *  Returns an array of amplitude values (between 0 and 255)
	   *  across the frequency spectrum. Length is equal to FFT bins
	   *  (1024 by default). The array indices correspond to frequencies
	   *  (i.e. pitches), from the lowest to the highest that humans can
	   *  hear. Each value represents amplitude at that slice of the
	   *  frequency spectrum. Must be called prior to using
	   *  <code>getEnergy()</code>.
	   *
	   *  @method analyze
	   *  @param {Number} [bins]    Must be a power of two between
	   *                             16 and 1024. Defaults to 1024.
	   *  @param {Number} [scale]    If "dB," returns decibel
	   *                             float measurements between
	   *                             -140 and 0 (max).
	   *                             Otherwise returns integers from 0-255.
	   *  @return {Array} spectrum    Array of energy (amplitude/volume)
	   *                              values across the frequency spectrum.
	   *                              Lowest energy (silence) = 0, highest
	   *                              possible is 255.
	   *  @example
	   *  <div><code>
	   *  var osc;
	   *  var fft;
	   *
	   *  function setup(){
	   *    createCanvas(100,100);
	   *    osc = new p5.Oscillator();
	   *    osc.amp(0);
	   *    osc.start();
	   *    fft = new p5.FFT();
	   *  }
	   *
	   *  function draw(){
	   *    background(0);
	   *
	   *    var freq = map(mouseX, 0, 800, 20, 15000);
	   *    freq = constrain(freq, 1, 20000);
	   *    osc.freq(freq);
	   *
	   *    var spectrum = fft.analyze(); 
	   *    noStroke();
	   *    fill(0,255,0); // spectrum is green
	   *    for (var i = 0; i< spectrum.length; i++){
	   *      var x = map(i, 0, spectrum.length, 0, width);
	   *      var h = -height + map(spectrum[i], 0, 255, height, 0);
	   *      rect(x, height, width / spectrum.length, h );
	   *    }
	   *
	   *    stroke(255);
	   *    text('Freq: ' + round(freq)+'Hz', 10, 10); 
	   *
	   *    isMouseOverCanvas();
	   *  }
	   *
	   *  // only play sound when mouse is over canvas
	   *  function isMouseOverCanvas() {
	   *    var mX = mouseX, mY = mouseY;
	   *    if (mX > 0 && mX < width && mY < height && mY > 0) {
	   *      osc.amp(0.5, 0.2);
	   *    } else {
	   *      osc.amp(0, 0.2);
	   *    }
	   *  }
	   *  </code></div>
	   *                                   
	   *
	   */
	  p5.FFT.prototype.analyze = function () {
	    var bins, mode;
	    for (var i = 0; i < arguments.length; i++) {
	      if (typeof arguments[i] === 'number') {
	        bins = this.bins = arguments[i];
	        this.analyser.fftSize = this.bins * 2;
	      }
	      if (typeof arguments[i] === 'string') {
	        mode = arguments[i];
	      }
	    }
	    if (mode && mode.toLowerCase() === 'db') {
	      freqToFloat(this);
	      this.analyser.getFloatFrequencyData(this.freqDomain);
	      return this.freqDomain;
	    } else {
	      freqToInt(this, this.freqDomain);
	      this.analyser.getByteFrequencyData(this.freqDomain);
	      var normalArray = Array.apply([], this.freqDomain);
	      normalArray.length === this.analyser.fftSize;
	      normalArray.constructor === Array;
	      return normalArray;
	    }
	  };
	  /**
	   *  Returns the amount of energy (volume) at a specific
	   *  <a href="en.wikipedia.org/wiki/Audio_frequency" target="_blank">
	   *  frequency</a>, or the average amount of energy between two
	   *  frequencies. Accepts Number(s) corresponding
	   *  to frequency (in Hz), or a String corresponding to predefined
	   *  frequency ranges ("bass", "lowMid", "mid", "highMid", "treble").
	   *  Returns a range between 0 (no energy/volume at that frequency) and
	   *  255 (maximum energy). 
	   *  <em>NOTE: analyze() must be called prior to getEnergy(). Analyze()
	   *  tells the FFT to analyze frequency data, and getEnergy() uses
	   *  the results determine the value at a specific frequency or
	   *  range of frequencies.</em></p>
	   *  
	   *  @method  getEnergy
	   *  @param  {Number|String} frequency1   Will return a value representing
	   *                                energy at this frequency. Alternately,
	   *                                the strings "bass", "lowMid" "mid",
	   *                                "highMid", and "treble" will return
	   *                                predefined frequency ranges.
	   *  @param  {Number} [frequency2] If a second frequency is given,
	   *                                will return average amount of
	   *                                energy that exists between the
	   *                                two frequencies.
	   *  @return {Number}   Energy   Energy (volume/amplitude) from
	   *                              0 and 255.
	   *                                       
	   */
	  p5.FFT.prototype.getEnergy = function (frequency1, frequency2) {
	    var nyquist = p5sound.audiocontext.sampleRate / 2;
	    if (frequency1 === 'bass') {
	      frequency1 = this.bass[0];
	      frequency2 = this.bass[1];
	    } else if (frequency1 === 'lowMid') {
	      frequency1 = this.lowMid[0];
	      frequency2 = this.lowMid[1];
	    } else if (frequency1 === 'mid') {
	      frequency1 = this.mid[0];
	      frequency2 = this.mid[1];
	    } else if (frequency1 === 'highMid') {
	      frequency1 = this.highMid[0];
	      frequency2 = this.highMid[1];
	    } else if (frequency1 === 'treble') {
	      frequency1 = this.treble[0];
	      frequency2 = this.treble[1];
	    }
	    if (typeof frequency1 !== 'number') {
	      throw 'invalid input for getEnergy()';
	    } else if (!frequency2) {
	      var index = Math.round(frequency1 / nyquist * this.freqDomain.length);
	      return this.freqDomain[index];
	    } else if (frequency1 && frequency2) {
	      // if second is higher than first
	      if (frequency1 > frequency2) {
	        var swap = frequency2;
	        frequency2 = frequency1;
	        frequency1 = swap;
	      }
	      var lowIndex = Math.round(frequency1 / nyquist * this.freqDomain.length);
	      var highIndex = Math.round(frequency2 / nyquist * this.freqDomain.length);
	      var total = 0;
	      var numFrequencies = 0;
	      // add up all of the values for the frequencies
	      for (var i = lowIndex; i <= highIndex; i++) {
	        total += this.freqDomain[i];
	        numFrequencies += 1;
	      }
	      // divide by total number of frequencies
	      var toReturn = total / numFrequencies;
	      return toReturn;
	    } else {
	      throw 'invalid input for getEnergy()';
	    }
	  };
	  // compatability with v.012, changed to getEnergy in v.0121. Will be deprecated...
	  p5.FFT.prototype.getFreq = function (freq1, freq2) {
	    console.log('getFreq() is deprecated. Please use getEnergy() instead.');
	    var x = this.getEnergy(freq1, freq2);
	    return x;
	  };
	  /**
	   *  Returns the 
	   *  <a href="http://en.wikipedia.org/wiki/Spectral_centroid" target="_blank">
	   *  spectral centroid</a> of the input signal.
	   *  <em>NOTE: analyze() must be called prior to getCentroid(). Analyze()
	   *  tells the FFT to analyze frequency data, and getCentroid() uses
	   *  the results determine the spectral centroid.</em></p>
	   *  
	   *  @method  getCentroid
	   *  @return {Number}   Spectral Centroid Frequency   Frequency of the spectral centroid in Hz.
	   * 
	   *
	   * @example
	   *  <div><code>
	   *
	   *
	   *function setup(){
	   *  cnv = createCanvas(800,400);
	   *  sound = new p5.AudioIn();
	   *  sound.start();
	   *  fft = new p5.FFT();
	   *  sound.connect(fft);
	   *}
	   *
	   *
	   *function draw(){
	   *
	   *  var centroidplot = 0.0;
	   *  var spectralCentroid = 0;
	   *  
	   *  
	   *  background(0);
	   *  stroke(0,255,0);
	   *  var spectrum = fft.analyze(); 
	   *  fill(0,255,0); // spectrum is green
	   *  
	   *  //draw the spectrum
	   *  
	   *  for (var i = 0; i< spectrum.length; i++){
	   *    var x = map(log(i), 0, log(spectrum.length), 0, width);
	   *    var h = map(spectrum[i], 0, 255, 0, height);
	   *    var rectangle_width = (log(i+1)-log(i))*(width/log(spectrum.length));
	   *    rect(x, height, rectangle_width, -h )
	   *  }
	  
	   *  var nyquist = 22050;
	   *  
	   *  // get the centroid
	   *  spectralCentroid = fft.getCentroid();
	   *  
	   *  // the mean_freq_index calculation is for the display.
	   *  var mean_freq_index = spectralCentroid/(nyquist/spectrum.length);
	   *
	   *  centroidplot = map(log(mean_freq_index), 0, log(spectrum.length), 0, width);
	   *
	   *
	   *  stroke(255,0,0); // the line showing where the centroid is will be red
	   *  
	   *  rect(centroidplot, 0, width / spectrum.length, height)
	   *  noStroke();
	   *  fill(255,255,255);  // text is white
	   *  textSize(40);
	   *  text("centroid: "+round(spectralCentroid)+" Hz", 10, 40);
	   *}
	   * </code></div>
	   */
	  p5.FFT.prototype.getCentroid = function () {
	    var nyquist = p5sound.audiocontext.sampleRate / 2;
	    var cumulative_sum = 0;
	    var centroid_normalization = 0;
	    for (var i = 0; i < this.freqDomain.length; i++) {
	      cumulative_sum += i * this.freqDomain[i];
	      centroid_normalization += this.freqDomain[i];
	    }
	    var mean_freq_index = 0;
	    if (centroid_normalization != 0) {
	      mean_freq_index = cumulative_sum / centroid_normalization;
	    }
	    var spec_centroid_freq = mean_freq_index * (nyquist / this.freqDomain.length);
	    return spec_centroid_freq;
	  };
	  /**
	   *  Smooth FFT analysis by averaging with the last analysis frame.
	   *  
	   *  @method smooth
	   *  @param {Number} smoothing    0.0 < smoothing < 1.0.
	   *                               Defaults to 0.8.
	   */
	  p5.FFT.prototype.smooth = function (s) {
	    if (s) {
	      this.smoothing = s;
	    }
	    this.analyser.smoothingTimeConstant = s;
	  };
	  p5.FFT.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this.analyser.disconnect();
	    this.analyser = undefined;
	  };
	  /**
	   *  Returns an array of average amplitude values for a given number
	   *  of frequency bands split equally. N defaults to 16.
	   *  <em>NOTE: analyze() must be called prior to linAverages(). Analyze()
	   *  tells the FFT to analyze frequency data, and linAverages() uses
	   *  the results to group them into a smaller set of averages.</em></p>
	   *  
	   *  @method  linAverages
	   *  @param  {Number}  N                Number of returned frequency groups 
	   *  @return {Array}   linearAverages   Array of average amplitude values for each group
	   */
	  p5.FFT.prototype.linAverages = function (N) {
	    var N = N || 16;
	    // This prevents undefined, null or 0 values of N
	    var spectrum = this.freqDomain;
	    var spectrumLength = spectrum.length;
	    var spectrumStep = Math.floor(spectrumLength / N);
	    var linearAverages = new Array(N);
	    // Keep a second index for the current average group and place the values accordingly
	    // with only one loop in the spectrum data
	    var groupIndex = 0;
	    for (var specIndex = 0; specIndex < spectrumLength; specIndex++) {
	      linearAverages[groupIndex] = linearAverages[groupIndex] !== undefined ? (linearAverages[groupIndex] + spectrum[specIndex]) / 2 : spectrum[specIndex];
	      // Increase the group index when the last element of the group is processed
	      if (specIndex % spectrumStep == spectrumStep - 1) {
	        groupIndex++;
	      }
	    }
	    return linearAverages;
	  };
	  /**
	   *  Returns an array of average amplitude values of the spectrum, for a given 
	   *  set of <a href="https://en.wikipedia.org/wiki/Octave_band" target="_blank">
	   *  Octave Bands</a>
	   *  <em>NOTE: analyze() must be called prior to logAverages(). Analyze()
	   *  tells the FFT to analyze frequency data, and logAverages() uses
	   *  the results to group them into a smaller set of averages.</em></p>
	   *  
	   *  @method  logAverages
	   *  @param  {Array}   octaveBands    Array of Octave Bands objects for grouping
	   *  @return {Array}   logAverages    Array of average amplitude values for each group
	   */
	  p5.FFT.prototype.logAverages = function (octaveBands) {
	    var nyquist = p5sound.audiocontext.sampleRate / 2;
	    var spectrum = this.freqDomain;
	    var spectrumLength = spectrum.length;
	    var logAverages = new Array(octaveBands.length);
	    // Keep a second index for the current average group and place the values accordingly
	    // With only one loop in the spectrum data
	    var octaveIndex = 0;
	    for (var specIndex = 0; specIndex < spectrumLength; specIndex++) {
	      var specIndexFrequency = Math.round(specIndex * nyquist / this.freqDomain.length);
	      // Increase the group index if the current frequency exceeds the limits of the band
	      if (specIndexFrequency > octaveBands[octaveIndex].hi) {
	        octaveIndex++;
	      }
	      logAverages[octaveIndex] = logAverages[octaveIndex] !== undefined ? (logAverages[octaveIndex] + spectrum[specIndex]) / 2 : spectrum[specIndex];
	    }
	    return logAverages;
	  };
	  /**
	   *  Calculates and Returns the 1/N
	   *  <a href="https://en.wikipedia.org/wiki/Octave_band" target="_blank">Octave Bands</a>
	   *  N defaults to 3 and minimum central frequency to 15.625Hz. 
	   *  (1/3 Octave Bands ~= 31 Frequency Bands)
	   *  Setting fCtr0 to a central value of a higher octave will ignore the lower bands
	   *  and produce less frequency groups.
	   * 
	   *  @method   getOctaveBands
	   *  @param  {Number}  N             Specifies the 1/N type of generated octave bands
	   *  @param  {Number}  fCtr0         Minimum central frequency for the lowest band
	   *  @return {Array}   octaveBands   Array of octave band objects with their bounds
	   */
	  p5.FFT.prototype.getOctaveBands = function (N, fCtr0) {
	    var N = N || 3;
	    // Default to 1/3 Octave Bands
	    var fCtr0 = fCtr0 || 15.625;
	    // Minimum central frequency, defaults to 15.625Hz 
	    var octaveBands = [];
	    var lastFrequencyBand = {
	      lo: fCtr0 / Math.pow(2, 1 / (2 * N)),
	      ctr: fCtr0,
	      hi: fCtr0 * Math.pow(2, 1 / (2 * N))
	    };
	    octaveBands.push(lastFrequencyBand);
	    var nyquist = p5sound.audiocontext.sampleRate / 2;
	    while (lastFrequencyBand.hi < nyquist) {
	      var newFrequencyBand = {};
	      newFrequencyBand.lo = lastFrequencyBand.hi, newFrequencyBand.ctr = lastFrequencyBand.ctr * Math.pow(2, 1 / N), newFrequencyBand.hi = newFrequencyBand.ctr * Math.pow(2, 1 / (2 * N)), octaveBands.push(newFrequencyBand);
	      lastFrequencyBand = newFrequencyBand;
	    }
	    return octaveBands;
	  };
	  // helper methods to convert type from float (dB) to int (0-255)
	  var freqToFloat = function (fft) {
	    if (fft.freqDomain instanceof Float32Array === false) {
	      fft.freqDomain = new Float32Array(fft.analyser.frequencyBinCount);
	    }
	  };
	  var freqToInt = function (fft) {
	    if (fft.freqDomain instanceof Uint8Array === false) {
	      fft.freqDomain = new Uint8Array(fft.analyser.frequencyBinCount);
	    }
	  };
	  var timeToFloat = function (fft) {
	    if (fft.timeDomain instanceof Float32Array === false) {
	      fft.timeDomain = new Float32Array(fft.analyser.frequencyBinCount);
	    }
	  };
	  var timeToInt = function (fft) {
	    if (fft.timeDomain instanceof Uint8Array === false) {
	      fft.timeDomain = new Uint8Array(fft.analyser.frequencyBinCount);
	    }
	  };
	}(master);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_core_Tone;
	Tone_core_Tone = function () {
	  'use strict';
	  function isUndef(val) {
	    return val === void 0;
	  }
	  function isFunction(val) {
	    return typeof val === 'function';
	  }
	  var audioContext;
	  if (isUndef(window.AudioContext)) {
	    window.AudioContext = window.webkitAudioContext;
	  }
	  if (isUndef(window.OfflineAudioContext)) {
	    window.OfflineAudioContext = window.webkitOfflineAudioContext;
	  }
	  if (!isUndef(AudioContext)) {
	    audioContext = new AudioContext();
	  } else {
	    throw new Error('Web Audio is not supported in this browser');
	  }
	  if (!isFunction(AudioContext.prototype.createGain)) {
	    AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;
	  }
	  if (!isFunction(AudioContext.prototype.createDelay)) {
	    AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;
	  }
	  if (!isFunction(AudioContext.prototype.createPeriodicWave)) {
	    AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;
	  }
	  if (!isFunction(AudioBufferSourceNode.prototype.start)) {
	    AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;
	  }
	  if (!isFunction(AudioBufferSourceNode.prototype.stop)) {
	    AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;
	  }
	  if (!isFunction(OscillatorNode.prototype.start)) {
	    OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;
	  }
	  if (!isFunction(OscillatorNode.prototype.stop)) {
	    OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;
	  }
	  if (!isFunction(OscillatorNode.prototype.setPeriodicWave)) {
	    OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;
	  }
	  AudioNode.prototype._nativeConnect = AudioNode.prototype.connect;
	  AudioNode.prototype.connect = function (B, outNum, inNum) {
	    if (B.input) {
	      if (Array.isArray(B.input)) {
	        if (isUndef(inNum)) {
	          inNum = 0;
	        }
	        this.connect(B.input[inNum]);
	      } else {
	        this.connect(B.input, outNum, inNum);
	      }
	    } else {
	      try {
	        if (B instanceof AudioNode) {
	          this._nativeConnect(B, outNum, inNum);
	        } else {
	          this._nativeConnect(B, outNum);
	        }
	      } catch (e) {
	        throw new Error('error connecting to node: ' + B);
	      }
	    }
	  };
	  var Tone = function (inputs, outputs) {
	    if (isUndef(inputs) || inputs === 1) {
	      this.input = this.context.createGain();
	    } else if (inputs > 1) {
	      this.input = new Array(inputs);
	    }
	    if (isUndef(outputs) || outputs === 1) {
	      this.output = this.context.createGain();
	    } else if (outputs > 1) {
	      this.output = new Array(inputs);
	    }
	  };
	  Tone.prototype.set = function (params, value, rampTime) {
	    if (this.isObject(params)) {
	      rampTime = value;
	    } else if (this.isString(params)) {
	      var tmpObj = {};
	      tmpObj[params] = value;
	      params = tmpObj;
	    }
	    for (var attr in params) {
	      value = params[attr];
	      var parent = this;
	      if (attr.indexOf('.') !== -1) {
	        var attrSplit = attr.split('.');
	        for (var i = 0; i < attrSplit.length - 1; i++) {
	          parent = parent[attrSplit[i]];
	        }
	        attr = attrSplit[attrSplit.length - 1];
	      }
	      var param = parent[attr];
	      if (isUndef(param)) {
	        continue;
	      }
	      if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {
	        if (param.value !== value) {
	          if (isUndef(rampTime)) {
	            param.value = value;
	          } else {
	            param.rampTo(value, rampTime);
	          }
	        }
	      } else if (param instanceof AudioParam) {
	        if (param.value !== value) {
	          param.value = value;
	        }
	      } else if (param instanceof Tone) {
	        param.set(value);
	      } else if (param !== value) {
	        parent[attr] = value;
	      }
	    }
	    return this;
	  };
	  Tone.prototype.get = function (params) {
	    if (isUndef(params)) {
	      params = this._collectDefaults(this.constructor);
	    } else if (this.isString(params)) {
	      params = [params];
	    }
	    var ret = {};
	    for (var i = 0; i < params.length; i++) {
	      var attr = params[i];
	      var parent = this;
	      var subRet = ret;
	      if (attr.indexOf('.') !== -1) {
	        var attrSplit = attr.split('.');
	        for (var j = 0; j < attrSplit.length - 1; j++) {
	          var subAttr = attrSplit[j];
	          subRet[subAttr] = subRet[subAttr] || {};
	          subRet = subRet[subAttr];
	          parent = parent[subAttr];
	        }
	        attr = attrSplit[attrSplit.length - 1];
	      }
	      var param = parent[attr];
	      if (this.isObject(params[attr])) {
	        subRet[attr] = param.get();
	      } else if (Tone.Signal && param instanceof Tone.Signal) {
	        subRet[attr] = param.value;
	      } else if (Tone.Param && param instanceof Tone.Param) {
	        subRet[attr] = param.value;
	      } else if (param instanceof AudioParam) {
	        subRet[attr] = param.value;
	      } else if (param instanceof Tone) {
	        subRet[attr] = param.get();
	      } else if (!isFunction(param) && !isUndef(param)) {
	        subRet[attr] = param;
	      }
	    }
	    return ret;
	  };
	  Tone.prototype._collectDefaults = function (constr) {
	    var ret = [];
	    if (!isUndef(constr.defaults)) {
	      ret = Object.keys(constr.defaults);
	    }
	    if (!isUndef(constr._super)) {
	      var superDefs = this._collectDefaults(constr._super);
	      for (var i = 0; i < superDefs.length; i++) {
	        if (ret.indexOf(superDefs[i]) === -1) {
	          ret.push(superDefs[i]);
	        }
	      }
	    }
	    return ret;
	  };
	  Tone.prototype.toString = function () {
	    for (var className in Tone) {
	      var isLetter = className[0].match(/^[A-Z]$/);
	      var sameConstructor = Tone[className] === this.constructor;
	      if (isFunction(Tone[className]) && isLetter && sameConstructor) {
	        return className;
	      }
	    }
	    return 'Tone';
	  };
	  Tone.context = audioContext;
	  Tone.prototype.context = Tone.context;
	  Tone.prototype.bufferSize = 2048;
	  Tone.prototype.blockTime = 128 / Tone.context.sampleRate;
	  Tone.prototype.dispose = function () {
	    if (!this.isUndef(this.input)) {
	      if (this.input instanceof AudioNode) {
	        this.input.disconnect();
	      }
	      this.input = null;
	    }
	    if (!this.isUndef(this.output)) {
	      if (this.output instanceof AudioNode) {
	        this.output.disconnect();
	      }
	      this.output = null;
	    }
	    return this;
	  };
	  var _silentNode = null;
	  Tone.prototype.noGC = function () {
	    this.output.connect(_silentNode);
	    return this;
	  };
	  AudioNode.prototype.noGC = function () {
	    this.connect(_silentNode);
	    return this;
	  };
	  Tone.prototype.connect = function (unit, outputNum, inputNum) {
	    if (Array.isArray(this.output)) {
	      outputNum = this.defaultArg(outputNum, 0);
	      this.output[outputNum].connect(unit, 0, inputNum);
	    } else {
	      this.output.connect(unit, outputNum, inputNum);
	    }
	    return this;
	  };
	  Tone.prototype.disconnect = function (outputNum) {
	    if (Array.isArray(this.output)) {
	      outputNum = this.defaultArg(outputNum, 0);
	      this.output[outputNum].disconnect();
	    } else {
	      this.output.disconnect();
	    }
	    return this;
	  };
	  Tone.prototype.connectSeries = function () {
	    if (arguments.length > 1) {
	      var currentUnit = arguments[0];
	      for (var i = 1; i < arguments.length; i++) {
	        var toUnit = arguments[i];
	        currentUnit.connect(toUnit);
	        currentUnit = toUnit;
	      }
	    }
	    return this;
	  };
	  Tone.prototype.connectParallel = function () {
	    var connectFrom = arguments[0];
	    if (arguments.length > 1) {
	      for (var i = 1; i < arguments.length; i++) {
	        var connectTo = arguments[i];
	        connectFrom.connect(connectTo);
	      }
	    }
	    return this;
	  };
	  Tone.prototype.chain = function () {
	    if (arguments.length > 0) {
	      var currentUnit = this;
	      for (var i = 0; i < arguments.length; i++) {
	        var toUnit = arguments[i];
	        currentUnit.connect(toUnit);
	        currentUnit = toUnit;
	      }
	    }
	    return this;
	  };
	  Tone.prototype.fan = function () {
	    if (arguments.length > 0) {
	      for (var i = 0; i < arguments.length; i++) {
	        this.connect(arguments[i]);
	      }
	    }
	    return this;
	  };
	  AudioNode.prototype.chain = Tone.prototype.chain;
	  AudioNode.prototype.fan = Tone.prototype.fan;
	  Tone.prototype.defaultArg = function (given, fallback) {
	    if (this.isObject(given) && this.isObject(fallback)) {
	      var ret = {};
	      for (var givenProp in given) {
	        ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);
	      }
	      for (var fallbackProp in fallback) {
	        ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);
	      }
	      return ret;
	    } else {
	      return isUndef(given) ? fallback : given;
	    }
	  };
	  Tone.prototype.optionsObject = function (values, keys, defaults) {
	    var options = {};
	    if (values.length === 1 && this.isObject(values[0])) {
	      options = values[0];
	    } else {
	      for (var i = 0; i < keys.length; i++) {
	        options[keys[i]] = values[i];
	      }
	    }
	    if (!this.isUndef(defaults)) {
	      return this.defaultArg(options, defaults);
	    } else {
	      return options;
	    }
	  };
	  Tone.prototype.isUndef = isUndef;
	  Tone.prototype.isFunction = isFunction;
	  Tone.prototype.isNumber = function (arg) {
	    return typeof arg === 'number';
	  };
	  Tone.prototype.isObject = function (arg) {
	    return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;
	  };
	  Tone.prototype.isBoolean = function (arg) {
	    return typeof arg === 'boolean';
	  };
	  Tone.prototype.isArray = function (arg) {
	    return Array.isArray(arg);
	  };
	  Tone.prototype.isString = function (arg) {
	    return typeof arg === 'string';
	  };
	  Tone.noOp = function () {
	  };
	  Tone.prototype._readOnly = function (property) {
	    if (Array.isArray(property)) {
	      for (var i = 0; i < property.length; i++) {
	        this._readOnly(property[i]);
	      }
	    } else {
	      Object.defineProperty(this, property, {
	        writable: false,
	        enumerable: true
	      });
	    }
	  };
	  Tone.prototype._writable = function (property) {
	    if (Array.isArray(property)) {
	      for (var i = 0; i < property.length; i++) {
	        this._writable(property[i]);
	      }
	    } else {
	      Object.defineProperty(this, property, { writable: true });
	    }
	  };
	  Tone.State = {
	    Started: 'started',
	    Stopped: 'stopped',
	    Paused: 'paused'
	  };
	  Tone.prototype.equalPowerScale = function (percent) {
	    var piFactor = 0.5 * Math.PI;
	    return Math.sin(percent * piFactor);
	  };
	  Tone.prototype.dbToGain = function (db) {
	    return Math.pow(2, db / 6);
	  };
	  Tone.prototype.gainToDb = function (gain) {
	    return 20 * (Math.log(gain) / Math.LN10);
	  };
	  Tone.prototype.now = function () {
	    return this.context.currentTime;
	  };
	  Tone.extend = function (child, parent) {
	    if (isUndef(parent)) {
	      parent = Tone;
	    }
	    function TempConstructor() {
	    }
	    TempConstructor.prototype = parent.prototype;
	    child.prototype = new TempConstructor();
	    child.prototype.constructor = child;
	    child._super = parent;
	  };
	  var newContextCallbacks = [];
	  Tone._initAudioContext = function (callback) {
	    callback(Tone.context);
	    newContextCallbacks.push(callback);
	  };
	  Tone.setContext = function (ctx) {
	    Tone.prototype.context = ctx;
	    Tone.context = ctx;
	    for (var i = 0; i < newContextCallbacks.length; i++) {
	      newContextCallbacks[i](ctx);
	    }
	  };
	  Tone.startMobile = function () {
	    var osc = Tone.context.createOscillator();
	    var silent = Tone.context.createGain();
	    silent.gain.value = 0;
	    osc.connect(silent);
	    silent.connect(Tone.context.destination);
	    var now = Tone.context.currentTime;
	    osc.start(now);
	    osc.stop(now + 1);
	  };
	  Tone._initAudioContext(function (audioContext) {
	    Tone.prototype.blockTime = 128 / audioContext.sampleRate;
	    _silentNode = audioContext.createGain();
	    _silentNode.gain.value = 0;
	    _silentNode.connect(audioContext.destination);
	  });
	  Tone.version = 'r7-dev';
	  return Tone;
	}();
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_signal_SignalBase;
	Tone_signal_SignalBase = function (Tone) {
	  'use strict';
	  Tone.SignalBase = function () {
	  };
	  Tone.extend(Tone.SignalBase);
	  Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {
	    if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {
	      node._param.cancelScheduledValues(0);
	      node._param.value = 0;
	      node.overridden = true;
	    } else if (node instanceof AudioParam) {
	      node.cancelScheduledValues(0);
	      node.value = 0;
	    }
	    Tone.prototype.connect.call(this, node, outputNumber, inputNumber);
	    return this;
	  };
	  return Tone.SignalBase;
	}(Tone_core_Tone);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_signal_WaveShaper;
	Tone_signal_WaveShaper = function (Tone) {
	  'use strict';
	  Tone.WaveShaper = function (mapping, bufferLen) {
	    this._shaper = this.input = this.output = this.context.createWaveShaper();
	    this._curve = null;
	    if (Array.isArray(mapping)) {
	      this.curve = mapping;
	    } else if (isFinite(mapping) || this.isUndef(mapping)) {
	      this._curve = new Float32Array(this.defaultArg(mapping, 1024));
	    } else if (this.isFunction(mapping)) {
	      this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));
	      this.setMap(mapping);
	    }
	  };
	  Tone.extend(Tone.WaveShaper, Tone.SignalBase);
	  Tone.WaveShaper.prototype.setMap = function (mapping) {
	    for (var i = 0, len = this._curve.length; i < len; i++) {
	      var normalized = i / len * 2 - 1;
	      this._curve[i] = mapping(normalized, i);
	    }
	    this._shaper.curve = this._curve;
	    return this;
	  };
	  Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {
	    get: function () {
	      return this._shaper.curve;
	    },
	    set: function (mapping) {
	      this._curve = new Float32Array(mapping);
	      this._shaper.curve = this._curve;
	    }
	  });
	  Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {
	    get: function () {
	      return this._shaper.oversample;
	    },
	    set: function (oversampling) {
	      if ([
	          'none',
	          '2x',
	          '4x'
	        ].indexOf(oversampling) !== -1) {
	        this._shaper.oversample = oversampling;
	      } else {
	        throw new Error('invalid oversampling: ' + oversampling);
	      }
	    }
	  });
	  Tone.WaveShaper.prototype.dispose = function () {
	    Tone.prototype.dispose.call(this);
	    this._shaper.disconnect();
	    this._shaper = null;
	    this._curve = null;
	    return this;
	  };
	  return Tone.WaveShaper;
	}(Tone_core_Tone);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_core_Type;
	Tone_core_Type = function (Tone) {
	  'use strict';
	  Tone.Type = {
	    Default: 'number',
	    Time: 'time',
	    Frequency: 'frequency',
	    NormalRange: 'normalRange',
	    AudioRange: 'audioRange',
	    Decibels: 'db',
	    Interval: 'interval',
	    BPM: 'bpm',
	    Positive: 'positive',
	    Cents: 'cents',
	    Degrees: 'degrees',
	    MIDI: 'midi',
	    TransportTime: 'transportTime',
	    Ticks: 'tick',
	    Note: 'note',
	    Milliseconds: 'milliseconds',
	    Notation: 'notation'
	  };
	  Tone.prototype.isNowRelative = function () {
	    var nowRelative = new RegExp(/^\s*\+(.)+/i);
	    return function (note) {
	      return nowRelative.test(note);
	    };
	  }();
	  Tone.prototype.isTicks = function () {
	    var tickFormat = new RegExp(/^\d+i$/i);
	    return function (note) {
	      return tickFormat.test(note);
	    };
	  }();
	  Tone.prototype.isNotation = function () {
	    var notationFormat = new RegExp(/^[0-9]+[mnt]$/i);
	    return function (note) {
	      return notationFormat.test(note);
	    };
	  }();
	  Tone.prototype.isTransportTime = function () {
	    var transportTimeFormat = new RegExp(/^(\d+(\.\d+)?\:){1,2}(\d+(\.\d+)?)?$/i);
	    return function (transportTime) {
	      return transportTimeFormat.test(transportTime);
	    };
	  }();
	  Tone.prototype.isNote = function () {
	    var noteFormat = new RegExp(/^[a-g]{1}(b|#|x|bb)?-?[0-9]+$/i);
	    return function (note) {
	      return noteFormat.test(note);
	    };
	  }();
	  Tone.prototype.isFrequency = function () {
	    var freqFormat = new RegExp(/^\d*\.?\d+hz$/i);
	    return function (freq) {
	      return freqFormat.test(freq);
	    };
	  }();
	  function getTransportBpm() {
	    if (Tone.Transport && Tone.Transport.bpm) {
	      return Tone.Transport.bpm.value;
	    } else {
	      return 120;
	    }
	  }
	  function getTransportTimeSignature() {
	    if (Tone.Transport && Tone.Transport.timeSignature) {
	      return Tone.Transport.timeSignature;
	    } else {
	      return 4;
	    }
	  }
	  Tone.prototype.notationToSeconds = function (notation, bpm, timeSignature) {
	    bpm = this.defaultArg(bpm, getTransportBpm());
	    timeSignature = this.defaultArg(timeSignature, getTransportTimeSignature());
	    var beatTime = 60 / bpm;
	    if (notation === '1n') {
	      notation = '1m';
	    }
	    var subdivision = parseInt(notation, 10);
	    var beats = 0;
	    if (subdivision === 0) {
	      beats = 0;
	    }
	    var lastLetter = notation.slice(-1);
	    if (lastLetter === 't') {
	      beats = 4 / subdivision * 2 / 3;
	    } else if (lastLetter === 'n') {
	      beats = 4 / subdivision;
	    } else if (lastLetter === 'm') {
	      beats = subdivision * timeSignature;
	    } else {
	      beats = 0;
	    }
	    return beatTime * beats;
	  };
	  Tone.prototype.transportTimeToSeconds = function (transportTime, bpm, timeSignature) {
	    bpm = this.defaultArg(bpm, getTransportBpm());
	    timeSignature = this.defaultArg(timeSignature, getTransportTimeSignature());
	    var measures = 0;
	    var quarters = 0;
	    var sixteenths = 0;
	    var split = transportTime.split(':');
	    if (split.length === 2) {
	      measures = parseFloat(split[0]);
	      quarters = parseFloat(split[1]);
	    } else if (split.length === 1) {
	      quarters = parseFloat(split[0]);
	    } else if (split.length === 3) {
	      measures = parseFloat(split[0]);
	      quarters = parseFloat(split[1]);
	      sixteenths = parseFloat(split[2]);
	    }
	    var beats = measures * timeSignature + quarters + sixteenths / 4;
	    return beats * (60 / bpm);
	  };
	  Tone.prototype.ticksToSeconds = function (ticks, bpm) {
	    if (this.isUndef(Tone.Transport)) {
	      return 0;
	    }
	    ticks = parseFloat(ticks);
	    bpm = this.defaultArg(bpm, getTransportBpm());
	    var tickTime = 60 / bpm / Tone.Transport.PPQ;
	    return tickTime * ticks;
	  };
	  Tone.prototype.frequencyToSeconds = function (freq) {
	    return 1 / parseFloat(freq);
	  };
	  Tone.prototype.samplesToSeconds = function (samples) {
	    return samples / this.context.sampleRate;
	  };
	  Tone.prototype.secondsToSamples = function (seconds) {
	    return seconds * this.context.sampleRate;
	  };
	  Tone.prototype.secondsToTransportTime = function (seconds, bpm, timeSignature) {
	    bpm = this.defaultArg(bpm, getTransportBpm());
	    timeSignature = this.defaultArg(timeSignature, getTransportTimeSignature());
	    var quarterTime = 60 / bpm;
	    var quarters = seconds / quarterTime;
	    var measures = Math.floor(quarters / timeSignature);
	    var sixteenths = quarters % 1 * 4;
	    quarters = Math.floor(quarters) % timeSignature;
	    var progress = [
	      measures,
	      quarters,
	      sixteenths
	    ];
	    return progress.join(':');
	  };
	  Tone.prototype.secondsToFrequency = function (seconds) {
	    return 1 / seconds;
	  };
	  Tone.prototype.toTransportTime = function (time, bpm, timeSignature) {
	    var seconds = this.toSeconds(time);
	    return this.secondsToTransportTime(seconds, bpm, timeSignature);
	  };
	  Tone.prototype.toFrequency = function (freq, now) {
	    if (this.isFrequency(freq)) {
	      return parseFloat(freq);
	    } else if (this.isNotation(freq) || this.isTransportTime(freq)) {
	      return this.secondsToFrequency(this.toSeconds(freq, now));
	    } else if (this.isNote(freq)) {
	      return this.noteToFrequency(freq);
	    } else {
	      return freq;
	    }
	  };
	  Tone.prototype.toTicks = function (time) {
	    if (this.isUndef(Tone.Transport)) {
	      return 0;
	    }
	    var bpm = Tone.Transport.bpm.value;
	    var plusNow = 0;
	    if (this.isNowRelative(time)) {
	      time = time.replace('+', '');
	      plusNow = Tone.Transport.ticks;
	    } else if (this.isUndef(time)) {
	      return Tone.Transport.ticks;
	    }
	    var seconds = this.toSeconds(time);
	    var quarter = 60 / bpm;
	    var quarters = seconds / quarter;
	    var tickNum = quarters * Tone.Transport.PPQ;
	    return Math.round(tickNum + plusNow);
	  };
	  Tone.prototype.toSamples = function (time) {
	    var seconds = this.toSeconds(time);
	    return Math.round(seconds * this.context.sampleRate);
	  };
	  Tone.prototype.toSeconds = function (time, now) {
	    now = this.defaultArg(now, this.now());
	    if (this.isNumber(time)) {
	      return time;
	    } else if (this.isString(time)) {
	      var plusTime = 0;
	      if (this.isNowRelative(time)) {
	        time = time.replace('+', '');
	        plusTime = now;
	      }
	      var betweenParens = time.match(/\(([^)(]+)\)/g);
	      if (betweenParens) {
	        for (var j = 0; j < betweenParens.length; j++) {
	          var symbol = betweenParens[j].replace(/[\(\)]/g, '');
	          var symbolVal = this.toSeconds(symbol);
	          time = time.replace(betweenParens[j], symbolVal);
	        }
	      }
	      if (time.indexOf('@') !== -1) {
	        var quantizationSplit = time.split('@');
	        if (!this.isUndef(Tone.Transport)) {
	          var toQuantize = quantizationSplit[0].trim();
	          if (toQuantize === '') {
	            toQuantize = undefined;
	          }
	          if (plusTime > 0) {
	            toQuantize = '+' + toQuantize;
	            plusTime = 0;
	          }
	          var subdivision = quantizationSplit[1].trim();
	          time = Tone.Transport.quantize(toQuantize, subdivision);
	        } else {
	          throw new Error('quantization requires Tone.Transport');
	        }
	      } else {
	        var components = time.split(/[\(\)\-\+\/\*]/);
	        if (components.length > 1) {
	          var originalTime = time;
	          for (var i = 0; i < components.length; i++) {
	            var symb = components[i].trim();
	            if (symb !== '') {
	              var val = this.toSeconds(symb);
	              time = time.replace(symb, val);
	            }
	          }
	          try {
	            time = eval(time);
	          } catch (e) {
	            throw new EvalError('cannot evaluate Time: ' + originalTime);
	          }
	        } else if (this.isNotation(time)) {
	          time = this.notationToSeconds(time);
	        } else if (this.isTransportTime(time)) {
	          time = this.transportTimeToSeconds(time);
	        } else if (this.isFrequency(time)) {
	          time = this.frequencyToSeconds(time);
	        } else if (this.isTicks(time)) {
	          time = this.ticksToSeconds(time);
	        } else {
	          time = parseFloat(time);
	        }
	      }
	      return time + plusTime;
	    } else {
	      return now;
	    }
	  };
	  Tone.prototype.toNotation = function (time, bpm, timeSignature) {
	    var testNotations = [
	      '1m',
	      '2n',
	      '4n',
	      '8n',
	      '16n',
	      '32n',
	      '64n',
	      '128n'
	    ];
	    var retNotation = toNotationHelper.call(this, time, bpm, timeSignature, testNotations);
	    var testTripletNotations = [
	      '1m',
	      '2n',
	      '2t',
	      '4n',
	      '4t',
	      '8n',
	      '8t',
	      '16n',
	      '16t',
	      '32n',
	      '32t',
	      '64n',
	      '64t',
	      '128n'
	    ];
	    var retTripletNotation = toNotationHelper.call(this, time, bpm, timeSignature, testTripletNotations);
	    if (retTripletNotation.split('+').length < retNotation.split('+').length) {
	      return retTripletNotation;
	    } else {
	      return retNotation;
	    }
	  };
	  function toNotationHelper(time, bpm, timeSignature, testNotations) {
	    var seconds = this.toSeconds(time);
	    var threshold = this.notationToSeconds(testNotations[testNotations.length - 1], bpm, timeSignature);
	    var retNotation = '';
	    for (var i = 0; i < testNotations.length; i++) {
	      var notationTime = this.notationToSeconds(testNotations[i], bpm, timeSignature);
	      var multiple = seconds / notationTime;
	      var floatingPointError = 0.000001;
	      if (1 - multiple % 1 < floatingPointError) {
	        multiple += floatingPointError;
	      }
	      multiple = Math.floor(multiple);
	      if (multiple > 0) {
	        if (multiple === 1) {
	          retNotation += testNotations[i];
	        } else {
	          retNotation += multiple.toString() + '*' + testNotations[i];
	        }
	        seconds -= multiple * notationTime;
	        if (seconds < threshold) {
	          break;
	        } else {
	          retNotation += ' + ';
	        }
	      }
	    }
	    if (retNotation === '') {
	      retNotation = '0';
	    }
	    return retNotation;
	  }
	  Tone.prototype.fromUnits = function (val, units) {
	    if (this.convert || this.isUndef(this.convert)) {
	      switch (units) {
	      case Tone.Type.Time:
	        return this.toSeconds(val);
	      case Tone.Type.Frequency:
	        return this.toFrequency(val);
	      case Tone.Type.Decibels:
	        return this.dbToGain(val);
	      case Tone.Type.NormalRange:
	        return Math.min(Math.max(val, 0), 1);
	      case Tone.Type.AudioRange:
	        return Math.min(Math.max(val, -1), 1);
	      case Tone.Type.Positive:
	        return Math.max(val, 0);
	      default:
	        return val;
	      }
	    } else {
	      return val;
	    }
	  };
	  Tone.prototype.toUnits = function (val, units) {
	    if (this.convert || this.isUndef(this.convert)) {
	      switch (units) {
	      case Tone.Type.Decibels:
	        return this.gainToDb(val);
	      default:
	        return val;
	      }
	    } else {
	      return val;
	    }
	  };
	  var noteToScaleIndex = {
	    'cbb': -2,
	    'cb': -1,
	    'c': 0,
	    'c#': 1,
	    'cx': 2,
	    'dbb': 0,
	    'db': 1,
	    'd': 2,
	    'd#': 3,
	    'dx': 4,
	    'ebb': 2,
	    'eb': 3,
	    'e': 4,
	    'e#': 5,
	    'ex': 6,
	    'fbb': 3,
	    'fb': 4,
	    'f': 5,
	    'f#': 6,
	    'fx': 7,
	    'gbb': 5,
	    'gb': 6,
	    'g': 7,
	    'g#': 8,
	    'gx': 9,
	    'abb': 7,
	    'ab': 8,
	    'a': 9,
	    'a#': 10,
	    'ax': 11,
	    'bbb': 9,
	    'bb': 10,
	    'b': 11,
	    'b#': 12,
	    'bx': 13
	  };
	  var scaleIndexToNote = [
	    'C',
	    'C#',
	    'D',
	    'D#',
	    'E',
	    'F',
	    'F#',
	    'G',
	    'G#',
	    'A',
	    'A#',
	    'B'
	  ];
	  Tone.A4 = 440;
	  Tone.prototype.noteToFrequency = function (note) {
	    var parts = note.split(/(-?\d+)/);
	    if (parts.length === 3) {
	      var index = noteToScaleIndex[parts[0].toLowerCase()];
	      var octave = parts[1];
	      var noteNumber = index + (parseInt(octave, 10) + 1) * 12;
	      return this.midiToFrequency(noteNumber);
	    } else {
	      return 0;
	    }
	  };
	  Tone.prototype.frequencyToNote = function (freq) {
	    var log = Math.log(freq / Tone.A4) / Math.LN2;
	    var noteNumber = Math.round(12 * log) + 57;
	    var octave = Math.floor(noteNumber / 12);
	    if (octave < 0) {
	      noteNumber += -12 * octave;
	    }
	    var noteName = scaleIndexToNote[noteNumber % 12];
	    return noteName + octave.toString();
	  };
	  Tone.prototype.intervalToFrequencyRatio = function (interval) {
	    return Math.pow(2, interval / 12);
	  };
	  Tone.prototype.midiToNote = function (midiNumber) {
	    var octave = Math.floor(midiNumber / 12) - 1;
	    var note = midiNumber % 12;
	    return scaleIndexToNote[note] + octave;
	  };
	  Tone.prototype.noteToMidi = function (note) {
	    var parts = note.split(/(\d+)/);
	    if (parts.length === 3) {
	      var index = noteToScaleIndex[parts[0].toLowerCase()];
	      var octave = parts[1];
	      return index + (parseInt(octave, 10) + 1) * 12;
	    } else {
	      return 0;
	    }
	  };
	  Tone.prototype.midiToFrequency = function (midi) {
	    return Tone.A4 * Math.pow(2, (midi - 69) / 12);
	  };
	  return Tone;
	}(Tone_core_Tone);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_core_Param;
	Tone_core_Param = function (Tone) {
	  'use strict';
	  Tone.Param = function () {
	    var options = this.optionsObject(arguments, [
	      'param',
	      'units',
	      'convert'
	    ], Tone.Param.defaults);
	    this._param = this.input = options.param;
	    this.units = options.units;
	    this.convert = options.convert;
	    this.overridden = false;
	    if (!this.isUndef(options.value)) {
	      this.value = options.value;
	    }
	  };
	  Tone.extend(Tone.Param);
	  Tone.Param.defaults = {
	    'units': Tone.Type.Default,
	    'convert': true,
	    'param': undefined
	  };
	  Object.defineProperty(Tone.Param.prototype, 'value', {
	    get: function () {
	      return this._toUnits(this._param.value);
	    },
	    set: function (value) {
	      var convertedVal = this._fromUnits(value);
	      this._param.value = convertedVal;
	    }
	  });
	  Tone.Param.prototype._fromUnits = function (val) {
	    if (this.convert || this.isUndef(this.convert)) {
	      switch (this.units) {
	      case Tone.Type.Time:
	        return this.toSeconds(val);
	      case Tone.Type.Frequency:
	        return this.toFrequency(val);
	      case Tone.Type.Decibels:
	        return this.dbToGain(val);
	      case Tone.Type.NormalRange:
	        return Math.min(Math.max(val, 0), 1);
	      case Tone.Type.AudioRange:
	        return Math.min(Math.max(val, -1), 1);
	      case Tone.Type.Positive:
	        return Math.max(val, 0);
	      default:
	        return val;
	      }
	    } else {
	      return val;
	    }
	  };
	  Tone.Param.prototype._toUnits = function (val) {
	    if (this.convert || this.isUndef(this.convert)) {
	      switch (this.units) {
	      case Tone.Type.Decibels:
	        return this.gainToDb(val);
	      default:
	        return val;
	      }
	    } else {
	      return val;
	    }
	  };
	  Tone.Param.prototype._minOutput = 0.00001;
	  Tone.Param.prototype.setValueAtTime = function (value, time) {
	    value = this._fromUnits(value);
	    this._param.setValueAtTime(value, this.toSeconds(time));
	    return this;
	  };
	  Tone.Param.prototype.setRampPoint = function (now) {
	    now = this.defaultArg(now, this.now());
	    var currentVal = this._param.value;
	    this._param.setValueAtTime(currentVal, now);
	    return this;
	  };
	  Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {
	    value = this._fromUnits(value);
	    this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));
	    return this;
	  };
	  Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {
	    value = this._fromUnits(value);
	    value = Math.max(this._minOutput, value);
	    this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));
	    return this;
	  };
	  Tone.Param.prototype.exponentialRampToValue = function (value, rampTime) {
	    var now = this.now();
	    var currentVal = this.value;
	    this.setValueAtTime(Math.max(currentVal, this._minOutput), now);
	    this.exponentialRampToValueAtTime(value, now + this.toSeconds(rampTime));
	    return this;
	  };
	  Tone.Param.prototype.linearRampToValue = function (value, rampTime) {
	    var now = this.now();
	    this.setRampPoint(now);
	    this.linearRampToValueAtTime(value, now + this.toSeconds(rampTime));
	    return this;
	  };
	  Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
	    value = this._fromUnits(value);
	    value = Math.max(this._minOutput, value);
	    timeConstant = Math.max(this._minOutput, timeConstant);
	    this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);
	    return this;
	  };
	  Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {
	    for (var i = 0; i < values.length; i++) {
	      values[i] = this._fromUnits(values[i]);
	    }
	    this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));
	    return this;
	  };
	  Tone.Param.prototype.cancelScheduledValues = function (startTime) {
	    this._param.cancelScheduledValues(this.toSeconds(startTime));
	    return this;
	  };
	  Tone.Param.prototype.rampTo = function (value, rampTime) {
	    rampTime = this.defaultArg(rampTime, 0);
	    if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM) {
	      this.exponentialRampToValue(value, rampTime);
	    } else {
	      this.linearRampToValue(value, rampTime);
	    }
	    return this;
	  };
	  Tone.Param.prototype.dispose = function () {
	    Tone.prototype.dispose.call(this);
	    this._param = null;
	    return this;
	  };
	  return Tone.Param;
	}(Tone_core_Tone);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_core_Gain;
	Tone_core_Gain = function (Tone) {
	  'use strict';
	  Tone.Gain = function () {
	    var options = this.optionsObject(arguments, [
	      'gain',
	      'units'
	    ], Tone.Gain.defaults);
	    this.input = this.output = this._gainNode = this.context.createGain();
	    this.gain = new Tone.Param({
	      'param': this._gainNode.gain,
	      'units': options.units,
	      'value': options.gain,
	      'convert': options.convert
	    });
	    this._readOnly('gain');
	  };
	  Tone.extend(Tone.Gain);
	  Tone.Gain.defaults = {
	    'gain': 1,
	    'convert': true
	  };
	  Tone.Gain.prototype.dispose = function () {
	    Tone.Param.prototype.dispose.call(this);
	    this._gainNode.disconnect();
	    this._gainNode = null;
	    this._writable('gain');
	    this.gain.dispose();
	    this.gain = null;
	  };
	  return Tone.Gain;
	}(Tone_core_Tone, Tone_core_Param);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_signal_Signal;
	Tone_signal_Signal = function (Tone) {
	  'use strict';
	  Tone.Signal = function () {
	    var options = this.optionsObject(arguments, [
	      'value',
	      'units'
	    ], Tone.Signal.defaults);
	    this.output = this._gain = this.context.createGain();
	    options.param = this._gain.gain;
	    Tone.Param.call(this, options);
	    this.input = this._param = this._gain.gain;
	    Tone.Signal._constant.chain(this._gain);
	  };
	  Tone.extend(Tone.Signal, Tone.Param);
	  Tone.Signal.defaults = {
	    'value': 0,
	    'units': Tone.Type.Default,
	    'convert': true
	  };
	  Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;
	  Tone.Signal.prototype.dispose = function () {
	    Tone.Param.prototype.dispose.call(this);
	    this._param = null;
	    this._gain.disconnect();
	    this._gain = null;
	    return this;
	  };
	  Tone.Signal._constant = null;
	  Tone._initAudioContext(function (audioContext) {
	    var buffer = audioContext.createBuffer(1, 128, audioContext.sampleRate);
	    var arr = buffer.getChannelData(0);
	    for (var i = 0; i < arr.length; i++) {
	      arr[i] = 1;
	    }
	    Tone.Signal._constant = audioContext.createBufferSource();
	    Tone.Signal._constant.channelCount = 1;
	    Tone.Signal._constant.channelCountMode = 'explicit';
	    Tone.Signal._constant.buffer = buffer;
	    Tone.Signal._constant.loop = true;
	    Tone.Signal._constant.start(0);
	    Tone.Signal._constant.noGC();
	  });
	  return Tone.Signal;
	}(Tone_core_Tone, Tone_signal_WaveShaper, Tone_core_Type, Tone_core_Param);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_signal_Add;
	Tone_signal_Add = function (Tone) {
	  'use strict';
	  Tone.Add = function (value) {
	    Tone.call(this, 2, 0);
	    this._sum = this.input[0] = this.input[1] = this.output = this.context.createGain();
	    this._param = this.input[1] = new Tone.Signal(value);
	    this._param.connect(this._sum);
	  };
	  Tone.extend(Tone.Add, Tone.Signal);
	  Tone.Add.prototype.dispose = function () {
	    Tone.prototype.dispose.call(this);
	    this._sum.disconnect();
	    this._sum = null;
	    this._param.dispose();
	    this._param = null;
	    return this;
	  };
	  return Tone.Add;
	}(Tone_core_Tone);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_signal_Multiply;
	Tone_signal_Multiply = function (Tone) {
	  'use strict';
	  Tone.Multiply = function (value) {
	    Tone.call(this, 2, 0);
	    this._mult = this.input[0] = this.output = this.context.createGain();
	    this._param = this.input[1] = this.output.gain;
	    this._param.value = this.defaultArg(value, 0);
	  };
	  Tone.extend(Tone.Multiply, Tone.Signal);
	  Tone.Multiply.prototype.dispose = function () {
	    Tone.prototype.dispose.call(this);
	    this._mult.disconnect();
	    this._mult = null;
	    this._param = null;
	    return this;
	  };
	  return Tone.Multiply;
	}(Tone_core_Tone);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_signal_Scale;
	Tone_signal_Scale = function (Tone) {
	  'use strict';
	  Tone.Scale = function (outputMin, outputMax) {
	    this._outputMin = this.defaultArg(outputMin, 0);
	    this._outputMax = this.defaultArg(outputMax, 1);
	    this._scale = this.input = new Tone.Multiply(1);
	    this._add = this.output = new Tone.Add(0);
	    this._scale.connect(this._add);
	    this._setRange();
	  };
	  Tone.extend(Tone.Scale, Tone.SignalBase);
	  Object.defineProperty(Tone.Scale.prototype, 'min', {
	    get: function () {
	      return this._outputMin;
	    },
	    set: function (min) {
	      this._outputMin = min;
	      this._setRange();
	    }
	  });
	  Object.defineProperty(Tone.Scale.prototype, 'max', {
	    get: function () {
	      return this._outputMax;
	    },
	    set: function (max) {
	      this._outputMax = max;
	      this._setRange();
	    }
	  });
	  Tone.Scale.prototype._setRange = function () {
	    this._add.value = this._outputMin;
	    this._scale.value = this._outputMax - this._outputMin;
	  };
	  Tone.Scale.prototype.dispose = function () {
	    Tone.prototype.dispose.call(this);
	    this._add.dispose();
	    this._add = null;
	    this._scale.dispose();
	    this._scale = null;
	    return this;
	  };
	  return Tone.Scale;
	}(Tone_core_Tone, Tone_signal_Add, Tone_signal_Multiply);
	var signal;
	signal = function () {
	  'use strict';
	  // Signal is built with the Tone.js signal by Yotam Mann
	  // https://github.com/TONEnoTONE/Tone.js/
	  var Signal = Tone_signal_Signal;
	  var Add = Tone_signal_Add;
	  var Mult = Tone_signal_Multiply;
	  var Scale = Tone_signal_Scale;
	  var Tone = Tone_core_Tone;
	  var p5sound = master;
	  Tone.setContext(p5sound.audiocontext);
	  /**
	   *  <p>p5.Signal is a constant audio-rate signal used by p5.Oscillator
	   *  and p5.Envelope for modulation math.</p>
	   *
	   *  <p>This is necessary because Web Audio is processed on a seprate clock.
	   *  For example, the p5 draw loop runs about 60 times per second. But
	   *  the audio clock must process samples 44100 times per second. If we
	   *  want to add a value to each of those samples, we can't do it in the
	   *  draw loop, but we can do it by adding a constant-rate audio signal.</p.
	   *  
	   *  <p>This class mostly functions behind the scenes in p5.sound, and returns
	   *  a Tone.Signal from the Tone.js library by Yotam Mann.
	   *  If you want to work directly with audio signals for modular
	   *  synthesis, check out
	   *  <a href='http://bit.ly/1oIoEng' target=_'blank'>tone.js.</a></p>
	   *
	   *  @class  p5.Signal
	   *  @constructor
	   *  @return {Tone.Signal} A Signal object from the Tone.js library
	   *  @example
	   *  <div><code>
	   *  function setup() {
	   *    carrier = new p5.Oscillator('sine');
	   *    carrier.amp(1); // set amplitude
	   *    carrier.freq(220); // set frequency
	   *    carrier.start(); // start oscillating
	   *    
	   *    modulator = new p5.Oscillator('sawtooth');
	   *    modulator.disconnect();
	   *    modulator.amp(1);
	   *    modulator.freq(4);
	   *    modulator.start();
	   *
	   *    // Modulator's default amplitude range is -1 to 1.
	   *    // Multiply it by -200, so the range is -200 to 200
	   *    // then add 220 so the range is 20 to 420
	   *    carrier.freq( modulator.mult(-200).add(220) );
	   *  }
	   *  </code></div>
	   */
	  p5.Signal = function (value) {
	    var s = new Signal(value);
	    // p5sound.soundArray.push(s);
	    return s;
	  };
	  /**
	   *  Fade to value, for smooth transitions
	   *
	   *  @method  fade
	   *  @param  {Number} value          Value to set this signal
	   *  @param  {[Number]} secondsFromNow Length of fade, in seconds from now
	   */
	  Signal.prototype.fade = Signal.prototype.linearRampToValueAtTime;
	  Mult.prototype.fade = Signal.prototype.fade;
	  Add.prototype.fade = Signal.prototype.fade;
	  Scale.prototype.fade = Signal.prototype.fade;
	  /**
	   *  Connect a p5.sound object or Web Audio node to this
	   *  p5.Signal so that its amplitude values can be scaled.
	   *  
	   *  @param {Object} input
	   */
	  Signal.prototype.setInput = function (_input) {
	    _input.connect(this);
	  };
	  Mult.prototype.setInput = Signal.prototype.setInput;
	  Add.prototype.setInput = Signal.prototype.setInput;
	  Scale.prototype.setInput = Signal.prototype.setInput;
	  // signals can add / mult / scale themselves
	  /**
	   *  Add a constant value to this audio signal,
	   *  and return the resulting audio signal. Does
	   *  not change the value of the original signal,
	   *  instead it returns a new p5.SignalAdd.
	   *  
	   *  @method  add
	   *  @param {Number} number
	   *  @return {p5.SignalAdd} object
	   */
	  Signal.prototype.add = function (num) {
	    var add = new Add(num);
	    // add.setInput(this);
	    this.connect(add);
	    return add;
	  };
	  Mult.prototype.add = Signal.prototype.add;
	  Add.prototype.add = Signal.prototype.add;
	  Scale.prototype.add = Signal.prototype.add;
	  /**
	   *  Multiply this signal by a constant value,
	   *  and return the resulting audio signal. Does
	   *  not change the value of the original signal,
	   *  instead it returns a new p5.SignalMult.
	   *  
	   *  @method  mult
	   *  @param {Number} number to multiply
	   *  @return {Tone.Multiply} object
	   */
	  Signal.prototype.mult = function (num) {
	    var mult = new Mult(num);
	    // mult.setInput(this);
	    this.connect(mult);
	    return mult;
	  };
	  Mult.prototype.mult = Signal.prototype.mult;
	  Add.prototype.mult = Signal.prototype.mult;
	  Scale.prototype.mult = Signal.prototype.mult;
	  /**
	   *  Scale this signal value to a given range,
	   *  and return the result as an audio signal. Does
	   *  not change the value of the original signal,
	   *  instead it returns a new p5.SignalScale.
	   *  
	   *  @method  scale
	   *  @param {Number} number to multiply
	   *  @param  {Number} inMin  input range minumum
	   *  @param  {Number} inMax  input range maximum
	   *  @param  {Number} outMin input range minumum
	   *  @param  {Number} outMax input range maximum
	   *  @return {p5.SignalScale} object
	   */
	  Signal.prototype.scale = function (inMin, inMax, outMin, outMax) {
	    var mapOutMin, mapOutMax;
	    if (arguments.length === 4) {
	      mapOutMin = p5.prototype.map(outMin, inMin, inMax, 0, 1) - 0.5;
	      mapOutMax = p5.prototype.map(outMax, inMin, inMax, 0, 1) - 0.5;
	    } else {
	      mapOutMin = arguments[0];
	      mapOutMax = arguments[1];
	    }
	    var scale = new Scale(mapOutMin, mapOutMax);
	    this.connect(scale);
	    return scale;
	  };
	  Mult.prototype.scale = Signal.prototype.scale;
	  Add.prototype.scale = Signal.prototype.scale;
	  Scale.prototype.scale = Signal.prototype.scale;
	}(Tone_signal_Signal, Tone_signal_Add, Tone_signal_Multiply, Tone_signal_Scale, Tone_core_Tone, master);
	var oscillator;
	oscillator = function () {
	  'use strict';
	  var p5sound = master;
	  var Signal = Tone_signal_Signal;
	  var Add = Tone_signal_Add;
	  var Mult = Tone_signal_Multiply;
	  var Scale = Tone_signal_Scale;
	  /**
	   *  <p>Creates a signal that oscillates between -1.0 and 1.0.
	   *  By default, the oscillation takes the form of a sinusoidal
	   *  shape ('sine'). Additional types include 'triangle',
	   *  'sawtooth' and 'square'. The frequency defaults to
	   *  440 oscillations per second (440Hz, equal to the pitch of an
	   *  'A' note).</p> 
	   *
	   *  <p>Set the type of oscillation with setType(), or by creating a
	   *  specific oscillator.</p> For example:
	   *  <code>new p5.SinOsc(freq)</code>
	   *  <code>new p5.TriOsc(freq)</code>
	   *  <code>new p5.SqrOsc(freq)</code>
	   *  <code>new p5.SawOsc(freq)</code>.
	   *  </p>
	   *  
	   *  @class p5.Oscillator
	   *  @constructor
	   *  @param {Number} [freq] frequency defaults to 440Hz
	   *  @param {String} [type] type of oscillator. Options:
	   *                         'sine' (default), 'triangle',
	   *                         'sawtooth', 'square'
	   *  @return {Object}    Oscillator object
	   *  @example
	   *  <div><code>
	   *  var osc;
	   *  var playing = false;
	   *  
	   *  function setup() {
	   *    backgroundColor = color(255,0,255);
	   *    textAlign(CENTER);
	   *    
	   *    osc = new p5.Oscillator();
	   *    osc.setType('sine');
	   *    osc.freq(240);
	   *    osc.amp(0);
	   *    osc.start();
	   *  }
	   *
	   *  function draw() {
	   *    background(backgroundColor)
	   *    text('click to play', width/2, height/2);
	   *  }
	   *
	   *  function mouseClicked() {
	   *    if (mouseX > 0 && mouseX < width && mouseY < height && mouseY > 0) {
	   *      if (!playing) {
	   *        // ramp amplitude to 0.5 over 0.1 seconds
	   *        osc.amp(0.5, 0.05);
	   *        playing = true;
	   *        backgroundColor = color(0,255,255);
	   *      } else {
	   *        // ramp amplitude to 0 over 0.5 seconds
	   *        osc.amp(0, 0.5);
	   *        playing = false;
	   *        backgroundColor = color(255,0,255);
	   *      }
	   *    }
	   *  }
	   *  </code> </div>
	   */
	  p5.Oscillator = function (freq, type) {
	    if (typeof freq === 'string') {
	      var f = type;
	      type = freq;
	      freq = f;
	    }
	    if (typeof type === 'number') {
	      var f = type;
	      type = freq;
	      freq = f;
	    }
	    this.started = false;
	    // components
	    this.phaseAmount = undefined;
	    this.oscillator = p5sound.audiocontext.createOscillator();
	    this.f = freq || 440;
	    // frequency
	    this.oscillator.type = type || 'sine';
	    this.oscillator.frequency.setValueAtTime(this.f, p5sound.audiocontext.currentTime);
	    var o = this.oscillator;
	    // connections
	    this.output = p5sound.audiocontext.createGain();
	    this._freqMods = [];
	    // modulators connected to this oscillator's frequency
	    // set default output gain to 0.5
	    this.output.gain.value = 0.5;
	    this.output.gain.setValueAtTime(0.5, p5sound.audiocontext.currentTime);
	    this.oscillator.connect(this.output);
	    // stereo panning
	    this.panPosition = 0;
	    this.connection = p5sound.input;
	    // connect to p5sound by default
	    this.panner = new p5.Panner(this.output, this.connection, 1);
	    //array of math operation signal chaining
	    this.mathOps = [this.output];
	    // add to the soundArray so we can dispose of the osc later
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Start an oscillator. Accepts an optional parameter to
	   *  determine how long (in seconds from now) until the
	   *  oscillator starts.
	   *
	   *  @method  start
	   *  @param  {Number} [time] startTime in seconds from now.
	   *  @param  {Number} [frequency] frequency in Hz.
	   */
	  p5.Oscillator.prototype.start = function (time, f) {
	    if (this.started) {
	      var now = p5sound.audiocontext.currentTime;
	      this.stop(now);
	    }
	    if (!this.started) {
	      var freq = f || this.f;
	      var type = this.oscillator.type;
	      // set old osc free to be garbage collected (memory)
	      if (this.oscillator) {
	        this.oscillator.disconnect();
	        this.oscillator = undefined;
	      }
	      // var detune = this.oscillator.frequency.value;
	      this.oscillator = p5sound.audiocontext.createOscillator();
	      this.oscillator.frequency.exponentialRampToValueAtTime(Math.abs(freq), p5sound.audiocontext.currentTime);
	      this.oscillator.type = type;
	      // this.oscillator.detune.value = detune;
	      this.oscillator.connect(this.output);
	      time = time || 0;
	      this.oscillator.start(time + p5sound.audiocontext.currentTime);
	      this.freqNode = this.oscillator.frequency;
	      // if other oscillators are already connected to this osc's freq
	      for (var i in this._freqMods) {
	        if (typeof this._freqMods[i].connect !== 'undefined') {
	          this._freqMods[i].connect(this.oscillator.frequency);
	        }
	      }
	      this.started = true;
	    }
	  };
	  /**
	   *  Stop an oscillator. Accepts an optional parameter
	   *  to determine how long (in seconds from now) until the
	   *  oscillator stops.
	   *
	   *  @method  stop
	   *  @param  {Number} secondsFromNow Time, in seconds from now.
	   */
	  p5.Oscillator.prototype.stop = function (time) {
	    if (this.started) {
	      var t = time || 0;
	      var now = p5sound.audiocontext.currentTime;
	      this.oscillator.stop(t + now);
	      this.started = false;
	    }
	  };
	  /**
	   *  Set the amplitude between 0 and 1.0. Or, pass in an object
	   *  such as an oscillator to modulate amplitude with an audio signal.
	   *
	   *  @method  amp
	   *  @param  {Number|Object} vol between 0 and 1.0
	   *                              or a modulating signal/oscillator
	   *  @param {Number} [rampTime] create a fade that lasts rampTime 
	   *  @param {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   *  @return  {AudioParam} gain  If no value is provided,
	   *                              returns the Web Audio API
	   *                              AudioParam that controls
	   *                              this oscillator's
	   *                              gain/amplitude/volume)
	   */
	  p5.Oscillator.prototype.amp = function (vol, rampTime, tFromNow) {
	    var self = this;
	    if (typeof vol === 'number') {
	      var rampTime = rampTime || 0;
	      var tFromNow = tFromNow || 0;
	      var now = p5sound.audiocontext.currentTime;
	      var currentVol = this.output.gain.value;
	      this.output.gain.cancelScheduledValues(now);
	      this.output.gain.linearRampToValueAtTime(currentVol, now + tFromNow);
	      this.output.gain.linearRampToValueAtTime(vol, now + tFromNow + rampTime);
	    } else if (vol) {
	      vol.connect(self.output.gain);
	    } else {
	      // return the Gain Node
	      return this.output.gain;
	    }
	  };
	  // these are now the same thing
	  p5.Oscillator.prototype.fade = p5.Oscillator.prototype.amp;
	  p5.Oscillator.prototype.getAmp = function () {
	    return this.output.gain.value;
	  };
	  /**
	   *  Set frequency of an oscillator to a value. Or, pass in an object
	   *  such as an oscillator to modulate the frequency with an audio signal.
	   *
	   *  @method  freq
	   *  @param  {Number|Object} Frequency Frequency in Hz
	   *                                        or modulating signal/oscillator
	   *  @param  {Number} [rampTime] Ramp time (in seconds)
	   *  @param  {Number} [timeFromNow] Schedule this event to happen
	   *                                   at x seconds from now
	   *  @return  {AudioParam} Frequency If no value is provided,
	   *                                  returns the Web Audio API
	   *                                  AudioParam that controls
	   *                                  this oscillator's frequency
	   *  @example
	   *  <div><code>
	   *  var osc = new p5.Oscillator(300);
	   *  osc.start();
	   *  osc.freq(40, 10);
	   *  </code></div>
	   */
	  p5.Oscillator.prototype.freq = function (val, rampTime, tFromNow) {
	    if (typeof val === 'number' && !isNaN(val)) {
	      this.f = val;
	      var now = p5sound.audiocontext.currentTime;
	      var rampTime = rampTime || 0;
	      var tFromNow = tFromNow || 0;
	      // var currentFreq = this.oscillator.frequency.value;
	      // this.oscillator.frequency.cancelScheduledValues(now);
	      if (rampTime == 0) {
	        this.oscillator.frequency.cancelScheduledValues(now);
	        this.oscillator.frequency.setValueAtTime(val, tFromNow + now);
	      } else {
	        if (val > 0) {
	          this.oscillator.frequency.exponentialRampToValueAtTime(val, tFromNow + rampTime + now);
	        } else {
	          this.oscillator.frequency.linearRampToValueAtTime(val, tFromNow + rampTime + now);
	        }
	      }
	      // reset phase if oscillator has a phase
	      if (this.phaseAmount) {
	        this.phase(this.phaseAmount);
	      }
	    } else if (val) {
	      if (val.output) {
	        val = val.output;
	      }
	      val.connect(this.oscillator.frequency);
	      // keep track of what is modulating this param
	      // so it can be re-connected if 
	      this._freqMods.push(val);
	    } else {
	      // return the Frequency Node
	      return this.oscillator.frequency;
	    }
	  };
	  p5.Oscillator.prototype.getFreq = function () {
	    return this.oscillator.frequency.value;
	  };
	  /**
	   *  Set type to 'sine', 'triangle', 'sawtooth' or 'square'.
	   *
	   *  @method  setType
	   *  @param {String} type 'sine', 'triangle', 'sawtooth' or 'square'.
	   */
	  p5.Oscillator.prototype.setType = function (type) {
	    this.oscillator.type = type;
	  };
	  p5.Oscillator.prototype.getType = function () {
	    return this.oscillator.type;
	  };
	  /**
	   *  Connect to a p5.sound / Web Audio object.
	   *
	   *  @method  connect
	   *  @param  {Object} unit A p5.sound or Web Audio object
	   */
	  p5.Oscillator.prototype.connect = function (unit) {
	    if (!unit) {
	      this.panner.connect(p5sound.input);
	    } else if (unit.hasOwnProperty('input')) {
	      this.panner.connect(unit.input);
	      this.connection = unit.input;
	    } else {
	      this.panner.connect(unit);
	      this.connection = unit;
	    }
	  };
	  /**
	   *  Disconnect all outputs
	   *
	   *  @method  disconnect
	   */
	  p5.Oscillator.prototype.disconnect = function (unit) {
	    this.output.disconnect();
	    this.panner.disconnect();
	    this.output.connect(this.panner);
	    this.oscMods = [];
	  };
	  /**
	   *  Pan between Left (-1) and Right (1)
	   *
	   *  @method  pan
	   *  @param  {Number} panning Number between -1 and 1
	   *  @param  {Number} timeFromNow schedule this event to happen
	   *                                seconds from now
	   */
	  p5.Oscillator.prototype.pan = function (pval, tFromNow) {
	    this.panPosition = pval;
	    this.panner.pan(pval, tFromNow);
	  };
	  p5.Oscillator.prototype.getPan = function () {
	    return this.panPosition;
	  };
	  // get rid of the oscillator
	  p5.Oscillator.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    if (this.oscillator) {
	      var now = p5sound.audiocontext.currentTime;
	      this.stop(now);
	      this.disconnect();
	      this.panner = null;
	      this.oscillator = null;
	    }
	    // if it is a Pulse
	    if (this.osc2) {
	      this.osc2.dispose();
	    }
	  };
	  /**
	   *  Set the phase of an oscillator between 0.0 and 1.0.
	   *  In this implementation, phase is a delay time
	   *  based on the oscillator's current frequency.
	   *  
	   *  @method  phase
	   *  @param  {Number} phase float between 0.0 and 1.0
	   */
	  p5.Oscillator.prototype.phase = function (p) {
	    var delayAmt = p5.prototype.map(p, 0, 1, 0, 1 / this.f);
	    var now = p5sound.audiocontext.currentTime;
	    this.phaseAmount = p;
	    if (!this.dNode) {
	      // create a delay node
	      this.dNode = p5sound.audiocontext.createDelay();
	      // put the delay node in between output and panner
	      this.oscillator.disconnect();
	      this.oscillator.connect(this.dNode);
	      this.dNode.connect(this.output);
	    }
	    // set delay time to match phase:
	    this.dNode.delayTime.setValueAtTime(delayAmt, now);
	  };
	  // ========================== //
	  // SIGNAL MATH FOR MODULATION //
	  // ========================== //
	  // return sigChain(this, scale, thisChain, nextChain, Scale);
	  var sigChain = function (o, mathObj, thisChain, nextChain, type) {
	    var chainSource = o.oscillator;
	    // if this type of math already exists in the chain, replace it
	    for (var i in o.mathOps) {
	      if (o.mathOps[i] instanceof type) {
	        chainSource.disconnect();
	        o.mathOps[i].dispose();
	        thisChain = i;
	        // assume nextChain is output gain node unless...
	        if (thisChain < o.mathOps.length - 2) {
	          nextChain = o.mathOps[i + 1];
	        }
	      }
	    }
	    if (thisChain == o.mathOps.length - 1) {
	      o.mathOps.push(nextChain);
	    }
	    // assume source is the oscillator unless i > 0
	    if (i > 0) {
	      chainSource = o.mathOps[i - 1];
	    }
	    chainSource.disconnect();
	    chainSource.connect(mathObj);
	    mathObj.connect(nextChain);
	    o.mathOps[thisChain] = mathObj;
	    return o;
	  };
	  /**
	   *  Add a value to the p5.Oscillator's output amplitude,
	   *  and return the oscillator. Calling this method again
	   *  will override the initial add() with a new value.
	   *  
	   *  @method  add
	   *  @param {Number} number Constant number to add
	   *  @return {p5.Oscillator} Oscillator Returns this oscillator
	   *                                     with scaled output
	   *  
	   */
	  p5.Oscillator.prototype.add = function (num) {
	    var add = new Add(num);
	    var thisChain = this.mathOps.length - 1;
	    var nextChain = this.output;
	    return sigChain(this, add, thisChain, nextChain, Add);
	  };
	  /**
	   *  Multiply the p5.Oscillator's output amplitude
	   *  by a fixed value (i.e. turn it up!). Calling this method
	   *  again will override the initial mult() with a new value.
	   *  
	   *  @method  mult
	   *  @param {Number} number Constant number to multiply
	   *  @return {p5.Oscillator} Oscillator Returns this oscillator
	   *                                     with multiplied output
	   */
	  p5.Oscillator.prototype.mult = function (num) {
	    var mult = new Mult(num);
	    var thisChain = this.mathOps.length - 1;
	    var nextChain = this.output;
	    return sigChain(this, mult, thisChain, nextChain, Mult);
	  };
	  /**
	   *  Scale this oscillator's amplitude values to a given
	   *  range, and return the oscillator. Calling this method
	   *  again will override the initial scale() with new values.
	   *  
	   *  @method  scale
	   *  @param  {Number} inMin  input range minumum
	   *  @param  {Number} inMax  input range maximum
	   *  @param  {Number} outMin input range minumum
	   *  @param  {Number} outMax input range maximum
	   *  @return {p5.Oscillator} Oscillator Returns this oscillator
	   *                                     with scaled output
	   */
	  p5.Oscillator.prototype.scale = function (inMin, inMax, outMin, outMax) {
	    var mapOutMin, mapOutMax;
	    if (arguments.length === 4) {
	      mapOutMin = p5.prototype.map(outMin, inMin, inMax, 0, 1) - 0.5;
	      mapOutMax = p5.prototype.map(outMax, inMin, inMax, 0, 1) - 0.5;
	    } else {
	      mapOutMin = arguments[0];
	      mapOutMax = arguments[1];
	    }
	    var scale = new Scale(mapOutMin, mapOutMax);
	    var thisChain = this.mathOps.length - 1;
	    var nextChain = this.output;
	    return sigChain(this, scale, thisChain, nextChain, Scale);
	  };
	  // ============================== //
	  // SinOsc, TriOsc, SqrOsc, SawOsc //
	  // ============================== //
	  /**
	   *  Constructor: <code>new p5.SinOsc()</code>.
	   *  This creates a Sine Wave Oscillator and is
	   *  equivalent to <code> new p5.Oscillator('sine')
	   *  </code> or creating a p5.Oscillator and then calling
	   *  its method <code>setType('sine')</code>.
	   *  See p5.Oscillator for methods.
	   *
	   *  @method  p5.SinOsc
	   *  @param {[Number]} freq Set the frequency
	   */
	  p5.SinOsc = function (freq) {
	    p5.Oscillator.call(this, freq, 'sine');
	  };
	  p5.SinOsc.prototype = Object.create(p5.Oscillator.prototype);
	  /**
	   *  Constructor: <code>new p5.TriOsc()</code>.
	   *  This creates a Triangle Wave Oscillator and is
	   *  equivalent to <code>new p5.Oscillator('triangle')
	   *  </code> or creating a p5.Oscillator and then calling
	   *  its method <code>setType('triangle')</code>.
	   *  See p5.Oscillator for methods.
	   *
	   *  @method  p5.TriOsc
	   *  @param {[Number]} freq Set the frequency
	   */
	  p5.TriOsc = function (freq) {
	    p5.Oscillator.call(this, freq, 'triangle');
	  };
	  p5.TriOsc.prototype = Object.create(p5.Oscillator.prototype);
	  /**
	   *  Constructor: <code>new p5.SawOsc()</code>.
	   *  This creates a SawTooth Wave Oscillator and is
	   *  equivalent to <code> new p5.Oscillator('sawtooth')
	   *  </code> or creating a p5.Oscillator and then calling
	   *  its method <code>setType('sawtooth')</code>.
	   *  See p5.Oscillator for methods.
	   *
	   *  @method  p5.SawOsc
	   *  @param {[Number]} freq Set the frequency
	   */
	  p5.SawOsc = function (freq) {
	    p5.Oscillator.call(this, freq, 'sawtooth');
	  };
	  p5.SawOsc.prototype = Object.create(p5.Oscillator.prototype);
	  /**
	   *  Constructor: <code>new p5.SqrOsc()</code>.
	   *  This creates a Square Wave Oscillator and is
	   *  equivalent to <code> new p5.Oscillator('square')
	   *  </code> or creating a p5.Oscillator and then calling
	   *  its method <code>setType('square')</code>.
	   *  See p5.Oscillator for methods.
	   *
	   *  @method  p5.SqrOsc
	   *  @param {[Number]} freq Set the frequency
	   */
	  p5.SqrOsc = function (freq) {
	    p5.Oscillator.call(this, freq, 'square');
	  };
	  p5.SqrOsc.prototype = Object.create(p5.Oscillator.prototype);
	}(master, Tone_signal_Signal, Tone_signal_Add, Tone_signal_Multiply, Tone_signal_Scale);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_core_Timeline;
	Tone_core_Timeline = function (Tone) {
	  'use strict';
	  Tone.Timeline = function () {
	    var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);
	    this._timeline = [];
	    this._toRemove = [];
	    this._iterating = false;
	    this.memory = options.memory;
	  };
	  Tone.extend(Tone.Timeline);
	  Tone.Timeline.defaults = { 'memory': Infinity };
	  Object.defineProperty(Tone.Timeline.prototype, 'length', {
	    get: function () {
	      return this._timeline.length;
	    }
	  });
	  Tone.Timeline.prototype.addEvent = function (event) {
	    if (this.isUndef(event.time)) {
	      throw new Error('events must have a time attribute');
	    }
	    event.time = this.toSeconds(event.time);
	    if (this._timeline.length) {
	      var index = this._search(event.time);
	      this._timeline.splice(index + 1, 0, event);
	    } else {
	      this._timeline.push(event);
	    }
	    if (this.length > this.memory) {
	      var diff = this.length - this.memory;
	      this._timeline.splice(0, diff);
	    }
	    return this;
	  };
	  Tone.Timeline.prototype.removeEvent = function (event) {
	    if (this._iterating) {
	      this._toRemove.push(event);
	    } else {
	      var index = this._timeline.indexOf(event);
	      if (index !== -1) {
	        this._timeline.splice(index, 1);
	      }
	    }
	    return this;
	  };
	  Tone.Timeline.prototype.getEvent = function (time) {
	    time = this.toSeconds(time);
	    var index = this._search(time);
	    if (index !== -1) {
	      return this._timeline[index];
	    } else {
	      return null;
	    }
	  };
	  Tone.Timeline.prototype.getEventAfter = function (time) {
	    time = this.toSeconds(time);
	    var index = this._search(time);
	    if (index + 1 < this._timeline.length) {
	      return this._timeline[index + 1];
	    } else {
	      return null;
	    }
	  };
	  Tone.Timeline.prototype.getEventBefore = function (time) {
	    time = this.toSeconds(time);
	    var index = this._search(time);
	    if (index - 1 >= 0) {
	      return this._timeline[index - 1];
	    } else {
	      return null;
	    }
	  };
	  Tone.Timeline.prototype.cancel = function (after) {
	    if (this._timeline.length > 1) {
	      after = this.toSeconds(after);
	      var index = this._search(after);
	      if (index >= 0) {
	        this._timeline = this._timeline.slice(0, index);
	      } else {
	        this._timeline = [];
	      }
	    } else if (this._timeline.length === 1) {
	      if (this._timeline[0].time >= after) {
	        this._timeline = [];
	      }
	    }
	    return this;
	  };
	  Tone.Timeline.prototype.cancelBefore = function (time) {
	    if (this._timeline.length) {
	      time = this.toSeconds(time);
	      var index = this._search(time);
	      if (index >= 0) {
	        this._timeline = this._timeline.slice(index + 1);
	      }
	    }
	    return this;
	  };
	  Tone.Timeline.prototype._search = function (time) {
	    var beginning = 0;
	    var len = this._timeline.length;
	    var end = len;
	    while (beginning <= end && beginning < len) {
	      var midPoint = Math.floor(beginning + (end - beginning) / 2);
	      var event = this._timeline[midPoint];
	      if (event.time === time) {
	        for (var i = midPoint; i < this._timeline.length; i++) {
	          var testEvent = this._timeline[i];
	          if (testEvent.time === time) {
	            midPoint = i;
	          }
	        }
	        return midPoint;
	      } else if (event.time > time) {
	        end = midPoint - 1;
	      } else if (event.time < time) {
	        beginning = midPoint + 1;
	      }
	    }
	    return beginning - 1;
	  };
	  Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {
	    this._iterating = true;
	    lowerBound = this.defaultArg(lowerBound, 0);
	    upperBound = this.defaultArg(upperBound, this._timeline.length - 1);
	    for (var i = lowerBound; i <= upperBound; i++) {
	      callback(this._timeline[i]);
	    }
	    this._iterating = false;
	    if (this._toRemove.length > 0) {
	      for (var j = 0; j < this._toRemove.length; j++) {
	        var index = this._timeline.indexOf(this._toRemove[j]);
	        if (index !== -1) {
	          this._timeline.splice(index, 1);
	        }
	      }
	      this._toRemove = [];
	    }
	  };
	  Tone.Timeline.prototype.forEach = function (callback) {
	    this._iterate(callback);
	    return this;
	  };
	  Tone.Timeline.prototype.forEachBefore = function (time, callback) {
	    time = this.toSeconds(time);
	    var upperBound = this._search(time);
	    if (upperBound !== -1) {
	      this._iterate(callback, 0, upperBound);
	    }
	    return this;
	  };
	  Tone.Timeline.prototype.forEachAfter = function (time, callback) {
	    time = this.toSeconds(time);
	    var lowerBound = this._search(time);
	    this._iterate(callback, lowerBound + 1);
	    return this;
	  };
	  Tone.Timeline.prototype.forEachFrom = function (time, callback) {
	    time = this.toSeconds(time);
	    var lowerBound = this._search(time);
	    while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
	      lowerBound--;
	    }
	    this._iterate(callback, lowerBound + 1);
	    return this;
	  };
	  Tone.Timeline.prototype.forEachAtTime = function (time, callback) {
	    time = this.toSeconds(time);
	    var upperBound = this._search(time);
	    if (upperBound !== -1) {
	      this._iterate(function (event) {
	        if (event.time === time) {
	          callback(event);
	        }
	      }, 0, upperBound);
	    }
	    return this;
	  };
	  Tone.Timeline.prototype.dispose = function () {
	    Tone.prototype.dispose.call(this);
	    this._timeline = null;
	    this._toRemove = null;
	  };
	  return Tone.Timeline;
	}(Tone_core_Tone);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_signal_TimelineSignal;
	Tone_signal_TimelineSignal = function (Tone) {
	  'use strict';
	  Tone.TimelineSignal = function () {
	    var options = this.optionsObject(arguments, [
	      'value',
	      'units'
	    ], Tone.Signal.defaults);
	    Tone.Signal.apply(this, options);
	    options.param = this._param;
	    Tone.Param.call(this, options);
	    this._events = new Tone.Timeline(10);
	    this._initial = this._fromUnits(this._param.value);
	  };
	  Tone.extend(Tone.TimelineSignal, Tone.Param);
	  Tone.TimelineSignal.Type = {
	    Linear: 'linear',
	    Exponential: 'exponential',
	    Target: 'target',
	    Set: 'set'
	  };
	  Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {
	    get: function () {
	      return this._toUnits(this._param.value);
	    },
	    set: function (value) {
	      var convertedVal = this._fromUnits(value);
	      this._initial = convertedVal;
	      this._param.value = convertedVal;
	    }
	  });
	  Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {
	    value = this._fromUnits(value);
	    startTime = this.toSeconds(startTime);
	    this._events.addEvent({
	      'type': Tone.TimelineSignal.Type.Set,
	      'value': value,
	      'time': startTime
	    });
	    this._param.setValueAtTime(value, startTime);
	    return this;
	  };
	  Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {
	    value = this._fromUnits(value);
	    endTime = this.toSeconds(endTime);
	    this._events.addEvent({
	      'type': Tone.TimelineSignal.Type.Linear,
	      'value': value,
	      'time': endTime
	    });
	    this._param.linearRampToValueAtTime(value, endTime);
	    return this;
	  };
	  Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {
	    value = this._fromUnits(value);
	    value = Math.max(this._minOutput, value);
	    endTime = this.toSeconds(endTime);
	    this._events.addEvent({
	      'type': Tone.TimelineSignal.Type.Exponential,
	      'value': value,
	      'time': endTime
	    });
	    this._param.exponentialRampToValueAtTime(value, endTime);
	    return this;
	  };
	  Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
	    value = this._fromUnits(value);
	    value = Math.max(this._minOutput, value);
	    timeConstant = Math.max(this._minOutput, timeConstant);
	    startTime = this.toSeconds(startTime);
	    this._events.addEvent({
	      'type': Tone.TimelineSignal.Type.Target,
	      'value': value,
	      'time': startTime,
	      'constant': timeConstant
	    });
	    this._param.setTargetAtTime(value, startTime, timeConstant);
	    return this;
	  };
	  Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {
	    this._events.cancel(after);
	    this._param.cancelScheduledValues(this.toSeconds(after));
	    return this;
	  };
	  Tone.TimelineSignal.prototype.setRampPoint = function (time) {
	    time = this.toSeconds(time);
	    var val = this.getValueAtTime(time);
	    var after = this._searchAfter(time);
	    if (after) {
	      this.cancelScheduledValues(time);
	      if (after.type === Tone.TimelineSignal.Type.Linear) {
	        this.linearRampToValueAtTime(val, time);
	      } else if (after.type === Tone.TimelineSignal.Type.Exponential) {
	        this.exponentialRampToValueAtTime(val, time);
	      }
	    }
	    this.setValueAtTime(val, time);
	    return this;
	  };
	  Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {
	    this.setRampPoint(start);
	    this.linearRampToValueAtTime(value, finish);
	    return this;
	  };
	  Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {
	    this.setRampPoint(start);
	    this.exponentialRampToValueAtTime(value, finish);
	    return this;
	  };
	  Tone.TimelineSignal.prototype._searchBefore = function (time) {
	    return this._events.getEvent(time);
	  };
	  Tone.TimelineSignal.prototype._searchAfter = function (time) {
	    return this._events.getEventAfter(time);
	  };
	  Tone.TimelineSignal.prototype.getValueAtTime = function (time) {
	    var after = this._searchAfter(time);
	    var before = this._searchBefore(time);
	    var value = this._initial;
	    if (before === null) {
	      value = this._initial;
	    } else if (before.type === Tone.TimelineSignal.Type.Target) {
	      var previous = this._events.getEventBefore(before.time);
	      var previouVal;
	      if (previous === null) {
	        previouVal = this._initial;
	      } else {
	        previouVal = previous.value;
	      }
	      value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);
	    } else if (after === null) {
	      value = before.value;
	    } else if (after.type === Tone.TimelineSignal.Type.Linear) {
	      value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);
	    } else if (after.type === Tone.TimelineSignal.Type.Exponential) {
	      value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);
	    } else {
	      value = before.value;
	    }
	    return value;
	  };
	  Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;
	  Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {
	    return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
	  };
	  Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {
	    return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
	  };
	  Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {
	    v0 = Math.max(this._minOutput, v0);
	    return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
	  };
	  Tone.TimelineSignal.prototype.dispose = function () {
	    Tone.Signal.prototype.dispose.call(this);
	    Tone.Param.prototype.dispose.call(this);
	    this._events.dispose();
	    this._events = null;
	  };
	  return Tone.TimelineSignal;
	}(Tone_core_Tone, Tone_signal_Signal);
	var env;
	env = function () {
	  'use strict';
	  var p5sound = master;
	  var Add = Tone_signal_Add;
	  var Mult = Tone_signal_Multiply;
	  var Scale = Tone_signal_Scale;
	  var TimelineSignal = Tone_signal_TimelineSignal;
	  var Tone = Tone_core_Tone;
	  Tone.setContext(p5sound.audiocontext);
	  /**
	   *  <p>Envelopes are pre-defined amplitude distribution over time.
	   *  Typically, envelopes are used to control the output volume
	   *  of an object, a series of fades referred to as Attack, Decay,
	   *  Sustain and Release (
	   *  <a href="https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg">ADSR</a>
	   *  ). Envelopes can also control other Web Audio Parametersâfor example, a p5.Env can
	   *  control an Oscillator's frequency like this: <code>osc.freq(env)</code>.</p>
	   *  <p>Use <code><a href="#/p5.Env/setRange">setRange</a></code> to change the attack/release level.
	   *  Use <code><a href="#/p5.Env/setADSR">setADSR</a></code> to change attackTime, decayTime, sustainPercent and releaseTime.</p>
	   *  <p>Use the <code><a href="#/p5.Env/play">play</a></code> method to play the entire envelope,
	   *  the <code><a href="#/p5.Env/ramp">ramp</a></code> method for a pingable trigger,
	   *  or <code><a href="#/p5.Env/triggerAttack">triggerAttack</a></code>/
	   *  <code><a href="#/p5.Env/triggerRelease">triggerRelease</a></code> to trigger noteOn/noteOff.</p>
	   *
	   *  @class p5.Env
	   *  @constructor
	   *  @example
	   *  <div><code>
	   *  var attackLevel = 1.0;
	   *  var releaseLevel = 0;
	   *
	   *  var attackTime = 0.001
	   *  var decayTime = 0.2;
	   *  var susPercent = 0.2;
	   *  var releaseTime = 0.5;
	   *
	   *  var env, triOsc;
	   *
	   *  function setup() {
	   *    var cnv = createCanvas(100, 100);
	   *
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *
	   *    env = new p5.Env();
	   *    env.setADSR(attackTime, decayTime, susPercent, releaseTime);
	   *    env.setRange(attackLevel, releaseLevel);
	   *
	   *    triOsc = new p5.Oscillator('triangle');
	   *    triOsc.amp(env);
	   *    triOsc.start();
	   *    triOsc.freq(220);
	   *
	   *    cnv.mousePressed(playEnv);
	   *  }
	   *
	   *  function playEnv(){
	   *    env.play();
	   *  }
	   *  </code></div>
	   */
	  p5.Env = function (t1, l1, t2, l2, t3, l3) {
	    var now = p5sound.audiocontext.currentTime;
	    /**
	     * Time until envelope reaches attackLevel
	     * @property attackTime
	     */
	    this.aTime = t1 || 0.1;
	    /**
	     * Level once attack is complete.
	     * @property attackLevel
	     */
	    this.aLevel = l1 || 1;
	    /**
	     * Time until envelope reaches decayLevel.
	     * @property decayTime
	     */
	    this.dTime = t2 || 0.5;
	    /**
	     * Level after decay. The envelope will sustain here until it is released.
	     * @property decayLevel
	     */
	    this.dLevel = l2 || 0;
	    /**
	     * Duration of the release portion of the envelope.
	     * @property releaseTime
	     */
	    this.rTime = t3 || 0;
	    /**
	     * Level at the end of the release.
	     * @property releaseLevel
	     */
	    this.rLevel = l3 || 0;
	    this._rampHighPercentage = 0.98;
	    this._rampLowPercentage = 0.02;
	    this.output = p5sound.audiocontext.createGain();
	    this.control = new TimelineSignal();
	    this._init();
	    // this makes sure the envelope starts at zero
	    this.control.connect(this.output);
	    // connect to the output
	    this.connection = null;
	    // store connection
	    //array of math operation signal chaining
	    this.mathOps = [this.control];
	    //whether envelope should be linear or exponential curve
	    this.isExponential = false;
	    // oscillator or buffer source to clear on env complete
	    // to save resources if/when it is retriggered
	    this.sourceToClear = null;
	    // set to true if attack is set, then false on release
	    this.wasTriggered = false;
	    // add to the soundArray so we can dispose of the env later
	    p5sound.soundArray.push(this);
	  };
	  // this init function just smooths the starting value to zero and gives a start point for the timeline
	  // - it was necessary to remove glitches at the beginning.
	  p5.Env.prototype._init = function () {
	    var now = p5sound.audiocontext.currentTime;
	    var t = now;
	    this.control.setTargetAtTime(0.00001, t, 0.001);
	    //also, compute the correct time constants
	    this._setRampAD(this.aTime, this.dTime);
	  };
	  /**
	   *  Reset the envelope with a series of time/value pairs.
	   *
	   *  @method  set
	   *  @param {Number} attackTime     Time (in seconds) before level
	   *                                 reaches attackLevel
	   *  @param {Number} attackLevel    Typically an amplitude between
	   *                                 0.0 and 1.0
	   *  @param {Number} decayTime      Time
	   *  @param {Number} decayLevel   Amplitude (In a standard ADSR envelope,
	   *                                 decayLevel = sustainLevel)
	   *  @param {Number} releaseTime   Release Time (in seconds)
	   *  @param {Number} releaseLevel  Amplitude
	   *  @example
	   *  <div><code>
	   *  var t1 = 0.1; // attack time in seconds
	   *  var l1 = 0.7; // attack level 0.0 to 1.0
	   *  var t2 = 0.3; // decay time in seconds
	   *  var l2 = 0.1; // decay level  0.0 to 1.0
	   *  var t3 = 0.2; // sustain time in seconds
	   *  var l3 = dL; // sustain level  0.0 to 1.0
	   *  // release level defaults to zero
	   *
	   *  var env;
	   *  var triOsc;
	   *
	   *  function setup() {
	   *    background(0);
	   *    noStroke();
	   *    fill(255);
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *
	   *    env = new p5.Env(t1, l1, t2, l2, t3, l3);
	   *    triOsc = new p5.Oscillator('triangle');
	   *    triOsc.amp(env); // give the env control of the triOsc's amp
	   *    triOsc.start();
	   *  }
	   *
	   *  // mouseClick triggers envelope if over canvas
	   *  function mouseClicked() {
	   *    // is mouse over canvas?
	   *    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
	   *      env.play(triOsc);
	   *    }
	   *  }
	   *  </code></div>
	   *
	   */
	  p5.Env.prototype.set = function (t1, l1, t2, l2, t3, l3) {
	    this.aTime = t1;
	    this.aLevel = l1;
	    this.dTime = t2 || 0;
	    this.dLevel = l2 || 0;
	    this.rTime = t3 || 0;
	    this.rLevel = l3 || 0;
	    // set time constants for ramp
	    this._setRampAD(t1, t2);
	  };
	  /**
	   *  Set values like a traditional
	   *  <a href="https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg">
	   *  ADSR envelope
	   *  </a>.
	   *
	   *  @method  setADSR
	   *  @param {Number} attackTime    Time (in seconds before envelope
	   *                                reaches Attack Level
	   *  @param {Number} [decayTime]    Time (in seconds) before envelope
	   *                                reaches Decay/Sustain Level
	   *  @param {Number} [susRatio]    Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,
	   *                                where 1.0 = attackLevel, 0.0 = releaseLevel.
	   *                                The susRatio determines the decayLevel and the level at which the
	   *                                sustain portion of the envelope will sustain.
	   *                                For example, if attackLevel is 0.4, releaseLevel is 0,
	   *                                and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is
	   *                                increased to 1.0 (using <code>setRange</code>),
	   *                                then decayLevel would increase proportionally, to become 0.5.
	   *  @param {Number} [releaseTime]   Time in seconds from now (defaults to 0)
	   *  @example
	   *  <div><code>
	   *  var attackLevel = 1.0;
	   *  var releaseLevel = 0;
	   *
	   *  var attackTime = 0.001
	   *  var decayTime = 0.2;
	   *  var susPercent = 0.2;
	   *  var releaseTime = 0.5;
	   *
	   *  var env, triOsc;
	   *
	   *  function setup() {
	   *    var cnv = createCanvas(100, 100);
	   *
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *
	   *    env = new p5.Env();
	   *    env.setADSR(attackTime, decayTime, susPercent, releaseTime);
	   *    env.setRange(attackLevel, releaseLevel);
	   *
	   *    triOsc = new p5.Oscillator('triangle');
	   *    triOsc.amp(env);
	   *    triOsc.start();
	   *    triOsc.freq(220);
	   *
	   *    cnv.mousePressed(playEnv);
	   *  }
	   *
	   *  function playEnv(){
	   *    env.play();
	   *  }
	   *  </code></div>
	   */
	  p5.Env.prototype.setADSR = function (aTime, dTime, sPercent, rTime) {
	    this.aTime = aTime;
	    this.dTime = dTime || 0;
	    // lerp
	    this.sPercent = sPercent || 0;
	    this.dLevel = typeof sPercent !== 'undefined' ? sPercent * (this.aLevel - this.rLevel) + this.rLevel : 0;
	    this.rTime = rTime || 0;
	    // also set time constants for ramp
	    this._setRampAD(aTime, dTime);
	  };
	  /**
	   *  Set max (attackLevel) and min (releaseLevel) of envelope.
	   *
	   *  @method  setRange
	   *  @param {Number} aLevel attack level (defaults to 1)
	   *  @param {Number} rLevel release level (defaults to 0)
	   *  @example
	   *  <div><code>
	   *  var attackLevel = 1.0;
	   *  var releaseLevel = 0;
	   *
	   *  var attackTime = 0.001
	   *  var decayTime = 0.2;
	   *  var susPercent = 0.2;
	   *  var releaseTime = 0.5;
	   *
	   *  var env, triOsc;
	   *
	   *  function setup() {
	   *    var cnv = createCanvas(100, 100);
	   *
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *
	   *    env = new p5.Env();
	   *    env.setADSR(attackTime, decayTime, susPercent, releaseTime);
	   *    env.setRange(attackLevel, releaseLevel);
	   *
	   *    triOsc = new p5.Oscillator('triangle');
	   *    triOsc.amp(env);
	   *    triOsc.start();
	   *    triOsc.freq(220);
	   *
	   *    cnv.mousePressed(playEnv);
	   *  }
	   *
	   *  function playEnv(){
	   *    env.play();
	   *  }
	   *  </code></div>
	   */
	  p5.Env.prototype.setRange = function (aLevel, rLevel) {
	    this.aLevel = aLevel || 1;
	    this.rLevel = rLevel || 0;
	  };
	  //  private (undocumented) method called when ADSR is set to set time constants for ramp
	  //
	  //  Set the <a href="https://en.wikipedia.org/wiki/RC_time_constant">
	  //  time constants</a> for simple exponential ramps.
	  //  The larger the time constant value, the slower the
	  //  transition will be.
	  //
	  //  method  _setRampAD
	  //  param {Number} attackTimeConstant  attack time constant
	  //  param {Number} decayTimeConstant   decay time constant
	  //
	  p5.Env.prototype._setRampAD = function (t1, t2) {
	    this._rampAttackTime = this.checkExpInput(t1);
	    this._rampDecayTime = this.checkExpInput(t2);
	    var TCDenominator = 1;
	    /// Aatish Bhatia's calculation for time constant for rise(to adjust 1/1-e calculation to any percentage)
	    TCDenominator = Math.log(1 / this.checkExpInput(1 - this._rampHighPercentage));
	    this._rampAttackTC = t1 / this.checkExpInput(TCDenominator);
	    TCDenominator = Math.log(1 / this._rampLowPercentage);
	    this._rampDecayTC = t2 / this.checkExpInput(TCDenominator);
	  };
	  // private method
	  p5.Env.prototype.setRampPercentages = function (p1, p2) {
	    //set the percentages that the simple exponential ramps go to
	    this._rampHighPercentage = this.checkExpInput(p1);
	    this._rampLowPercentage = this.checkExpInput(p2);
	    var TCDenominator = 1;
	    //now re-compute the time constants based on those percentages
	    /// Aatish Bhatia's calculation for time constant for rise(to adjust 1/1-e calculation to any percentage)
	    TCDenominator = Math.log(1 / this.checkExpInput(1 - this._rampHighPercentage));
	    this._rampAttackTC = this._rampAttackTime / this.checkExpInput(TCDenominator);
	    TCDenominator = Math.log(1 / this._rampLowPercentage);
	    this._rampDecayTC = this._rampDecayTime / this.checkExpInput(TCDenominator);
	  };
	  /**
	   *  Assign a parameter to be controlled by this envelope.
	   *  If a p5.Sound object is given, then the p5.Env will control its
	   *  output gain. If multiple inputs are provided, the env will
	   *  control all of them.
	   *
	   *  @method  setInput
	   *  @param  {Object} unit         A p5.sound object or
	   *                                Web Audio Param.
	   */
	  p5.Env.prototype.setInput = function (unit) {
	    for (var i = 0; i < arguments.length; i++) {
	      this.connect(arguments[i]);
	    }
	  };
	  /**
	   *  Set whether the envelope ramp is linear (default) or exponential.
	   *  Exponential ramps can be useful because we perceive amplitude
	   *  and frequency logarithmically.
	   *
	   *  @method  setExp
	   *  @param {Boolean} isExp true is exponential, false is linear
	   */
	  p5.Env.prototype.setExp = function (isExp) {
	    this.isExponential = isExp;
	  };
	  //helper method to protect against zero values being sent to exponential functions
	  p5.Env.prototype.checkExpInput = function (value) {
	    if (value <= 0) {
	      value = 1e-8;
	    }
	    return value;
	  };
	  /**
	   *  Play tells the envelope to start acting on a given input.
	   *  If the input is a p5.sound object (i.e. AudioIn, Oscillator,
	   *  SoundFile), then Env will control its output volume.
	   *  Envelopes can also be used to control any <a href="
	   *  http://docs.webplatform.org/wiki/apis/webaudio/AudioParam">
	   *  Web Audio Audio Param.</a>
	   *
	   *  @method  play
	   *  @param  {Object} unit         A p5.sound object or
	   *                                Web Audio Param.
	   *  @param  {Number} [startTime]  time from now (in seconds) at which to play
	   *  @param  {Number} [sustainTime] time to sustain before releasing the envelope
	   *  @example
	   *  <div><code>
	   *  var attackLevel = 1.0;
	   *  var releaseLevel = 0;
	   *
	   *  var attackTime = 0.001
	   *  var decayTime = 0.2;
	   *  var susPercent = 0.2;
	   *  var releaseTime = 0.5;
	   *
	   *  var env, triOsc;
	   *
	   *  function setup() {
	   *    var cnv = createCanvas(100, 100);
	   *
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *
	   *    env = new p5.Env();
	   *    env.setADSR(attackTime, decayTime, susPercent, releaseTime);
	   *    env.setRange(attackLevel, releaseLevel);
	   *
	   *    triOsc = new p5.Oscillator('triangle');
	   *    triOsc.amp(env);
	   *    triOsc.start();
	   *    triOsc.freq(220);
	   *
	   *    cnv.mousePressed(playEnv);
	   *  }
	   *
	   *  function playEnv(){
	   *    // trigger env on triOsc, 0 seconds from now
	   *    // After decay, sustain for 0.2 seconds before release
	   *    env.play(triOsc, 0, 0.2);
	   *  }
	   *  </code></div>
	   */
	  p5.Env.prototype.play = function (unit, secondsFromNow, susTime) {
	    var now = p5sound.audiocontext.currentTime;
	    var tFromNow = secondsFromNow || 0;
	    var susTime = susTime || 0;
	    if (unit) {
	      if (this.connection !== unit) {
	        this.connect(unit);
	      }
	    }
	    this.triggerAttack(unit, tFromNow);
	    this.triggerRelease(unit, tFromNow + this.aTime + this.dTime + susTime);
	  };
	  /**
	   *  Trigger the Attack, and Decay portion of the Envelope.
	   *  Similar to holding down a key on a piano, but it will
	   *  hold the sustain level until you let go. Input can be
	   *  any p5.sound object, or a <a href="
	   *  http://docs.webplatform.org/wiki/apis/webaudio/AudioParam">
	   *  Web Audio Param</a>.
	   *
	   *  @method  triggerAttack
	   *  @param  {Object} unit p5.sound Object or Web Audio Param
	   *  @param  {Number} secondsFromNow time from now (in seconds)
	   *  @example
	   *  <div><code>
	   *
	   *  var attackLevel = 1.0;
	   *  var releaseLevel = 0;
	   *
	   *  var attackTime = 0.001
	   *  var decayTime = 0.3;
	   *  var susPercent = 0.4;
	   *  var releaseTime = 0.5;
	   *
	   *  var env, triOsc;
	   *
	   *  function setup() {
	   *    var cnv = createCanvas(100, 100);
	   *    background(200);
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *
	   *    env = new p5.Env();
	   *    env.setADSR(attackTime, decayTime, susPercent, releaseTime);
	   *    env.setRange(attackLevel, releaseLevel);
	   *
	   *    triOsc = new p5.Oscillator('triangle');
	   *    triOsc.amp(env);
	   *    triOsc.start();
	   *    triOsc.freq(220);
	   *
	   *    cnv.mousePressed(envAttack);
	   *  }
	   *
	   *  function envAttack(){
	   *    console.log('trigger attack');
	   *    env.triggerAttack();
	   *
	   *    background(0,255,0);
	   *    text('attack!', width/2, height/2);
	   *  }
	   *
	   *  function mouseReleased() {
	   *    env.triggerRelease();
	   *
	   *    background(200);
	   *    text('click to play', width/2, height/2);
	   *  }
	   *  </code></div>
	   */
	  p5.Env.prototype.triggerAttack = function (unit, secondsFromNow) {
	    var now = p5sound.audiocontext.currentTime;
	    var tFromNow = secondsFromNow || 0;
	    var t = now + tFromNow;
	    this.lastAttack = t;
	    this.wasTriggered = true;
	    if (unit) {
	      if (this.connection !== unit) {
	        this.connect(unit);
	      }
	    }
	    // get and set value (with linear ramp) to anchor automation
	    var valToSet = this.control.getValueAtTime(t);
	    this.control.cancelScheduledValues(t);
	    // not sure if this is necessary
	    if (this.isExponential == true) {
	      this.control.exponentialRampToValueAtTime(this.checkExpInput(valToSet), t);
	    } else {
	      this.control.linearRampToValueAtTime(valToSet, t);
	    }
	    // after each ramp completes, cancel scheduled values
	    // (so they can be overridden in case env has been re-triggered)
	    // then, set current value (with linearRamp to avoid click)
	    // then, schedule the next automation...
	    // attack
	    t += this.aTime;
	    if (this.isExponential == true) {
	      this.control.exponentialRampToValueAtTime(this.checkExpInput(this.aLevel), t);
	      valToSet = this.checkExpInput(this.control.getValueAtTime(t));
	      this.control.cancelScheduledValues(t);
	      this.control.exponentialRampToValueAtTime(valToSet, t);
	    } else {
	      this.control.linearRampToValueAtTime(this.aLevel, t);
	      valToSet = this.control.getValueAtTime(t);
	      this.control.cancelScheduledValues(t);
	      this.control.linearRampToValueAtTime(valToSet, t);
	    }
	    // decay to decay level (if using ADSR, then decay level == sustain level)
	    t += this.dTime;
	    if (this.isExponential == true) {
	      this.control.exponentialRampToValueAtTime(this.checkExpInput(this.dLevel), t);
	      valToSet = this.checkExpInput(this.control.getValueAtTime(t));
	      this.control.cancelScheduledValues(t);
	      this.control.exponentialRampToValueAtTime(valToSet, t);
	    } else {
	      this.control.linearRampToValueAtTime(this.dLevel, t);
	      valToSet = this.control.getValueAtTime(t);
	      this.control.cancelScheduledValues(t);
	      this.control.linearRampToValueAtTime(valToSet, t);
	    }
	  };
	  /**
	   *  Trigger the Release of the Envelope. This is similar to releasing
	   *  the key on a piano and letting the sound fade according to the
	   *  release level and release time.
	   *
	   *  @method  triggerRelease
	   *  @param  {Object} unit p5.sound Object or Web Audio Param
	   *  @param  {Number} secondsFromNow time to trigger the release
	   *  @example
	   *  <div><code>
	   *
	   *  var attackLevel = 1.0;
	   *  var releaseLevel = 0;
	   *
	   *  var attackTime = 0.001
	   *  var decayTime = 0.3;
	   *  var susPercent = 0.4;
	   *  var releaseTime = 0.5;
	   *
	   *  var env, triOsc;
	   *
	   *  function setup() {
	   *    var cnv = createCanvas(100, 100);
	   *    background(200);
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *
	   *    env = new p5.Env();
	   *    env.setADSR(attackTime, decayTime, susPercent, releaseTime);
	   *    env.setRange(attackLevel, releaseLevel);
	   *
	   *    triOsc = new p5.Oscillator('triangle');
	   *    triOsc.amp(env);
	   *    triOsc.start();
	   *    triOsc.freq(220);
	   *
	   *    cnv.mousePressed(envAttack);
	   *  }
	   *
	   *  function envAttack(){
	   *    console.log('trigger attack');
	   *    env.triggerAttack();
	   *
	   *    background(0,255,0);
	   *    text('attack!', width/2, height/2);
	   *  }
	   *
	   *  function mouseReleased() {
	   *    env.triggerRelease();
	   *
	   *    background(200);
	   *    text('click to play', width/2, height/2);
	   *  }
	   *  </code></div>
	   */
	  p5.Env.prototype.triggerRelease = function (unit, secondsFromNow) {
	    // only trigger a release if an attack was triggered
	    if (!this.wasTriggered) {
	      // this currently causes a bit of trouble:
	      // if a later release has been scheduled (via the play function)
	      // a new earlier release won't interrupt it, because
	      // this.wasTriggered has already been set to false.
	      // If we want new earlier releases to override, then we need to
	      // keep track of the last release time, and if the new release time is
	      // earlier, then use it.
	      return;
	    }
	    var now = p5sound.audiocontext.currentTime;
	    var tFromNow = secondsFromNow || 0;
	    var t = now + tFromNow;
	    if (unit) {
	      if (this.connection !== unit) {
	        this.connect(unit);
	      }
	    }
	    // get and set value (with linear or exponential ramp) to anchor automation
	    var valToSet = this.control.getValueAtTime(t);
	    this.control.cancelScheduledValues(t);
	    // not sure if this is necessary
	    if (this.isExponential == true) {
	      this.control.exponentialRampToValueAtTime(this.checkExpInput(valToSet), t);
	    } else {
	      this.control.linearRampToValueAtTime(valToSet, t);
	    }
	    // release
	    t += this.rTime;
	    if (this.isExponential == true) {
	      this.control.exponentialRampToValueAtTime(this.checkExpInput(this.rLevel), t);
	      valToSet = this.checkExpInput(this.control.getValueAtTime(t));
	      this.control.cancelScheduledValues(t);
	      this.control.exponentialRampToValueAtTime(valToSet, t);
	    } else {
	      this.control.linearRampToValueAtTime(this.rLevel, t);
	      valToSet = this.control.getValueAtTime(t);
	      this.control.cancelScheduledValues(t);
	      this.control.linearRampToValueAtTime(valToSet, t);
	    }
	    this.wasTriggered = false;
	  };
	  /**
	   *  Exponentially ramp to a value using the first two
	   *  values from <code><a href="#/p5.Env/setADSR">setADSR(attackTime, decayTime)</a></code>
	   *  as <a href="https://en.wikipedia.org/wiki/RC_time_constant">
	   *  time constants</a> for simple exponential ramps.
	   *  If the value is higher than current value, it uses attackTime,
	   *  while a decrease uses decayTime.
	   *
	   *  @method  ramp
	   *  @param  {Object} unit           p5.sound Object or Web Audio Param
	   *  @param  {Number} secondsFromNow When to trigger the ramp
	   *  @param  {Number} v              Target value
	   *  @param  {Number} [v2]           Second target value (optional)
	   *  @example
	   *  <div><code>
	   *  var env, osc, amp, cnv;
	   *
	   *  var attackTime = 0.001;
	   *  var decayTime = 0.2;
	   *  var attackLevel = 1;
	   *  var decayLevel = 0;
	   *
	   *  function setup() {
	   *    cnv = createCanvas(100, 100);
	   *    fill(0,255,0);
	   *    noStroke();
	   *
	   *    env = new p5.Env();
	   *    env.setADSR(attackTime, decayTime);
	   *
	   *    osc = new p5.Oscillator();
	   *    osc.amp(env);
	   *    osc.start();
	   *
	   *    amp = new p5.Amplitude();
	   *
	   *    cnv.mousePressed(triggerRamp);
	   *  }
	   *
	   *  function triggerRamp() {
	   *    env.ramp(osc, 0, attackLevel, decayLevel);
	   *  }
	   *
	   *  function draw() {
	   *    background(20,20,20);
	   *    text('click me', 10, 20);
	   *    var h = map(amp.getLevel(), 0, 0.4, 0, height);;
	   *
	   *    rect(0, height, width, -h);
	   *  }
	   *  </code></div>
	   */
	  p5.Env.prototype.ramp = function (unit, secondsFromNow, v1, v2) {
	    var now = p5sound.audiocontext.currentTime;
	    var tFromNow = secondsFromNow || 0;
	    var t = now + tFromNow;
	    var destination1 = this.checkExpInput(v1);
	    var destination2 = typeof v2 !== 'undefined' ? this.checkExpInput(v2) : undefined;
	    // connect env to unit if not already connected
	    if (unit) {
	      if (this.connection !== unit) {
	        this.connect(unit);
	      }
	    }
	    //get current value
	    var currentVal = this.checkExpInput(this.control.getValueAtTime(t));
	    this.control.cancelScheduledValues(t);
	    //if it's going up
	    if (destination1 > currentVal) {
	      this.control.setTargetAtTime(destination1, t, this._rampAttackTC);
	      t += this._rampAttackTime;
	    } else if (destination1 < currentVal) {
	      this.control.setTargetAtTime(destination1, t, this._rampDecayTC);
	      t += this._rampDecayTime;
	    }
	    // Now the second part of envelope begins
	    if (destination2 === undefined)
	      return;
	    //if it's going up
	    if (destination2 > destination1) {
	      this.control.setTargetAtTime(destination2, t, this._rampAttackTC);
	    } else if (destination2 < destination1) {
	      this.control.setTargetAtTime(destination2, t, this._rampDecayTC);
	    }
	  };
	  p5.Env.prototype.connect = function (unit) {
	    this.connection = unit;
	    // assume we're talking about output gain
	    // unless given a different audio param
	    if (unit instanceof p5.Oscillator || unit instanceof p5.SoundFile || unit instanceof p5.AudioIn || unit instanceof p5.Reverb || unit instanceof p5.Noise || unit instanceof p5.Filter || unit instanceof p5.Delay) {
	      unit = unit.output.gain;
	    }
	    if (unit instanceof AudioParam) {
	      //set the initial value
	      unit.setValueAtTime(0, p5sound.audiocontext.currentTime);
	    }
	    if (unit instanceof p5.Signal) {
	      unit.setValue(0);
	    }
	    this.output.connect(unit);
	  };
	  p5.Env.prototype.disconnect = function (unit) {
	    this.output.disconnect();
	  };
	  // Signal Math
	  /**
	   *  Add a value to the p5.Oscillator's output amplitude,
	   *  and return the oscillator. Calling this method
	   *  again will override the initial add() with new values.
	   *
	   *  @method  add
	   *  @param {Number} number Constant number to add
	   *  @return {p5.Env} Envelope Returns this envelope
	   *                                     with scaled output
	   */
	  p5.Env.prototype.add = function (num) {
	    var add = new Add(num);
	    var thisChain = this.mathOps.length;
	    var nextChain = this.output;
	    return p5.prototype._mathChain(this, add, thisChain, nextChain, Add);
	  };
	  /**
	   *  Multiply the p5.Env's output amplitude
	   *  by a fixed value. Calling this method
	   *  again will override the initial mult() with new values.
	   *
	   *  @method  mult
	   *  @param {Number} number Constant number to multiply
	   *  @return {p5.Env} Envelope Returns this envelope
	   *                                     with scaled output
	   */
	  p5.Env.prototype.mult = function (num) {
	    var mult = new Mult(num);
	    var thisChain = this.mathOps.length;
	    var nextChain = this.output;
	    return p5.prototype._mathChain(this, mult, thisChain, nextChain, Mult);
	  };
	  /**
	   *  Scale this envelope's amplitude values to a given
	   *  range, and return the envelope. Calling this method
	   *  again will override the initial scale() with new values.
	   *
	   *  @method  scale
	   *  @param  {Number} inMin  input range minumum
	   *  @param  {Number} inMax  input range maximum
	   *  @param  {Number} outMin input range minumum
	   *  @param  {Number} outMax input range maximum
	   *  @return {p5.Env} Envelope Returns this envelope
	   *                                     with scaled output
	   */
	  p5.Env.prototype.scale = function (inMin, inMax, outMin, outMax) {
	    var scale = new Scale(inMin, inMax, outMin, outMax);
	    var thisChain = this.mathOps.length;
	    var nextChain = this.output;
	    return p5.prototype._mathChain(this, scale, thisChain, nextChain, Scale);
	  };
	  // get rid of the oscillator
	  p5.Env.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    var now = p5sound.audiocontext.currentTime;
	    this.disconnect();
	    try {
	      this.control.dispose();
	      this.control = null;
	    } catch (e) {
	    }
	    for (var i = 1; i < this.mathOps.length; i++) {
	      mathOps[i].dispose();
	    }
	  };
	}(master, Tone_signal_Add, Tone_signal_Multiply, Tone_signal_Scale, Tone_signal_TimelineSignal, Tone_core_Tone);
	var pulse;
	pulse = function () {
	  'use strict';
	  var p5sound = master;
	  /**
	   *  Creates a Pulse object, an oscillator that implements
	   *  Pulse Width Modulation.
	   *  The pulse is created with two oscillators.
	   *  Accepts a parameter for frequency, and to set the
	   *  width between the pulses. See <a href="
	   *  http://p5js.org/reference/#/p5.Oscillator">
	   *  <code>p5.Oscillator</code> for a full list of methods.
	   *  
	   *  @class p5.Pulse
	   *  @constructor
	   *  @param {Number} [freq] Frequency in oscillations per second (Hz)
	   *  @param {Number} [w]    Width between the pulses (0 to 1.0,
	   *                         defaults to 0)
	   *  @example
	   *  <div><code>
	   *  var pulse;
	   *  function setup() {
	   *    background(0);
	   *    
	   *    // Create and start the pulse wave oscillator
	   *    pulse = new p5.Pulse();
	   *    pulse.amp(0.5);
	   *    pulse.freq(220);
	   *    pulse.start();
	   *  }
	   *
	   *  function draw() {
	   *    var w = map(mouseX, 0, width, 0, 1);
	   *    w = constrain(w, 0, 1);
	   *    pulse.width(w)
	   *  }
	   *  </code></div>
	   */
	  p5.Pulse = function (freq, w) {
	    p5.Oscillator.call(this, freq, 'sawtooth');
	    // width of PWM, should be betw 0 to 1.0
	    this.w = w || 0;
	    // create a second oscillator with inverse frequency
	    this.osc2 = new p5.SawOsc(freq);
	    // create a delay node
	    this.dNode = p5sound.audiocontext.createDelay();
	    // dc offset
	    this.dcOffset = createDCOffset();
	    this.dcGain = p5sound.audiocontext.createGain();
	    this.dcOffset.connect(this.dcGain);
	    this.dcGain.connect(this.output);
	    // set delay time based on PWM width
	    this.f = freq || 440;
	    var mW = this.w / this.oscillator.frequency.value;
	    this.dNode.delayTime.value = mW;
	    this.dcGain.gain.value = 1.7 * (0.5 - this.w);
	    // disconnect osc2 and connect it to delay, which is connected to output
	    this.osc2.disconnect();
	    this.osc2.panner.disconnect();
	    this.osc2.amp(-1);
	    // inverted amplitude
	    this.osc2.output.connect(this.dNode);
	    this.dNode.connect(this.output);
	    this.output.gain.value = 1;
	    this.output.connect(this.panner);
	  };
	  p5.Pulse.prototype = Object.create(p5.Oscillator.prototype);
	  /**
	   *  Set the width of a Pulse object (an oscillator that implements
	   *  Pulse Width Modulation).
	   *
	   *  @method  width
	   *  @param {Number} [width]    Width between the pulses (0 to 1.0,
	   *                         defaults to 0)
	   */
	  p5.Pulse.prototype.width = function (w) {
	    if (typeof w === 'number') {
	      if (w <= 1 && w >= 0) {
	        this.w = w;
	        // set delay time based on PWM width
	        // var mW = map(this.w, 0, 1.0, 0, 1/this.f);
	        var mW = this.w / this.oscillator.frequency.value;
	        this.dNode.delayTime.value = mW;
	      }
	      this.dcGain.gain.value = 1.7 * (0.5 - this.w);
	    } else {
	      w.connect(this.dNode.delayTime);
	      var sig = new p5.SignalAdd(-0.5);
	      sig.setInput(w);
	      sig = sig.mult(-1);
	      sig = sig.mult(1.7);
	      sig.connect(this.dcGain.gain);
	    }
	  };
	  p5.Pulse.prototype.start = function (f, time) {
	    var now = p5sound.audiocontext.currentTime;
	    var t = time || 0;
	    if (!this.started) {
	      var freq = f || this.f;
	      var type = this.oscillator.type;
	      this.oscillator = p5sound.audiocontext.createOscillator();
	      this.oscillator.frequency.setValueAtTime(freq, now);
	      this.oscillator.type = type;
	      this.oscillator.connect(this.output);
	      this.oscillator.start(t + now);
	      // set up osc2
	      this.osc2.oscillator = p5sound.audiocontext.createOscillator();
	      this.osc2.oscillator.frequency.setValueAtTime(freq, t + now);
	      this.osc2.oscillator.type = type;
	      this.osc2.oscillator.connect(this.osc2.output);
	      this.osc2.start(t + now);
	      this.freqNode = [
	        this.oscillator.frequency,
	        this.osc2.oscillator.frequency
	      ];
	      // start dcOffset, too
	      this.dcOffset = createDCOffset();
	      this.dcOffset.connect(this.dcGain);
	      this.dcOffset.start(t + now);
	      // if LFO connections depend on these oscillators
	      if (this.mods !== undefined && this.mods.frequency !== undefined) {
	        this.mods.frequency.connect(this.freqNode[0]);
	        this.mods.frequency.connect(this.freqNode[1]);
	      }
	      this.started = true;
	      this.osc2.started = true;
	    }
	  };
	  p5.Pulse.prototype.stop = function (time) {
	    if (this.started) {
	      var t = time || 0;
	      var now = p5sound.audiocontext.currentTime;
	      this.oscillator.stop(t + now);
	      this.osc2.oscillator.stop(t + now);
	      this.dcOffset.stop(t + now);
	      this.started = false;
	      this.osc2.started = false;
	    }
	  };
	  p5.Pulse.prototype.freq = function (val, rampTime, tFromNow) {
	    if (typeof val === 'number') {
	      this.f = val;
	      var now = p5sound.audiocontext.currentTime;
	      var rampTime = rampTime || 0;
	      var tFromNow = tFromNow || 0;
	      var currentFreq = this.oscillator.frequency.value;
	      this.oscillator.frequency.cancelScheduledValues(now);
	      this.oscillator.frequency.setValueAtTime(currentFreq, now + tFromNow);
	      this.oscillator.frequency.exponentialRampToValueAtTime(val, tFromNow + rampTime + now);
	      this.osc2.oscillator.frequency.cancelScheduledValues(now);
	      this.osc2.oscillator.frequency.setValueAtTime(currentFreq, now + tFromNow);
	      this.osc2.oscillator.frequency.exponentialRampToValueAtTime(val, tFromNow + rampTime + now);
	      if (this.freqMod) {
	        this.freqMod.output.disconnect();
	        this.freqMod = null;
	      }
	    } else if (val.output) {
	      val.output.disconnect();
	      val.output.connect(this.oscillator.frequency);
	      val.output.connect(this.osc2.oscillator.frequency);
	      this.freqMod = val;
	    }
	  };
	  // inspiration: http://webaudiodemos.appspot.com/oscilloscope/
	  function createDCOffset() {
	    var ac = p5sound.audiocontext;
	    var buffer = ac.createBuffer(1, 2048, ac.sampleRate);
	    var data = buffer.getChannelData(0);
	    for (var i = 0; i < 2048; i++)
	      data[i] = 1;
	    var bufferSource = ac.createBufferSource();
	    bufferSource.buffer = buffer;
	    bufferSource.loop = true;
	    return bufferSource;
	  }
	}(master, oscillator);
	var noise;
	noise = function () {
	  'use strict';
	  var p5sound = master;
	  /**
	   *  Noise is a type of oscillator that generates a buffer with random values.
	   *
	   *  @class p5.Noise
	   *  @constructor
	   *  @param {String} type Type of noise can be 'white' (default),
	   *                       'brown' or 'pink'.
	   *  @return {Object}    Noise Object
	   */
	  p5.Noise = function (type) {
	    var assignType;
	    p5.Oscillator.call(this);
	    delete this.f;
	    delete this.freq;
	    delete this.oscillator;
	    if (type === 'brown') {
	      assignType = _brownNoise;
	    } else if (type === 'pink') {
	      assignType = _pinkNoise;
	    } else {
	      assignType = _whiteNoise;
	    }
	    this.buffer = assignType;
	  };
	  p5.Noise.prototype = Object.create(p5.Oscillator.prototype);
	  // generate noise buffers
	  var _whiteNoise = function () {
	    var bufferSize = 2 * p5sound.audiocontext.sampleRate;
	    var whiteBuffer = p5sound.audiocontext.createBuffer(1, bufferSize, p5sound.audiocontext.sampleRate);
	    var noiseData = whiteBuffer.getChannelData(0);
	    for (var i = 0; i < bufferSize; i++) {
	      noiseData[i] = Math.random() * 2 - 1;
	    }
	    whiteBuffer.type = 'white';
	    return whiteBuffer;
	  }();
	  var _pinkNoise = function () {
	    var bufferSize = 2 * p5sound.audiocontext.sampleRate;
	    var pinkBuffer = p5sound.audiocontext.createBuffer(1, bufferSize, p5sound.audiocontext.sampleRate);
	    var noiseData = pinkBuffer.getChannelData(0);
	    var b0, b1, b2, b3, b4, b5, b6;
	    b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;
	    for (var i = 0; i < bufferSize; i++) {
	      var white = Math.random() * 2 - 1;
	      b0 = 0.99886 * b0 + white * 0.0555179;
	      b1 = 0.99332 * b1 + white * 0.0750759;
	      b2 = 0.969 * b2 + white * 0.153852;
	      b3 = 0.8665 * b3 + white * 0.3104856;
	      b4 = 0.55 * b4 + white * 0.5329522;
	      b5 = -0.7616 * b5 - white * 0.016898;
	      noiseData[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
	      noiseData[i] *= 0.11;
	      // (roughly) compensate for gain
	      b6 = white * 0.115926;
	    }
	    pinkBuffer.type = 'pink';
	    return pinkBuffer;
	  }();
	  var _brownNoise = function () {
	    var bufferSize = 2 * p5sound.audiocontext.sampleRate;
	    var brownBuffer = p5sound.audiocontext.createBuffer(1, bufferSize, p5sound.audiocontext.sampleRate);
	    var noiseData = brownBuffer.getChannelData(0);
	    var lastOut = 0;
	    for (var i = 0; i < bufferSize; i++) {
	      var white = Math.random() * 2 - 1;
	      noiseData[i] = (lastOut + 0.02 * white) / 1.02;
	      lastOut = noiseData[i];
	      noiseData[i] *= 3.5;
	    }
	    brownBuffer.type = 'brown';
	    return brownBuffer;
	  }();
	  /**
	   *  Set type of noise to 'white', 'pink' or 'brown'.
	   *  White is the default.
	   *
	   *  @method setType
	   *  @param {String} [type] 'white', 'pink' or 'brown'
	   */
	  p5.Noise.prototype.setType = function (type) {
	    switch (type) {
	    case 'white':
	      this.buffer = _whiteNoise;
	      break;
	    case 'pink':
	      this.buffer = _pinkNoise;
	      break;
	    case 'brown':
	      this.buffer = _brownNoise;
	      break;
	    default:
	      this.buffer = _whiteNoise;
	    }
	    if (this.started) {
	      var now = p5sound.audiocontext.currentTime;
	      this.stop(now);
	      this.start(now + 0.01);
	    }
	  };
	  p5.Noise.prototype.getType = function () {
	    return this.buffer.type;
	  };
	  /**
	   *  Start the noise
	   *
	   *  @method start
	   */
	  p5.Noise.prototype.start = function () {
	    if (this.started) {
	      this.stop();
	    }
	    this.noise = p5sound.audiocontext.createBufferSource();
	    this.noise.buffer = this.buffer;
	    this.noise.loop = true;
	    this.noise.connect(this.output);
	    var now = p5sound.audiocontext.currentTime;
	    this.noise.start(now);
	    this.started = true;
	  };
	  /**
	   *  Stop the noise.
	   *
	   *  @method  stop
	   */
	  p5.Noise.prototype.stop = function () {
	    var now = p5sound.audiocontext.currentTime;
	    if (this.noise) {
	      this.noise.stop(now);
	      this.started = false;
	    }
	  };
	  /**
	   *  Pan the noise.
	   *
	   *  @method  pan
	   *  @param  {Number} panning Number between -1 (left)
	   *                           and 1 (right)
	   *  @param  {Number} timeFromNow schedule this event to happen
	   *                                seconds from now
	   */
	  /**
	   *  Set the amplitude of the noise between 0 and 1.0. Or,
	   *  modulate amplitude with an audio signal such as an oscillator.
	   *
	   *  @param  {Number|Object} volume amplitude between 0 and 1.0
	   *                                     or modulating signal/oscillator
	   *  @param {Number} [rampTime] create a fade that lasts rampTime
	   *  @param {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   */
	  /**
	   *  Send output to a p5.sound or web audio object
	   *
	   *  @method  connect
	   *  @param  {Object} unit
	   */
	  /**
	   *  Disconnect all output.
	   *
	   *  @method disconnect
	   */
	  p5.Noise.prototype.dispose = function () {
	    var now = p5sound.audiocontext.currentTime;
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    if (this.noise) {
	      this.noise.disconnect();
	      this.stop(now);
	    }
	    if (this.output) {
	      this.output.disconnect();
	    }
	    if (this.panner) {
	      this.panner.disconnect();
	    }
	    this.output = null;
	    this.panner = null;
	    this.buffer = null;
	    this.noise = null;
	  };
	}(master);
	var audioin;
	audioin = function () {
	  'use strict';
	  var p5sound = master;
	  var CustomError = errorHandler;
	  /**
	   *  <p>Get audio from an input, i.e. your computer's microphone.</p>
	   *
	   *  <p>Turn the mic on/off with the start() and stop() methods. When the mic
	   *  is on, its volume can be measured with getLevel or by connecting an
	   *  FFT object.</p>
	   *  
	   *  <p>If you want to hear the AudioIn, use the .connect() method. 
	   *  AudioIn does not connect to p5.sound output by default to prevent
	   *  feedback.</p> 
	   *
	   *  <p><em>Note: This uses the <a href="http://caniuse.com/stream">getUserMedia/
	   *  Stream</a> API, which is not supported by certain browsers. Access in Chrome browser
	   *  is limited to localhost and https, but access over http may be limited.</em></p>
	   *
	   *  @class p5.AudioIn
	   *  @constructor
	   *  @param {Function} [errorCallback] A function to call if there is an error
	   *                                    accessing the AudioIn. For example,
	   *                                    Safari and iOS devices do not
	   *                                    currently allow microphone access.
	   *  @return {Object} AudioIn
	   *  @example
	   *  <div><code>
	   *  var mic;
	   *  function setup(){
	   *    mic = new p5.AudioIn()
	   *    mic.start();
	   *  }
	   *  function draw(){
	   *    background(0);
	   *    micLevel = mic.getLevel();
	   *    ellipse(width/2, constrain(height-micLevel*height*5, 0, height), 10, 10);
	   *  }
	   *  </code></div>
	   */
	  p5.AudioIn = function (errorCallback) {
	    // set up audio input
	    this.input = p5sound.audiocontext.createGain();
	    this.output = p5sound.audiocontext.createGain();
	    this.stream = null;
	    this.mediaStream = null;
	    this.currentSource = 0;
	    /**
	     *  Client must allow browser to access their microphone / audioin source.
	     *  Default: false. Will become true when the client enables acces.
	     *
	     *  @property {Boolean} enabled
	     */
	    this.enabled = false;
	    // create an amplitude, connect to it by default but not to master out
	    this.amplitude = new p5.Amplitude();
	    this.output.connect(this.amplitude.input);
	    // Some browsers let developer determine their input sources
	    if (typeof window.MediaStreamTrack === 'undefined') {
	      if (errorCallback) {
	        errorCallback();
	      } else {
	        window.alert('This browser does not support AudioIn');
	      }
	    } else if (typeof window.MediaStreamTrack.getSources === 'function') {
	      // Chrome supports getSources to list inputs. Dev picks default
	      window.MediaStreamTrack.getSources(this._gotSources);
	    } else {
	    }
	    // add to soundArray so we can dispose on close
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Start processing audio input. This enables the use of other
	   *  AudioIn methods like getLevel(). Note that by default, AudioIn
	   *  is not connected to p5.sound's output. So you won't hear
	   *  anything unless you use the connect() method.<br/>
	   *
	   *  Certain browsers limit access to the user's microphone. For example,
	   *  Chrome only allows access from localhost and over https. For this reason,
	   *  you may want to include an errorCallbackâa function that is called in case
	   *  the browser won't provide mic access.
	   *
	   *  @method start
	   *  @param {Function} successCallback Name of a function to call on
	   *                                    success.
	   *  @param {Function} errorCallback Name of a function to call if
	   *                                    there was an error. For example,
	   *                                    some browsers do not support
	   *                                    getUserMedia.
	   */
	  p5.AudioIn.prototype.start = function (successCallback, errorCallback) {
	    var self = this;
	    // if stream was already started...
	    // if _gotSources() i.e. developers determine which source to use
	    if (p5sound.inputSources[self.currentSource]) {
	      // set the audio source
	      var audioSource = p5sound.inputSources[self.currentSource].id;
	      var constraints = { audio: { optional: [{ sourceId: audioSource }] } };
	      window.navigator.getUserMedia(constraints, this._onStream = function (stream) {
	        self.stream = stream;
	        self.enabled = true;
	        // Wrap a MediaStreamSourceNode around the live input
	        self.mediaStream = p5sound.audiocontext.createMediaStreamSource(stream);
	        self.mediaStream.connect(self.output);
	        if (successCallback)
	          successCallback();
	        // only send to the Amplitude reader, so we can see it but not hear it.
	        self.amplitude.setInput(self.output);
	      }, this._onStreamError = function (e) {
	        if (errorCallback)
	          errorCallback(e);
	        else
	          console.error(e);
	      });
	    } else {
	      // if Firefox where users select their source via browser
	      // if (typeof MediaStreamTrack.getSources === 'undefined') {
	      // Only get the audio stream.
	      window.navigator.getUserMedia({ 'audio': true }, this._onStream = function (stream) {
	        self.stream = stream;
	        self.enabled = true;
	        // Wrap a MediaStreamSourceNode around the live input
	        self.mediaStream = p5sound.audiocontext.createMediaStreamSource(stream);
	        self.mediaStream.connect(self.output);
	        // only send to the Amplitude reader, so we can see it but not hear it.
	        self.amplitude.setInput(self.output);
	        if (successCallback)
	          successCallback();
	      }, this._onStreamError = function (e) {
	        if (errorCallback)
	          errorCallback(e);
	        else
	          console.error(e);
	      });
	    }
	  };
	  /**
	   *  Turn the AudioIn off. If the AudioIn is stopped, it cannot getLevel().
	   *  If re-starting, the user may be prompted for permission access.
	   *
	   *  @method stop
	   */
	  p5.AudioIn.prototype.stop = function () {
	    if (this.stream) {
	      // assume only one track
	      this.stream.getTracks()[0].stop();
	    }
	  };
	  /**
	   *  Connect to an audio unit. If no parameter is provided, will
	   *  connect to the master output (i.e. your speakers).<br/>
	   *  
	   *  @method  connect
	   *  @param  {Object} [unit] An object that accepts audio input,
	   *                          such as an FFT
	   */
	  p5.AudioIn.prototype.connect = function (unit) {
	    if (unit) {
	      if (unit.hasOwnProperty('input')) {
	        this.output.connect(unit.input);
	      } else if (unit.hasOwnProperty('analyser')) {
	        this.output.connect(unit.analyser);
	      } else {
	        this.output.connect(unit);
	      }
	    } else {
	      this.output.connect(p5sound.input);
	    }
	  };
	  /**
	   *  Disconnect the AudioIn from all audio units. For example, if
	   *  connect() had been called, disconnect() will stop sending 
	   *  signal to your speakers.<br/>
	   *
	   *  @method  disconnect
	   */
	  p5.AudioIn.prototype.disconnect = function () {
	    this.output.disconnect();
	    // stay connected to amplitude even if not outputting to p5
	    this.output.connect(this.amplitude.input);
	  };
	  /**
	   *  Read the Amplitude (volume level) of an AudioIn. The AudioIn
	   *  class contains its own instance of the Amplitude class to help
	   *  make it easy to get a microphone's volume level. Accepts an
	   *  optional smoothing value (0.0 < 1.0). <em>NOTE: AudioIn must
	   *  .start() before using .getLevel().</em><br/>
	   *  
	   *  @method  getLevel
	   *  @param  {Number} [smoothing] Smoothing is 0.0 by default.
	   *                               Smooths values based on previous values.
	   *  @return {Number}           Volume level (between 0.0 and 1.0)
	   */
	  p5.AudioIn.prototype.getLevel = function (smoothing) {
	    if (smoothing) {
	      this.amplitude.smoothing = smoothing;
	    }
	    return this.amplitude.getLevel();
	  };
	  /**
	   *  Add input sources to the list of available sources.
	   *  
	   *  @private
	   */
	  p5.AudioIn.prototype._gotSources = function (sourceInfos) {
	    for (var i = 0; i < sourceInfos.length; i++) {
	      var sourceInfo = sourceInfos[i];
	      if (sourceInfo.kind === 'audio') {
	        // add the inputs to inputSources
	        //p5sound.inputSources.push(sourceInfo);
	        return sourceInfo;
	      }
	    }
	  };
	  /**
	   *  Set amplitude (volume) of a mic input between 0 and 1.0. <br/>
	   *
	   *  @method  amp
	   *  @param  {Number} vol between 0 and 1.0
	   *  @param {Number} [time] ramp time (optional)
	   */
	  p5.AudioIn.prototype.amp = function (vol, t) {
	    if (t) {
	      var rampTime = t || 0;
	      var currentVol = this.output.gain.value;
	      this.output.gain.cancelScheduledValues(p5sound.audiocontext.currentTime);
	      this.output.gain.setValueAtTime(currentVol, p5sound.audiocontext.currentTime);
	      this.output.gain.linearRampToValueAtTime(vol, rampTime + p5sound.audiocontext.currentTime);
	    } else {
	      this.output.gain.cancelScheduledValues(p5sound.audiocontext.currentTime);
	      this.output.gain.setValueAtTime(vol, p5sound.audiocontext.currentTime);
	    }
	  };
	  p5.AudioIn.prototype.listSources = function () {
	    console.log('listSources is deprecated - please use AudioIn.getSources');
	    console.log('input sources: ');
	    if (p5sound.inputSources.length > 0) {
	      return p5sound.inputSources;
	    } else {
	      return 'This browser does not support MediaStreamTrack.getSources()';
	    }
	  };
	  /**
	   * Chrome only. Returns a list of available input sources 
	   * and allows the user to set the media source. Firefox allows 
	   * the user to choose from input sources in the permissions dialogue
	   * instead of enumerating available sources and selecting one.
	   * Note: in order to have descriptive media names your page must be 
	   * served over a secure (HTTPS) connection and the page should 
	   * request user media before enumerating devices. Otherwise device 
	   * ID will be a long device ID number and does not specify device 
	   * type. For example see 
	   * https://simpl.info/getusermedia/sources/index.html vs.
	   * http://simpl.info/getusermedia/sources/index.html
	   *
	   * @method  getSources
	   * @param  {Function} callback a callback to handle the sources 
	   *                               when they have been enumerated
	   * @example
	   *  <div><code>
	   *  var audiograb;
	   *      
	   *  function setup(){
	   *    //new audioIn
	   *    audioGrab = new p5.AudioIn();
	   *    
	   *    audioGrab.getSources(function(sourceList) {
	   *      //print out the array of available sources
	   *      console.log(sourceList);
	   *      //set the source to the first item in the inputSources array
	   *      audioGrab.setSource(0);
	   *    });
	   *  }
	   *  </code></div>
	   */
	  p5.AudioIn.prototype.getSources = function (callback) {
	    if (typeof window.MediaStreamTrack.getSources === 'function') {
	      window.MediaStreamTrack.getSources(function (data) {
	        for (var i = 0, max = data.length; i < max; i++) {
	          var sourceInfo = data[i];
	          if (sourceInfo.kind === 'audio') {
	            // add the inputs to inputSources
	            p5sound.inputSources.push(sourceInfo);
	          }
	        }
	        callback(p5sound.inputSources);
	      });
	    } else {
	      console.log('This browser does not support MediaStreamTrack.getSources()');
	    }
	  };
	  /**
	   *  Set the input source. Accepts a number representing a
	   *  position in the array returned by listSources().
	   *  This is only available in browsers that support 
	   *  MediaStreamTrack.getSources(). Instead, some browsers
	   *  give users the option to set their own media source.<br/>
	   *  
	   *  @method setSource
	   *  @param {number} num position of input source in the array
	   */
	  p5.AudioIn.prototype.setSource = function (num) {
	    // TO DO - set input by string or # (array position)
	    var self = this;
	    if (p5sound.inputSources.length > 0 && num < p5sound.inputSources.length) {
	      // set the current source
	      self.currentSource = num;
	      console.log('set source to ' + p5sound.inputSources[self.currentSource].id);
	    } else {
	      console.log('unable to set input source');
	    }
	  };
	  // private method
	  p5.AudioIn.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this.stop();
	    if (this.output) {
	      this.output.disconnect();
	    }
	    if (this.amplitude) {
	      this.amplitude.disconnect();
	    }
	    this.amplitude = null;
	    this.output = null;
	  };
	}(master, errorHandler);
	var filter;
	filter = function () {
	  'use strict';
	  var p5sound = master;
	  /**
	   *  A p5.Filter uses a Web Audio Biquad Filter to filter
	   *  the frequency response of an input source. Inheriting
	   *  classes include:<br/>
	   *  * <code>p5.LowPass</code> - allows frequencies below
	   *  the cutoff frequency to pass through, and attenuates
	   *  frequencies above the cutoff.<br/>
	   *  * <code>p5.HighPass</code> - the opposite of a lowpass
	   *  filter. <br/>
	   *  * <code>p5.BandPass</code> -  allows a range of
	   *  frequencies to pass through and attenuates the frequencies
	   *  below and above this frequency range.<br/>
	   *
	   *  The <code>.res()</code> method controls either width of the
	   *  bandpass, or resonance of the low/highpass cutoff frequency.
	   *
	   *  @class p5.Filter
	   *  @constructor
	   *  @param {[String]} type 'lowpass' (default), 'highpass', 'bandpass'
	   *  @return {Object} p5.Filter
	   *  @example
	   *  <div><code>
	   *  var fft, noise, filter;
	   *
	   *  function setup() {
	   *    fill(255, 40, 255);
	   *
	   *    filter = new p5.BandPass();
	   *
	   *    noise = new p5.Noise();
	   *    // disconnect unfiltered noise,
	   *    // and connect to filter
	   *    noise.disconnect();
	   *    noise.connect(filter);
	   *    noise.start();
	   *
	   *    fft = new p5.FFT();
	   *  }
	   *
	   *  function draw() {
	   *    background(30);
	   *
	   *    // set the BandPass frequency based on mouseX
	   *    var freq = map(mouseX, 0, width, 20, 10000);
	   *    filter.freq(freq);
	   *    // give the filter a narrow band (lower res = wider bandpass)
	   *    filter.res(50);
	   *
	   *    // draw filtered spectrum
	   *    var spectrum = fft.analyze();
	   *    noStroke();
	   *    for (var i = 0; i < spectrum.length; i++) {
	   *      var x = map(i, 0, spectrum.length, 0, width);
	   *      var h = -height + map(spectrum[i], 0, 255, height, 0);
	   *      rect(x, height, width/spectrum.length, h);
	   *    }
	   *    
	   *    isMouseOverCanvas();
	   *  }
	   *
	   *  function isMouseOverCanvas() {
	   *    var mX = mouseX, mY = mouseY;
	   *    if (mX > 0 && mX < width && mY < height && mY > 0) {
	   *      noise.amp(0.5, 0.2);
	   *    } else {
	   *      noise.amp(0, 0.2);
	   *    }
	   *  }
	   *  </code></div>
	   */
	  p5.Filter = function (type) {
	    this.ac = p5sound.audiocontext;
	    this.input = this.ac.createGain();
	    this.output = this.ac.createGain();
	    /**
	     *  The p5.Filter is built with a
	     *  <a href="http://www.w3.org/TR/webaudio/#BiquadFilterNode">
	     *  Web Audio BiquadFilter Node</a>.
	     *  
	     *  @property biquadFilter
	     *  @type {Object}  Web Audio Delay Node
	     */
	    this.biquad = this.ac.createBiquadFilter();
	    this.input.connect(this.biquad);
	    this.biquad.connect(this.output);
	    this.connect();
	    if (type) {
	      this.setType(type);
	    }
	    // add to the soundArray
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Filter an audio signal according to a set
	   *  of filter parameters.
	   *  
	   *  @method  process
	   *  @param  {Object} Signal  An object that outputs audio
	   *  @param {[Number]} freq Frequency in Hz, from 10 to 22050
	   *  @param {[Number]} res Resonance/Width of the filter frequency
	   *                        from 0.001 to 1000
	   */
	  p5.Filter.prototype.process = function (src, freq, res) {
	    src.connect(this.input);
	    this.set(freq, res);
	  };
	  /**
	   *  Set the frequency and the resonance of the filter.
	   *
	   *  @method  set
	   *  @param {Number} freq Frequency in Hz, from 10 to 22050
	   *  @param {Number} res  Resonance (Q) from 0.001 to 1000
	   *  @param {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   */
	  p5.Filter.prototype.set = function (freq, res, time) {
	    if (freq) {
	      this.freq(freq, time);
	    }
	    if (res) {
	      this.res(res, time);
	    }
	  };
	  /**
	   *  Set the filter frequency, in Hz, from 10 to 22050 (the range of
	   *  human hearing, although in reality most people hear in a narrower
	   *  range).
	   *
	   *  @method  freq
	   *  @param  {Number} freq Filter Frequency
	   *  @param {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   *  @return {Number} value  Returns the current frequency value
	   */
	  p5.Filter.prototype.freq = function (freq, time) {
	    var self = this;
	    var t = time || 0;
	    if (freq <= 0) {
	      freq = 1;
	    }
	    if (typeof freq === 'number') {
	      self.biquad.frequency.value = freq;
	      self.biquad.frequency.cancelScheduledValues(this.ac.currentTime + 0.01 + t);
	      self.biquad.frequency.exponentialRampToValueAtTime(freq, this.ac.currentTime + 0.02 + t);
	    } else if (freq) {
	      freq.connect(this.biquad.frequency);
	    }
	    return self.biquad.frequency.value;
	  };
	  /**
	   *  Controls either width of a bandpass frequency,
	   *  or the resonance of a low/highpass cutoff frequency.
	   *
	   *  @method  res
	   *  @param {Number} res  Resonance/Width of filter freq
	   *                       from 0.001 to 1000
	   *  @param {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   *  @return {Number} value Returns the current res value
	   */
	  p5.Filter.prototype.res = function (res, time) {
	    var self = this;
	    var t = time || 0;
	    if (typeof res == 'number') {
	      self.biquad.Q.value = res;
	      self.biquad.Q.cancelScheduledValues(self.ac.currentTime + 0.01 + t);
	      self.biquad.Q.linearRampToValueAtTime(res, self.ac.currentTime + 0.02 + t);
	    } else if (res) {
	      freq.connect(this.biquad.Q);
	    }
	    return self.biquad.Q.value;
	  };
	  /**
	   *  Set the type of a p5.Filter. Possible types include: 
	   *  "lowpass" (default), "highpass", "bandpass", 
	   *  "lowshelf", "highshelf", "peaking", "notch",
	   *  "allpass". 
	   *  
	   *  @method  setType
	   *  @param {String}
	   */
	  p5.Filter.prototype.setType = function (t) {
	    this.biquad.type = t;
	  };
	  /**
	   *  Set the output level of the filter.
	   *  
	   *  @method  amp
	   *  @param {Number} volume amplitude between 0 and 1.0
	   *  @param {Number} [rampTime] create a fade that lasts rampTime 
	   *  @param {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   */
	  p5.Filter.prototype.amp = function (vol, rampTime, tFromNow) {
	    var rampTime = rampTime || 0;
	    var tFromNow = tFromNow || 0;
	    var now = p5sound.audiocontext.currentTime;
	    var currentVol = this.output.gain.value;
	    this.output.gain.cancelScheduledValues(now);
	    this.output.gain.linearRampToValueAtTime(currentVol, now + tFromNow + 0.001);
	    this.output.gain.linearRampToValueAtTime(vol, now + tFromNow + rampTime + 0.001);
	  };
	  /**
	   *  Send output to a p5.sound or web audio object
	   *  
	   *  @method connect
	   *  @param  {Object} unit
	   */
	  p5.Filter.prototype.connect = function (unit) {
	    var u = unit || p5.soundOut.input;
	    this.output.connect(u);
	  };
	  /**
	   *  Disconnect all output.
	   *  
	   *  @method disconnect
	   */
	  p5.Filter.prototype.disconnect = function () {
	    this.output.disconnect();
	  };
	  p5.Filter.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this.input.disconnect();
	    this.input = undefined;
	    this.output.disconnect();
	    this.output = undefined;
	    this.biquad.disconnect();
	    this.biquad = undefined;
	  };
	  /**
	   *  Constructor: <code>new p5.LowPass()</code> Filter.
	   *  This is the same as creating a p5.Filter and then calling
	   *  its method <code>setType('lowpass')</code>.
	   *  See p5.Filter for methods.
	   *  
	   *  @method p5.LowPass
	   */
	  p5.LowPass = function () {
	    p5.Filter.call(this, 'lowpass');
	  };
	  p5.LowPass.prototype = Object.create(p5.Filter.prototype);
	  /**
	   *  Constructor: <code>new p5.HighPass()</code> Filter.
	   *  This is the same as creating a p5.Filter and then calling
	   *  its method <code>setType('highpass')</code>.
	   *  See p5.Filter for methods.
	   *  
	   *  @method p5.HighPass
	   */
	  p5.HighPass = function () {
	    p5.Filter.call(this, 'highpass');
	  };
	  p5.HighPass.prototype = Object.create(p5.Filter.prototype);
	  /**
	   *  Constructor: <code>new p5.BandPass()</code> Filter.
	   *  This is the same as creating a p5.Filter and then calling
	   *  its method <code>setType('bandpass')</code>.
	   *  See p5.Filter for methods. 
	   *  
	   *  @method p5.BandPass
	   */
	  p5.BandPass = function () {
	    p5.Filter.call(this, 'bandpass');
	  };
	  p5.BandPass.prototype = Object.create(p5.Filter.prototype);
	}(master);
	var delay;
	delay = function () {
	  'use strict';
	  var p5sound = master;
	  var Filter = filter;
	  /**
	   *  Delay is an echo effect. It processes an existing sound source,
	   *  and outputs a delayed version of that sound. The p5.Delay can
	   *  produce different effects depending on the delayTime, feedback,
	   *  filter, and type. In the example below, a feedback of 0.5 will
	   *  produce a looping delay that decreases in volume by
	   *  50% each repeat. A filter will cut out the high frequencies so
	   *  that the delay does not sound as piercing as the original source.
	   *  
	   *  @class p5.Delay
	   *  @constructor
	   *  @return {Object} Returns a p5.Delay object
	   *  @example
	   *  <div><code>
	   *  var noise, env, delay;
	   *  
	   *  function setup() {
	   *    background(0);
	   *    noStroke();
	   *    fill(255);
	   *    textAlign(CENTER);
	   *    text('click to play', width/2, height/2);
	   *    
	   *    noise = new p5.Noise('brown');
	   *    noise.amp(0);
	   *    noise.start();
	   *    
	   *    delay = new p5.Delay();
	   *
	   *    // delay.process() accepts 4 parameters:
	   *    // source, delayTime, feedback, filter frequency
	   *    // play with these numbers!!
	   *    delay.process(noise, .12, .7, 2300);
	   *    
	   *    // play the noise with an envelope,
	   *    // a series of fades ( time / value pairs )
	   *    env = new p5.Env(.01, 0.2, .2, .1);
	   *  }
	   *
	   *  // mouseClick triggers envelope
	   *  function mouseClicked() {
	   *    // is mouse over canvas?
	   *    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
	   *      env.play(noise);
	   *    }
	   *  }
	   *  </code></div>
	   */
	  p5.Delay = function () {
	    this.ac = p5sound.audiocontext;
	    this.input = this.ac.createGain();
	    this.output = this.ac.createGain();
	    this._split = this.ac.createChannelSplitter(2);
	    this._merge = this.ac.createChannelMerger(2);
	    this._leftGain = this.ac.createGain();
	    this._rightGain = this.ac.createGain();
	    /**
	     *  The p5.Delay is built with two
	     *  <a href="http://www.w3.org/TR/webaudio/#DelayNode">
	     *  Web Audio Delay Nodes</a>, one for each stereo channel.
	     *  
	     *  @property leftDelay
	     *  @type {Object}  Web Audio Delay Node
	     */
	    this.leftDelay = this.ac.createDelay();
	    /**
	     *  The p5.Delay is built with two
	     *  <a href="http://www.w3.org/TR/webaudio/#DelayNode">
	     *  Web Audio Delay Nodes</a>, one for each stereo channel.
	     *  
	     *  @property rightDelay
	     *  @type {Object}  Web Audio Delay Node
	     */
	    this.rightDelay = this.ac.createDelay();
	    this._leftFilter = new p5.Filter();
	    this._rightFilter = new p5.Filter();
	    this._leftFilter.disconnect();
	    this._rightFilter.disconnect();
	    this._leftFilter.biquad.frequency.setValueAtTime(1200, this.ac.currentTime);
	    this._rightFilter.biquad.frequency.setValueAtTime(1200, this.ac.currentTime);
	    this._leftFilter.biquad.Q.setValueAtTime(0.3, this.ac.currentTime);
	    this._rightFilter.biquad.Q.setValueAtTime(0.3, this.ac.currentTime);
	    // graph routing
	    this.input.connect(this._split);
	    this.leftDelay.connect(this._leftGain);
	    this.rightDelay.connect(this._rightGain);
	    this._leftGain.connect(this._leftFilter.input);
	    this._rightGain.connect(this._rightFilter.input);
	    this._merge.connect(this.output);
	    this.output.connect(p5.soundOut.input);
	    this._leftFilter.biquad.gain.setValueAtTime(1, this.ac.currentTime);
	    this._rightFilter.biquad.gain.setValueAtTime(1, this.ac.currentTime);
	    // default routing
	    this.setType(0);
	    this._maxDelay = this.leftDelay.delayTime.maxValue;
	    // add this p5.SoundFile to the soundArray
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Add delay to an audio signal according to a set
	   *  of delay parameters.
	   *  
	   *  @method  process
	   *  @param  {Object} Signal  An object that outputs audio
	   *  @param  {Number} [delayTime] Time (in seconds) of the delay/echo.
	   *                               Some browsers limit delayTime to
	   *                               1 second.
	   *  @param  {Number} [feedback]  sends the delay back through itself
	   *                               in a loop that decreases in volume
	   *                               each time.
	   *  @param  {Number} [lowPass]   Cutoff frequency. Only frequencies
	   *                               below the lowPass will be part of the
	   *                               delay.
	   */
	  p5.Delay.prototype.process = function (src, _delayTime, _feedback, _filter) {
	    var feedback = _feedback || 0;
	    var delayTime = _delayTime || 0;
	    if (feedback >= 1) {
	      throw new Error('Feedback value will force a positive feedback loop.');
	    }
	    if (delayTime >= this._maxDelay) {
	      throw new Error('Delay Time exceeds maximum delay time of ' + this._maxDelay + ' second.');
	    }
	    src.connect(this.input);
	    this.leftDelay.delayTime.setValueAtTime(delayTime, this.ac.currentTime);
	    this.rightDelay.delayTime.setValueAtTime(delayTime, this.ac.currentTime);
	    this._leftGain.gain.setValueAtTime(feedback, this.ac.currentTime);
	    this._rightGain.gain.setValueAtTime(feedback, this.ac.currentTime);
	    if (_filter) {
	      this._leftFilter.freq(_filter);
	      this._rightFilter.freq(_filter);
	    }
	  };
	  /**
	   *  Set the delay (echo) time, in seconds. Usually this value will be
	   *  a floating point number between 0.0 and 1.0.
	   *
	   *  @method  delayTime
	   *  @param {Number} delayTime Time (in seconds) of the delay
	   */
	  p5.Delay.prototype.delayTime = function (t) {
	    // if t is an audio node...
	    if (typeof t !== 'number') {
	      t.connect(this.leftDelay.delayTime);
	      t.connect(this.rightDelay.delayTime);
	    } else {
	      this.leftDelay.delayTime.cancelScheduledValues(this.ac.currentTime);
	      this.rightDelay.delayTime.cancelScheduledValues(this.ac.currentTime);
	      this.leftDelay.delayTime.linearRampToValueAtTime(t, this.ac.currentTime);
	      this.rightDelay.delayTime.linearRampToValueAtTime(t, this.ac.currentTime);
	    }
	  };
	  /**
	   *  Feedback occurs when Delay sends its signal back through its input
	   *  in a loop. The feedback amount determines how much signal to send each
	   *  time through the loop. A feedback greater than 1.0 is not desirable because
	   *  it will increase the overall output each time through the loop,
	   *  creating an infinite feedback loop.
	   *  
	   *  @method  feedback
	   *  @param {Number|Object} feedback 0.0 to 1.0, or an object such as an
	   *                                  Oscillator that can be used to
	   *                                  modulate this param
	   */
	  p5.Delay.prototype.feedback = function (f) {
	    // if f is an audio node...
	    if (typeof f !== 'number') {
	      f.connect(this._leftGain.gain);
	      f.connect(this._rightGain.gain);
	    } else if (f >= 1) {
	      throw new Error('Feedback value will force a positive feedback loop.');
	    } else {
	      this._leftGain.gain.exponentialRampToValueAtTime(f, this.ac.currentTime);
	      this._rightGain.gain.exponentialRampToValueAtTime(f, this.ac.currentTime);
	    }
	  };
	  /**
	   *  Set a lowpass filter frequency for the delay. A lowpass filter
	   *  will cut off any frequencies higher than the filter frequency.
	   *   
	   *  @method  filter
	   *  @param {Number|Object} cutoffFreq  A lowpass filter will cut off any 
	   *                              frequencies higher than the filter frequency.
	   *  @param {Number|Object} res  Resonance of the filter frequency
	   *                              cutoff, or an object (i.e. a p5.Oscillator)
	   *                              that can be used to modulate this parameter.
	   *                              High numbers (i.e. 15) will produce a resonance,
	   *                              low numbers (i.e. .2) will produce a slope.
	   */
	  p5.Delay.prototype.filter = function (freq, q) {
	    this._leftFilter.set(freq, q);
	    this._rightFilter.set(freq, q);
	  };
	  /**
	   *  Choose a preset type of delay. 'pingPong' bounces the signal
	   *  from the left to the right channel to produce a stereo effect.
	   *  Any other parameter will revert to the default delay setting.
	   *  
	   *  @method  setType
	   *  @param {String|Number} type 'pingPong' (1) or 'default' (0)
	   */
	  p5.Delay.prototype.setType = function (t) {
	    if (t === 1) {
	      t = 'pingPong';
	    }
	    this._split.disconnect();
	    this._leftFilter.disconnect();
	    this._rightFilter.disconnect();
	    this._split.connect(this.leftDelay, 0);
	    this._split.connect(this.rightDelay, 1);
	    switch (t) {
	    case 'pingPong':
	      this._rightFilter.setType(this._leftFilter.biquad.type);
	      this._leftFilter.output.connect(this._merge, 0, 0);
	      this._rightFilter.output.connect(this._merge, 0, 1);
	      this._leftFilter.output.connect(this.rightDelay);
	      this._rightFilter.output.connect(this.leftDelay);
	      break;
	    default:
	      this._leftFilter.output.connect(this._merge, 0, 0);
	      this._leftFilter.output.connect(this._merge, 0, 1);
	      this._leftFilter.output.connect(this.leftDelay);
	      this._leftFilter.output.connect(this.rightDelay);
	    }
	  };
	  /**
	   *  Set the output level of the delay effect.
	   *  
	   *  @method  amp
	   *  @param  {Number} volume amplitude between 0 and 1.0
	   *  @param {Number} [rampTime] create a fade that lasts rampTime 
	   *  @param {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   */
	  p5.Delay.prototype.amp = function (vol, rampTime, tFromNow) {
	    var rampTime = rampTime || 0;
	    var tFromNow = tFromNow || 0;
	    var now = p5sound.audiocontext.currentTime;
	    var currentVol = this.output.gain.value;
	    this.output.gain.cancelScheduledValues(now);
	    this.output.gain.linearRampToValueAtTime(currentVol, now + tFromNow + 0.001);
	    this.output.gain.linearRampToValueAtTime(vol, now + tFromNow + rampTime + 0.001);
	  };
	  /**
	   *  Send output to a p5.sound or web audio object
	   *  
	   *  @method  connect
	   *  @param  {Object} unit
	   */
	  p5.Delay.prototype.connect = function (unit) {
	    var u = unit || p5.soundOut.input;
	    this.output.connect(u);
	  };
	  /**
	   *  Disconnect all output.
	   *  
	   *  @method disconnect
	   */
	  p5.Delay.prototype.disconnect = function () {
	    this.output.disconnect();
	  };
	  p5.Delay.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this.input.disconnect();
	    this.output.disconnect();
	    this._split.disconnect();
	    this._leftFilter.disconnect();
	    this._rightFilter.disconnect();
	    this._merge.disconnect();
	    this._leftGain.disconnect();
	    this._rightGain.disconnect();
	    this.leftDelay.disconnect();
	    this.rightDelay.disconnect();
	    this.input = undefined;
	    this.output = undefined;
	    this._split = undefined;
	    this._leftFilter = undefined;
	    this._rightFilter = undefined;
	    this._merge = undefined;
	    this._leftGain = undefined;
	    this._rightGain = undefined;
	    this.leftDelay = undefined;
	    this.rightDelay = undefined;
	  };
	}(master, filter);
	var reverb;
	reverb = function () {
	  'use strict';
	  var p5sound = master;
	  var CustomError = errorHandler;
	  /**
	   *  Reverb adds depth to a sound through a large number of decaying
	   *  echoes. It creates the perception that sound is occurring in a
	   *  physical space. The p5.Reverb has paramters for Time (how long does the
	   *  reverb last) and decayRate (how much the sound decays with each echo)
	   *  that can be set with the .set() or .process() methods. The p5.Convolver
	   *  extends p5.Reverb allowing you to recreate the sound of actual physical
	   *  spaces through convolution.
	   *  
	   *  @class p5.Reverb
	   *  @constructor
	   *  @example
	   *  <div><code>
	   *  var soundFile, reverb;
	   *  function preload() {
	   *    soundFile = loadSound('assets/Damscray_DancingTiger.mp3');
	   *  }
	   *
	   *  function setup() {
	   *    reverb = new p5.Reverb();
	   *    soundFile.disconnect(); // so we'll only hear reverb...
	   *
	   *    // connect soundFile to reverb, process w/
	   *    // 3 second reverbTime, decayRate of 2%
	   *    reverb.process(soundFile, 3, 2);
	   *    soundFile.play();
	   *  }
	   *  </code></div>
	   */
	  p5.Reverb = function () {
	    this.ac = p5sound.audiocontext;
	    this.convolverNode = this.ac.createConvolver();
	    this.input = this.ac.createGain();
	    this.output = this.ac.createGain();
	    // otherwise, Safari distorts
	    this.input.gain.value = 0.5;
	    this.input.connect(this.convolverNode);
	    this.convolverNode.connect(this.output);
	    // default params
	    this._seconds = 3;
	    this._decay = 2;
	    this._reverse = false;
	    this._buildImpulse();
	    this.connect();
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Connect a source to the reverb, and assign reverb parameters.
	   *  
	   *  @method  process
	   *  @param  {Object} src     p5.sound / Web Audio object with a sound
	   *                           output.
	   *  @param  {Number} [seconds] Duration of the reverb, in seconds.
	   *                           Min: 0, Max: 10. Defaults to 3.
	   *  @param  {Number} [decayRate] Percentage of decay with each echo.
	   *                            Min: 0, Max: 100. Defaults to 2.
	   *  @param  {Boolean} [reverse] Play the reverb backwards or forwards.
	   */
	  p5.Reverb.prototype.process = function (src, seconds, decayRate, reverse) {
	    src.connect(this.input);
	    var rebuild = false;
	    if (seconds) {
	      this._seconds = seconds;
	      rebuild = true;
	    }
	    if (decayRate) {
	      this._decay = decayRate;
	    }
	    if (reverse) {
	      this._reverse = reverse;
	    }
	    if (rebuild) {
	      this._buildImpulse();
	    }
	  };
	  /**
	   *  Set the reverb settings. Similar to .process(), but without
	   *  assigning a new input.
	   *  
	   *  @method  set
	   *  @param  {Number} [seconds] Duration of the reverb, in seconds.
	   *                           Min: 0, Max: 10. Defaults to 3.
	   *  @param  {Number} [decayRate] Percentage of decay with each echo.
	   *                            Min: 0, Max: 100. Defaults to 2.
	   *  @param  {Boolean} [reverse] Play the reverb backwards or forwards.
	   */
	  p5.Reverb.prototype.set = function (seconds, decayRate, reverse) {
	    var rebuild = false;
	    if (seconds) {
	      this._seconds = seconds;
	      rebuild = true;
	    }
	    if (decayRate) {
	      this._decay = decayRate;
	    }
	    if (reverse) {
	      this._reverse = reverse;
	    }
	    if (rebuild) {
	      this._buildImpulse();
	    }
	  };
	  /**
	   *  Set the output level of the delay effect.
	   *  
	   *  @method  amp
	   *  @param  {Number} volume amplitude between 0 and 1.0
	   *  @param  {Number} [rampTime] create a fade that lasts rampTime 
	   *  @param  {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   */
	  p5.Reverb.prototype.amp = function (vol, rampTime, tFromNow) {
	    var rampTime = rampTime || 0;
	    var tFromNow = tFromNow || 0;
	    var now = p5sound.audiocontext.currentTime;
	    var currentVol = this.output.gain.value;
	    this.output.gain.cancelScheduledValues(now);
	    this.output.gain.linearRampToValueAtTime(currentVol, now + tFromNow + 0.001);
	    this.output.gain.linearRampToValueAtTime(vol, now + tFromNow + rampTime + 0.001);
	  };
	  /**
	   *  Send output to a p5.sound or web audio object
	   *  
	   *  @method  connect
	   *  @param  {Object} unit
	   */
	  p5.Reverb.prototype.connect = function (unit) {
	    var u = unit || p5.soundOut.input;
	    this.output.connect(u.input ? u.input : u);
	  };
	  /**
	   *  Disconnect all output.
	   *  
	   *  @method disconnect
	   */
	  p5.Reverb.prototype.disconnect = function () {
	    this.output.disconnect();
	  };
	  /**
	   *  Inspired by Simple Reverb by Jordan Santell
	   *  https://github.com/web-audio-components/simple-reverb/blob/master/index.js
	   * 
	   *  Utility function for building an impulse response
	   *  based on the module parameters.
	   *
	   *  @private
	   */
	  p5.Reverb.prototype._buildImpulse = function () {
	    var rate = this.ac.sampleRate;
	    var length = rate * this._seconds;
	    var decay = this._decay;
	    var impulse = this.ac.createBuffer(2, length, rate);
	    var impulseL = impulse.getChannelData(0);
	    var impulseR = impulse.getChannelData(1);
	    var n, i;
	    for (i = 0; i < length; i++) {
	      n = this.reverse ? length - i : i;
	      impulseL[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);
	      impulseR[i] = (Math.random() * 2 - 1) * Math.pow(1 - n / length, decay);
	    }
	    this.convolverNode.buffer = impulse;
	  };
	  p5.Reverb.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    if (this.convolverNode) {
	      this.convolverNode.buffer = null;
	      this.convolverNode = null;
	    }
	    if (typeof this.output !== 'undefined') {
	      this.output.disconnect();
	      this.output = null;
	    }
	    if (typeof this.panner !== 'undefined') {
	      this.panner.disconnect();
	      this.panner = null;
	    }
	  };
	  // =======================================================================
	  //                          *** p5.Convolver ***
	  // =======================================================================
	  /**
	   *  <p>p5.Convolver extends p5.Reverb. It can emulate the sound of real
	   *  physical spaces through a process called <a href="
	   *  https://en.wikipedia.org/wiki/Convolution_reverb#Real_space_simulation">
	   *  convolution</a>.</p>
	   *  
	   *  <p>Convolution multiplies any audio input by an "impulse response"
	   *  to simulate the dispersion of sound over time. The impulse response is
	   *  generated from an audio file that you provide. One way to
	   *  generate an impulse response is to pop a balloon in a reverberant space
	   *  and record the echo. Convolution can also be used to experiment with
	   *  sound.</p>
	   *
	   *  <p>Use the method <code>createConvolution(path)</code> to instantiate a
	   *  p5.Convolver with a path to your impulse response audio file.</p>
	   *  
	   *  @class p5.Convolver
	   *  @constructor
	   *  @param  {String}   path     path to a sound file
	   *  @param  {Function} [callback] function to call when loading succeeds
	   *  @param  {Function} [errorCallback] function to call if loading fails.
	   *                                     This function will receive an error or
	   *                                     XMLHttpRequest object with information
	   *                                     about what went wrong.
	   *  @example
	   *  <div><code>
	   *  var cVerb, sound;
	   *  function preload() {
	   *    // We have both MP3 and OGG versions of all sound assets
	   *    soundFormats('ogg', 'mp3');
	   *    
	   *    // Try replacing 'bx-spring' with other soundfiles like
	   *    // 'concrete-tunnel' 'small-plate' 'drum' 'beatbox'
	   *    cVerb = createConvolver('assets/bx-spring.mp3');
	   *
	   *    // Try replacing 'Damscray_DancingTiger' with
	   *    // 'beat', 'doorbell', lucky_dragons_-_power_melody'
	   *    sound = loadSound('assets/Damscray_DancingTiger.mp3');
	   *  }
	   *  
	   *  function setup() {
	   *    // disconnect from master output...
	   *    sound.disconnect();
	   *    
	   *    // ...and process with cVerb
	   *    // so that we only hear the convolution
	   *    cVerb.process(sound);
	   *    
	   *    sound.play();
	   *  }
	   *  </code></div>
	   */
	  p5.Convolver = function (path, callback, errorCallback) {
	    this.ac = p5sound.audiocontext;
	    /**
	     *  Internally, the p5.Convolver uses the a
	     *  <a href="http://www.w3.org/TR/webaudio/#ConvolverNode">
	     *  Web Audio Convolver Node</a>.
	     *  
	     *  @property convolverNode
	     *  @type {Object}  Web Audio Convolver Node
	     */
	    this.convolverNode = this.ac.createConvolver();
	    this.input = this.ac.createGain();
	    this.output = this.ac.createGain();
	    // otherwise, Safari distorts
	    this.input.gain.value = 0.5;
	    this.input.connect(this.convolverNode);
	    this.convolverNode.connect(this.output);
	    if (path) {
	      this.impulses = [];
	      this._loadBuffer(path, callback, errorCallback);
	    } else {
	      // parameters
	      this._seconds = 3;
	      this._decay = 2;
	      this._reverse = false;
	      this._buildImpulse();
	    }
	    this.connect();
	    p5sound.soundArray.push(this);
	  };
	  p5.Convolver.prototype = Object.create(p5.Reverb.prototype);
	  p5.prototype.registerPreloadMethod('createConvolver', p5.prototype);
	  /**
	   *  Create a p5.Convolver. Accepts a path to a soundfile 
	   *  that will be used to generate an impulse response.
	   *
	   *  @method  createConvolver
	   *  @param  {String}   path     path to a sound file
	   *  @param  {Function} [callback] function to call if loading is successful.
	   *                                The object will be passed in as the argument
	   *                                to the callback function.
	   *  @param  {Function} [errorCallback] function to call if loading is not successful.
	   *                                A custom error will be passed in as the argument
	   *                                to the callback function.
	   *  @return {p5.Convolver}
	   *  @example
	   *  <div><code>
	   *  var cVerb, sound;
	   *  function preload() {
	   *    // We have both MP3 and OGG versions of all sound assets
	   *    soundFormats('ogg', 'mp3');
	   *    
	   *    // Try replacing 'bx-spring' with other soundfiles like
	   *    // 'concrete-tunnel' 'small-plate' 'drum' 'beatbox'
	   *    cVerb = createConvolver('assets/bx-spring.mp3');
	   *
	   *    // Try replacing 'Damscray_DancingTiger' with
	   *    // 'beat', 'doorbell', lucky_dragons_-_power_melody'
	   *    sound = loadSound('assets/Damscray_DancingTiger.mp3');
	   *  }
	   *  
	   *  function setup() {
	   *    // disconnect from master output...
	   *    sound.disconnect();
	   *    
	   *    // ...and process with cVerb
	   *    // so that we only hear the convolution
	   *    cVerb.process(sound);
	   *    
	   *    sound.play();
	   *  }
	   *  </code></div>
	   */
	  p5.prototype.createConvolver = function (path, callback, errorCallback) {
	    // if loading locally without a server
	    if (window.location.origin.indexOf('file://') > -1 && window.cordova === 'undefined') {
	      alert('This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS');
	    }
	    var cReverb = new p5.Convolver(path, callback, errorCallback);
	    cReverb.impulses = [];
	    return cReverb;
	  };
	  /**
	   *  Private method to load a buffer as an Impulse Response,
	   *  assign it to the convolverNode, and add to the Array of .impulses.
	   *  
	   *  @param   {String}   path
	   *  @param   {Function} callback
	   *  @param   {Function} errorCallback
	   *  @private
	   */
	  p5.Convolver.prototype._loadBuffer = function (path, callback, errorCallback) {
	    var path = p5.prototype._checkFileFormats(path);
	    var self = this;
	    var errorTrace = new Error().stack;
	    var ac = p5.prototype.getAudioContext();
	    var request = new XMLHttpRequest();
	    request.open('GET', path, true);
	    request.responseType = 'arraybuffer';
	    request.onload = function () {
	      if (request.status == 200) {
	        // on success loading file:
	        ac.decodeAudioData(request.response, function (buff) {
	          var buffer = {};
	          var chunks = path.split('/');
	          buffer.name = chunks[chunks.length - 1];
	          buffer.audioBuffer = buff;
	          self.impulses.push(buffer);
	          self.convolverNode.buffer = buffer.audioBuffer;
	          if (callback) {
	            callback(buffer);
	          }
	        }, // error decoding buffer. "e" is undefined in Chrome 11/22/2015
	        function (e) {
	          var err = new CustomError('decodeAudioData', errorTrace, self.url);
	          var msg = 'AudioContext error at decodeAudioData for ' + self.url;
	          if (errorCallback) {
	            err.msg = msg;
	            errorCallback(err);
	          } else {
	            console.error(msg + '\n The error stack trace includes: \n' + err.stack);
	          }
	        });
	      } else {
	        var err = new CustomError('loadConvolver', errorTrace, self.url);
	        var msg = 'Unable to load ' + self.url + '. The request status was: ' + request.status + ' (' + request.statusText + ')';
	        if (errorCallback) {
	          err.message = msg;
	          errorCallback(err);
	        } else {
	          console.error(msg + '\n The error stack trace includes: \n' + err.stack);
	        }
	      }
	    };
	    // if there is another error, aside from 404...
	    request.onerror = function (e) {
	      var err = new CustomError('loadConvolver', errorTrace, self.url);
	      var msg = 'There was no response from the server at ' + self.url + '. Check the url and internet connectivity.';
	      if (errorCallback) {
	        err.message = msg;
	        errorCallback(err);
	      } else {
	        console.error(msg + '\n The error stack trace includes: \n' + err.stack);
	      }
	    };
	    request.send();
	  };
	  p5.Convolver.prototype.set = null;
	  /**
	   *  Connect a source to the reverb, and assign reverb parameters.
	   *  
	   *  @method  process
	   *  @param  {Object} src     p5.sound / Web Audio object with a sound
	   *                           output.
	   *  @example
	   *  <div><code>
	   *  var cVerb, sound;
	   *  function preload() {
	   *    soundFormats('ogg', 'mp3');
	   *    
	   *    cVerb = createConvolver('assets/concrete-tunnel.mp3');
	   *
	   *    sound = loadSound('assets/beat.mp3');
	   *  }
	   *  
	   *  function setup() {
	   *    // disconnect from master output...
	   *    sound.disconnect();
	   *    
	   *    // ...and process with (i.e. connect to) cVerb
	   *    // so that we only hear the convolution
	   *    cVerb.process(sound);
	   *    
	   *    sound.play();
	   *  }
	   *  </code></div>
	   */
	  p5.Convolver.prototype.process = function (src) {
	    src.connect(this.input);
	  };
	  /**
	   *  If you load multiple impulse files using the .addImpulse method,
	   *  they will be stored as Objects in this Array. Toggle between them
	   *  with the <code>toggleImpulse(id)</code> method.
	   *  
	   *  @property impulses
	   *  @type {Array} Array of Web Audio Buffers
	   */
	  p5.Convolver.prototype.impulses = [];
	  /**
	   *  Load and assign a new Impulse Response to the p5.Convolver.
	   *  The impulse is added to the <code>.impulses</code> array. Previous
	   *  impulses can be accessed with the <code>.toggleImpulse(id)</code>
	   *  method.
	   *  
	   *  @method  addImpulse
	   *  @param  {String}   path     path to a sound file
	   *  @param  {Function} callback function (optional)
	   *  @param  {Function} errorCallback function (optional)
	   */
	  p5.Convolver.prototype.addImpulse = function (path, callback, errorCallback) {
	    // if loading locally without a server
	    if (window.location.origin.indexOf('file://') > -1 && window.cordova === 'undefined') {
	      alert('This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS');
	    }
	    this._loadBuffer(path, callback, errorCallback);
	  };
	  /**
	   *  Similar to .addImpulse, except that the <code>.impulses</code>
	   *  Array is reset to save memory. A new <code>.impulses</code>
	   *  array is created with this impulse as the only item. 
	   *
	   *  @method  resetImpulse
	   *  @param  {String}   path     path to a sound file
	   *  @param  {Function} callback function (optional)
	   *  @param  {Function} errorCallback function (optional)
	   */
	  p5.Convolver.prototype.resetImpulse = function (path, callback, errorCallback) {
	    // if loading locally without a server
	    if (window.location.origin.indexOf('file://') > -1 && window.cordova === 'undefined') {
	      alert('This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS');
	    }
	    this.impulses = [];
	    this._loadBuffer(path, callback, errorCallback);
	  };
	  /**
	   *  If you have used <code>.addImpulse()</code> to add multiple impulses
	   *  to a p5.Convolver, then you can use this method to toggle between
	   *  the items in the <code>.impulses</code> Array. Accepts a parameter
	   *  to identify which impulse you wish to use, identified either by its
	   *  original filename (String) or by its position in the <code>.impulses
	   *  </code> Array (Number).<br/>
	   *  You can access the objects in the .impulses Array directly. Each
	   *  Object has two attributes: an <code>.audioBuffer</code> (type:
	   *  Web Audio <a href="
	   *  http://webaudio.github.io/web-audio-api/#the-audiobuffer-interface">
	   *  AudioBuffer)</a> and a <code>.name</code>, a String that corresponds
	   *  with the original filename. 
	   *  
	   *  @method toggleImpulse
	   *  @param {String|Number} id Identify the impulse by its original filename
	   *                            (String), or by its position in the
	   *                            <code>.impulses</code> Array (Number).
	   */
	  p5.Convolver.prototype.toggleImpulse = function (id) {
	    if (typeof id === 'number' && id < this.impulses.length) {
	      this.convolverNode.buffer = this.impulses[id].audioBuffer;
	    }
	    if (typeof id === 'string') {
	      for (var i = 0; i < this.impulses.length; i++) {
	        if (this.impulses[i].name === id) {
	          this.convolverNode.buffer = this.impulses[i].audioBuffer;
	          break;
	        }
	      }
	    }
	  };
	  p5.Convolver.prototype.dispose = function () {
	    // remove all the Impulse Response buffers
	    for (var i in this.impulses) {
	      this.impulses[i] = null;
	    }
	    this.convolverNode.disconnect();
	    this.concolverNode = null;
	    if (typeof this.output !== 'undefined') {
	      this.output.disconnect();
	      this.output = null;
	    }
	    if (typeof this.panner !== 'undefined') {
	      this.panner.disconnect();
	      this.panner = null;
	    }
	  };
	}(master, errorHandler, sndcore);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_core_TimelineState;
	Tone_core_TimelineState = function (Tone) {
	  'use strict';
	  Tone.TimelineState = function (initial) {
	    Tone.Timeline.call(this);
	    this._initial = initial;
	  };
	  Tone.extend(Tone.TimelineState, Tone.Timeline);
	  Tone.TimelineState.prototype.getStateAtTime = function (time) {
	    var event = this.getEvent(time);
	    if (event !== null) {
	      return event.state;
	    } else {
	      return this._initial;
	    }
	  };
	  Tone.TimelineState.prototype.setStateAtTime = function (state, time) {
	    this.addEvent({
	      'state': state,
	      'time': this.toSeconds(time)
	    });
	  };
	  return Tone.TimelineState;
	}(Tone_core_Tone, Tone_core_Timeline);
	/** Tone.js module by Yotam Mann, MIT License 2016  http://opensource.org/licenses/MIT **/
	var Tone_core_Clock;
	Tone_core_Clock = function (Tone) {
	  'use strict';
	  Tone.Clock = function () {
	    var options = this.optionsObject(arguments, [
	      'callback',
	      'frequency'
	    ], Tone.Clock.defaults);
	    this.callback = options.callback;
	    this._lookAhead = 'auto';
	    this._computedLookAhead = 1 / 60;
	    this._threshold = 0.5;
	    this._nextTick = -1;
	    this._lastUpdate = 0;
	    this._loopID = -1;
	    this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);
	    this.ticks = 0;
	    this._state = new Tone.TimelineState(Tone.State.Stopped);
	    this._boundLoop = this._loop.bind(this);
	    this._readOnly('frequency');
	    this._loop();
	  };
	  Tone.extend(Tone.Clock);
	  Tone.Clock.defaults = {
	    'callback': Tone.noOp,
	    'frequency': 1,
	    'lookAhead': 'auto'
	  };
	  Object.defineProperty(Tone.Clock.prototype, 'state', {
	    get: function () {
	      return this._state.getStateAtTime(this.now());
	    }
	  });
	  Object.defineProperty(Tone.Clock.prototype, 'lookAhead', {
	    get: function () {
	      return this._lookAhead;
	    },
	    set: function (val) {
	      if (val === 'auto') {
	        this._lookAhead = 'auto';
	      } else {
	        this._lookAhead = this.toSeconds(val);
	      }
	    }
	  });
	  Tone.Clock.prototype.start = function (time, offset) {
	    time = this.toSeconds(time);
	    if (this._state.getStateAtTime(time) !== Tone.State.Started) {
	      this._state.addEvent({
	        'state': Tone.State.Started,
	        'time': time,
	        'offset': offset
	      });
	    }
	    return this;
	  };
	  Tone.Clock.prototype.stop = function (time) {
	    time = this.toSeconds(time);
	    if (this._state.getStateAtTime(time) !== Tone.State.Stopped) {
	      this._state.setStateAtTime(Tone.State.Stopped, time);
	    }
	    return this;
	  };
	  Tone.Clock.prototype.pause = function (time) {
	    time = this.toSeconds(time);
	    if (this._state.getStateAtTime(time) === Tone.State.Started) {
	      this._state.setStateAtTime(Tone.State.Paused, time);
	    }
	    return this;
	  };
	  Tone.Clock.prototype._loop = function (time) {
	    this._loopID = requestAnimationFrame(this._boundLoop);
	    if (this._lookAhead === 'auto') {
	      if (!this.isUndef(time)) {
	        var diff = (time - this._lastUpdate) / 1000;
	        this._lastUpdate = time;
	        if (diff < this._threshold) {
	          this._computedLookAhead = (9 * this._computedLookAhead + diff) / 10;
	        }
	      }
	    } else {
	      this._computedLookAhead = this._lookAhead;
	    }
	    var now = this.now();
	    var lookAhead = this._computedLookAhead * 2;
	    var event = this._state.getEvent(now + lookAhead);
	    var state = Tone.State.Stopped;
	    if (event) {
	      state = event.state;
	      if (this._nextTick === -1 && state === Tone.State.Started) {
	        this._nextTick = event.time;
	        if (!this.isUndef(event.offset)) {
	          this.ticks = event.offset;
	        }
	      }
	    }
	    if (state === Tone.State.Started) {
	      while (now + lookAhead > this._nextTick) {
	        if (now > this._nextTick + this._threshold) {
	          this._nextTick = now;
	        }
	        var tickTime = this._nextTick;
	        this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);
	        this.callback(tickTime);
	        this.ticks++;
	      }
	    } else if (state === Tone.State.Stopped) {
	      this._nextTick = -1;
	      this.ticks = 0;
	    }
	  };
	  Tone.Clock.prototype.getStateAtTime = function (time) {
	    return this._state.getStateAtTime(time);
	  };
	  Tone.Clock.prototype.dispose = function () {
	    cancelAnimationFrame(this._loopID);
	    Tone.TimelineState.prototype.dispose.call(this);
	    this._writable('frequency');
	    this.frequency.dispose();
	    this.frequency = null;
	    this._boundLoop = Tone.noOp;
	    this._nextTick = Infinity;
	    this.callback = null;
	    this._state.dispose();
	    this._state = null;
	  };
	  return Tone.Clock;
	}(Tone_core_Tone, Tone_signal_TimelineSignal);
	var metro;
	metro = function () {
	  'use strict';
	  var p5sound = master;
	  // requires the Tone.js library's Clock (MIT license, Yotam Mann)
	  // https://github.com/TONEnoTONE/Tone.js/
	  var Clock = Tone_core_Clock;
	  var ac = p5sound.audiocontext;
	  // var upTick = false;
	  p5.Metro = function () {
	    this.clock = new Clock({ 'callback': this.ontick.bind(this) });
	    this.syncedParts = [];
	    this.bpm = 120;
	    // gets overridden by p5.Part
	    this._init();
	    this.tickCallback = function () {
	    };
	  };
	  var prevTick = 0;
	  var tatumTime = 0;
	  p5.Metro.prototype.ontick = function (tickTime) {
	    var elapsedTime = tickTime - prevTick;
	    var secondsFromNow = tickTime - p5sound.audiocontext.currentTime;
	    if (elapsedTime - tatumTime <= -0.02) {
	      return;
	    } else {
	      prevTick = tickTime;
	      // for all of the active things on the metro:
	      for (var i in this.syncedParts) {
	        var thisPart = this.syncedParts[i];
	        if (!thisPart.isPlaying)
	          return;
	        thisPart.incrementStep(secondsFromNow);
	        // each synced source keeps track of its own beat number
	        for (var j in thisPart.phrases) {
	          var thisPhrase = thisPart.phrases[j];
	          var phraseArray = thisPhrase.sequence;
	          var bNum = this.metroTicks % phraseArray.length;
	          if (phraseArray[bNum] !== 0 && (this.metroTicks < phraseArray.length || !thisPhrase.looping)) {
	            thisPhrase.callback(secondsFromNow, phraseArray[bNum]);
	          }
	        }
	      }
	      this.metroTicks += 1;
	      this.tickCallback(secondsFromNow);
	    }
	  };
	  p5.Metro.prototype.setBPM = function (bpm, rampTime) {
	    var beatTime = 60 / (bpm * this.tatums);
	    var now = p5sound.audiocontext.currentTime;
	    tatumTime = beatTime;
	    var rampTime = rampTime || 0;
	    this.clock.frequency.setValueAtTime(this.clock.frequency.value, now);
	    this.clock.frequency.linearRampToValueAtTime(bpm, now + rampTime);
	    this.bpm = bpm;
	  };
	  p5.Metro.prototype.getBPM = function (tempo) {
	    return this.clock.getRate() / this.tatums * 60;
	  };
	  p5.Metro.prototype._init = function () {
	    this.metroTicks = 0;
	  };
	  // clear existing synced parts, add only this one
	  p5.Metro.prototype.resetSync = function (part) {
	    this.syncedParts = [part];
	  };
	  // push a new synced part to the array
	  p5.Metro.prototype.pushSync = function (part) {
	    this.syncedParts.push(part);
	  };
	  p5.Metro.prototype.start = function (timeFromNow) {
	    var t = timeFromNow || 0;
	    var now = p5sound.audiocontext.currentTime;
	    this.clock.start(now + t);
	    this.setBPM(this.bpm);
	  };
	  p5.Metro.prototype.stop = function (timeFromNow) {
	    var t = timeFromNow || 0;
	    var now = p5sound.audiocontext.currentTime;
	    if (this.clock._oscillator) {
	      this.clock.stop(now + t);
	    }
	  };
	  p5.Metro.prototype.beatLength = function (tatums) {
	    this.tatums = 1 / tatums / 4;
	  };
	}(master, Tone_core_Clock);
	var looper;
	looper = function () {
	  'use strict';
	  var p5sound = master;
	  var bpm = 120;
	  /**
	   *  Set the global tempo, in beats per minute, for all
	   *  p5.Parts. This method will impact all active p5.Parts.
	   *
	   *  @param {Number} BPM      Beats Per Minute
	   *  @param {Number} rampTime Seconds from now
	   */
	  p5.prototype.setBPM = function (BPM, rampTime) {
	    bpm = BPM;
	    for (var i in p5sound.parts) {
	      p5sound.parts[i].setBPM(bpm, rampTime);
	    }
	  };
	  /**
	   *  <p>A phrase is a pattern of musical events over time, i.e.
	   *  a series of notes and rests.</p>
	   *
	   *  <p>Phrases must be added to a p5.Part for playback, and
	   *  each part can play multiple phrases at the same time.
	   *  For example, one Phrase might be a kick drum, another
	   *  could be a snare, and another could be the bassline.</p>
	   *
	   *  <p>The first parameter is a name so that the phrase can be
	   *  modified or deleted later. The callback is a a function that
	   *  this phrase will call at every stepâfor example it might be
	   *  called <code>playNote(value){}</code>. The array determines
	   *  which value is passed into the callback at each step of the
	   *  phrase. It can be numbers, an object with multiple numbers,
	   *  or a zero (0) indicates a rest so the callback won't be called).</p>
	   *
	   *  @class p5.Phrase
	   *  @constructor
	   *  @param {String}   name     Name so that you can access the Phrase.
	   *  @param {Function} callback The name of a function that this phrase
	   *                             will call. Typically it will play a sound,
	   *                             and accept two parameters: a time at which
	   *                             to play the sound (in seconds from now),
	   *                             and a value from the sequence array. The
	   *                             time should be passed into the play() or
	   *                             start() method to ensure precision.
	   *  @param {Array}   sequence    Array of values to pass into the callback
	   *                            at each step of the phrase.
	   *  @example
	   *  <div><code>
	   *  var mySound, myPhrase, myPart;
	   *  var pattern = [1,0,0,2,0,2,0,0];
	   *  var msg = 'click to play';
	   *
	   *  function preload() {
	   *    mySound = loadSound('assets/beatbox.mp3');
	   *  }
	   *
	   *  function setup() {
	   *    noStroke();
	   *    fill(255);
	   *    textAlign(CENTER);
	   *    masterVolume(0.1);
	   *
	   *    myPhrase = new p5.Phrase('bbox', makeSound, pattern);
	   *    myPart = new p5.Part();
	   *    myPart.addPhrase(myPhrase);
	   *    myPart.setBPM(60);
	   *  }
	   *
	   *  function draw() {
	   *    background(0);
	   *    text(msg, width/2, height/2);
	   *  }
	   *
	   *  function makeSound(time, playbackRate) {
	   *    mySound.rate(playbackRate);
	   *    mySound.play(time);
	   *  }
	   *
	   *  function mouseClicked() {
	   *    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
	   *      myPart.start();
	   *      msg = 'playing pattern';
	   *    }
	   *  }
	   *
	   *  </code></div>
	   */
	  p5.Phrase = function (name, callback, sequence) {
	    this.phraseStep = 0;
	    this.name = name;
	    this.callback = callback;
	    /**
	     * Array of values to pass into the callback
	     * at each step of the phrase. Depending on the callback
	     * function's requirements, these values may be numbers,
	     * strings, or an object with multiple parameters.
	     * Zero (0) indicates a rest.
	     *
	     * @property sequence
	     * @type {Array}
	     */
	    this.sequence = sequence;
	  };
	  /**
	   *  <p>A p5.Part plays back one or more p5.Phrases. Instantiate a part
	   *  with steps and tatums. By default, each step represents 1/16th note.</p>
	   *
	   *  <p>See p5.Phrase for more about musical timing.</p>
	   *
	   *  @class p5.Part
	   *  @constructor
	   *  @param {Number} [steps]   Steps in the part
	   *  @param {Number} [tatums] Divisions of a beat (default is 1/16, a quarter note)
	   *  @example
	   *  <div><code>
	   *  var box, drum, myPart;
	   *  var boxPat = [1,0,0,2,0,2,0,0];
	   *  var drumPat = [0,1,1,0,2,0,1,0];
	   *  var msg = 'click to play';
	   *
	   *  function preload() {
	   *    box = loadSound('assets/beatbox.mp3');
	   *    drum = loadSound('assets/drum.mp3');
	   *  }
	   *
	   *  function setup() {
	   *    noStroke();
	   *    fill(255);
	   *    textAlign(CENTER);
	   *    masterVolume(0.1);
	   *
	   *    var boxPhrase = new p5.Phrase('box', playBox, boxPat);
	   *    var drumPhrase = new p5.Phrase('drum', playDrum, drumPat);
	   *    myPart = new p5.Part();
	   *    myPart.addPhrase(boxPhrase);
	   *    myPart.addPhrase(drumPhrase);
	   *    myPart.setBPM(60);
	   *    masterVolume(0.1);
	   *  }
	   *
	   *  function draw() {
	   *    background(0);
	   *    text(msg, width/2, height/2);
	   *  }
	   *
	   *  function playBox(time, playbackRate) {
	   *    box.rate(playbackRate);
	   *    box.play(time);
	   *  }
	   *
	   *  function playDrum(time, playbackRate) {
	   *    drum.rate(playbackRate);
	   *    drum.play(time);
	   *  }
	   *
	   *  function mouseClicked() {
	   *    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
	   *      myPart.start();
	   *      msg = 'playing part';
	   *    }
	   *  }
	   *  </code></div>
	   */
	  p5.Part = function (steps, bLength) {
	    this.length = steps || 0;
	    // how many beats
	    this.partStep = 0;
	    this.phrases = [];
	    this.isPlaying = false;
	    this.noLoop();
	    this.tatums = bLength || 0.0625;
	    // defaults to quarter note
	    this.metro = new p5.Metro();
	    this.metro._init();
	    this.metro.beatLength(this.tatums);
	    this.metro.setBPM(bpm);
	    p5sound.parts.push(this);
	    this.callback = function () {
	    };
	  };
	  /**
	   *  Set the tempo of this part, in Beats Per Minute.
	   *
	   *  @method  setBPM
	   *  @param {Number} BPM      Beats Per Minute
	   *  @param {Number} [rampTime] Seconds from now
	   */
	  p5.Part.prototype.setBPM = function (tempo, rampTime) {
	    this.metro.setBPM(tempo, rampTime);
	  };
	  /**
	   *  Returns the Beats Per Minute of this currently part.
	   *
	   *  @method getBPM
	   *  @return {Number}
	   */
	  p5.Part.prototype.getBPM = function () {
	    return this.metro.getBPM();
	  };
	  /**
	   *  Start playback of this part. It will play
	   *  through all of its phrases at a speed
	   *  determined by setBPM.
	   *
	   *  @method  start
	   *  @param  {Number} [time] seconds from now
	   */
	  p5.Part.prototype.start = function (time) {
	    if (!this.isPlaying) {
	      this.isPlaying = true;
	      this.metro.resetSync(this);
	      var t = time || 0;
	      this.metro.start(t);
	    }
	  };
	  /**
	   *  Loop playback of this part. It will begin
	   *  looping through all of its phrases at a speed
	   *  determined by setBPM.
	   *
	   *  @method  loop
	   *  @param  {Number} [time] seconds from now
	   */
	  p5.Part.prototype.loop = function (time) {
	    this.looping = true;
	    // rest onended function
	    this.onended = function () {
	      this.partStep = 0;
	    };
	    var t = time || 0;
	    this.start(t);
	  };
	  /**
	   *  Tell the part to stop looping.
	   *
	   *  @method  noLoop
	   */
	  p5.Part.prototype.noLoop = function () {
	    this.looping = false;
	    // rest onended function
	    this.onended = function () {
	      this.stop();
	    };
	  };
	  /**
	   *  Stop the part and cue it to step 0.
	   *
	   *  @method  stop
	   *  @param  {Number} [time] seconds from now
	   */
	  p5.Part.prototype.stop = function (time) {
	    this.partStep = 0;
	    this.pause(time);
	  };
	  /**
	   *  Pause the part. Playback will resume
	   *  from the current step.
	   *
	   *  @method  pause
	   *  @param  {Number} time seconds from now
	   */
	  p5.Part.prototype.pause = function (time) {
	    this.isPlaying = false;
	    var t = time || 0;
	    this.metro.stop(t);
	  };
	  /**
	   *  Add a p5.Phrase to this Part.
	   *
	   *  @method  addPhrase
	   *  @param {p5.Phrase}   phrase   reference to a p5.Phrase
	   */
	  p5.Part.prototype.addPhrase = function (name, callback, array) {
	    var p;
	    if (arguments.length === 3) {
	      p = new p5.Phrase(name, callback, array);
	    } else if (arguments[0] instanceof p5.Phrase) {
	      p = arguments[0];
	    } else {
	      throw 'invalid input. addPhrase accepts name, callback, array or a p5.Phrase';
	    }
	    this.phrases.push(p);
	    // reset the length if phrase is longer than part's existing length
	    if (p.sequence.length > this.length) {
	      this.length = p.sequence.length;
	    }
	  };
	  /**
	   *  Remove a phrase from this part, based on the name it was
	   *  given when it was created.
	   *
	   *  @method  removePhrase
	   *  @param  {String} phraseName
	   */
	  p5.Part.prototype.removePhrase = function (name) {
	    for (var i in this.phrases) {
	      if (this.phrases[i].name === name) {
	        this.phrases.splice(i, 1);
	      }
	    }
	  };
	  /**
	   *  Get a phrase from this part, based on the name it was
	   *  given when it was created. Now you can modify its array.
	   *
	   *  @method  getPhrase
	   *  @param  {String} phraseName
	   */
	  p5.Part.prototype.getPhrase = function (name) {
	    for (var i in this.phrases) {
	      if (this.phrases[i].name === name) {
	        return this.phrases[i];
	      }
	    }
	  };
	  /**
	   *  Get a phrase from this part, based on the name it was
	   *  given when it was created. Now you can modify its array.
	   *
	   *  @method  replaceSequence
	   *  @param  {String} phraseName
	   *  @param  {Array} sequence  Array of values to pass into the callback
	   *                            at each step of the phrase.
	   */
	  p5.Part.prototype.replaceSequence = function (name, array) {
	    for (var i in this.phrases) {
	      if (this.phrases[i].name === name) {
	        this.phrases[i].sequence = array;
	      }
	    }
	  };
	  p5.Part.prototype.incrementStep = function (time) {
	    if (this.partStep < this.length - 1) {
	      this.callback(time);
	      this.partStep += 1;
	    } else {
	      if (!this.looping && this.partStep == this.length - 1) {
	        console.log('done');
	        // this.callback(time);
	        this.onended();
	      }
	    }
	  };
	  /**
	   *  Fire a callback function at every step.
	   *
	   *  @method onStep
	   *  @param  {Function} callback The name of the callback
	   *                              you want to fire
	   *                              on every beat/tatum.
	   */
	  p5.Part.prototype.onStep = function (callback) {
	    this.callback = callback;
	  };
	  // ===============
	  // p5.Score
	  // ===============
	  /**
	   *  A Score consists of a series of Parts. The parts will
	   *  be played back in order. For example, you could have an
	   *  A part, a B part, and a C part, and play them back in this order
	   *  <code>new p5.Score(a, a, b, a, c)</code>
	   *
	   *  @class p5.Score
	   *  @constructor
	   *  @param {p5.Part} part(s) One or multiple parts, to be played in sequence.
	   *  @return {p5.Score}
	   */
	  p5.Score = function () {
	    // for all of the arguments
	    this.parts = [];
	    this.currentPart = 0;
	    var thisScore = this;
	    for (var i in arguments) {
	      this.parts[i] = arguments[i];
	      this.parts[i].nextPart = this.parts[i + 1];
	      this.parts[i].onended = function () {
	        thisScore.resetPart(i);
	        playNextPart(thisScore);
	      };
	    }
	    this.looping = false;
	  };
	  p5.Score.prototype.onended = function () {
	    if (this.looping) {
	      // this.resetParts();
	      this.parts[0].start();
	    } else {
	      this.parts[this.parts.length - 1].onended = function () {
	        this.stop();
	        this.resetParts();
	      };
	    }
	    this.currentPart = 0;
	  };
	  /**
	   *  Start playback of the score.
	   *
	   *  @method  start
	   */
	  p5.Score.prototype.start = function () {
	    this.parts[this.currentPart].start();
	    this.scoreStep = 0;
	  };
	  /**
	   *  Stop playback of the score.
	   *
	   *  @method  stop
	   */
	  p5.Score.prototype.stop = function () {
	    this.parts[this.currentPart].stop();
	    this.currentPart = 0;
	    this.scoreStep = 0;
	  };
	  /**
	   *  Pause playback of the score.
	   *
	   *  @method  pause
	   */
	  p5.Score.prototype.pause = function () {
	    this.parts[this.currentPart].stop();
	  };
	  /**
	   *  Loop playback of the score.
	   *
	   *  @method  loop
	   */
	  p5.Score.prototype.loop = function () {
	    this.looping = true;
	    this.start();
	  };
	  /**
	   *  Stop looping playback of the score. If it
	   *  is currently playing, this will go into effect
	   *  after the current round of playback completes.
	   *
	   *  @method  noLoop
	   */
	  p5.Score.prototype.noLoop = function () {
	    this.looping = false;
	  };
	  p5.Score.prototype.resetParts = function () {
	    for (var i in this.parts) {
	      this.resetPart(i);
	    }
	  };
	  p5.Score.prototype.resetPart = function (i) {
	    this.parts[i].stop();
	    this.parts[i].partStep = 0;
	    for (var p in this.parts[i].phrases) {
	      this.parts[i].phrases[p].phraseStep = 0;
	    }
	  };
	  /**
	   *  Set the tempo for all parts in the score
	   *
	   *  @param {Number} BPM      Beats Per Minute
	   *  @param {Number} rampTime Seconds from now
	   */
	  p5.Score.prototype.setBPM = function (bpm, rampTime) {
	    for (var i in this.parts) {
	      this.parts[i].setBPM(bpm, rampTime);
	    }
	  };
	  function playNextPart(aScore) {
	    aScore.currentPart++;
	    if (aScore.currentPart >= aScore.parts.length) {
	      aScore.scoreStep = 0;
	      aScore.onended();
	    } else {
	      aScore.scoreStep = 0;
	      aScore.parts[aScore.currentPart - 1].stop();
	      aScore.parts[aScore.currentPart].start();
	    }
	  }
	}(master);
	var soundRecorder;
	soundRecorder = function () {
	  'use strict';
	  var p5sound = master;
	  var ac = p5sound.audiocontext;
	  /**
	   *  <p>Record sounds for playback and/or to save as a .wav file.
	   *  The p5.SoundRecorder records all sound output from your sketch,
	   *  or can be assigned a specific source with setInput().</p>
	   *  <p>The record() method accepts a p5.SoundFile as a parameter.
	   *  When playback is stopped (either after the given amount of time,
	   *  or with the stop() method), the p5.SoundRecorder will send its
	   *  recording to that p5.SoundFile for playback.</p>
	   *  
	   *  @class p5.SoundRecorder
	   *  @constructor
	   *  @example
	   *  <div><code>
	   *  var mic, recorder, soundFile;
	   *  var state = 0;
	   *  
	   *  function setup() {
	   *    background(200);
	   *    // create an audio in
	   *    mic = new p5.AudioIn();
	   *    
	   *    // prompts user to enable their browser mic
	   *    mic.start();
	   *    
	   *    // create a sound recorder
	   *    recorder = new p5.SoundRecorder();
	   *    
	   *    // connect the mic to the recorder
	   *    recorder.setInput(mic);
	   *    
	   *    // this sound file will be used to
	   *    // playback & save the recording
	   *    soundFile = new p5.SoundFile();
	   *
	   *    text('keyPress to record', 20, 20);
	   *  }
	   *
	   *  function keyPressed() {
	   *    // make sure user enabled the mic
	   *    if (state === 0 && mic.enabled) {
	   *    
	   *      // record to our p5.SoundFile
	   *      recorder.record(soundFile);
	   *      
	   *      background(255,0,0);
	   *      text('Recording!', 20, 20);
	   *      state++;
	   *    }
	   *    else if (state === 1) {
	   *      background(0,255,0);
	   *
	   *      // stop recorder and
	   *      // send result to soundFile
	   *      recorder.stop(); 
	   *      
	   *      text('Stopped', 20, 20);
	   *      state++;
	   *    }
	   *    
	   *    else if (state === 2) {
	   *      soundFile.play(); // play the result!
	   *      save(soundFile, 'mySound.wav');
	   *      state++;
	   *    }
	   *  }
	   *  </div></code>
	   */
	  p5.SoundRecorder = function () {
	    this.input = ac.createGain();
	    this.output = ac.createGain();
	    this.recording = false;
	    this.bufferSize = 1024;
	    this._channels = 2;
	    // stereo (default)
	    this._clear();
	    // initialize variables
	    this._jsNode = ac.createScriptProcessor(this.bufferSize, this._channels, 2);
	    this._jsNode.onaudioprocess = this._audioprocess.bind(this);
	    /** 
	     *  callback invoked when the recording is over
	     *  @private
	     *  @type {function(Float32Array)}
	     */
	    this._callback = function () {
	    };
	    // connections
	    this._jsNode.connect(p5.soundOut._silentNode);
	    this.setInput();
	    // add this p5.SoundFile to the soundArray
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Connect a specific device to the p5.SoundRecorder.
	   *  If no parameter is given, p5.SoundRecorer will record
	   *  all audible p5.sound from your sketch.
	   *  
	   *  @method  setInput
	   *  @param {Object} [unit] p5.sound object or a web audio unit
	   *                         that outputs sound
	   */
	  p5.SoundRecorder.prototype.setInput = function (unit) {
	    this.input.disconnect();
	    this.input = null;
	    this.input = ac.createGain();
	    this.input.connect(this._jsNode);
	    this.input.connect(this.output);
	    if (unit) {
	      unit.connect(this.input);
	    } else {
	      p5.soundOut.output.connect(this.input);
	    }
	  };
	  /**
	   *  Start recording. To access the recording, provide
	   *  a p5.SoundFile as the first parameter. The p5.SoundRecorder
	   *  will send its recording to that p5.SoundFile for playback once
	   *  recording is complete. Optional parameters include duration
	   *  (in seconds) of the recording, and a callback function that
	   *  will be called once the complete recording has been
	   *  transfered to the p5.SoundFile.
	   *  
	   *  @method  record
	   *  @param  {p5.SoundFile}   soundFile    p5.SoundFile
	   *  @param  {Number}   [duration] Time (in seconds)
	   *  @param  {Function} [callback] The name of a function that will be
	   *                                called once the recording completes
	   */
	  p5.SoundRecorder.prototype.record = function (sFile, duration, callback) {
	    this.recording = true;
	    if (duration) {
	      this.sampleLimit = Math.round(duration * ac.sampleRate);
	    }
	    if (sFile && callback) {
	      this._callback = function () {
	        this.buffer = this._getBuffer();
	        sFile.setBuffer(this.buffer);
	        callback();
	      };
	    } else if (sFile) {
	      this._callback = function () {
	        this.buffer = this._getBuffer();
	        sFile.setBuffer(this.buffer);
	      };
	    }
	  };
	  /**
	   *  Stop the recording. Once the recording is stopped,
	   *  the results will be sent to the p5.SoundFile that
	   *  was given on .record(), and if a callback function
	   *  was provided on record, that function will be called.
	   *  
	   *  @method  stop
	   */
	  p5.SoundRecorder.prototype.stop = function () {
	    this.recording = false;
	    this._callback();
	    this._clear();
	  };
	  p5.SoundRecorder.prototype._clear = function () {
	    this._leftBuffers = [];
	    this._rightBuffers = [];
	    this.recordedSamples = 0;
	    this.sampleLimit = null;
	  };
	  /**
	   *  internal method called on audio process
	   *  
	   *  @private
	   *  @param   {AudioProcessorEvent} event 
	   */
	  p5.SoundRecorder.prototype._audioprocess = function (event) {
	    if (this.recording === false) {
	      return;
	    } else if (this.recording === true) {
	      // if we are past the duration, then stop... else:
	      if (this.sampleLimit && this.recordedSamples >= this.sampleLimit) {
	        this.stop();
	      } else {
	        // get channel data
	        var left = event.inputBuffer.getChannelData(0);
	        var right = event.inputBuffer.getChannelData(1);
	        // clone the samples
	        this._leftBuffers.push(new Float32Array(left));
	        this._rightBuffers.push(new Float32Array(right));
	        this.recordedSamples += this.bufferSize;
	      }
	    }
	  };
	  p5.SoundRecorder.prototype._getBuffer = function () {
	    var buffers = [];
	    buffers.push(this._mergeBuffers(this._leftBuffers));
	    buffers.push(this._mergeBuffers(this._rightBuffers));
	    return buffers;
	  };
	  p5.SoundRecorder.prototype._mergeBuffers = function (channelBuffer) {
	    var result = new Float32Array(this.recordedSamples);
	    var offset = 0;
	    var lng = channelBuffer.length;
	    for (var i = 0; i < lng; i++) {
	      var buffer = channelBuffer[i];
	      result.set(buffer, offset);
	      offset += buffer.length;
	    }
	    return result;
	  };
	  p5.SoundRecorder.prototype.dispose = function () {
	    this._clear();
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this._callback = function () {
	    };
	    if (this.input) {
	      this.input.disconnect();
	    }
	    this.input = null;
	    this._jsNode = null;
	  };
	  /**
	   *  Save a p5.SoundFile as a .wav audio file.
	   *  
	   *  @method saveSound
	   *  @param  {p5.SoundFile} soundFile p5.SoundFile that you wish to save
	   *  @param  {String} name      name of the resulting .wav file.
	   */
	  p5.prototype.saveSound = function (soundFile, name) {
	    var leftChannel, rightChannel;
	    leftChannel = soundFile.buffer.getChannelData(0);
	    // handle mono files
	    if (soundFile.buffer.numberOfChannels > 1) {
	      rightChannel = soundFile.buffer.getChannelData(1);
	    } else {
	      rightChannel = leftChannel;
	    }
	    var interleaved = interleave(leftChannel, rightChannel);
	    // create the buffer and view to create the .WAV file
	    var buffer = new ArrayBuffer(44 + interleaved.length * 2);
	    var view = new DataView(buffer);
	    // write the WAV container,
	    // check spec at: https://ccrma.stanford.edu/courses/422/projects/WaveFormat/
	    // RIFF chunk descriptor
	    writeUTFBytes(view, 0, 'RIFF');
	    view.setUint32(4, 36 + interleaved.length * 2, true);
	    writeUTFBytes(view, 8, 'WAVE');
	    // FMT sub-chunk
	    writeUTFBytes(view, 12, 'fmt ');
	    view.setUint32(16, 16, true);
	    view.setUint16(20, 1, true);
	    // stereo (2 channels)
	    view.setUint16(22, 2, true);
	    view.setUint32(24, 44100, true);
	    view.setUint32(28, 44100 * 4, true);
	    view.setUint16(32, 4, true);
	    view.setUint16(34, 16, true);
	    // data sub-chunk
	    writeUTFBytes(view, 36, 'data');
	    view.setUint32(40, interleaved.length * 2, true);
	    // write the PCM samples
	    var lng = interleaved.length;
	    var index = 44;
	    var volume = 1;
	    for (var i = 0; i < lng; i++) {
	      view.setInt16(index, interleaved[i] * (32767 * volume), true);
	      index += 2;
	    }
	    p5.prototype.writeFile([view], name, 'wav');
	  };
	  // helper methods to save waves
	  function interleave(leftChannel, rightChannel) {
	    var length = leftChannel.length + rightChannel.length;
	    var result = new Float32Array(length);
	    var inputIndex = 0;
	    for (var index = 0; index < length;) {
	      result[index++] = leftChannel[inputIndex];
	      result[index++] = rightChannel[inputIndex];
	      inputIndex++;
	    }
	    return result;
	  }
	  function writeUTFBytes(view, offset, string) {
	    var lng = string.length;
	    for (var i = 0; i < lng; i++) {
	      view.setUint8(offset + i, string.charCodeAt(i));
	    }
	  }
	}(sndcore, master);
	var peakdetect;
	peakdetect = function () {
	  'use strict';
	  var p5sound = master;
	  /**
	   *  <p>PeakDetect works in conjunction with p5.FFT to
	   *  look for onsets in some or all of the frequency spectrum.
	   *  </p>
	   *  <p>
	   *  To use p5.PeakDetect, call <code>update</code> in the draw loop
	   *  and pass in a p5.FFT object.
	   *  </p>
	   *  <p>
	   *  You can listen for a specific part of the frequency spectrum by
	   *  setting the range between <code>freq1</code> and <code>freq2</code>.
	   *  </p>
	   *
	   *  <p><code>threshold</code> is the threshold for detecting a peak,
	   *  scaled between 0 and 1. It is logarithmic, so 0.1 is half as loud
	   *  as 1.0.</p>
	   *
	   *  <p>
	   *  The update method is meant to be run in the draw loop, and
	   *  <b>frames</b> determines how many loops must pass before
	   *  another peak can be detected.
	   *  For example, if the frameRate() = 60, you could detect the beat of a
	   *  120 beat-per-minute song with this equation:
	   *  <code> framesPerPeak = 60 / (estimatedBPM / 60 );</code>
	   *  </p>
	   *
	   *  <p>
	   *  Based on example contribtued by @b2renger, and a simple beat detection
	   *  explanation by <a
	   *  href="http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/"
	   *  target="_blank">Felix Turner</a>.
	   *  </p>
	   *  
	   *  @class  p5.PeakDetect
	   *  @constructor
	   *  @param {Number} [freq1]     lowFrequency - defaults to 20Hz
	   *  @param {Number} [freq2]     highFrequency - defaults to 20000 Hz
	   *  @param {Number} [threshold] Threshold for detecting a beat between 0 and 1
	   *                            scaled logarithmically where 0.1 is 1/2 the loudness
	   *                            of 1.0. Defaults to 0.35.
	   *  @param {Number} [framesPerPeak]     Defaults to 20.
	   *  @example
	   *  <div><code>
	   *  
	   *  var cnv, soundFile, fft, peakDetect;
	   *  var ellipseWidth = 10;
	   *
	   *  function setup() {
	   *    background(0);
	   *    noStroke();
	   *    fill(255);
	   *    textAlign(CENTER);
	   *
	   *    soundFile = loadSound('assets/beat.mp3');
	   *
	   *    // p5.PeakDetect requires a p5.FFT
	   *    fft = new p5.FFT();
	   *    peakDetect = new p5.PeakDetect();
	   *
	   *  }
	   *
	   *  function draw() {
	   *    background(0);
	   *    text('click to play/pause', width/2, height/2);
	   *
	   *    // peakDetect accepts an fft post-analysis
	   *    fft.analyze();
	   *    peakDetect.update(fft);
	   *
	   *    if ( peakDetect.isDetected ) {
	   *      ellipseWidth = 50;
	   *    } else {
	   *      ellipseWidth *= 0.95;
	   *    }
	   *
	   *    ellipse(width/2, height/2, ellipseWidth, ellipseWidth);
	   *  }
	   *
	   *  // toggle play/stop when canvas is clicked
	   *  function mouseClicked() {
	   *    if (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
	   *      if (soundFile.isPlaying() ) {
	   *        soundFile.stop();
	   *      } else {
	   *        soundFile.play();
	   *      }
	   *    }
	   *  }
	   *  </code></div>
	   */
	  p5.PeakDetect = function (freq1, freq2, threshold, _framesPerPeak) {
	    var framesPerPeak;
	    // framesPerPeak determines how often to look for a beat.
	    // If a beat is provided, try to look for a beat based on bpm
	    this.framesPerPeak = _framesPerPeak || 20;
	    this.framesSinceLastPeak = 0;
	    this.decayRate = 0.95;
	    this.threshold = threshold || 0.35;
	    this.cutoff = 0;
	    // how much to increase the cutoff 
	    // TO DO: document this / figure out how to make it accessible
	    this.cutoffMult = 1.5;
	    this.energy = 0;
	    this.penergy = 0;
	    // TO DO: document this property / figure out how to make it accessible
	    this.currentValue = 0;
	    /**
	     *  isDetected is set to true when a peak is detected.
	     *  
	     *  @attribute isDetected
	     *  @type {Boolean}
	     *  @default  false
	     */
	    this.isDetected = false;
	    this.f1 = freq1 || 40;
	    this.f2 = freq2 || 20000;
	    // function to call when a peak is detected
	    this._onPeak = function () {
	    };
	  };
	  /**
	   *  The update method is run in the draw loop.
	   *
	   *  Accepts an FFT object. You must call .analyze()
	   *  on the FFT object prior to updating the peakDetect
	   *  because it relies on a completed FFT analysis.
	   *
	   *  @method  update
	   *  @param  {p5.FFT} fftObject A p5.FFT object
	   */
	  p5.PeakDetect.prototype.update = function (fftObject) {
	    var nrg = this.energy = fftObject.getEnergy(this.f1, this.f2) / 255;
	    if (nrg > this.cutoff && nrg > this.threshold && nrg - this.penergy > 0) {
	      // trigger callback
	      this._onPeak();
	      this.isDetected = true;
	      // debounce
	      this.cutoff = nrg * this.cutoffMult;
	      this.framesSinceLastPeak = 0;
	    } else {
	      this.isDetected = false;
	      if (this.framesSinceLastPeak <= this.framesPerPeak) {
	        this.framesSinceLastPeak++;
	      } else {
	        this.cutoff *= this.decayRate;
	        this.cutoff = Math.max(this.cutoff, this.threshold);
	      }
	    }
	    this.currentValue = nrg;
	    this.penergy = nrg;
	  };
	  /**
	   *  onPeak accepts two arguments: a function to call when
	   *  a peak is detected. The value of the peak,
	   *  between 0.0 and 1.0, is passed to the callback.
	   *   
	   *  @method  onPeak
	   *  @param  {Function} callback Name of a function that will
	   *                              be called when a peak is
	   *                              detected.
	   *  @param  {Object}   [val]    Optional value to pass
	   *                              into the function when
	   *                              a peak is detected.
	   *  @example
	   *  <div><code>
	   *  var cnv, soundFile, fft, peakDetect;
	   *  var ellipseWidth = 0;
	   *  
	   *  function setup() {
	   *    cnv = createCanvas(100,100);
	   *    textAlign(CENTER);
	   *  
	   *    soundFile = loadSound('assets/beat.mp3');
	   *    fft = new p5.FFT();
	   *    peakDetect = new p5.PeakDetect();
	   *  
	   *    setupSound();
	   *  
	   *    // when a beat is detected, call triggerBeat()
	   *    peakDetect.onPeak(triggerBeat);
	   *  }
	   *  
	   *  function draw() {
	   *    background(0);
	   *    fill(255);
	   *    text('click to play', width/2, height/2);
	   *  
	   *    fft.analyze();
	   *    peakDetect.update(fft);
	   *  
	   *    ellipseWidth *= 0.95;
	   *    ellipse(width/2, height/2, ellipseWidth, ellipseWidth);
	   *  }
	   *  
	   *  // this function is called by peakDetect.onPeak
	   *  function triggerBeat() {
	   *    ellipseWidth = 50;
	   *  }
	   *  
	   *  // mouseclick starts/stops sound
	   *  function setupSound() {
	   *    cnv.mouseClicked( function() {
	   *      if (soundFile.isPlaying() ) {
	   *        soundFile.stop();
	   *      } else {
	   *        soundFile.play();
	   *      }
	   *    });
	   *  }
	   *  </code></div>
	   */
	  p5.PeakDetect.prototype.onPeak = function (callback, val) {
	    var self = this;
	    self._onPeak = function () {
	      callback(self.energy, val);
	    };
	  };
	}(master);
	var gain;
	gain = function () {
	  'use strict';
	  var p5sound = master;
	  /**
	  *  A gain node is usefull to set the relative volume of sound.
	  *  It's typically used to build mixers.   
	  *
	  *  @class p5.Gain
	  *  @constructor
	  *  @example
	  *  <div><code>
	  *
	  * // load two soundfile and crossfade beetween them
	  * var sound1,sound2;
	  * var gain1, gain2, gain3;
	  * 
	  * function preload(){
	  *   soundFormats('ogg', 'mp3');
	  *   sound1 = loadSound('../_files/Damscray_-_Dancing_Tiger_01');
	  *   sound2 = loadSound('../_files/beat.mp3');
	  * }
	  *
	  * function setup() {
	  *   createCanvas(400,200);
	  *
	  *   // create a 'master' gain to which we will connect both soundfiles
	  *   gain3 = new p5.Gain();
	  *   gain3.connect();
	  *
	  *   // setup first sound for playing
	  *   sound1.rate(1);
	  *   sound1.loop();
	  *   sound1.disconnect(); // diconnect from p5 output
	  *
	  *   gain1 = new p5.Gain(); // setup a gain node
	  *   gain1.setInput(sound1); // connect the first sound to its input
	  *   gain1.connect(gain3); // connect its output to the 'master'
	  *
	  *   sound2.rate(1);
	  *   sound2.disconnect();
	  *   sound2.loop();
	  *
	  *   gain2 = new p5.Gain();
	  *   gain2.setInput(sound2);
	  *   gain2.connect(gain3);
	  *
	  * }
	  *
	  * function draw(){
	  *   background(180);
	  *  
	  *   // calculate the horizontal distance beetween the mouse and the right of the screen
	  *   var d = dist(mouseX,0,width,0);
	  *
	  *   // map the horizontal position of the mouse to values useable for volume control of sound1
	  *   var vol1 = map(mouseX,0,width,0,1); 
	  *   var vol2 = 1-vol1; // when sound1 is loud, sound2 is quiet and vice versa
	  *
	  *   gain1.amp(vol1,0.5,0);
	  *   gain2.amp(vol2,0.5,0);
	  *
	  *   // map the vertical position of the mouse to values useable for 'master volume control'
	  *   var vol3 = map(mouseY,0,height,0,1); 
	  *   gain3.amp(vol3,0.5,0);
	  * }
	  *</code></div>
	  *
	  */
	  p5.Gain = function () {
	    this.ac = p5sound.audiocontext;
	    this.input = this.ac.createGain();
	    this.output = this.ac.createGain();
	    // otherwise, Safari distorts
	    this.input.gain.value = 0.5;
	    this.input.connect(this.output);
	    // add  to the soundArray
	    p5sound.soundArray.push(this);
	  };
	  /**
	   *  Connect a source to the gain node.
	   *  
	   *  @method  setInput
	   *  @param  {Object} src     p5.sound / Web Audio object with a sound
	   *                           output.
	   */
	  p5.Gain.prototype.setInput = function (src) {
	    src.connect(this.input);
	  };
	  /**
	   *  Send output to a p5.sound or web audio object
	   *  
	   *  @method  connect
	   *  @param  {Object} unit
	   */
	  p5.Gain.prototype.connect = function (unit) {
	    var u = unit || p5.soundOut.input;
	    this.output.connect(u.input ? u.input : u);
	  };
	  /**
	   *  Disconnect all output.
	   *  
	   *  @method disconnect
	   */
	  p5.Gain.prototype.disconnect = function () {
	    this.output.disconnect();
	  };
	  /**
	   *  Set the output level of the gain node.
	   *  
	   *  @method  amp
	   *  @param  {Number} volume amplitude between 0 and 1.0
	   *  @param  {Number} [rampTime] create a fade that lasts rampTime 
	   *  @param  {Number} [timeFromNow] schedule this event to happen
	   *                                seconds from now
	   */
	  p5.Gain.prototype.amp = function (vol, rampTime, tFromNow) {
	    var rampTime = rampTime || 0;
	    var tFromNow = tFromNow || 0;
	    var now = p5sound.audiocontext.currentTime;
	    var currentVol = this.output.gain.value;
	    this.output.gain.cancelScheduledValues(now);
	    this.output.gain.linearRampToValueAtTime(currentVol, now + tFromNow);
	    this.output.gain.linearRampToValueAtTime(vol, now + tFromNow + rampTime);
	  };
	  p5.Gain.prototype.dispose = function () {
	    // remove reference from soundArray
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this.output.disconnect();
	    this.input.disconnect();
	    this.output = undefined;
	    this.input = undefined;
	  };
	}(master, sndcore);
	var distortion;
	distortion = function () {
	  'use strict';
	  var p5sound = master;
	  /*
	   * Adapted from [Kevin Ennis on StackOverflow](http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion)
	   */
	  function makeDistortionCurve(amount) {
	    var k = typeof amount === 'number' ? amount : 50;
	    var n_samples = 44100;
	    var curve = new Float32Array(n_samples);
	    var deg = Math.PI / 180;
	    var i = 0;
	    var x;
	    for (; i < n_samples; ++i) {
	      x = i * 2 / n_samples - 1;
	      curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
	    }
	    return curve;
	  }
	  /**
	   * A Distortion effect created with a Waveshaper Node,
	   * with an approach adapted from
	   * [Kevin Ennis](http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion)
	   *
	   * @class p5.Distortion
	   * @constructor
	   * @param {Number} [amount=0.25] Unbounded distortion amount.
	   *                                Normal values range from 0-1.
	   * @param {String} [oversample='none'] 'none', '2x', or '4x'.
	   *
	   * @return {Object}   Distortion object
	   */
	  p5.Distortion = function (amount, oversample) {
	    if (typeof amount === 'undefined') {
	      amount = 0.25;
	    }
	    if (typeof amount !== 'number') {
	      throw new Error('amount must be a number');
	    }
	    if (typeof oversample === 'undefined') {
	      oversample = '2x';
	    }
	    if (typeof oversample !== 'string') {
	      throw new Error('oversample must be a String');
	    }
	    var curveAmount = p5.prototype.map(amount, 0, 1, 0, 2000);
	    this.ac = p5sound.audiocontext;
	    this.input = this.ac.createGain();
	    this.output = this.ac.createGain();
	    /**
	     *  The p5.Distortion is built with a
	     *  <a href="http://www.w3.org/TR/webaudio/#WaveShaperNode">
	     *  Web Audio WaveShaper Node</a>.
	     *
	     *  @property WaveShaperNode
	     *  @type {Object}  AudioNode
	     */
	    this.waveShaperNode = this.ac.createWaveShaper();
	    this.amount = curveAmount;
	    this.waveShaperNode.curve = makeDistortionCurve(curveAmount);
	    this.waveShaperNode.oversample = oversample;
	    this.input.connect(this.waveShaperNode);
	    this.waveShaperNode.connect(this.output);
	    this.connect();
	    // add to the soundArray
	    p5sound.soundArray.push(this);
	  };
	  p5.Distortion.prototype.process = function (src, amount, oversample) {
	    src.connect(this.input);
	    this.set(amount, oversample);
	  };
	  /**
	   * Set the amount and oversample of the waveshaper distortion.
	   *
	   * @method setType
	   * @param {Number} [amount=0.25] Unbounded distortion amount.
	   *                                Normal values range from 0-1.
	   * @param {String} [oversample='none'] 'none', '2x', or '4x'.
	   * @param {String}
	   */
	  p5.Distortion.prototype.set = function (amount, oversample) {
	    if (amount) {
	      var curveAmount = p5.prototype.map(amount, 0, 1, 0, 2000);
	      this.amount = curveAmount;
	      this.waveShaperNode.curve = makeDistortionCurve(curveAmount);
	    }
	    if (oversample) {
	      this.waveShaperNode.oversample = oversample;
	    }
	  };
	  /**
	   *  Return the distortion amount, typically between 0-1.
	   *  
	   *  @method  getAmount
	   *  @return {Number} Unbounded distortion amount.
	   *                   Normal values range from 0-1.
	   */
	  p5.Distortion.prototype.getAmount = function () {
	    return this.amount;
	  };
	  /**
	   *  Return the oversampling.
	   *  
	   *  @return {String} Oversample can either be 'none', '2x', or '4x'.
	   */
	  p5.Distortion.prototype.getOversample = function () {
	    return this.waveShaperNode.oversample;
	  };
	  /**
	   *  Send output to a p5.sound or web audio object
	   *
	   *  @method connect
	   *  @param  {Object} unit
	   */
	  p5.Distortion.prototype.connect = function (unit) {
	    var u = unit || p5.soundOut.input;
	    this.output.connect(u);
	  };
	  /**
	   *  Disconnect all output.
	   *
	   *  @method disconnect
	   */
	  p5.Distortion.prototype.disconnect = function () {
	    this.output.disconnect();
	  };
	  p5.Distortion.prototype.dispose = function () {
	    var index = p5sound.soundArray.indexOf(this);
	    p5sound.soundArray.splice(index, 1);
	    this.input.disconnect();
	    this.waveShaperNode.disconnect();
	    this.input = null;
	    this.waveShaperNode = null;
	    if (typeof this.output !== 'undefined') {
	      this.output.disconnect();
	      this.output = null;
	    }
	  };
	}(master);
	var src_app;
	src_app = function () {
	  'use strict';
	  var p5SOUND = sndcore;
	  return p5SOUND;
	}(sndcore, master, helpers, errorHandler, panner, soundfile, amplitude, fft, signal, oscillator, env, pulse, noise, audioin, filter, delay, reverb, metro, looper, soundRecorder, peakdetect, gain, distortion);
	}));

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! p5.dom.js v0.3.0 Dec 5, 2016 */
	/**
	 * <p>The web is much more than just canvas and p5.dom makes it easy to interact
	 * with other HTML5 objects, including text, hyperlink, image, input, video,
	 * audio, and webcam.</p>
	 * <p>There is a set of creation methods, DOM manipulation methods, and
	 * an extended p5.Element that supports a range of HTML elements. See the
	 * <a href="https://github.com/processing/p5.js/wiki/Beyond-the-canvas">
	 * beyond the canvas tutorial</a> for a full overview of how this addon works.
	 *
	 * <p>Methods and properties shown in black are part of the p5.js core, items in
	 * blue are part of the p5.dom library. You will need to include an extra file
	 * in order to access the blue functions. See the
	 * <a href="http://p5js.org/libraries/#using-a-library">using a library</a>
	 * section for information on how to include this library. p5.dom comes with
	 * <a href="http://p5js.org/download">p5 complete</a> or you can download the single file
	 * <a href="https://raw.githubusercontent.com/lmccart/p5.js/master/lib/addons/p5.dom.js">
	 * here</a>.</p>
	 * <p>See <a href="https://github.com/processing/p5.js/wiki/Beyond-the-canvas">tutorial: beyond the canvas</a>
	 * for more info on how to use this libary.</a>
	 *
	 * @module p5.dom
	 * @submodule p5.dom
	 * @for p5.dom
	 * @main
	 */

	(function (root, factory) {
	  if (true)
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(67)], __WEBPACK_AMD_DEFINE_RESULT__ = function (p5) { (factory(p5));}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  else if (typeof exports === 'object')
	    factory(require('../p5'));
	  else
	    factory(root['p5']);
	}(this, function (p5) {

	// =============================================================================
	//                         p5 additions
	// =============================================================================

	  /**
	   * Searches the page for an element with the given ID, class, or tag name (using the '#' or '.'
	   * prefixes to specify an ID or class respectively, and none for a tag) and returns it as
	   * a p5.Element. If a class or tag name is given with more than 1 element,
	   * only the first element will be returned.
	   * The DOM node itself can be accessed with .elt.
	   * Returns null if none found. You can also specify a container to search within.
	   *
	   * @method select
	   * @param  {String} name id, class, or tag name of element to search for
	   * @param  {String} [container] id, p5.Element, or HTML element to search within
	   * @return {Object/p5.Element|Null} p5.Element containing node found
	   * @example
	   * <div ><code class='norender'>
	   * function setup() {
	   *   createCanvas(100,100);
	   *   //translates canvas 50px down
	   *   select('canvas').position(100, 100);
	   * }
	   * </code></div>
	   * <div ><code class='norender'>
	   * // these are all valid calls to select()
	   * var a = select('#moo');
	   * var b = select('#blah', '#myContainer');
	   * var c = select('#foo', b);
	   * var d = document.getElementById('beep');
	   * var e = select('p', d);
	   * </code></div>
	   *
	   */
	  p5.prototype.select = function (e, p) {
	    var res = null;
	    var container = getContainer(p);
	    if (e[0] === '.'){
	      e = e.slice(1);
	      res = container.getElementsByClassName(e);
	      if (res.length) {
	        res = res[0];
	      } else {
	        res = null;
	      }
	    }else if (e[0] === '#'){
	      e = e.slice(1);
	      res = container.getElementById(e);
	    }else {
	      res = container.getElementsByTagName(e);
	      if (res.length) {
	        res = res[0];
	      } else {
	        res = null;
	      }
	    }
	    if (res) {
	      return wrapElement(res);
	    } else {
	      return null;
	    }
	  };

	  /**
	   * Searches the page for elements with the given class or tag name (using the '.' prefix
	   * to specify a class and no prefix for a tag) and returns them as p5.Elements
	   * in an array.
	   * The DOM node itself can be accessed with .elt.
	   * Returns an empty array if none found.
	   * You can also specify a container to search within.
	   *
	   * @method selectAll
	   * @param  {String} name class or tag name of elements to search for
	   * @param  {String} [container] id, p5.Element, or HTML element to search within
	   * @return {Array} Array of p5.Elements containing nodes found
	   * @example
	   * <div class='norender'><code>
	   * function setup() {
	   *   createButton('btn');
	   *   createButton('2nd btn');
	   *   createButton('3rd btn');
	   *   var buttons = selectAll('button');
	   *
	   *   for (var i = 0; i < buttons.length; i++){
	   *     buttons[i].size(100,100);
	   *   }
	   * }
	   * </code></div>
	   * <div class='norender'><code>
	   * // these are all valid calls to selectAll()
	   * var a = selectAll('.moo');
	   * var b = selectAll('div');
	   * var c = selectAll('button', '#myContainer');
	   * var d = select('#container');
	   * var e = selectAll('p', d);
	   * var f = document.getElementById('beep');
	   * var g = select('.blah', f);
	   * </code></div>
	   *
	   */
	  p5.prototype.selectAll = function (e, p) {
	    var arr = [];
	    var res;
	    var container = getContainer(p);
	    if (e[0] === '.'){
	      e = e.slice(1);
	      res = container.getElementsByClassName(e);
	    } else {
	      res = container.getElementsByTagName(e);
	    }
	    if (res) {
	      for (var j = 0; j < res.length; j++) {
	        var obj = wrapElement(res[j]);
	        arr.push(obj);
	      }
	    }
	    return arr;
	  };

	  /**
	   * Helper function for select and selectAll
	   */
	  function getContainer(p) {
	    var container = document;
	    if (typeof p === 'string' && p[0] === '#'){
	      p = p.slice(1);
	      container = document.getElementById(p) || document;
	    } else if (p instanceof p5.Element){
	      container = p.elt;
	    } else if (p instanceof HTMLElement){
	      container = p;
	    }
	    return container;
	  }

	  /**
	   * Helper function for getElement and getElements.
	   */
	  function wrapElement(elt) {
	    if(elt.tagName === "INPUT" && elt.type === "checkbox") {
	      var converted = new p5.Element(elt);
	      converted.checked = function(){
	      if (arguments.length === 0){
	        return this.elt.checked;
	      } else if(arguments[0]) {
	        this.elt.checked = true;
	      } else {
	        this.elt.checked = false;
	      }
	      return this;
	      };
	      return converted;
	    } else if (elt.tagName === "VIDEO" || elt.tagName === "AUDIO") {
	      return new p5.MediaElement(elt);
	    } else {
	      return new p5.Element(elt);
	    }
	  }

	  /**
	   * Removes all elements created by p5, except any canvas / graphics
	   * elements created by createCanvas or createGraphics.
	   * Event handlers are removed, and element is removed from the DOM.
	   * @method removeElements
	   * @example
	   * <div class='norender'><code>
	   * function setup() {
	   *   createCanvas(100, 100);
	   *   createDiv('this is some text');
	   *   createP('this is a paragraph');
	   * }
	   * function mousePressed() {
	   *   removeElements(); // this will remove the div and p, not canvas
	   * }
	   * </code></div>
	   *
	   */
	  p5.prototype.removeElements = function (e) {
	    for (var i=0; i<this._elements.length; i++) {
	      if (!(this._elements[i].elt instanceof HTMLCanvasElement)) {
	        this._elements[i].remove();
	      }
	    }
	  };

	  /**
	   * Helpers for create methods.
	   */
	  function addElement(elt, pInst, media) {
	    var node = pInst._userNode ? pInst._userNode : document.body;
	    node.appendChild(elt);
	    var c = media ? new p5.MediaElement(elt) : new p5.Element(elt);
	    pInst._elements.push(c);
	    return c;
	  }

	  /**
	   * Creates a &lt;div&gt;&lt;/div&gt; element in the DOM with given inner HTML.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createDiv
	   * @param  {String} html inner HTML for element created
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * var myDiv;
	   * function setup() {
	   *   myDiv = createDiv('this is some text');
	   * }
	   * </code></div>
	   */

	  /**
	   * Creates a &lt;p&gt;&lt;/p&gt; element in the DOM with given inner HTML. Used
	   * for paragraph length text.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createP
	   * @param  {String} html inner HTML for element created
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * var myP;
	   * function setup() {
	   *   myP = createP('this is some text');
	   * }
	   * </code></div>
	   */

	  /**
	   * Creates a &lt;span&gt;&lt;/span&gt; element in the DOM with given inner HTML.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createSpan
	   * @param  {String} html inner HTML for element created
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * var mySpan;
	   * function setup() {
	   *   mySpan = createSpan('this is some text');
	   * }
	   * </code></div>
	   */
	  var tags = ['div', 'p', 'span'];
	  tags.forEach(function(tag) {
	    var method = 'create' + tag.charAt(0).toUpperCase() + tag.slice(1);
	    p5.prototype[method] = function(html) {
	      var elt = document.createElement(tag);
	      elt.innerHTML = typeof html === undefined ? "" : html;
	      return addElement(elt, this);
	    }
	  });

	  /**
	   * Creates an &lt;img&gt; element in the DOM with given src and
	   * alternate text.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createImg
	   * @param  {String} src src path or url for image
	   * @param  {String} [alt] alternate text to be used if image does not load
	   * @param  {Function} [successCallback] callback to be called once image data is loaded
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * var img;
	   * function setup() {
	   *   img = createImg('http://p5js.org/img/asterisk-01.png');
	   * }
	   * </code></div>
	   */
	  p5.prototype.createImg = function() {
	    var elt = document.createElement('img');
	    var args = arguments;
	    var self;
	    var setAttrs = function(){
	      self.width = elt.offsetWidth;
	      self.height = elt.offsetHeight;
	      if (args.length > 1 && typeof args[1] === 'function'){
	        self.fn = args[1];
	        self.fn();
	      }else if (args.length > 1 && typeof args[2] === 'function'){
	        self.fn = args[2];
	        self.fn();
	      }
	    };
	    elt.src = args[0];
	    if (args.length > 1 && typeof args[1] === 'string'){
	      elt.alt = args[1];
	    }
	    elt.onload = function(){
	      setAttrs();
	    }
	    self = addElement(elt, this);
	    return self;
	  };

	  /**
	   * Creates an &lt;a&gt;&lt;/a&gt; element in the DOM for including a hyperlink.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createA
	   * @param  {String} href       url of page to link to
	   * @param  {String} html       inner html of link element to display
	   * @param  {String} [target]   target where new link should open,
	   *                             could be _blank, _self, _parent, _top.
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * var myLink;
	   * function setup() {
	   *   myLink = createA('http://p5js.org/', 'this is a link');
	   * }
	   * </code></div>
	   */
	  p5.prototype.createA = function(href, html, target) {
	    var elt = document.createElement('a');
	    elt.href = href;
	    elt.innerHTML = html;
	    if (target) elt.target = target;
	    return addElement(elt, this);
	  };

	  /** INPUT **/


	  /**
	   * Creates a slider &lt;input&gt;&lt;/input&gt; element in the DOM.
	   * Use .size() to set the display length of the slider.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createSlider
	   * @param  {Number} min minimum value of the slider
	   * @param  {Number} max maximum value of the slider
	   * @param  {Number} [value] default value of the slider
	   * @param  {Number} [step] step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div><code>
	   * var slider;
	   * function setup() {
	   *   slider = createSlider(0, 255, 100);
	   *   slider.position(10, 10);
	   *   slider.style('width', '80px');
	   * }
	   *
	   * function draw() {
	   *   var val = slider.value();
	   *   background(val);
	   * }
	   * </code></div>
	   *
	   * <div><code>
	   * var slider;
	   * function setup() {
	   *   colorMode(HSB);
	   *   slider = createSlider(0, 360, 60, 40);
	   *   slider.position(10, 10);
	   *   slider.style('width', '80px');
	   * }
	   *
	   * function draw() {
	   *   var val = slider.value();
	   *   background(val, 100, 100, 1);
	   * }
	   * </code></div>
	   */
	  p5.prototype.createSlider = function(min, max, value, step) {
	    var elt = document.createElement('input');
	    elt.type = 'range';
	    elt.min = min;
	    elt.max = max;
	    if (step === 0) {
	      elt.step = .000000000000000001; // smallest valid step
	    } else if (step) {
	      elt.step = step;
	    }
	    if (typeof(value) === "number") elt.value = value;
	    return addElement(elt, this);
	  };

	  /**
	   * Creates a &lt;button&gt;&lt;/button&gt; element in the DOM.
	   * Use .size() to set the display size of the button.
	   * Use .mousePressed() to specify behavior on press.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createButton
	   * @param  {String} label label displayed on the button
	   * @param  {String} [value] value of the button
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * var button;
	   * function setup() {
	   *   createCanvas(100, 100);
	   *   background(0);
	   *   button = createButton('click me');
	   *   button.position(19, 19);
	   *   button.mousePressed(changeBG);
	   * }
	   *
	   * function changeBG() {
	   *   var val = random(255);
	   *   background(val);
	   * }
	   * </code></div>
	   */
	  p5.prototype.createButton = function(label, value) {
	    var elt = document.createElement('button');
	    elt.innerHTML = label;
	    elt.value = value;
	    if (value) elt.value = value;
	    return addElement(elt, this);
	  };

	  /**
	   * Creates a checkbox &lt;input&gt;&lt;/input&gt; element in the DOM.
	   * Calling .checked() on a checkbox returns if it is checked or not
	   *
	   * @method createCheckbox
	   * @param  {String} [label] label displayed after checkbox
	   * @param  {boolean} [value] value of the checkbox; checked is true, unchecked is false.Unchecked if no value given
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * var checkbox;
	   *
	   * function setup() {
	   *   checkbox = createCheckbox('label', false);
	   *   checkbox.changed(myCheckedEvent);
	   * }
	   *
	   * function myCheckedEvent() {
	   *   if (this.checked()) {
	   *     console.log("Checking!");
	   *   } else {
	   *     console.log("Unchecking!");
	   *   }
	   * }
	   * </code></div>
	   */
	  p5.prototype.createCheckbox = function() {
	    var elt = document.createElement('div');
	    var checkbox = document.createElement('input');
	    checkbox.type = 'checkbox';
	    elt.appendChild(checkbox);
	    //checkbox must be wrapped in p5.Element before label so that label appears after
	    var self = addElement(elt, this);
	    self.checked = function(){
	      var cb = self.elt.getElementsByTagName('input')[0];
	      if (cb) {
	        if (arguments.length === 0){
	          return cb.checked;
	        }else if(arguments[0]){
	          cb.checked = true;
	        }else{
	          cb.checked = false;
	        }
	      }
	      return self;
	    };
	    this.value = function(val){
	      self.value = val;
	      return this;
	    };
	    if (arguments[0]){
	      var ran = Math.random().toString(36).slice(2);
	      var label = document.createElement('label');
	      checkbox.setAttribute('id', ran);
	      label.htmlFor = ran;
	      self.value(arguments[0]);
	      label.appendChild(document.createTextNode(arguments[0]));
	      elt.appendChild(label);
	    }
	    if (arguments[1]){
	      checkbox.checked = true;
	    }
	    return self;
	  };

	  /**
	   * Creates a dropdown menu &lt;select&gt;&lt;/select&gt; element in the DOM.
	   * @method createSelect
	   * @param {boolean} [multiple] [true if dropdown should support multiple selections]
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div><code>
	   * var sel;
	   *
	   * function setup() {
	   *   textAlign(CENTER);
	   *   background(200);
	   *   sel = createSelect();
	   *   sel.position(10, 10);
	   *   sel.option('pear');
	   *   sel.option('kiwi');
	   *   sel.option('grape');
	   *   sel.changed(mySelectEvent);
	   * }
	   *
	   * function mySelectEvent() {
	   *   var item = sel.value();
	   *   background(200);
	   *   text("it's a "+item+"!", 50, 50);
	   * }
	   * </code></div>
	   */
	  p5.prototype.createSelect = function(mult) {
	    var elt = document.createElement('select');
	    if (mult){
	      elt.setAttribute('multiple', 'true');
	    }
	    var self = addElement(elt, this);
	    self.option = function(name, value){
	      var opt = document.createElement('option');
	      opt.innerHTML = name;
	      if (arguments.length > 1)
	        opt.value = value;
	      else
	        opt.value = name;
	      elt.appendChild(opt);
	    };
	    self.selected = function(value){
	      var arr = [];
	      if (arguments.length > 0){
	        for (var i = 0; i < this.elt.length; i++){
	          if (value.toString() === this.elt[i].value){
	            this.elt.selectedIndex = i;
	          }
	        }
	        return this;
	      }else{
	        if (mult){
	          for (var i = 0; i < this.elt.selectedOptions.length; i++){
	            arr.push(this.elt.selectedOptions[i].value);
	          }
	          return arr;
	        }else{
	          return this.elt.value;
	        }
	      }
	    };
	    return self;
	  };

	  /**
	   * Creates a radio button &lt;input&gt;&lt;/input&gt; element in the DOM.
	   * The .option() method can be used to set options for the radio after it is
	   * created. The .value() method will return the currently selected option.
	   *
	   * @method createRadio
	   * @param  {String} [divId] the id and name of the created div and input field respectively
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div><code>
	   * var radio;
	   *
	   * function setup() {
	   *   radio = createRadio();
	   *   radio.option("black");
	   *   radio.option("white");
	   *   radio.option("gray");
	   *   radio.style('width', '60px');
	   *   textAlign(CENTER);
	   *   fill(255, 0, 0);
	   * }
	   *
	   * function draw() {
	   *   var val = radio.value();
	   *   background(val);
	   *   text(val, width/2, height/2);
	   * }
	   * </code></div>
	   * <div><code>
	   * var radio;
	   *
	   * function setup() {
	   *   radio = createRadio();
	   *   radio.option('apple', 1);
	   *   radio.option('bread', 2);
	   *   radio.option('juice', 3);
	   *   radio.style('width', '60px');
	   *   textAlign(CENTER);
	   * }
	   *
	   * function draw() {
	   *   background(200);
	   *   var val = radio.value();
	   *   if (val) {
	   *     text('item cost is $'+val, width/2, height/2);
	   *   }
	   * }
	   * </code></div>
	   */
	  p5.prototype.createRadio = function() {
	    var radios = document.querySelectorAll("input[type=radio]");
	    var count = 0;
	    if(radios.length > 1){
	      var length = radios.length;
	      var prev=radios[0].name;
	      var current = radios[1].name;
	      count = 1;
	      for(var i = 1; i < length; i++) {
	        current = radios[i].name;
	        if(prev != current){
	          count++;
	        }
	        prev = current;
	      }
	    }
	    else if (radios.length == 1){
	      count = 1;
	    }
	    var elt = document.createElement('div');
	    var self = addElement(elt, this);
	    var times = -1;
	    self.option = function(name, value){
	      var opt = document.createElement('input');
	      opt.type = 'radio';
	      opt.innerHTML = name;
	      if (arguments.length > 1)
	        opt.value = value;
	      else
	        opt.value = name;
	      opt.setAttribute('name',"defaultradio"+count);
	      elt.appendChild(opt);
	      if (name){
	        times++;
	        var ran = Math.random().toString(36).slice(2);
	        var label = document.createElement('label');
	        opt.setAttribute('id', "defaultradio"+count+"-"+times);
	        label.htmlFor = "defaultradio"+count+"-"+times;
	        label.appendChild(document.createTextNode(name));
	        elt.appendChild(label);
	      }
	      return opt;
	    };
	    self.selected = function(){
	      var length = this.elt.childNodes.length;
	      if(arguments.length == 1) {
	        for (var i = 0; i < length; i+=2){
	          if(this.elt.childNodes[i].value == arguments[0])
	            this.elt.childNodes[i].checked = true;
	        }
	        return this;
	      } else {
	        for (var i = 0; i < length; i+=2){
	          if(this.elt.childNodes[i].checked == true)
	            return this.elt.childNodes[i].value;
	        }
	      }
	    };
	    self.value = function(){
	      var length = this.elt.childNodes.length;
	      if(arguments.length == 1) {
	        for (var i = 0; i < length; i+=2){
	          if(this.elt.childNodes[i].value == arguments[0])
	            this.elt.childNodes[i].checked = true;
	        }
	        return this;
	      } else {
	        for (var i = 0; i < length; i+=2){
	          if(this.elt.childNodes[i].checked == true)
	            return this.elt.childNodes[i].value;
	        }
	        return "";
	      }
	    };
	    return self
	  };

	  /**
	   * Creates an &lt;input&gt;&lt;/input&gt; element in the DOM for text input.
	   * Use .size() to set the display length of the box.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createInput
	   * @param  {Number} [value] default value of the input box
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * function setup(){
	   *   var inp = createInput('');
	   *   inp.input(myInputEvent);
	   * }
	   *
	   * function myInputEvent(){
	   *   console.log('you are typing: ', this.value());
	   * }
	   *
	   * </code></div>
	   */
	  p5.prototype.createInput = function(value) {
	    var elt = document.createElement('input');
	    elt.type = 'text';
	    if (value) elt.value = value;
	    return addElement(elt, this);
	  };

	  /**
	   * Creates an &lt;input&gt;&lt;/input&gt; element in the DOM of type 'file'.
	   * This allows users to select local files for use in a sketch.
	   *
	   * @method createFileInput
	   * @param  {Function} [callback] callback function for when a file loaded
	   * @param  {String} [multiple] optional to allow multiple files selected
	   * @return {Object/p5.Element} pointer to p5.Element holding created DOM element
	   */
	  p5.prototype.createFileInput = function(callback, multiple) {

	    // Is the file stuff supported?
	    if (window.File && window.FileReader && window.FileList && window.Blob) {
	      // Yup, we're ok and make an input file selector
	      var elt = document.createElement('input');
	      elt.type = 'file';

	      // If we get a second argument that evaluates to true
	      // then we are looking for multiple files
	      if (multiple) {
	        // Anything gets the job done
	        elt.multiple = 'multiple';
	      }

	      // Function to handle when a file is selected
	      // We're simplifying life and assuming that we always
	      // want to load every selected file
	      function handleFileSelect(evt) {
	        // These are the files
	        var files = evt.target.files;
	        // Load each one and trigger a callback
	        for (var i = 0; i < files.length; i++) {
	          var f = files[i];
	          var reader = new FileReader();
	          function makeLoader(theFile) {
	            // Making a p5.File object
	            var p5file = new p5.File(theFile);
	            return function(e) {
	              p5file.data = e.target.result;
	              callback(p5file);
	            };
	          };
	          reader.onload = makeLoader(f);

	          // Text or data?
	          // This should likely be improved
	          if (f.type.indexOf('text') > -1) {
	            reader.readAsText(f);
	          } else {
	            reader.readAsDataURL(f);
	          }
	        }
	      }

	      // Now let's handle when a file was selected
	      elt.addEventListener('change', handleFileSelect, false);
	      return addElement(elt, this);
	    } else {
	      console.log('The File APIs are not fully supported in this browser. Cannot create element.');
	    }
	  };


	  /** VIDEO STUFF **/

	  function createMedia(pInst, type, src, callback) {
	    var elt = document.createElement(type);

	    // allow src to be empty
	    var src = src || '';
	    if (typeof src === 'string') {
	      src = [src];
	    }
	    for (var i=0; i<src.length; i++) {
	      var source = document.createElement('source');
	      source.src = src[i];
	      elt.appendChild(source);
	    }
	    if (typeof callback !== 'undefined') {
	      var callbackHandler = function() {
	        callback();
	        elt.removeEventListener('canplaythrough', callbackHandler);
	      }
	      elt.addEventListener('canplaythrough', callbackHandler);
	    }

	    var c = addElement(elt, pInst, true);
	    c.loadedmetadata = false;
	    // set width and height onload metadata
	    elt.addEventListener('loadedmetadata', function() {
	      c.width = elt.videoWidth;
	      c.height = elt.videoHeight;
	      // set elt width and height if not set
	      if (c.elt.width === 0) c.elt.width = elt.videoWidth;
	      if (c.elt.height === 0) c.elt.height = elt.videoHeight;
	      c.loadedmetadata = true;
	    });

	    return c;
	  }
	  /**
	   * Creates an HTML5 &lt;video&gt; element in the DOM for simple playback
	   * of audio/video. Shown by default, can be hidden with .hide()
	   * and drawn into canvas using video(). Appends to the container
	   * node if one is specified, otherwise appends to body. The first parameter
	   * can be either a single string path to a video file, or an array of string
	   * paths to different formats of the same video. This is useful for ensuring
	   * that your video can play across different browsers, as each supports
	   * different formats. See <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats">this
	   * page</a> for further information about supported formats.
	   *
	   * @method createVideo
	   * @param  {String|Array} src  path to a video file, or array of paths for
	   *                             supporting different browsers
	   * @param  {Object} [callback] callback function to be called upon
	   *                             'canplaythrough' event fire, that is, when the
	   *                             browser can play the media, and estimates that
	   *                             enough data has been loaded to play the media
	   *                             up to its end without having to stop for
	   *                             further buffering of content
	   * @return {Object/p5.Element} pointer to video p5.Element
	   */
	  p5.prototype.createVideo = function(src, callback) {
	    return createMedia(this, 'video', src, callback);
	  };

	  /** AUDIO STUFF **/

	  /**
	   * Creates a hidden HTML5 &lt;audio&gt; element in the DOM for simple audio
	   * playback. Appends to the container node if one is specified,
	   * otherwise appends to body. The first parameter
	   * can be either a single string path to a audio file, or an array of string
	   * paths to different formats of the same audio. This is useful for ensuring
	   * that your audio can play across different browsers, as each supports
	   * different formats. See <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats">this
	   * page for further information about supported formats</a>.
	   *
	   * @method createAudio
	   * @param  {String|Array} src  path to an audio file, or array of paths for
	   *                             supporting different browsers
	   * @param  {Object} [callback] callback function to be called upon
	   *                             'canplaythrough' event fire, that is, when the
	   *                             browser can play the media, and estimates that
	   *                             enough data has been loaded to play the media
	   *                             up to its end without having to stop for
	   *                             further buffering of content
	   * @return {Object/p5.Element} pointer to audio p5.Element
	   */
	  p5.prototype.createAudio = function(src, callback) {
	    return createMedia(this, 'audio', src, callback);
	  };


	  /** CAMERA STUFF **/

	  p5.prototype.VIDEO = 'video';
	  p5.prototype.AUDIO = 'audio';

	  navigator.getUserMedia  = navigator.getUserMedia ||
	                            navigator.webkitGetUserMedia ||
	                            navigator.mozGetUserMedia ||
	                            navigator.msGetUserMedia;

	  /**
	   * <p>Creates a new &lt;video&gt; element that contains the audio/video feed
	   * from a webcam. This can be drawn onto the canvas using video().</p>
	   * <p>More specific properties of the feed can be passing in a Constraints object.
	   * See the
	   * <a href="http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints"> W3C
	   * spec</a> for possible properties. Note that not all of these are supported
	   * by all browsers.</p>
	   * <p>Security note: A new browser security specification requires that getUserMedia,
	   * which is behind createCapture(), only works when you're running the code locally,
	   * or on HTTPS. Learn more <a href="http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https">here</a>
	   * and <a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia">here</a>.</p>
	   *
	   * @method createCapture
	   * @param  {String|Constant|Object}   type type of capture, either VIDEO or
	   *                                    AUDIO if none specified, default both,
	   *                                    or a Constraints object
	   * @param  {Function}                 callback function to be called once
	   *                                    stream has loaded
	   * @return {Object/p5.Element} capture video p5.Element
	   * @example
	   * <div class='norender'><code>
	   * var capture;
	   *
	   * function setup() {
	   *   createCanvas(480, 120);
	   *   capture = createCapture(VIDEO);
	   * }
	   *
	   * function draw() {
	   *   image(capture, 0, 0, width, width*capture.height/capture.width);
	   *   filter(INVERT);
	   * }
	   * </code></div>
	   * <div class='norender'><code>
	   * function setup() {
	   *   createCanvas(480, 120);
	   *   var constraints = {
	   *     video: {
	   *       mandatory: {
	   *         minWidth: 1280,
	   *         minHeight: 720
	   *       },
	   *       optional: [
	   *         { maxFrameRate: 10 }
	   *       ]
	   *     },
	   *     audio: true
	   *   };
	   *   createCapture(constraints, function(stream) {
	   *     console.log(stream);
	   *   });
	   * }
	   * </code></div>
	   */
	  p5.prototype.createCapture = function() {
	    var useVideo = true;
	    var useAudio = true;
	    var constraints;
	    var cb;
	    for (var i=0; i<arguments.length; i++) {
	      if (arguments[i] === p5.prototype.VIDEO) {
	        useAudio = false;
	      } else if (arguments[i] === p5.prototype.AUDIO) {
	        useVideo = false;
	      } else if (typeof arguments[i] === 'object') {
	        constraints = arguments[i];
	      } else if (typeof arguments[i] === 'function') {
	        cb = arguments[i];
	      }
	    }

	    if (navigator.getUserMedia) {
	      var elt = document.createElement('video');

	      if (!constraints) {
	        constraints = {video: useVideo, audio: useAudio};
	      }

	      navigator.getUserMedia(constraints, function(stream) {
	        elt.src = window.URL.createObjectURL(stream);
	          if (cb) {
	            cb(stream);
	          }
	      }, function(e) { console.log(e); });
	    } else {
	      throw 'getUserMedia not supported in this browser';
	    }
	    var c = addElement(elt, this, true);
	    c.loadedmetadata = false;
	    // set width and height onload metadata
	    elt.addEventListener('loadedmetadata', function() {
	      elt.play();
	      if (elt.width) {
	        c.width = elt.videoWidth = elt.width;
	        c.height = elt.videoHeight = elt.height;
	      } else {
	        c.width = c.elt.width = elt.videoWidth;
	        c.height = c.elt.height = elt.videoHeight;
	      }
	      c.loadedmetadata = true;
	    });
	    return c;
	  };

	  /**
	   * Creates element with given tag in the DOM with given content.
	   * Appends to the container node if one is specified, otherwise
	   * appends to body.
	   *
	   * @method createElement
	   * @param  {String} tag tag for the new element
	   * @param  {String} [content] html content to be inserted into the element
	   * @return {Object/p5.Element} pointer to p5.Element holding created node
	   * @example
	   * <div class='norender'><code>
	   * var h2 = createElement('h2','im an h2 p5.element!');
	   * </code></div>
	   */
	  p5.prototype.createElement = function(tag, content) {
	    var elt = document.createElement(tag);
	    if (typeof content !== 'undefined') {
	      elt.innerHTML = content;
	    }
	    return addElement(elt, this);
	  };


	// =============================================================================
	//                         p5.Element additions
	// =============================================================================
	  /**
	   *
	   * Adds specified class to the element.
	   *
	   * @for p5.Element
	   * @method addClass
	   * @param  {String} class name of class to add
	   * @return {Object/p5.Element}
	   * @example
	   * <div class='norender'><code>
	   * var div = createDiv('div');
	   * div.addClass('myClass');
	   * </code></div>
	   */
	  p5.Element.prototype.addClass = function(c) {
	    if (this.elt.className) {
	      // PEND don't add class more than once
	      //var regex = new RegExp('[^a-zA-Z\d:]?'+c+'[^a-zA-Z\d:]?');
	      //if (this.elt.className.search(/[^a-zA-Z\d:]?hi[^a-zA-Z\d:]?/) === -1) {
	      this.elt.className = this.elt.className+' '+c;
	      //}
	    } else {
	      this.elt.className = c;
	    }
	    return this;
	  }

	  /**
	   *
	   * Removes specified class from the element.
	   *
	   * @method removeClass
	   * @param  {String} class name of class to remove
	   * @return {Object/p5.Element}
	   */
	  p5.Element.prototype.removeClass = function(c) {
	    var regex = new RegExp('(?:^|\\s)'+c+'(?!\\S)');
	    this.elt.className = this.elt.className.replace(regex, '');
	    this.elt.className = this.elt.className.replace(/^\s+|\s+$/g, ""); //prettify (optional)
	    return this;
	  }

	  /**
	   *
	   * Attaches the element  as a child to the parent specified.
	   * Accepts either a string ID, DOM node, or p5.Element.
	   * If no argument is specified, an array of children DOM nodes is returned.
	   *
	   * @method child
	   * @param  {String|Object|p5.Element} [child] the ID, DOM node, or p5.Element
	   *                         to add to the current element
	   * @return {p5.Element}
	   * @example
	   * <div class='norender'><code>
	   * var div0 = createDiv('this is the parent');
	   * var div1 = createDiv('this is the child');
	   * div0.child(div1); // use p5.Element
	   * </code></div>
	   * <div class='norender'><code>
	   * var div0 = createDiv('this is the parent');
	   * var div1 = createDiv('this is the child');
	   * div1.id('apples');
	   * div0.child('apples'); // use id
	   * </code></div>
	   * <div class='norender'><code>
	   * var div0 = createDiv('this is the parent');
	   * var elt = document.getElementById('myChildDiv');
	   * div0.child(elt); // use element from page
	   * </code></div>
	   */
	  p5.Element.prototype.child = function(c) {
	    if (typeof c === 'undefined'){
	      return this.elt.childNodes
	    }
	    if (typeof c === 'string') {
	      if (c[0] === '#') {
	        c = c.substring(1);
	      }
	      c = document.getElementById(c);
	    } else if (c instanceof p5.Element) {
	      c = c.elt;
	    }
	    this.elt.appendChild(c);
	    return this;
	  };

	  /**
	   * Centers a p5 Element either vertically, horizontally,
	   * or both, relative to its parent or according to
	   * the body if the Element has no parent. If no argument is passed
	   * the Element is aligned both vertically and horizontally.
	   *
	   * @param  {String} align       passing 'vertical', 'horizontal' aligns element accordingly
	   * @return {Object/p5.Element} pointer to p5.Element
	   * @example
	   * <div><code>
	   * function setup() {
	   *   var div = createDiv('').size(10,10);
	   *   div.style('background-color','orange');
	   *   div.center();
	   *
	   * }
	   * </code></div>
	   */
	  p5.Element.prototype.center = function(align) {
	    var style = this.elt.style.display;
	    var hidden = this.elt.style.display === 'none';
	    var parentHidden = this.parent().style.display === 'none';
	    var pos = { x : this.elt.offsetLeft, y : this.elt.offsetTop };

	    if (hidden) this.show();

	    this.elt.style.display = 'block';
	    this.position(0,0);

	    if (parentHidden) this.parent().style.display = 'block';

	    var wOffset = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth);
	    var hOffset = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);
	    var y = pos.y;
	    var x = pos.x;

	    if (align === 'both' || align === undefined){
	      this.position(wOffset/2, hOffset/2);
	    }else if (align === 'horizontal'){
	      this.position(wOffset/2, y);
	    }else if (align === 'vertical'){
	      this.position(x, hOffset/2);
	    }

	    this.style('display', style);

	    if (hidden) this.hide();

	    if (parentHidden) this.parent().style.display = 'none';

	    return this;
	  };

	  /**
	   *
	   * If an argument is given, sets the inner HTML of the element,
	   * replacing any existing html. If true is included as a second
	   * argument, html is appended instead of replacing existing html.
	   * If no arguments are given, returns
	   * the inner HTML of the element.
	   *
	   * @for p5.Element
	   * @method html
	   * @param  {String} [html] the HTML to be placed inside the element
	   * @param  {boolean} [append] whether to append HTML to existing
	   * @return {Object/p5.Element|String}
	   * @example
	   * <div class='norender'><code>
	   * var div = createDiv('').size(100,100);
	   * div.html('hi');
	   * </code></div>
	   * <div class='norender'><code>
	   * var div = createDiv('Hello ').size(100,100);
	   * div.html('World', true);
	   * </code></div>
	   */
	  p5.Element.prototype.html = function() {
	    if (arguments.length === 0) {
	      return this.elt.innerHTML;
	    } else if (arguments[1]) {
	      this.elt.innerHTML += arguments[0];
	      return this;
	    } else {
	      this.elt.innerHTML = arguments[0];
	      return this;
	    }
	  };

	  /**
	   *
	   * Sets the position of the element relative to (0, 0) of the
	   * window. Essentially, sets position:absolute and left and top
	   * properties of style. If no arguments given returns the x and y position
	   * of the element in an object.
	   *
	   * @method position
	   * @param  {Number} [x] x-position relative to upper left of window
	   * @param  {Number} [y] y-position relative to upper left of window
	   * @return {Object/p5.Element}
	   * @example
	   * <div><code class='norender'>
	   * function setup() {
	   *   var cnv = createCanvas(100, 100);
	   *   // positions canvas 50px to the right and 100px
	   *   // below upper left corner of the window
	   *   cnv.position(50, 100);
	   * }
	   * </code></div>
	   */
	  p5.Element.prototype.position = function() {
	    if (arguments.length === 0){
	      return { 'x' : this.elt.offsetLeft , 'y' : this.elt.offsetTop };
	    }else{
	      this.elt.style.position = 'absolute';
	      this.elt.style.left = arguments[0]+'px';
	      this.elt.style.top = arguments[1]+'px';
	      this.x = arguments[0];
	      this.y = arguments[1];
	      return this;
	    }
	  };

	  /* Helper method called by p5.Element.style() */
	  p5.Element.prototype._translate = function(){
	    this.elt.style.position = 'absolute';
	    // save out initial non-translate transform styling
	    var transform = '';
	    if (this.elt.style.transform) {
	      transform = this.elt.style.transform.replace(/translate3d\(.*\)/g, '');
	      transform = transform.replace(/translate[X-Z]?\(.*\)/g, '');
	    }
	    if (arguments.length === 2) {
	      this.elt.style.transform = 'translate('+arguments[0]+'px, '+arguments[1]+'px)';
	    } else if (arguments.length > 2) {
	      this.elt.style.transform = 'translate3d('+arguments[0]+'px,'+arguments[1]+'px,'+arguments[2]+'px)';
	      if (arguments.length === 3) {
	        this.elt.parentElement.style.perspective = '1000px';
	      } else {
	        this.elt.parentElement.style.perspective = arguments[3]+'px';
	      }
	    }
	    // add any extra transform styling back on end
	    this.elt.style.transform += transform;
	    return this;
	  };

	  /* Helper method called by p5.Element.style() */
	  p5.Element.prototype._rotate = function(){
	    // save out initial non-rotate transform styling
	    var transform = '';
	    if (this.elt.style.transform) {
	      var transform = this.elt.style.transform.replace(/rotate3d\(.*\)/g, '');
	      transform = transform.replace(/rotate[X-Z]?\(.*\)/g, '');
	    }

	    if (arguments.length === 1){
	      this.elt.style.transform = 'rotate('+arguments[0]+'deg)';
	    }else if (arguments.length === 2){
	      this.elt.style.transform = 'rotate('+arguments[0]+'deg, '+arguments[1]+'deg)';
	    }else if (arguments.length === 3){
	      this.elt.style.transform = 'rotateX('+arguments[0]+'deg)';
	      this.elt.style.transform += 'rotateY('+arguments[1]+'deg)';
	      this.elt.style.transform += 'rotateZ('+arguments[2]+'deg)';
	    }
	    // add remaining transform back on
	    this.elt.style.transform += transform;
	    return this;
	  };

	  /**
	   * Sets the given style (css) property (1st arg) of the element with the
	   * given value (2nd arg). If a single argument is given, .style()
	   * returns the value of the given property; however, if the single argument
	   * is given in css syntax ('text-align:center'), .style() sets the css
	   * appropriatly. .style() also handles 2d and 3d css transforms. If
	   * the 1st arg is 'rotate', 'translate', or 'position', the following arguments
	   * accept Numbers as values. ('translate', 10, 100, 50);
	   *
	   * @method style
	   * @param  {String} property   property to be set
	   * @param  {String|Number|p5.Color} [value]   value to assign to property
	   * @param  {String|Number} [value]   value to assign to property (rotate/translate)
	   * @param  {String|Number} [value]   value to assign to property (rotate/translate)
	   * @param  {String|Number} [value]   value to assign to property (translate)
	   * @return {String|Object/p5.Element} value of property, if no value is specified
	   * or p5.Element
	   * @example
	   * <div><code class="norender">
	   * var myDiv = createDiv("I like pandas.");
	   * myDiv.style("font-size", "18px");
	   * myDiv.style("color", "#ff0000");
	   * </code></div>
	   * <div><code class="norender">
	   * var col = color(25,23,200,50);
	   * var button = createButton("button");
	   * button.style("background-color", col);
	   * button.position(10, 10);
	   * </code></div>
	   * <div><code class="norender">
	   * var myDiv = createDiv("I like lizards.");
	   * myDiv.style("position", 20, 20);
	   * myDiv.style("rotate", 45);
	   * </code></div>
	   * <div><code class="norender">
	   * var myDiv;
	   * function setup() {
	   *   background(200);
	   *   myDiv = createDiv("I like gray.");
	   *   myDiv.position(20, 20);
	   * }
	   *
	   * function draw() {
	   *   myDiv.style("font-size", mouseX+"px");
	   * }
	   * </code></div>
	   */
	  p5.Element.prototype.style = function(prop, val) {
	    var self = this;

	    if (val instanceof p5.Color) {
	      val = 'rgba(' + val.levels[0] + ',' + val.levels[1] + ',' + val.levels[2] + ',' + val.levels[3]/255 + ')'
	    }

	    if (typeof val === 'undefined') {
	      if (prop.indexOf(':') === -1) {
	        var styles = window.getComputedStyle(self.elt);
	        var style = styles.getPropertyValue(prop);
	        return style;
	      } else {
	        var attrs = prop.split(';');
	        for (var i = 0; i < attrs.length; i++) {
	          var parts = attrs[i].split(':');
	          if (parts[0] && parts[1]) {
	            this.elt.style[parts[0].trim()] = parts[1].trim();
	          }
	        }
	      }
	    } else {
	      if (prop === 'rotate' || prop === 'translate' || prop === 'position'){
	        var trans = Array.prototype.shift.apply(arguments);
	        var f = this[trans] || this['_'+trans];
	        f.apply(this, arguments);
	      } else {
	        this.elt.style[prop] = val;
	        if (prop === 'width' || prop === 'height' || prop === 'left' || prop === 'top') {
	          var numVal = val.replace(/\D+/g, '');
	          this[prop] = parseInt(numVal, 10); // pend: is this necessary?
	        }
	      }
	    }
	    return this;
	  };


	  /**
	   *
	   * Adds a new attribute or changes the value of an existing attribute
	   * on the specified element. If no value is specified, returns the
	   * value of the given attribute, or null if attribute is not set.
	   *
	   * @method attribute
	   * @param  {String} attr       attribute to set
	   * @param  {String} [value]    value to assign to attribute
	   * @return {String|Object/p5.Element} value of attribute, if no value is
	   *                             specified or p5.Element
	   * @example
	   * <div class="norender"><code>
	   * var myDiv = createDiv("I like pandas.");
	   * myDiv.attribute("align", "center");
	   * </code></div>
	   */
	  p5.Element.prototype.attribute = function(attr, value) {
	    if (typeof value === 'undefined') {
	      return this.elt.getAttribute(attr);
	    } else {
	      this.elt.setAttribute(attr, value);
	      return this;
	    }
	  };


	  /**
	   *
	   * Removes an attribute on the specified element.
	   *
	   * @method removeAttribute
	   * @param  {String} attr       attribute to remove
	   * @return {Object/p5.Element}
	   *
	   * @example
	   * <div><code>
	   * var button;
	   * var checkbox;
	   *
	   * function setup() {
	   *   checkbox = createCheckbox('enable', true);
	   *   checkbox.changed(enableButton);
	   *   button = createButton('button');
	   *   button.position(10, 10);
	   * }
	   *
	   * function enableButton() {
	   *   if( this.checked() ) {
	   *     // Re-enable the button
	   *     button.removeAttribute('disabled');
	   *   } else {
	   *     // Disable the button
	   *     button.attribute('disabled','');
	   *   }
	   * }
	   * </code></div>
	   */
	  p5.Element.prototype.removeAttribute = function(attr) {
	    this.elt.removeAttribute(attr);
	    return this;
	  };


	  /**
	   * Either returns the value of the element if no arguments
	   * given, or sets the value of the element.
	   *
	   * @method value
	   * @param  {String|Number}     [value]
	   * @return {String|Object/p5.Element} value of element if no value is specified or p5.Element
	   * @example
	   * <div class='norender'><code>
	   * // gets the value
	   * var inp;
	   * function setup() {
	   *   inp = createInput('');
	   * }
	   *
	   * function mousePressed() {
	   *   print(inp.value());
	   * }
	   * </code></div>
	   * <div class='norender'><code>
	   * // sets the value
	   * var inp;
	   * function setup() {
	   *   inp = createInput('myValue');
	   * }
	   *
	   * function mousePressed() {
	   *   inp.value("myValue");
	   * }
	   * </code></div>
	   */
	  p5.Element.prototype.value = function() {
	    if (arguments.length > 0) {
	      this.elt.value = arguments[0];
	      return this;
	    } else {
	      if (this.elt.type === 'range') {
	        return parseFloat(this.elt.value);
	      }
	      else return this.elt.value;
	    }
	  };

	  /**
	   *
	   * Shows the current element. Essentially, setting display:block for the style.
	   *
	   * @method show
	   * @return {Object/p5.Element}
	   * @example
	   * <div class='norender'><code>
	   * var div = createDiv('div');
	   * div.style("display", "none");
	   * div.show(); // turns display to block
	   * </code></div>
	   */
	  p5.Element.prototype.show = function() {
	    this.elt.style.display = 'block';
	    return this;
	  };

	  /**
	   * Hides the current element. Essentially, setting display:none for the style.
	   *
	   * @method hide
	   * @return {Object/p5.Element}
	   * @example
	   * <div class='norender'><code>
	   * var div = createDiv('this is a div');
	   * div.hide();
	   * </code></div>
	   */
	  p5.Element.prototype.hide = function() {
	    this.elt.style.display = 'none';
	    return this;
	  };

	  /**
	   *
	   * Sets the width and height of the element. AUTO can be used to
	   * only adjust one dimension. If no arguments given returns the width and height
	   * of the element in an object.
	   *
	   * @method size
	   * @param  {Number} [w] width of the element
	   * @param  {Number} [h] height of the element
	   * @return {Object/p5.Element}
	   * @example
	   * <div class='norender'><code>
	   * var div = createDiv('this is a div');
	   * div.size(100, 100);
	   * </code></div>
	   */
	  p5.Element.prototype.size = function(w, h) {
	    if (arguments.length === 0){
	      return { 'width' : this.elt.offsetWidth , 'height' : this.elt.offsetHeight };
	    }else{
	      var aW = w;
	      var aH = h;
	      var AUTO = p5.prototype.AUTO;
	      if (aW !== AUTO || aH !== AUTO) {
	        if (aW === AUTO) {
	          aW = h * this.width / this.height;
	        } else if (aH === AUTO) {
	          aH = w * this.height / this.width;
	        }
	        // set diff for cnv vs normal div
	        if (this.elt instanceof HTMLCanvasElement) {
	          var j = {};
	          var k  = this.elt.getContext('2d');
	          for (var prop in k) {
	            j[prop] = k[prop];
	          }
	          this.elt.setAttribute('width', aW * this._pInst._pixelDensity);
	          this.elt.setAttribute('height', aH * this._pInst._pixelDensity);
	          this.elt.setAttribute('style', 'width:' + aW + 'px; height:' + aH + 'px');
	          this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);
	          for (var prop in j) {
	            this.elt.getContext('2d')[prop] = j[prop];
	          }
	        } else {
	          this.elt.style.width = aW+'px';
	          this.elt.style.height = aH+'px';
	          this.elt.width = aW;
	          this.elt.height = aH;
	          this.width = aW;
	          this.height = aH;
	        }

	        this.width = this.elt.offsetWidth;
	        this.height = this.elt.offsetHeight;

	        if (this._pInst) { // main canvas associated with p5 instance
	          if (this._pInst._curElement.elt === this.elt) {
	            this._pInst._setProperty('width', this.elt.offsetWidth);
	            this._pInst._setProperty('height', this.elt.offsetHeight);
	          }
	        }
	      }
	      return this;
	    }
	  };

	  /**
	   * Removes the element and deregisters all listeners.
	   * @method remove
	   * @example
	   * <div class='norender'><code>
	   * var myDiv = createDiv('this is some text');
	   * myDiv.remove();
	   * </code></div>
	   */
	  p5.Element.prototype.remove = function() {
	    // deregister events
	    for (var ev in this._events) {
	      this.elt.removeEventListener(ev, this._events[ev]);
	    }
	    if (this.elt.parentNode) {
	      this.elt.parentNode.removeChild(this.elt);
	    }
	    delete(this);
	  };



	// =============================================================================
	//                         p5.MediaElement additions
	// =============================================================================


	  /**
	   * Extends p5.Element to handle audio and video. In addition to the methods
	   * of p5.Element, it also contains methods for controlling media. It is not
	   * called directly, but p5.MediaElements are created by calling createVideo,
	   * createAudio, and createCapture.
	   *
	   * @class p5.MediaElement
	   * @constructor
	   * @param {String} elt DOM node that is wrapped
	   * @param {Object} [pInst] pointer to p5 instance
	   */
	  p5.MediaElement = function(elt, pInst) {
	    p5.Element.call(this, elt, pInst);

	    var self = this;
	    this.elt.crossOrigin = 'anonymous';

	    this._prevTime = 0;
	    this._cueIDCounter = 0;
	    this._cues = [];
	    this._pixelDensity = 1;

	    /**
	     *  Path to the media element source.
	     *
	     *  @property src
	     *  @return {String} src
	     */
	    Object.defineProperty(self, 'src', {
	      get: function() {
	        var firstChildSrc = self.elt.children[0].src;
	        var srcVal = self.elt.src === window.location.href ? '' : self.elt.src;
	        var ret = firstChildSrc === window.location.href ? srcVal : firstChildSrc;
	        return ret;
	      },
	      set: function(newValue) {
	        for (var i = 0; i < self.elt.children.length; i++) {
	          self.elt.removeChild(self.elt.children[i]);
	        }
	        var source = document.createElement('source');
	        source.src = newValue;
	        elt.appendChild(source);
	        self.elt.src = newValue;
	      },
	    });

	    // private _onended callback, set by the method: onended(callback)
	    self._onended = function() {};
	    self.elt.onended = function() {
	      self._onended(self);
	    }
	  };
	  p5.MediaElement.prototype = Object.create(p5.Element.prototype);




	  /**
	   * Play an HTML5 media element.
	   *
	   * @method play
	   * @return {Object/p5.Element}
	   */
	  p5.MediaElement.prototype.play = function() {
	    if (this.elt.currentTime === this.elt.duration) {
	      this.elt.currentTime = 0;
	    }

	    if (this.elt.readyState > 1) {
	      this.elt.play();
	    } else {
	      // in Chrome, playback cannot resume after being stopped and must reload
	      this.elt.load();
	      this.elt.play();
	    }
	    return this;
	  };

	  /**
	   * Stops an HTML5 media element (sets current time to zero).
	   *
	   * @method stop
	   * @return {Object/p5.Element}
	   */
	  p5.MediaElement.prototype.stop = function() {
	    this.elt.pause();
	    this.elt.currentTime = 0;
	    return this;
	  };

	  /**
	   * Pauses an HTML5 media element.
	   *
	   * @method pause
	   * @return {Object/p5.Element}
	   */
	  p5.MediaElement.prototype.pause = function() {
	    this.elt.pause();
	    return this;
	  };

	  /**
	   * Set 'loop' to true for an HTML5 media element, and starts playing.
	   *
	   * @method loop
	   * @return {Object/p5.Element}
	   */
	  p5.MediaElement.prototype.loop = function() {
	    this.elt.setAttribute('loop', true);
	    this.play();
	    return this;
	  };
	  /**
	   * Set 'loop' to false for an HTML5 media element. Element will stop
	   * when it reaches the end.
	   *
	   * @method noLoop
	   * @return {Object/p5.Element}
	   */
	  p5.MediaElement.prototype.noLoop = function() {
	    this.elt.setAttribute('loop', false);
	    return this;
	  };


	  /**
	   * Set HTML5 media element to autoplay or not.
	   *
	   * @method autoplay
	   * @param {Boolean} autoplay whether the element should autoplay
	   * @return {Object/p5.Element}
	   */
	  p5.MediaElement.prototype.autoplay = function(val) {
	    this.elt.setAttribute('autoplay', val);
	    return this;
	  };

	  /**
	   * Sets volume for this HTML5 media element. If no argument is given,
	   * returns the current volume.
	   *
	   * @param {Number}            [val] volume between 0.0 and 1.0
	   * @return {Number|p5.MediaElement} current volume or p5.MediaElement
	   * @method volume
	   */
	  p5.MediaElement.prototype.volume = function(val) {
	    if (typeof val === 'undefined') {
	      return this.elt.volume;
	    } else {
	      this.elt.volume = val;
	    }
	  };

	  /**
	   * If no arguments are given, returns the current playback speed of the
	   * element. The speed parameter sets the speed where 2.0 will play the
	   * element twice as fast, 0.5 will play at half the speed, and -1 will play
	   * the element in normal speed in reverse.(Note that not all browsers support
	   * backward playback and even if they do, playback might not be smooth.)
	   *
	   * @method speed
	   * @param {Number} [speed]  speed multiplier for element playback
	   * @return {Number|Object/p5.MediaElement} current playback speed or p5.MediaElement
	   */
	  p5.MediaElement.prototype.speed = function(val) {
	    if (typeof val === 'undefined') {
	      return this.elt.playbackRate;
	    } else {
	      this.elt.playbackRate = val;
	    }
	  };

	  /**
	   * If no arguments are given, returns the current time of the element.
	   * If an argument is given the current time of the element is set to it.
	   *
	   * @method time
	   * @param {Number} [time] time to jump to (in seconds)
	   * @return {Number|Object/p5.MediaElement} current time (in seconds)
	   *                                  or p5.MediaElement
	   */
	  p5.MediaElement.prototype.time = function(val) {
	    if (typeof val === 'undefined') {
	      return this.elt.currentTime;
	    } else {
	      this.elt.currentTime = val;
	    }
	  };

	  /**
	   * Returns the duration of the HTML5 media element.
	   *
	   * @method duration
	   * @return {Number} duration
	   */
	  p5.MediaElement.prototype.duration = function() {
	    return this.elt.duration;
	  };
	  p5.MediaElement.prototype.pixels = [];
	  p5.MediaElement.prototype.loadPixels = function() {
	    if (!this.canvas) {
	      this.canvas = document.createElement('canvas');
	      this.drawingContext = this.canvas.getContext('2d');
	    }
	    if (this.loadedmetadata) { // wait for metadata for w/h
	      if (this.canvas.width !== this.elt.width) {
	        this.canvas.width = this.elt.width;
	        this.canvas.height = this.elt.height;
	        this.width = this.canvas.width;
	        this.height = this.canvas.height;
	      }
	      this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height);
	      p5.Renderer2D.prototype.loadPixels.call(this);
	    }
	    return this;
	  }
	  p5.MediaElement.prototype.updatePixels =  function(x, y, w, h){
	    if (this.loadedmetadata) { // wait for metadata
	      p5.Renderer2D.prototype.updatePixels.call(this, x, y, w, h);
	    }
	    return this;
	  }
	  p5.MediaElement.prototype.get = function(x, y, w, h){
	    if (this.loadedmetadata) { // wait for metadata
	      return p5.Renderer2D.prototype.get.call(this, x, y, w, h);
	    } else if (typeof x === 'undefined') {
	      return new p5.Image(1, 1);
	    } else if (w > 1) {
	      return new p5.Image(x, y, w, h);
	    } else {
	      return [0, 0, 0, 255];
	    }
	  };
	  p5.MediaElement.prototype.set = function(x, y, imgOrCol){
	    if (this.loadedmetadata) { // wait for metadata
	      p5.Renderer2D.prototype.set.call(this, x, y, imgOrCol);
	    }
	  };
	  p5.MediaElement.prototype.copy = function(){
	    p5.Renderer2D.prototype.copy.apply(this, arguments);
	  };
	  p5.MediaElement.prototype.mask = function(){
	    this.loadPixels();
	    p5.Image.prototype.mask.apply(this, arguments);
	  };
	  /**
	   *  Schedule an event to be called when the audio or video
	   *  element reaches the end. If the element is looping,
	   *  this will not be called. The element is passed in
	   *  as the argument to the onended callback.
	   *
	   *  @method  onended
	   *  @param  {Function} callback function to call when the
	   *                              soundfile has ended. The
	   *                              media element will be passed
	   *                              in as the argument to the
	   *                              callback.
	   *  @return {Object/p5.MediaElement}
	   *  @example
	   *  <div><code>
	   *  function setup() {
	   *    audioEl = createAudio('assets/beat.mp3');
	   *    audioEl.showControls(true);
	   *    audioEl.onended(sayDone);
	   *  }
	   *
	   *  function sayDone(elt) {
	   *    alert('done playing ' + elt.src );
	   *  }
	   *  </code></div>
	   */
	  p5.MediaElement.prototype.onended = function(callback) {
	    this._onended = callback;
	    return this;
	  };


	  /*** CONNECT TO WEB AUDIO API / p5.sound.js ***/

	  /**
	   *  Send the audio output of this element to a specified audioNode or
	   *  p5.sound object. If no element is provided, connects to p5's master
	   *  output. That connection is established when this method is first called.
	   *  All connections are removed by the .disconnect() method.
	   *
	   *  This method is meant to be used with the p5.sound.js addon library.
	   *
	   *  @method  connect
	   *  @param  {AudioNode|p5.sound object} audioNode AudioNode from the Web Audio API,
	   *  or an object from the p5.sound library
	   */
	  p5.MediaElement.prototype.connect = function(obj) {
	    var audioContext, masterOutput;

	    // if p5.sound exists, same audio context
	    if (typeof p5.prototype.getAudioContext === 'function') {
	      audioContext = p5.prototype.getAudioContext();
	      masterOutput = p5.soundOut.input;
	    } else {
	      try {
	        audioContext = obj.context;
	        masterOutput = audioContext.destination
	      } catch(e) {
	        throw 'connect() is meant to be used with Web Audio API or p5.sound.js'
	      }
	    }

	    // create a Web Audio MediaElementAudioSourceNode if none already exists
	    if (!this.audioSourceNode) {
	      this.audioSourceNode = audioContext.createMediaElementSource(this.elt);

	      // connect to master output when this method is first called
	      this.audioSourceNode.connect(masterOutput);
	    }

	    // connect to object if provided
	    if (obj) {
	      if (obj.input) {
	        this.audioSourceNode.connect(obj.input);
	      } else {
	        this.audioSourceNode.connect(obj);
	      }
	    }

	    // otherwise connect to master output of p5.sound / AudioContext
	    else {
	      this.audioSourceNode.connect(masterOutput);
	    }

	  };

	  /**
	   *  Disconnect all Web Audio routing, including to master output.
	   *  This is useful if you want to re-route the output through
	   *  audio effects, for example.
	   *
	   *  @method  disconnect
	   */
	  p5.MediaElement.prototype.disconnect = function() {
	    if (this.audioSourceNode) {
	      this.audioSourceNode.disconnect();
	    } else {
	      throw 'nothing to disconnect';
	    }
	  };


	  /*** SHOW / HIDE CONTROLS ***/

	  /**
	   *  Show the default MediaElement controls, as determined by the web browser.
	   *
	   *  @method  showControls
	   */
	  p5.MediaElement.prototype.showControls = function() {
	    // must set style for the element to show on the page
	    this.elt.style['text-align'] = 'inherit';
	    this.elt.controls = true;
	  };

	  /**
	   *  Hide the default mediaElement controls.
	   *
	   *  @method hideControls
	   */
	  p5.MediaElement.prototype.hideControls = function() {
	    this.elt.controls = false;
	  };

	  /*** SCHEDULE EVENTS ***/

	  /**
	   *  Schedule events to trigger every time a MediaElement
	   *  (audio/video) reaches a playback cue point.
	   *
	   *  Accepts a callback function, a time (in seconds) at which to trigger
	   *  the callback, and an optional parameter for the callback.
	   *
	   *  Time will be passed as the first parameter to the callback function,
	   *  and param will be the second parameter.
	   *
	   *
	   *  @method  addCue
	   *  @param {Number}   time     Time in seconds, relative to this media
	   *                             element's playback. For example, to trigger
	   *                             an event every time playback reaches two
	   *                             seconds, pass in the number 2. This will be
	   *                             passed as the first parameter to
	   *                             the callback function.
	   *  @param {Function} callback Name of a function that will be
	   *                             called at the given time. The callback will
	   *                             receive time and (optionally) param as its
	   *                             two parameters.
	   *  @param {Object} [value]    An object to be passed as the
	   *                             second parameter to the
	   *                             callback function.
	   *  @return {Number} id ID of this cue,
	   *                      useful for removeCue(id)
	   *  @example
	   *  <div><code>
	   *  function setup() {
	   *    background(255,255,255);
	   *
	   *    audioEl = createAudio('assets/beat.mp3');
	   *    audioEl.showControls();
	   *
	   *    // schedule three calls to changeBackground
	   *    audioEl.addCue(0.5, changeBackground, color(255,0,0) );
	   *    audioEl.addCue(1.0, changeBackground, color(0,255,0) );
	   *    audioEl.addCue(2.5, changeBackground, color(0,0,255) );
	   *    audioEl.addCue(3.0, changeBackground, color(0,255,255) );
	   *    audioEl.addCue(4.2, changeBackground, color(255,255,0) );
	   *    audioEl.addCue(5.0, changeBackground, color(255,255,0) );
	   *  }
	   *
	   *  function changeBackground(val) {
	   *    background(val);
	   *  }
	   *  </code></div>
	   */
	  p5.MediaElement.prototype.addCue = function(time, callback, val) {
	    var id = this._cueIDCounter++;

	    var cue = new Cue(callback, time, id, val);
	    this._cues.push(cue);

	    if (!this.elt.ontimeupdate) {
	      this.elt.ontimeupdate = this._onTimeUpdate.bind(this);
	    }

	    return id;
	  };

	  /**
	   *  Remove a callback based on its ID. The ID is returned by the
	   *  addCue method.
	   *
	   *  @method removeCue
	   *  @param  {Number} id ID of the cue, as returned by addCue
	   */
	  p5.MediaElement.prototype.removeCue = function(id) {
	    for (var i = 0; i < this._cues.length; i++) {
	      var cue = this._cues[i];
	      if (cue.id === id) {
	        this.cues.splice(i, 1);
	      }
	    }

	    if (this._cues.length === 0) {
	      this.elt.ontimeupdate = null
	    }
	  };

	  /**
	   *  Remove all of the callbacks that had originally been scheduled
	   *  via the addCue method.
	   *
	   *  @method  clearCues
	   */
	  p5.MediaElement.prototype.clearCues = function() {
	    this._cues = [];
	    this.elt.ontimeupdate = null;
	  };

	  // private method that checks for cues to be fired if events
	  // have been scheduled using addCue(callback, time).
	  p5.MediaElement.prototype._onTimeUpdate = function() {
	    var playbackTime = this.time();

	    for (var i = 0 ; i < this._cues.length; i++) {
	      var callbackTime = this._cues[i].time;
	      var val = this._cues[i].val;


	      if (this._prevTime < callbackTime && callbackTime <= playbackTime) {

	        // pass the scheduled callbackTime as parameter to the callback
	        this._cues[i].callback(val);
	      }

	    }

	    this._prevTime = playbackTime;
	  };


	  // Cue inspired by JavaScript setTimeout, and the
	  // Tone.js Transport Timeline Event, MIT License Yotam Mann 2015 tonejs.org
	  var Cue = function(callback, time, id, val) {
	    this.callback = callback;
	    this.time = time;
	    this.id = id;
	    this.val = val;
	  };

	// =============================================================================
	//                         p5.File
	// =============================================================================


	  /**
	   * Base class for a file
	   * Using this for createFileInput
	   *
	   * @class p5.File
	   * @constructor
	   * @param {File} file File that is wrapped
	   * @param {Object} [pInst] pointer to p5 instance
	   */
	  p5.File = function(file, pInst) {
	    /**
	     * Underlying File object. All normal File methods can be called on this.
	     *
	     * @property file
	     */
	    this.file = file;

	    this._pInst = pInst;

	    // Splitting out the file type into two components
	    // This makes determining if image or text etc simpler
	    var typeList = file.type.split('/');
	    /**
	     * File type (image, text, etc.)
	     *
	     * @property type
	     */
	    this.type = typeList[0];
	    /**
	     * File subtype (usually the file extension jpg, png, xml, etc.)
	     *
	     * @property subtype
	     */
	    this.subtype = typeList[1];
	    /**
	     * File name
	     *
	     * @property name
	     */
	    this.name = file.name;
	    /**
	     * File size
	     *
	     * @property size
	     */
	    this.size = file.size;

	    /**
	     * URL string containing image data.
	     *
	     * @property data
	     */
	    this.data = undefined;
	  };

	}));


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var THREE = __webpack_require__(2)();

	var Particle = function () {
	  function Particle(l, point_index) {
	    _classCallCheck(this, Particle);

	    this.loc = new THREE.Vector3();
	    this.loc.copy(l);

	    this.index = point_index;
	    this.limit = 5;
	    this.scaler = 0.01;

	    this.vel = new THREE.Vector3(_random(1), _random(1), _random(1));

	    this.acc = new THREE.Vector3(0, 0, 0);
	  }

	  _createClass(Particle, [{
	    key: 'update',
	    value: function update(loc, num_circles, speed) {
	      this.loc.copy(loc);

	      this.theta = mapRange(this.index % num_circles, 0, 5, 0, Math.PI * 2);

	      if (Math.random() > 0.99) {
	        this.vel.copy(new THREE.Vector3(0, 0, 0));
	      }

	      var r = Math.sin(speed) * 300;

	      this.dest = new THREE.Vector3(Math.sin(speed + (this.theta * Math.sin(speed) + Math.PI)) * r, Math.cos(speed + (this.theta * Math.cos(speed) + Math.PI)) * r, Math.sin(speed + this.theta) * Math.cos(speed + this.theta) * 100 - 200);

	      this.acc.copy(this.dest.sub(this.loc));
	      this.acc.normalize();
	      this.acc.multiplyScalar(this.scaler);
	      this.vel.add(this.acc);
	      this.loc.add(this.vel);

	      if (Math.random() > 0.999) {
	        this.index = this.index + 1 % num_circles;
	      }

	      return this.loc;
	    }
	  }]);

	  return Particle;
	}();

	function mapRange(value, oldMin, oldMax, newMin, newMax) {
	  return (value - oldMin) * (newMax - newMin) / (oldMax - oldMin) + newMin;
	}

	function _random(size) {
	  return Math.random() * size - size / 2.0;
	}

	module.exports = {
	  Particle: Particle
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var prefixed = __webpack_require__(72);

	/**
	 * Expose `fade`.
	 */

	module.exports = fade;

	/**
	 * Fade `el` to `opacity` in `duration` seconds.
	 *
	 * @param {Element} el
	 * @param {Number} opacity
	 * @param {Number=} duration
	 * @param {Function=} callback
	 *
	 * @todo Add other vendor prefixes
	 * @todo Properly clear transition
	 */

	function fade (el, opacity, duration, callback) {
	  if (typeof duration === 'undefined') duration = 1000;
	  else if (typeof duration === 'function') {
	    callback = duration;
	    duration = 1000;
	  }

	  var oldTransition = prefixed.get(el.style, 'transition') || '';
	  prefixed(el.style, 'transition', 'opacity ' + (duration/1000) + 's');
	  el.style.opacity = opacity;

	  setTimeout(function () {
	    prefixed(el.style, 'transition', oldTransition);
	    if (callback) callback();
	  }, duration);
	}

	/**
	 * Fade in `el`.
	 *
	 * @param {Element} el
	 * @param {Number=} duration
	 * @param {Function=} callback
	 */

	fade.out = function (el, duration, callback) {
	  fade(el, 0, duration, callback);
	};

	/**
	 * Fade out `el`.
	 *
	 * @param {Element} el
	 * @param {Number=} duration
	 * @param {Function=} callback
	 */

	fade['in'] = function (el, duration, callback) {
	  fade(el, 1, duration, callback);
	};


/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Supported prefixes.
	 */

	var prefixes = [
	  '-webkit-', '-moz-', '-o-', '-ms-', ''
	];

	/**
	 * Expose `prefixed`.
	 */

	module.exports = prefixed;

	/**
	 * Set a style with all the vendor prefixes.
	 *
	 * @param {Object} style
	 * @param {String} attribute
	 * @param {String} value
	 */

	function prefixed (style, attribute, value) {
	  for (var i = 0; i < prefixes.length; i++) {
	    style[prefixes[i] + attribute] = value;
	  }
	};

	/**
	 * Get a (possibly prefixed) value.
	 *
	 * @param {Object} style
	 * @param {String} attribute
	 * @return {String}
	 */

	prefixed.get = function (style, attribute) {
	  for (var i = 0; i < prefixes.length; i++) {
	    var value = style[prefixes[i] + attribute];
	    if (value && value != '') return value;
	  }
	  return '';
	};



/***/ }
/******/ ]);